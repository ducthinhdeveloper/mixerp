-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/00.db core/0.verbosity.sql --<--<--
SET CLIENT_MIN_MESSAGES TO WARNING;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/00.db core/1.mixerp.sql --<--<--
/********************************************************************************
Copyright (C) Binod Nepal, Mix Open Foundation (http://mixof.org).

This file is part of MixERP.

MixERP is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MixERP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MixERP.  If not, see <http://www.gnu.org/licenses/>.
***********************************************************************************/
SET search_path = public;

DO 
$$
BEGIN   
    IF NOT EXISTS
    (
        SELECT * FROM pg_database 
        WHERE datcollate::text IN('C', 'POSIX')
        AND datctype::text IN('C', 'POSIX')
        AND datname=current_database()
    ) THEN
        RAISE EXCEPTION '%', 'The current server collation is not supported. Please change your database collation to "C" or "POSIX".';
    END IF;
    
    IF NOT EXISTS
    (
        SELECT 0 FROM pg_database 
        WHERE pg_encoding_to_char(encoding)::text = 'UTF8' 
        AND datname=current_database()
    ) THEN
        RAISE EXCEPTION '%', 'The current database encoding is not supported. Please change your encoding to "UTF8".';
    END IF;
    
   EXECUTE 'ALTER DATABASE ' || current_database() || ' SET timezone TO ''UTC''';    
END;
$$
LANGUAGE plpgsql;


CREATE EXTENSION IF NOT EXISTS tablefunc;
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE EXTENSION IF NOT EXISTS hstore;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/00.db core/1.scrud.sql --<--<--
DROP SCHEMA IF EXISTS scrud CASCADE;
CREATE SCHEMA scrud;

COMMENT ON SCHEMA scrud IS 'Contains objects related to MixERP''s ScrudFactory project.';


CREATE VIEW scrud.constraint_column_usage AS
    SELECT CAST(current_database() AS text) AS table_catalog,
           CAST(tblschema AS text) AS table_schema,
           CAST(tblname AS text) AS table_name,
           CAST(colname AS text) AS column_name,
           CAST(current_database() AS text) AS constraint_catalog,
           CAST(cstrschema AS text) AS constraint_schema,
           CAST(cstrname AS text) AS constraint_name

    FROM (
        /* check constraints */
        SELECT DISTINCT nr.nspname, r.relname, r.relowner, a.attname, nc.nspname, c.conname
          FROM pg_namespace nr, pg_class r, pg_attribute a, pg_depend d, pg_namespace nc, pg_constraint c
          WHERE nr.oid = r.relnamespace
            AND r.oid = a.attrelid
            AND d.refclassid = 'pg_catalog.pg_class'::regclass
            AND d.refobjid = r.oid
            AND d.refobjsubid = a.attnum
            AND d.classid = 'pg_catalog.pg_constraint'::regclass
            AND d.objid = c.oid
            AND c.connamespace = nc.oid
            AND c.contype = 'c'
            AND r.relkind = 'r'
            AND NOT a.attisdropped

        UNION ALL

        /* unique/primary key/foreign key constraints */
        SELECT nr.nspname, r.relname, r.relowner, a.attname, nc.nspname, c.conname
          FROM pg_namespace nr, pg_class r, pg_attribute a, pg_namespace nc,
               pg_constraint c
          WHERE nr.oid = r.relnamespace
            AND r.oid = a.attrelid
            AND nc.oid = c.connamespace
            AND (CASE WHEN c.contype = 'f' THEN r.oid = c.confrelid AND a.attnum = ANY (c.confkey)
                      ELSE r.oid = c.conrelid AND a.attnum = ANY (c.conkey) END)
            AND NOT a.attisdropped
            AND c.contype IN ('p', 'u', 'f')
            AND r.relkind = 'r'

      ) AS x (tblschema, tblname, tblowner, colname, cstrschema, cstrname);

COMMENT ON VIEW scrud.constraint_column_usage IS 'Lists all columns having constraints.';

    

CREATE VIEW scrud.relationship_view
AS
SELECT 
    o.conname                                                       AS constraint_name,
    (SELECT nspname FROM pg_namespace WHERE oid=m.relnamespace)     AS table_schema,
    m.relname                                                       AS table_name,
    (SELECT a.attname FROM pg_attribute a 
    WHERE a.attrelid = m.oid
    AND a.attnum = o.conkey[1]
    AND a.attisdropped = FALSE)
                                                                    AS column_name,
    (SELECT nspname FROM pg_namespace
     WHERE oid=f.relnamespace) AS references_schema,
       f.relname
                                                                    AS references_table,
    (SELECT a.attname FROM pg_attribute a
     WHERE a.attrelid = f.oid
     AND a.attnum = o.confkey[1]
     AND a.attisdropped = FALSE)
                                                                    AS references_field
FROM pg_constraint o
LEFT JOIN pg_class c ON c.oid = o.conrelid
LEFT JOIN pg_class f ON f.oid = o.confrelid
LEFT JOIN pg_class m ON m.oid = o.conrelid
WHERE o.contype = 'f'
AND o.conrelid IN
(SELECT oid
 FROM pg_class c
 WHERE c.relkind = 'r');
 
COMMENT ON VIEW scrud.relationship_view IS 'Lists all foreign key columns and their relation with the parent tables.';

CREATE FUNCTION scrud.parse_default(text)
RETURNS text
AS
$$
DECLARE _sql text;
DECLARE _val text;
BEGIN
    IF($1 LIKE '%::%' AND $1 NOT LIKE 'nextval%') THEN
        _sql := 'SELECT ' || $1;
        EXECUTE _sql INTO _val;
        RETURN _val;
    END IF;

    RETURN $1;
END
$$
LANGUAGE plpgsql;

COMMENT ON FUNCTION scrud.parse_default(text) IS 'Parses default constraint column values.';


CREATE VIEW scrud.mixerp_table_view
AS
SELECT 
    pg_tables.schemaname                                    AS table_schema, 
    pg_tables.tablename                                     AS table_name, 
    pg_attribute.attname                                    AS column_name,
    constraint_name,
    references_schema, 
    references_table, 
    references_field, 
    pg_attribute.attnum                                     AS ordinal_position,
    CASE pg_attribute.attnotnull 
    WHEN false THEN 'YES' 
    ELSE 'NO' END                                           AS is_nullable, 
    (SELECT 
        scrud.parse_default(pg_attrdef.adsrc) 
        FROM pg_attrdef 
        WHERE pg_attrdef.adrelid = pg_class.oid 
        AND pg_attrdef.adnum = pg_attribute.attnum)         AS column_default,    
    format_type(pg_attribute.atttypid, NULL)                AS data_type, 
    format_type(pg_attribute.atttypid, NULL)                AS domain_name, 
    CASE pg_attribute.atttypmod
    WHEN -1 THEN NULL 
    ELSE pg_attribute.atttypmod - 4
    END                                         AS character_maximum_length,    
    pg_constraint.conname AS "key", 
    pc2.conname AS ckey
FROM pg_tables
INNER JOIN pg_class 
ON pg_class.relname = pg_tables.tablename 
INNER JOIN pg_attribute ON pg_class.oid = pg_attribute.attrelid 
    AND pg_attribute.attnum > 0 
LEFT JOIN pg_constraint ON pg_constraint.contype = 'p'::"char" 
    AND pg_constraint.conrelid = pg_class.oid AND
    (pg_attribute.attnum = ANY (pg_constraint.conkey)) 
LEFT JOIN pg_constraint AS pc2 ON pc2.contype = 'f'::"char" 
    AND pc2.conrelid = pg_class.oid 
    AND (pg_attribute.attnum = ANY (pc2.conkey))    
LEFT JOIN scrud.relationship_view 
ON pg_tables.schemaname = scrud.relationship_view.table_schema 
 AND pg_tables.tablename = scrud.relationship_view.table_name 
 AND pg_attribute.attname = scrud.relationship_view.column_name 
WHERE pg_attribute.attname NOT IN
    (
        'audit_user_id', 'audit_ts'
    )
AND NOT pg_attribute.attisdropped
ORDER BY pg_attribute.attnum;


COMMENT ON VIEW scrud.mixerp_table_view IS 'Lists all schema, table, and columns with associated types, domains, references, and constraints.';

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/00.db core/2.install-unit-test.sql --<--<--
/********************************************************************************
The PostgreSQL License

Copyright (c) 2014, Binod Nepal, Mix Open Foundation (http://mixof.org).

Permission to use, copy, modify, and distribute this software and its documentation 
for any purpose, without fee, and without a written agreement is hereby granted, 
provided that the above copyright notice and this paragraph and 
the following two paragraphs appear in all copies.

IN NO EVENT SHALL MIX OPEN FOUNDATION BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, 
SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, 
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF 
MIX OPEN FOUNDATION HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

MIX OPEN FOUNDATION SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, 
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, 
AND MIX OPEN FOUNDATION HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, 
UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
***********************************************************************************/

DROP SCHEMA IF EXISTS assert CASCADE;
DROP SCHEMA IF EXISTS unit_tests CASCADE;
DROP DOMAIN IF EXISTS public.test_result CASCADE;

CREATE SCHEMA assert AUTHORIZATION postgres;
CREATE SCHEMA unit_tests AUTHORIZATION postgres;
CREATE DOMAIN public.test_result AS text;

CREATE TABLE unit_tests.tests
(
    test_id                                 SERIAL NOT NULL PRIMARY KEY,
    started_on                              TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
    completed_on                            TIMESTAMP WITHOUT TIME ZONE NULL,
    total_tests                             integer NULL DEFAULT(0),
    failed_tests                            integer NULL DEFAULT(0)
);

CREATE INDEX unit_tests_tests_started_on_inx
ON unit_tests.tests(started_on);

CREATE INDEX unit_tests_tests_completed_on_inx
ON unit_tests.tests(completed_on);

CREATE INDEX unit_tests_tests_failed_tests_inx
ON unit_tests.tests(failed_tests);

CREATE TABLE unit_tests.test_details
(
    id                                      BIGSERIAL NOT NULL PRIMARY KEY,
    test_id                                 integer NOT NULL REFERENCES unit_tests.tests(test_id),
    function_name                           text NOT NULL,
    message                                 text NOT NULL,
    ts                                      TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
    status                                  boolean NOT NULL
);

CREATE INDEX unit_tests_test_details_test_id_inx
ON unit_tests.test_details(test_id);

CREATE INDEX unit_tests_test_details_status_inx
ON unit_tests.test_details(status);

CREATE FUNCTION assert.fail(message text)
RETURNS text
AS
$$
BEGIN
    IF $1 IS NULL OR trim($1) = '' THEN
        message := 'NO REASON SPECIFIED';
    END IF;
    
    RAISE WARNING 'ASSERT FAILED : %', message;
    RETURN message;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

CREATE FUNCTION assert.pass(message text)
RETURNS text
AS
$$
BEGIN
    RAISE NOTICE 'ASSERT PASSED : %', message;
    RETURN '';
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

CREATE FUNCTION assert.ok(message text)
RETURNS text
AS
$$
BEGIN
    RAISE NOTICE 'OK : %', message;
    RETURN '';
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

CREATE FUNCTION assert.is_equal(IN have anyelement, IN want anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 = $2) THEN
        message := 'Assert is equal.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;

    message := E'ASSERT IS_EQUAL FAILED.\n\nHave -> ' || $1::text || E'\nWant -> ' || $2::text || E'\n';    
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


CREATE FUNCTION assert.are_equal(VARIADIC anyarray, OUT message text, OUT result boolean)
AS
$$
    DECLARE count integer=0;
BEGIN
    SELECT COUNT(DISTINCT $1[s.i]) INTO count
    FROM generate_series(array_lower($1,1), array_upper($1,1)) AS s(i)
    ORDER BY 1;

    IF count <> 1 THEN
        MESSAGE := 'ASSERT ARE_EQUAL FAILED.';  
        PERFORM assert.fail(MESSAGE);
        RESULT := FALSE;
        RETURN;
    END IF;

    message := 'Asserts are equal.';
    PERFORM assert.ok(message);
    result := true;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

CREATE FUNCTION assert.is_not_equal(IN already_have anyelement, IN dont_want anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 != $2) THEN
        message := 'Assert is not equal.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_NOT_EQUAL FAILED.\n\nAlready Have -> ' || $1::text || E'\nDon''t Want   -> ' || $2::text || E'\n';   
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

CREATE FUNCTION assert.are_not_equal(VARIADIC anyarray, OUT message text, OUT result boolean)
AS
$$
    DECLARE count integer=0;
BEGIN
    SELECT COUNT(DISTINCT $1[s.i]) INTO count
    FROM generate_series(array_lower($1,1), array_upper($1,1)) AS s(i)
    ORDER BY 1;

    IF count <> array_upper($1,1) THEN
        MESSAGE := 'ASSERT ARE_NOT_EQUAL FAILED.';  
        PERFORM assert.fail(MESSAGE);
        RESULT := FALSE;
        RETURN;
    END IF;

    message := 'Asserts are not equal.';
    PERFORM assert.ok(message);
    result := true;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


CREATE FUNCTION assert.is_null(IN anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 IS NULL) THEN
        message := 'Assert is NULL.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_NULL FAILED. NULL value was expected.\n\n\n';    
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


CREATE FUNCTION assert.is_not_null(IN anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 IS NOT NULL) THEN
        message := 'Assert is not NULL.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_NOT_NULL FAILED. The value is NULL.\n\n\n';  
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


CREATE FUNCTION assert.is_true(IN boolean, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 == true) THEN
        message := 'Assert is true.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_TRUE FAILED. A true condition was expected.\n\n\n';  
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


CREATE FUNCTION assert.is_false(IN boolean, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 == true) THEN
        message := 'Assert is false.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_FALSE FAILED. A false condition was expected.\n\n\n';    
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


CREATE FUNCTION assert.is_greater_than(IN x anyelement, IN y anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 > $2) THEN
        message := 'Assert greater than condition is satisfied.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_GREATER_THAN FAILED.\n\n X : -> ' || $1::text || E'\n is not greater than Y:   -> ' || $2::text || E'\n';    
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


CREATE FUNCTION assert.is_less_than(IN x anyelement, IN y anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 < $2) THEN
        message := 'Assert less than condition is satisfied.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_LESS_THAN FAILED.\n\n X : -> ' || $1::text || E'\n is not  than Y:   -> ' || $2::text || E'\n';  
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


CREATE FUNCTION assert.function_exists(function_name text, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT  1
        FROM    pg_catalog.pg_namespace n
        JOIN    pg_catalog.pg_proc p
        ON      pronamespace = n.oid
        WHERE replace(nspname || '.' || proname || '(' || oidvectortypes(proargtypes) || ')', ' ' , '')::text=$1
    ) THEN
        message := 'The function % does not exist.', $1;
        PERFORM assert.fail(message);

        result := false;
        RETURN;
    END IF;

    message := 'OK. The function ' || $1 || ' exists.';
    PERFORM assert.ok(message);
    result := true;
    RETURN;
END
$$
LANGUAGE plpgsql;



DROP FUNCTION IF EXISTS assert.if_functions_compile
(
    VARIADIC _schema_name text[],
    OUT message text, 
    OUT result boolean    
);

CREATE OR REPLACE FUNCTION assert.if_functions_compile
(
    VARIADIC _schema_name text[],
    OUT message text, 
    OUT result boolean
)
AS
$$
    DECLARE all_parameters              text;
    DECLARE current_function            RECORD;
    DECLARE current_function_name       text;
    DECLARE current_type                text;
    DECLARE current_type_schema         text;
    DECLARE current_parameter           text;
    DECLARE functions_count             smallint := 0;
    DECLARE current_parameters_count    int;
    DECLARE i                           int;
    DECLARE command_text                text;
    DECLARE failed_functions            text;
BEGIN
    FOR current_function IN 
        SELECT proname, proargtypes, nspname 
        FROM pg_proc 
        INNER JOIN pg_namespace 
        ON pg_proc.pronamespace = pg_namespace.oid 
        WHERE pronamespace IN 
        (
            SELECT oid FROM pg_namespace 
            WHERE nspname = ANY($1) 
            AND nspname NOT IN
            (
                'assert', 'unit_tests', 'information_schema'
            ) 
            AND proname NOT IN('if_functions_compile')
        ) 
    LOOP
        current_parameters_count := array_upper(current_function.proargtypes, 1) + 1;

        i := 0;
        all_parameters := '';

        LOOP
        IF i < current_parameters_count THEN
            IF i > 0 THEN
                all_parameters := all_parameters || ', ';
            END IF;

            SELECT 
                nspname, typname 
            INTO 
                current_type_schema, current_type 
            FROM pg_type 
            INNER JOIN pg_namespace 
            ON pg_type.typnamespace = pg_namespace.oid
            WHERE pg_type.oid = current_function.proargtypes[i];

            IF(current_type IN('int4', 'int8', 'numeric', 'integer_strict', 'money_strict','decimal_strict', 'integer_strict2', 'money_strict2','decimal_strict2', 'money','decimal', 'numeric', 'bigint')) THEN
                current_parameter := '1::' || current_type_schema || '.' || current_type;
            ELSIF(substring(current_type, 1, 1) = '_') THEN
                current_parameter := 'NULL::' || current_type_schema || '.' || substring(current_type, 2, length(current_type)) || '[]';
            ELSIF(current_type in ('date')) THEN            
                current_parameter := '''1-1-2000''::' || current_type;
            ELSIF(current_type = 'bool') THEN
                current_parameter := 'false';            
            ELSE
                current_parameter := '''''::' || quote_ident(current_type_schema) || '.' || quote_ident(current_type);
            END IF;
            
            all_parameters = all_parameters || current_parameter;

            i := i + 1;
        ELSE
            EXIT;
        END IF;
    END LOOP;

    BEGIN
        current_function_name := quote_ident(current_function.nspname)  || '.' || quote_ident(current_function.proname);
        command_text := 'SELECT * FROM ' || current_function_name || '(' || all_parameters || ');';

        EXECUTE command_text;
        functions_count := functions_count + 1;

        EXCEPTION WHEN OTHERS THEN
            IF(failed_functions IS NULL) THEN 
                failed_functions := '';
            END IF;

            IF(SQLSTATE IN('42702', '42704')) THEN
                failed_functions := failed_functions || E'\n' || command_text || E'\n' || SQLERRM || E'\n';                
            END IF;
    END;


    END LOOP;

    IF(failed_functions != '') THEN
        message := E'The test if_functions_compile failed. The following functions failed to compile : \n\n' || failed_functions;
        result := false;
        PERFORM assert.fail(message);
        RETURN;
    END IF;
END;
$$
LANGUAGE plpgsql 
VOLATILE;

DROP FUNCTION IF EXISTS assert.if_views_compile
(
    VARIADIC _schema_name text[],
    OUT message text, 
    OUT result boolean    
);

CREATE FUNCTION assert.if_views_compile
(
    VARIADIC _schema_name text[],
    OUT message text, 
    OUT result boolean    
)
AS
$$

    DECLARE message                     test_result;
    DECLARE current_view                RECORD;
    DECLARE current_view_name           text;
    DECLARE command_text                text;
    DECLARE failed_views                text;
BEGIN
    FOR current_view IN 
        SELECT table_name, table_schema 
        FROM information_schema.views
        WHERE table_schema = ANY($1) 
    LOOP

    BEGIN
        current_view_name := quote_ident(current_view.table_schema)  || '.' || quote_ident(current_view.table_name);
        command_text := 'SELECT * FROM ' || current_view_name || ' LIMIT 1;';

        RAISE NOTICE '%', command_text;
        
        EXECUTE command_text;

        EXCEPTION WHEN OTHERS THEN
            IF(failed_views IS NULL) THEN 
                failed_views := '';
            END IF;

            failed_views := failed_views || E'\n' || command_text || E'\n' || SQLERRM || E'\n';                
    END;


    END LOOP;

    IF(failed_views != '') THEN
        message := E'The test if_views_compile failed. The following views failed to compile : \n\n' || failed_views;
        result := false;
        PERFORM assert.fail(message);
        RETURN;
    END IF;

    RETURN;
END;
$$
LANGUAGE plpgsql 
VOLATILE;

CREATE FUNCTION unit_tests.begin(v int DEFAULT 9)
RETURNS TABLE(message text, result character(1))
AS
$$
    DECLARE this record;
    DECLARE _function_name text;
    DECLARE _sql text;
    DECLARE _message text;
    DECLARE _result character(1);
    DECLARE _test_id integer;
    DECLARE _status boolean;
    DECLARE _total_tests integer = 0;
    DECLARE _failed_tests integer = 0;
    DECLARE _list_of_failed_tests text;
    DECLARE _started_from TIMESTAMP WITHOUT TIME ZONE;
    DECLARE _completed_on TIMESTAMP WITHOUT TIME ZONE;
    DECLARE _delta integer;
    DECLARE _ret_val text = '';
    DECLARE _verbosity text[] = ARRAY['debug5', 'debug4', 'debug3', 'debug2', 'debug1', 'log', 'notice', 'warning', 'error', 'fatal', 'panic'];
BEGIN
    _started_from := clock_timestamp() AT TIME ZONE 'UTC';

    RAISE INFO 'Test started from : %', _started_from; 

    IF(v > 10) THEN
        v := 9;
    END IF;
    
    EXECUTE 'SET CLIENT_MIN_MESSAGES TO ' || _verbosity[v];

    RAISE WARNING 'CLIENT_MIN_MESSAGES set to : %' , _verbosity[v];
    

    SELECT nextval('unit_tests.tests_test_id_seq') INTO _test_id;

    INSERT INTO unit_tests.tests(test_id)
    SELECT _test_id;

    FOR this IN
        SELECT proname as function_name
        FROM    pg_catalog.pg_namespace n
        JOIN    pg_catalog.pg_proc p
        ON      pronamespace = n.oid
        WHERE   nspname = 'unit_tests'
        AND prorettype='test_result'::regtype::oid
    LOOP
        BEGIN
            _status := false;
            _total_tests := _total_tests + 1;
            
            _function_name = 'unit_tests.' || this.function_name || '()';
            _sql := 'SELECT ' || _function_name || ';';
            
            RAISE NOTICE 'RUNNING TEST : %.', _function_name;

            EXECUTE _sql INTO _message;

            IF _message = '' THEN
                _status := true;
            END IF;

            
            INSERT INTO unit_tests.test_details(test_id, function_name, message, status)
            SELECT _test_id, _function_name, _message, _status;

            IF NOT _status THEN
                _failed_tests := _failed_tests + 1;         
                RAISE WARNING 'TEST % FAILED.', _function_name;
                RAISE WARNING 'REASON: %', _message;
            ELSE
                RAISE NOTICE 'TEST % COMPLETED WITHOUT ERRORS.', _function_name;
            END IF;

        EXCEPTION WHEN OTHERS THEN
            _message := 'ERR' || SQLSTATE || ': ' || SQLERRM;
            INSERT INTO unit_tests.test_details(test_id, function_name, message, status)
            SELECT _test_id, _function_name, _message, false;

            _failed_tests := _failed_tests + 1;         
            RAISE WARNING 'TEST % FAILED.', _function_name;
            RAISE WARNING 'REASON: %', _message;
        END;
    END LOOP;

    _completed_on := clock_timestamp() AT TIME ZONE 'UTC';
    _delta := extract(millisecond from _completed_on - _started_from)::integer;
    
    UPDATE unit_tests.tests
    SET total_tests = _total_tests, failed_tests = _failed_tests, completed_on = _completed_on
    WHERE test_id = _test_id;

    
    WITH failed_tests AS
    (
        SELECT row_number() over (order by id) AS id, 
        unit_tests.test_details.function_name,
        unit_tests.test_details.message
        FROM unit_tests.test_details 
        WHERE test_id = _test_id
        AND status= false
    )

    SELECT array_to_string(array_agg(f.id::text || '. ' || f.function_name || ' --> ' || f.message), E'\n') INTO _list_of_failed_tests 
    FROM failed_tests f;

    _ret_val := _ret_val ||  'Test completed on : ' || _completed_on::text || E' UTC. \nTotal test runtime: ' || _delta::text || E' ms.\n';
    _ret_val := _ret_val || E'\nTotal tests run : ' || COALESCE(_total_tests, '0')::text;
    _ret_val := _ret_val || E'.\nPassed tests    : ' || (COALESCE(_total_tests, '0') - COALESCE(_failed_tests, '0'))::text;
    _ret_val := _ret_val || E'.\nFailed tests    : ' || COALESCE(_failed_tests, '0')::text;
    _ret_val := _ret_val || E'.\n\nList of failed tests:\n' || '----------------------';
    _ret_val := _ret_val || E'\n' || COALESCE(_list_of_failed_tests, '<NULL>')::text;
    _ret_val := _ret_val || E'\n' || E'End of plpgunit test.\n\n';


    IF _failed_tests > 0 THEN
        _result := 'N';
        RAISE INFO '%', _ret_val;
    ELSE
        _result := 'Y';
        RAISE INFO '%', _ret_val;
    END IF;

    SET CLIENT_MIN_MESSAGES TO notice;

    RETURN QUERY SELECT _ret_val, _result;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/00.db core/2.mixerp-db-schema.sql --<--<--
DROP SCHEMA IF EXISTS audit CASCADE;
DROP SCHEMA IF EXISTS core CASCADE;
DROP SCHEMA IF EXISTS localization CASCADE;
DROP SCHEMA IF EXISTS mrp CASCADE;
DROP SCHEMA IF EXISTS office CASCADE;
DROP SCHEMA IF EXISTS policy CASCADE;
DROP SCHEMA IF EXISTS transactions CASCADE;
DROP SCHEMA IF EXISTS crm CASCADE;

CREATE SCHEMA audit;
COMMENT ON SCHEMA audit IS 'Contains audit-related objects.';

CREATE SCHEMA core;
COMMENT ON SCHEMA core IS 'Contains objects related to the core module. The core module is the default MixERP schema.';

CREATE SCHEMA crm;
COMMENT ON SCHEMA crm IS 'Contains objects related to customer relationship management.';

CREATE SCHEMA localization;
COMMENT ON SCHEMA localization IS 'Contains objects related to localizing MixERP.';

CREATE SCHEMA mrp;
COMMENT ON SCHEMA mrp IS 'Contains objects related to material resource planning.';

CREATE SCHEMA office;
COMMENT ON SCHEMA office IS 'Contains objects related to office.';

CREATE SCHEMA policy;
COMMENT ON SCHEMA policy IS 'Contains objects related to MixERP''s policy engine and workflow.';

CREATE SCHEMA transactions;
COMMENT ON SCHEMA transactions IS 'Contains objects related to transaction posting.';

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/00.db core/3.roles-and-priviledge.sql --<--<--
DO
$$
BEGIN
    IF NOT EXISTS (SELECT * FROM pg_catalog.pg_roles WHERE rolname = 'mix_erp') THEN
        CREATE ROLE mix_erp WITH LOGIN PASSWORD 'change-on-deployment';
    END IF;

    COMMENT ON ROLE mix_erp IS 'The default user for MixERP databases.';

    EXECUTE 'ALTER DATABASE ' || current_database() || ' OWNER TO mix_erp;';

    REVOKE ALL ON SCHEMA assert FROM public;
    REVOKE ALL ON SCHEMA audit FROM public;
    REVOKE ALL ON SCHEMA core FROM public;
    REVOKE ALL ON SCHEMA crm FROM public;
    REVOKE ALL ON SCHEMA localization FROM public;
    REVOKE ALL ON SCHEMA office FROM public;
    REVOKE ALL ON SCHEMA mrp FROM public;
    REVOKE ALL ON SCHEMA policy FROM public;
    REVOKE ALL ON SCHEMA scrud FROM public;
    REVOKE ALL ON SCHEMA transactions FROM public;
    REVOKE ALL ON SCHEMA unit_tests FROM public;

        
    GRANT USAGE ON SCHEMA assert TO mix_erp;
    GRANT USAGE ON SCHEMA audit TO mix_erp;
    GRANT USAGE ON SCHEMA core TO mix_erp;
    GRANT USAGE ON SCHEMA crm TO mix_erp;
    GRANT USAGE ON SCHEMA information_schema TO mix_erp;
    GRANT USAGE ON SCHEMA localization TO mix_erp;
    GRANT USAGE ON SCHEMA mrp TO mix_erp;
    GRANT USAGE ON SCHEMA office TO mix_erp;
    GRANT USAGE ON SCHEMA policy TO mix_erp;
    GRANT USAGE ON SCHEMA public TO mix_erp;
    GRANT USAGE ON SCHEMA scrud TO mix_erp;
    GRANT USAGE ON SCHEMA transactions TO mix_erp;
    GRANT USAGE ON SCHEMA unit_tests TO mix_erp;

    ALTER DEFAULT PRIVILEGES IN SCHEMA assert GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA audit GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA core GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA crm GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA information_schema GRANT SELECT ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA localization GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA mrp GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA office GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA policy GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA transactions GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA unit_tests GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;


    GRANT SELECT ON ALL TABLES IN SCHEMA scrud TO mix_erp;
    GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA scrud TO mix_erp;

    ALTER DEFAULT PRIVILEGES IN SCHEMA assert GRANT ALL ON SEQUENCES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA audit GRANT ALL ON SEQUENCES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA core GRANT ALL ON SEQUENCES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA crm GRANT ALL ON SEQUENCES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA localization GRANT ALL ON SEQUENCES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA mrp GRANT ALL ON SEQUENCES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA office GRANT ALL ON SEQUENCES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA policy GRANT ALL ON SEQUENCES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA transactions GRANT ALL ON SEQUENCES TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA unit_tests GRANT ALL ON SEQUENCES TO mix_erp;


    ALTER DEFAULT PRIVILEGES IN SCHEMA assert GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA audit GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA core GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA crm GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA information_schema GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA localization GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA mrp GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA office GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA policy GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA transactions GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    ALTER DEFAULT PRIVILEGES IN SCHEMA unit_tests GRANT EXECUTE ON FUNCTIONS TO mix_erp;
    
    
    GRANT ALL PRIVILEGES ON SCHEMA unit_tests TO mix_erp;
    GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA unit_tests TO mix_erp;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA unit_tests TO mix_erp;
    GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA unit_tests TO mix_erp;
END
$$
LANGUAGE plpgsql;




DO
$$
BEGIN
    IF NOT EXISTS (SELECT * FROM pg_catalog.pg_roles WHERE rolname= 'report_user') THEN
        CREATE ROLE report_user WITH LOGIN PASSWORD 'change-on-deployment';
    END IF;

    COMMENT ON ROLE report_user IS 'This user account should be used by the Reporting Engine to run ad-hoc queries.
    It is strictly advised for this user to only have a read-only access to the database.';

    GRANT USAGE ON SCHEMA public TO report_user;
    GRANT USAGE ON SCHEMA information_schema TO report_user;
    GRANT USAGE ON SCHEMA audit TO report_user;
    GRANT USAGE ON SCHEMA core TO report_user;
    GRANT USAGE ON SCHEMA office TO report_user;
    GRANT USAGE ON SCHEMA policy TO report_user;
    GRANT USAGE ON SCHEMA transactions TO report_user;
    GRANT USAGE ON SCHEMA crm TO report_user;
    GRANT USAGE ON SCHEMA mrp TO report_user;

    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA information_schema GRANT SELECT ON TABLES TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA audit GRANT SELECT ON TABLES TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA core GRANT SELECT ON TABLES TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA office GRANT SELECT ON TABLES TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA policy GRANT SELECT ON TABLES TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA transactions GRANT SELECT ON TABLES TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA crm GRANT SELECT ON TABLES TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA mrp GRANT SELECT ON TABLES TO report_user;


    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT EXECUTE ON FUNCTIONS TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA information_schema GRANT EXECUTE ON FUNCTIONS TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA audit GRANT EXECUTE ON FUNCTIONS TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA core GRANT EXECUTE ON FUNCTIONS TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA office GRANT EXECUTE ON FUNCTIONS TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA policy GRANT EXECUTE ON FUNCTIONS TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA transactions GRANT EXECUTE ON FUNCTIONS TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA crm GRANT EXECUTE ON FUNCTIONS TO report_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA mrp GRANT EXECUTE ON FUNCTIONS TO report_user;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/00.db core/4.casts.sql --<--<--
DROP FUNCTION IF EXISTS pg_catalog.text(unknown) CASCADE;
CREATE FUNCTION pg_catalog.text(unknown) 
RETURNS text 
AS
$$
BEGIN
    RETURN $1::text;
END
$$
LANGUAGE plpgsql; 

CREATE CAST (unknown AS text) WITH FUNCTION pg_catalog.text(unknown) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(integer) CASCADE;
CREATE FUNCTION pg_catalog.text(integer) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int4out($1));';
CREATE CAST (integer AS text) WITH FUNCTION pg_catalog.text(integer) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(smallint) CASCADE;
CREATE FUNCTION pg_catalog.text(smallint) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int2out($1));';
CREATE CAST (smallint AS text) WITH FUNCTION pg_catalog.text(smallint) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(oid) CASCADE;
CREATE FUNCTION pg_catalog.text(oid) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(oidout($1));';
CREATE CAST (oid AS text) WITH FUNCTION pg_catalog.text(oid) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(date) CASCADE;
CREATE FUNCTION pg_catalog.text(date) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(date_out($1));';
CREATE CAST (date AS text) WITH FUNCTION pg_catalog.text(date) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(double precision) CASCADE;
CREATE FUNCTION pg_catalog.text(double precision) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(float8out($1));';
CREATE CAST (double precision AS text) WITH FUNCTION pg_catalog.text(double precision) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(real) CASCADE;
CREATE FUNCTION pg_catalog.text(real) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(float4out($1));';
CREATE CAST (real AS text) WITH FUNCTION pg_catalog.text(real) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(time with time zone) CASCADE;
CREATE FUNCTION pg_catalog.text(time with time zone) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(timetz_out($1));';
CREATE CAST (time with time zone AS text) WITH FUNCTION pg_catalog.text(time with time zone) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(time without time zone) CASCADE;
CREATE FUNCTION pg_catalog.text(time without time zone) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(time_out($1));';
CREATE CAST (time without time zone AS text) WITH FUNCTION pg_catalog.text(time without time zone) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(timestamp with time zone) CASCADE;
CREATE FUNCTION pg_catalog.text(timestamp with time zone) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(timestamptz_out($1));';
CREATE CAST (timestamp with time zone AS text) WITH FUNCTION pg_catalog.text(timestamp with time zone) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(timestamp without time zone) CASCADE;
CREATE FUNCTION pg_catalog.text(timestamp without time zone) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(timestamp_out($1));';
CREATE CAST (timestamp without time zone AS text) WITH FUNCTION pg_catalog.text(timestamp without time zone) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(interval) CASCADE;
CREATE FUNCTION pg_catalog.text(interval) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(interval_out($1));';
CREATE CAST (interval AS text) WITH FUNCTION pg_catalog.text(interval) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(bigint) CASCADE;
CREATE FUNCTION pg_catalog.text(bigint) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int8out($1));';
CREATE CAST (bigint AS text) WITH FUNCTION pg_catalog.text(bigint) AS IMPLICIT;

DROP FUNCTION IF EXISTS pg_catalog.text(numeric) CASCADE;
CREATE FUNCTION pg_catalog.text(numeric) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(numeric_out($1));';
CREATE CAST (numeric AS text) WITH FUNCTION pg_catalog.text(numeric) AS IMPLICIT;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/00.db core/5.localization.sql --<--<--
CREATE TABLE localization.resources
(
    resource_id         SERIAL PRIMARY KEY,
    path                text,
    key                 text,
    value               text
);

CREATE UNIQUE INDEX resources_path_key_uix
ON localization.resources(UPPER(path), UPPER(key));

CREATE INDEX resources_path_key_inx
ON localization.resources(path, key);

CREATE INDEX resources_path_inx
ON localization.resources(path);

CREATE INDEX resources_key_inx
ON localization.resources(key);

CREATE TABLE localization.cultures
(
    culture_code        text PRIMARY KEY,
    culture_name        text
);

INSERT INTO localization.cultures
SELECT 'de-DE',     'German (Germany)'              UNION ALL
SELECT 'en-GB',     'English (United Kingdom)'      UNION ALL
SELECT 'es-ES',     'Spanish (Spain)'               UNION ALL
SELECT 'fil-PH',    'Filipino (Philippines)'        UNION ALL
SELECT 'fr-FR',     'French (France)'               UNION ALL
SELECT 'id-ID',     'Indonesian (Indonesia)'        UNION ALL
SELECT 'ja-JP',     'Japanese (Japan)'              UNION ALL
SELECT 'ms-MY',     'Malay (Malaysia)'              UNION ALL
SELECT 'nl-NL',     'Dutch (Netherlands)'           UNION ALL
SELECT 'pt-PT',     'Portuguese (Portugal)'         UNION ALL
SELECT 'ru-RU',     'Russian (Russia)'              UNION ALL
SELECT 'sv-SE',     'Swedish (Sweden)'              UNION ALL
SELECT 'zh-CN',     'Simplified Chinese (China)';


CREATE TABLE localization.localized_resources
(
    id                  SERIAL PRIMARY KEY,
    culture_code        text REFERENCES localization.cultures,
    key                 text,
    value               text
);

CREATE UNIQUE INDEX localized_resources_culture_key_uix
ON localization.localized_resources(UPPER(culture_code), UPPER(key));

CREATE FUNCTION localization.add_resource
(
    path                text,
    key                 text,
    value               text
)
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM localization.resources WHERE localization.resources.path=$1 AND localization.resources.key=$2) THEN
        INSERT INTO localization.resources(path, key, value)
        SELECT $1, $2, $3;
    END IF;
END
$$
LANGUAGE plpgsql;

CREATE FUNCTION localization.get_localization_table
(
    culture_code        text
)
RETURNS TABLE
(
    row_number          bigint,
    key                 text,
    invariant_resource  text,
    value               text
)
AS
$$
BEGIN   
    CREATE TEMPORARY TABLE t
    (
        key                 text,
        invariant_resource  text,
        value               text
    );
    INSERT INTO t(key, invariant_resource, value)
    SELECT
        DISTINCT localization.resources.key,
        localization.resources.value as invariant_resource,
        localization.localized_resources.value
    FROM localization.resources
    LEFT JOIN localization.localized_resources
    ON localization.resources.key = localization.localized_resources.key
    AND localization.localized_resources.culture_code = $1;

    RETURN QUERY 
    SELECT 
        row_number() OVER(ORDER BY t.key ~ '^[[:upper:]][^[:upper:]]' DESC, t.key),
        t.key,
        t.invariant_resource,
        t.value
    FROM t
    ORDER BY t.key ~ '^[[:upper:]][^[:upper:]]' DESC, t.key;
END
$$
LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION localization.add_localized_resource(text, text, text)
RETURNS void AS
$$
BEGIN
    IF EXISTS
    (
        SELECT 1 FROM localization.localized_resources 
        WHERE localization.localized_resources.culture_code=$1 
        AND localization.localized_resources.key=$2
    ) THEN
        UPDATE localization.localized_resources
        SET value=$3
        WHERE localization.localized_resources.culture_code=$1 AND key=$2;

        RETURN;
    END IF;

    INSERT INTO localization.localized_resources(culture_code, key, value)
    SELECT $1, $2, $3;
END
$$
LANGUAGE plpgsql VOLATILE
COST 100;

CREATE VIEW localization.localized_resources_view
AS
SELECT
    REPLACE(localization.resources.path, '.resx', '') || '.' || localization.localized_resources.culture_code || '.resx' AS resource,
    localization.resources.key,
    localization.localized_resources.culture_code,
    localization.localized_resources.value
FROM localization.resources
INNER JOIN localization.localized_resources
ON localization.localized_resources.key = localization.resources.key
ORDER BY PATH;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/00.db core/6.locale.sql --<--<--
DROP FUNCTION IF EXISTS core.get_locale();

CREATE FUNCTION core.get_locale()
RETURNS text
AS
$$
BEGIN
    RETURN 'en-US';
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/01.types-domains-tables-and-constraints/domains.sql --<--<--
DROP DOMAIN IF EXISTS public.transaction_type CASCADE;
CREATE DOMAIN public.transaction_type
AS char(2)
CHECK
(
    VALUE IN
    (
        'Dr', --Debit
        'Cr' --Credit
    )
);

COMMENT ON DOMAIN public.transaction_type IS 'This domain should not be localized.';


/*******************************************************************
    MIXERP STRICT Data Types: NEGATIVES ARE NOT ALLOWED
*******************************************************************/

DROP DOMAIN IF EXISTS public.money_strict CASCADE;
CREATE DOMAIN public.money_strict
AS DECIMAL(24, 4)
CHECK
(
    VALUE > 0
);


DROP DOMAIN IF EXISTS public.money_strict2 CASCADE;
CREATE DOMAIN public.money_strict2
AS DECIMAL(24, 4)
CHECK
(
    VALUE >= 0
);

DROP DOMAIN IF EXISTS public.integer_strict CASCADE;
CREATE DOMAIN public.integer_strict
AS integer
CHECK
(
    VALUE > 0
);

DROP DOMAIN IF EXISTS public.integer_strict2 CASCADE;
CREATE DOMAIN public.integer_strict2
AS integer
CHECK
(
    VALUE >= 0
);

DROP DOMAIN IF EXISTS public.smallint_strict CASCADE;
CREATE DOMAIN public.smallint_strict
AS smallint
CHECK
(
    VALUE > 0
);

DROP DOMAIN IF EXISTS public.smallint_strict2 CASCADE;
CREATE DOMAIN public.smallint_strict2
AS smallint
CHECK
(
    VALUE >= 0
);

DROP DOMAIN IF EXISTS public.decimal_strict CASCADE;
CREATE DOMAIN public.decimal_strict
AS decimal
CHECK
(
    VALUE > 0
);

DROP DOMAIN IF EXISTS public.decimal_strict2 CASCADE;
CREATE DOMAIN public.decimal_strict2
AS decimal
CHECK
(
    VALUE >= 0
);

DROP DOMAIN IF EXISTS public.color CASCADE;
CREATE DOMAIN public.color
AS text;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/01.types-domains-tables-and-constraints/tables-and-constraints.sql --<--<--
--Todo: Indexing has not been properly thought of, as of now.

CREATE TABLE core.verification_statuses
(
    verification_status_id                  smallint PRIMARY KEY,
    verification_status_name                national character varying(128) NOT NULL
);

COMMENT ON TABLE core.verification_statuses IS 
'Verification statuses are integer values used to represent the state of a transaction.
For example, a verification status of value "0" would mean that the transaction has not yet been verified.
A negative value indicates that the transaction was rejected, whereas a positive value means approved.

Remember:
1. Only approved transactions appear on ledgers and final reports.
2. Cash repository balance is maintained on the basis of LIFO principle. 

   This means that cash balance is affected (reduced) on your repository as soon as a credit transaction is posted,
   without the transaction being approved on the first place. If you reject the transaction, the cash balance then increases.
   This also means that the cash balance is not affected (increased) on your repository as soon as a debit transaction is posted.
   You will need to approve the transaction.

   It should however be noted that the cash repository balance might be less than the total cash shown on your balance sheet,
   if you have pending transactions to verify. You cannot perform EOD operation if you have pending verifications.
';


CREATE TABLE office.users
(
    user_id                                 SERIAL PRIMARY KEY,
    role_id                                 integer NOT NULL,
    department_id                           integer NOT NULL,
    office_id                               integer NOT NULL,
    user_name                               national character varying(50) NOT NULL,
    full_name                               national character varying(100) NOT NULL,
    can_change_password                     boolean NOT NULL DEFAULT(true),
    password                                text NOT NULL,
    elevated                                boolean NOT NULL 
                                            CONSTRAINT users_elevated_df DEFAULT(false),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);

COMMENT ON TABLE office.users IS
'
The users table contains users accounts and their login information. It also contains a sys user account which does not have a password.
The sys user account is a special account used by the MixERP workflow to perform routine tasks. The sys user cannot have a valid password
or cannot be allowed to log in interactively.';


CREATE UNIQUE INDEX verification_statuses_verification_status_name_uix
ON core.verification_statuses(UPPER(verification_status_name));

CREATE TABLE core.entities
(
    entity_id                               SERIAL PRIMARY KEY,
    entity_name                             national character varying(100),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX entities_entity_name_uix
ON core.entities(UPPER(entity_name));


CREATE TABLE core.industries
(
    industry_id                             SERIAL PRIMARY KEY,
    industry_name                           national character varying(100) NOT NULL,
    parent_industry_id                      integer REFERENCES core.industries(industry_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX industries_industry_name_uix
ON core.industries(UPPER(industry_name));



CREATE TABLE office.departments
(
    department_id                           SERIAL PRIMARY KEY,
    department_code                         national character varying(12) NOT NULL,
    department_name                         national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);

ALTER TABLE office.users
ADD CONSTRAINT users_departments_fk 
FOREIGN KEY(department_id)
REFERENCES office.departments(department_id);

CREATE TABLE core.flag_types
(
    flag_type_id                            SERIAL PRIMARY KEY,
    flag_type_name                          national character varying(24) NOT NULL,
    background_color                        color NOT NULL,
    foreground_color                        color NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL
                                            DEFAULT(NOW())
);

COMMENT ON TABLE core.flag_types IS 'Flags are used by users to mark transactions. The flags created by a user is not visible to others.';

CREATE TABLE core.flags
(
    flag_id                                 BIGSERIAL PRIMARY KEY,
    user_id                                 integer NOT NULL REFERENCES office.users(user_id),
    flag_type_id                            integer NOT NULL REFERENCES core.flag_types(flag_type_id),
    resource                                text, --Fully qualified resource name. Example: transactions.non_gl_stock_master.
    resource_key                            text, --The unique identifier for lookup. Example: non_gl_stock_master_id,
    resource_id                             text, --The value of the unique identifier to lookup for,
    flagged_on                              TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);


CREATE TABLE core.countries
(
    country_id                              SERIAL PRIMARY KEY,
    country_code                            national character varying(12) NOT NULL,
    country_name                            national character varying(100) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX countries_country_code_uix
ON core.countries(UPPER(country_code));

CREATE UNIQUE INDEX countries_country_name_uix
ON core.countries(UPPER(country_name));

CREATE TABLE core.states
(
    state_id                                SERIAL PRIMARY KEY,
    country_id                              integer NOT NULL REFERENCES core.countries(country_id),
    state_code                              national character varying(12) NOT NULL,
    state_name                              national character varying(100) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX states_state_code_uix
ON core.states(country_id, UPPER(state_code));

CREATE UNIQUE INDEX states_state_name_uix
ON core.states(country_id, UPPER(state_name));


CREATE TABLE core.counties
(
    county_id                               SERIAL PRIMARY KEY,
    county_code                             national character varying(12) NOT NULL,
    county_name                             national character varying(100) NOT NULL,
    state_id                                integer NOT NULL REFERENCES core.states(state_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
    
);


CREATE TABLE core.zip_code_types
(
    zip_code_type_id                        SERIAL PRIMARY KEY,
    type                                    national character varying(12),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX zip_code_types_zip_code_type_uix
ON core.zip_code_types(UPPER(type));


CREATE TABLE core.zip_codes
(
    zip_code_id                             BIGSERIAL PRIMARY KEY,
    state_id                                integer NOT NULL REFERENCES core.states(state_id),
    code                                    national character varying(12) NOT NULL,
    zip_code_type_id                        integer NOT NULL REFERENCES core.zip_code_types(zip_code_type_id),
    city                                    national character varying(100) NOT NULL,
    lat                                     decimal,
    lon                                     decimal,
    x_axis                                  decimal,
    y_axis                                  decimal,    
    z_axis                                  decimal,    
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())    
);

CREATE UNIQUE INDEX flags_user_id_resource_resource_id_uix
ON core.flags(user_id, UPPER(resource), UPPER(resource_key), UPPER(resource_id));

CREATE TABLE core.attachment_lookup
(
        attachment_lookup_id                SERIAL PRIMARY KEY,
        book                                national character varying(50) NOT NULL,
        resource                            text NOT NULL,
        resource_key                        text NOT NULL        
);

CREATE UNIQUE INDEX attachment_lookup_book_uix
ON core.attachment_lookup(lower(book));

CREATE UNIQUE INDEX attachment_lookup_resource_resource_key_uix
ON core.attachment_lookup(lower(book), lower(resource_key));


CREATE TABLE core.attachments
(
    attachment_id                           BIGSERIAL PRIMARY KEY,
    user_id                                 integer NOT NULL 
                                            REFERENCES office.users(user_id),
    resource                                text NOT NULL, --Fully qualified resource name. Example: transactions.non_gl_stock_master.
    resource_key                            text NOT NULL, --The unique identifier for lookup. Example: non_gl_stock_master_id,
    resource_id                             bigint NOT NULL, --The value of the unique identifier to lookup for,
    original_file_name                      text NOT NULL,
    file_extension                          national character varying(12) NOT NULL,
    file_path                               text NOT NULL,
    comment                                 national character varying(96) NOT NULL  
                                            CONSTRAINT attachments_comment_df 
                                            DEFAULT(''),
    added_on                                TIMESTAMP WITH TIME ZONE NOT NULL  
                                            CONSTRAINT attachments_added_on_df 
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX attachments_file_path_uix
ON core.attachments(UPPER(file_path));


CREATE TABLE core.currencies
(
    currency_code                           national character varying(12) PRIMARY KEY,
    currency_symbol                         national character varying(12) NOT NULL,
    currency_name                           national character varying(48) NOT NULL UNIQUE,
    hundredth_name                          national character varying(48) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);



CREATE TABLE office.offices
(
    office_id                               SERIAL PRIMARY KEY,
    office_code                             national character varying(12) NOT NULL,
    office_name                             national character varying(150) NOT NULL,
    nick_name                               national character varying(50) NULL,
    registration_date                       date NOT NULL,
    currency_code                           national character varying(12) NOT NULL REFERENCES core.currencies(currency_code),
    po_box                                  national character varying(128) NULL,
    address_line_1                          national character varying(128) NULL,   
    address_line_2                          national character varying(128) NULL,
    street                                  national character varying(50) NULL,
    city                                    national character varying(50) NULL,
    state                                   national character varying(50) NULL,
    zip_code                                national character varying(24) NULL,
    country                                 national character varying(50) NULL,
    phone                                   national character varying(24) NULL,
    fax                                     national character varying(24) NULL,
    email                                   national character varying(128) NULL,
    url                                     national character varying(50) NULL,
    registration_number                     national character varying(24) NULL,
    pan_number                              national character varying(24) NULL,
    allow_transaction_posting               boolean not null DEFAULT(true),
    parent_office_id                        integer NULL REFERENCES office.offices(office_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);

ALTER TABLE office.users
ADD FOREIGN KEY(office_id) REFERENCES office.offices(office_id);

CREATE UNIQUE INDEX offices_office_code_uix
ON office.offices(UPPER(office_code));

CREATE UNIQUE INDEX offices_office_name_uix
ON office.offices(UPPER(office_name));

CREATE UNIQUE INDEX offices_nick_name_uix
ON office.offices(UPPER(nick_name));






CREATE TABLE core.exchange_rates
(
    exchange_rate_id                        BIGSERIAL PRIMARY KEY,
    updated_on                              TIMESTAMP WITH TIME ZONE NOT NULL   
                                            CONSTRAINT exchange_rates_updated_on_df 
                                            DEFAULT(NOW()),
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    status                                  BOOLEAN NOT NULL   
                                            CONSTRAINT exchange_rates_status_df 
                                            DEFAULT(true)
);

CREATE TABLE core.exchange_rate_details
(
    exchange_rate_detail_id                 BIGSERIAL PRIMARY KEY,
    exchange_rate_id                        bigint NOT NULL REFERENCES core.exchange_rates(exchange_rate_id),
    local_currency_code                     national character varying(12) NOT NULL REFERENCES core.currencies(currency_code),
    foreign_currency_code                   national character varying(12) NOT NULL REFERENCES core.currencies(currency_code),
    unit                                    integer_strict NOT NULL,
    exchange_rate                           decimal_strict NOT NULL
);


CREATE UNIQUE INDEX departments_department_code_uix
ON office.departments(UPPER(department_code));

CREATE UNIQUE INDEX departments_department_name_uix
ON office.departments(UPPER(department_name));


CREATE TABLE office.roles
(
    role_id                                 SERIAL PRIMARY KEY,
    role_code                               national character varying(12) NOT NULL,
    role_name                               national character varying(50) NOT NULL,
    is_admin                                boolean NOT NULL   
                                            CONSTRAINT roles_is_admin_df 
                                            DEFAULT(false),
    is_system                               boolean NOT NULL   
                                            CONSTRAINT roles_is_system_df 
                                            DEFAULT(false),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);

ALTER TABLE office.users
ADD FOREIGN KEY(role_id) REFERENCES office.roles(role_id);


CREATE UNIQUE INDEX roles_role_code_uix
ON office.roles(UPPER(role_code));

CREATE UNIQUE INDEX roles_role_name_uix
ON office.roles(UPPER(role_name));


CREATE UNIQUE INDEX users_user_name_uix
ON office.users(UPPER(user_name));


CREATE TABLE audit.logins
(
    login_id                                BIGSERIAL PRIMARY KEY,
    user_id                                 integer NOT NULL REFERENCES office.users(user_id),
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    browser                                 national character varying(500) NOT NULL,
    ip_address                              national character varying(50) NOT NULL,
    login_date_time                         TIMESTAMP WITH TIME ZONE NOT NULL 
                                            DEFAULT(NOW()),
    remote_user                             national character varying(50) NOT NULL,
    culture                                 national character varying(12) NOT NULL
);


CREATE TABLE audit.failed_logins
(
    failed_login_id                         BIGSERIAL PRIMARY KEY,
    user_id                                 integer NULL REFERENCES office.users(user_id),
    user_name                               national character varying(50) NOT NULL,
    office_id                               integer NULL REFERENCES office.offices(office_id),
    browser                                 national character varying(500) NOT NULL,
    ip_address                              national character varying(50) NOT NULL,
    failed_date_time                        TIMESTAMP WITH TIME ZONE NOT NULL 
                                            DEFAULT(NOW()),
    remote_user                             national character varying(50) NOT NULL,
    details                                 national character varying(250) NULL
);


CREATE TABLE policy.lock_outs
(
    lock_out_id                             BIGSERIAL PRIMARY KEY,
    user_id                                 integer NOT NULL REFERENCES office.users(user_id),
    lock_out_time                           TIMESTAMP WITH TIME ZONE NOT NULL 
                                            DEFAULT(NOW()),
    lock_out_till                           TIMESTAMP WITH TIME ZONE NOT NULL 
                                            DEFAULT(NOW() + '5 minutes'::interval)
);


CREATE TABLE core.price_types
(
    price_type_id                           SERIAL PRIMARY KEY,
    price_type_code                         national character varying(12) NOT NULL,
    price_type_name                         national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL  
                                            DEFAULT(NOW())
);


CREATE UNIQUE INDEX price_types_price_type_code_uix
ON core.price_types(UPPER(price_type_code));

CREATE UNIQUE INDEX price_types_price_type_name_uix
ON core.price_types(UPPER(price_type_name));


CREATE TABLE core.menus
(
    menu_id                                 SERIAL PRIMARY KEY,
    menu_text                               national character varying(250) NOT NULL,
    url                                     national character varying(250) NULL,
    menu_code                               national character varying(12) NOT NULL,
    level                                   smallint NOT NULL,
    parent_menu_id                          integer NULL REFERENCES core.menus(menu_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL  
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX menus_menu_code_uix
ON core.menus(UPPER(menu_code));

CREATE TABLE core.menu_locale
(
    menu_locale_id                          SERIAL PRIMARY KEY,
    menu_id                                 integer NOT NULL REFERENCES core.menus(menu_id),
    culture                                 national character varying(12) NOT NULL,
    menu_text                               national character varying(250) NOT NULL
);

CREATE UNIQUE INDEX menu_locale_menu_id_culture_uix
ON core.menu_locale(menu_id, LOWER(culture));

CREATE TABLE policy.menu_policy
(
    policy_id                               SERIAL PRIMARY KEY,
    menu_id                                 integer NOT NULL REFERENCES core.menus(menu_id),
    office_id                               integer NULL REFERENCES office.offices(office_id),
    inherit_in_child_offices                boolean NOT NULL  
                                            DEFAULT(false),
    role_id                                 integer NULL REFERENCES office.roles(role_id),
    user_id                                 integer NULL REFERENCES office.users(user_id),
    scope                                   national character varying(12) NOT NULL
                                            CONSTRAINT menu_policy_scope_chk
                                            CHECK(scope IN('Allow','Deny'))
    
);

CREATE TABLE policy.menu_access
(
    access_id                               BIGSERIAL PRIMARY KEY,
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    menu_id                                 integer NOT NULL REFERENCES core.menus(menu_id),
    user_id                                 integer NULL REFERENCES office.users(user_id)   
);

    
CREATE TABLE core.frequencies
(
    frequency_id                            SERIAL PRIMARY KEY,
    frequency_code                          national character varying(12) NOT NULL,
    frequency_name                          national character varying(50) NOT NULL
);


CREATE UNIQUE INDEX frequencies_frequency_code_uix
ON core.frequencies(UPPER(frequency_code));

CREATE UNIQUE INDEX frequencies_frequency_name_uix
ON core.frequencies(UPPER(frequency_name));


CREATE TABLE core.fiscal_year
(
    fiscal_year_code                        national character varying(12) PRIMARY KEY,
    fiscal_year_name                        national character varying(50) NOT NULL,
    starts_from                             date NOT NULL,
    ends_on                                 date NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL  
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX fiscal_year_fiscal_year_name_uix
ON core.fiscal_year(UPPER(fiscal_year_name));

CREATE UNIQUE INDEX fiscal_year_starts_from_uix
ON core.fiscal_year(starts_from);

CREATE UNIQUE INDEX fiscal_year_ends_on_uix
ON core.fiscal_year(ends_on);


CREATE TABLE core.frequency_setups
(
    frequency_setup_id                      SERIAL PRIMARY KEY,
    fiscal_year_code                        national character varying(12) NOT NULL REFERENCES core.fiscal_year(fiscal_year_code),
    frequency_setup_code                    national character varying(12) NOT NULL,
    value_date                              date NOT NULL UNIQUE,
    frequency_id                            integer NOT NULL REFERENCES core.frequencies(frequency_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL  
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX frequency_setups_frequency_setup_code_uix
ON core.frequency_setups(UPPER(frequency_setup_code));


--TODO: Validation constraints for core.frequency_setups

CREATE TABLE core.units
(
    unit_id                                 SERIAL PRIMARY KEY,
    unit_code                               national character varying(12) NOT NULL,
    unit_name                               national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL  
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX units_unit_code_uix
ON core.units(UPPER(unit_code));

CREATE UNIQUE INDEX units_unit_name_uix
ON core.units(UPPER(unit_name));


CREATE TABLE core.compound_units
(
    compound_unit_id                        SERIAL PRIMARY KEY,
    base_unit_id                            integer NOT NULL REFERENCES core.units(unit_id),
    value                                   smallint NOT NULL,
    compare_unit_id                         integer NOT NULL REFERENCES core.units(unit_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL  
                                            DEFAULT(NOW()),
                                            CONSTRAINT compound_units_chk
                                            CHECK(base_unit_id != compare_unit_id)
);

CREATE UNIQUE INDEX compound_units_info_uix
ON core.compound_units(base_unit_id, compare_unit_id);

CREATE TABLE core.account_masters
(
    account_master_id                       smallint PRIMARY KEY,
    account_master_code                     national character varying(3) NOT NULL,
    account_master_name                     national character varying(40) NOT NULL,
    normally_debit                          boolean NOT NULL CONSTRAINT account_masters_normally_debit_df DEFAULT(false),
    parent_account_master_id                smallint NULL REFERENCES core.account_masters(account_master_id)
);

CREATE UNIQUE INDEX account_master_code_uix
ON core.account_masters(UPPER(account_master_code));

CREATE UNIQUE INDEX account_master_name_uix
ON core.account_masters(UPPER(account_master_name));

CREATE INDEX account_master_parent_account_master_id_inx
ON core.account_masters(parent_account_master_id);


CREATE TABLE core.cash_flow_headings
(
    cash_flow_heading_id                    integer NOT NULL PRIMARY KEY,
    cash_flow_heading_code                  national character varying(12) NOT NULL,
    cash_flow_heading_name                  national character varying(100) NOT NULL,
    cash_flow_heading_type                  character(1) NOT NULL
                                            CONSTRAINT cash_flow_heading_cash_flow_heading_type_chk
                                            CHECK(cash_flow_heading_type IN('O', 'I', 'F')),
    is_debit                                boolean NOT NULL
                                            CONSTRAINT cash_flow_headings_is_debit_df
                                            DEFAULT(false),
    is_sales                                boolean NOT NULL
                                            CONSTRAINT cash_flow_headings_is_sales_df
                                            DEFAULT(false),
    is_purchase                             boolean NOT NULL
                                            CONSTRAINT cash_flow_headings_is_purchase_df
                                            DEFAULT(false),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX cash_flow_headings_cash_flow_heading_code_uix
ON core.cash_flow_headings(UPPER(cash_flow_heading_code));

CREATE UNIQUE INDEX cash_flow_headings_cash_flow_heading_name_uix
ON core.cash_flow_headings(UPPER(cash_flow_heading_code));


CREATE TABLE core.accounts
(
    account_id                              BIGSERIAL PRIMARY KEY,
    account_master_id                       smallint NOT NULL REFERENCES core.account_masters(account_master_id),
    account_number                          national character varying(12) NOT NULL,
    external_code                           national character varying(12) NULL   
                                            CONSTRAINT accounts_external_code_df  
                                            DEFAULT(''),
    currency_code                           national character varying(12) NOT NULL REFERENCES core.currencies(currency_code),
    account_name                            national character varying(100) NOT NULL,
    description                             national character varying(200) NULL,
    confidential                            boolean NOT NULL   
                                            CONSTRAINT accounts_confidential_df  
                                            DEFAULT(false),
    is_transaction_node                     boolean NOT NULL --Non transaction nodes cannot be used in transaction.
                                            CONSTRAINT accounts_is_transaction_node_df
                                            DEFAULT(true),
    sys_type                                boolean NOT NULL   
                                            CONSTRAINT accounts_sys_type_df  
                                            DEFAULT(false),
    parent_account_id                       bigint NULL REFERENCES core.accounts(account_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);


CREATE UNIQUE INDEX accounts_account_number_uix
ON core.accounts(UPPER(account_number));

CREATE UNIQUE INDEX accounts_name_uix
ON core.accounts(UPPER(account_name));


CREATE TABLE core.bank_accounts
(
    account_id                              bigint PRIMARY KEY REFERENCES core.accounts(account_id),                                            
    maintained_by_user_id                   integer NOT NULL REFERENCES office.users(user_id),
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    bank_name                               national character varying(128) NOT NULL,
    bank_branch                             national character varying(128) NOT NULL,
    bank_contact_number                     national character varying(128) NULL,
    bank_address                            text NULL,
    bank_account_number                     national character varying(128) NULL,
    bank_account_type                       national character varying(128) NULL,
    relationship_officer_name               national character varying(128) NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE TABLE core.transaction_types
(
    transaction_type_id                     smallint PRIMARY KEY,
    transaction_type_code                   national character varying(4),
    transaction_type_name                   national character varying(100)
);

CREATE UNIQUE INDEX transaction_types_transaction_type_code_uix
ON core.transaction_types(UPPER(transaction_type_code));

CREATE UNIQUE INDEX transaction_types_transaction_type_name_uix
ON core.transaction_types(UPPER(transaction_type_name));

INSERT INTO core.transaction_types
SELECT 1, 'Any', 'Any (Debit or Credit)' UNION ALL
SELECT 2, 'Dr', 'Debit' UNION ALL
SELECT 3, 'Cr', 'Credit';

CREATE TABLE core.cash_flow_setup
(
    cash_flow_setup_id                      SERIAL PRIMARY KEY,
    cash_flow_heading_id                    integer NOT NULL REFERENCES core.cash_flow_headings(cash_flow_heading_id),
    account_master_id                       smallint NOT NULL REFERENCES core.account_masters(account_master_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);

CREATE INDEX cash_flow_setup_cash_flow_heading_id_inx
ON core.cash_flow_setup(cash_flow_heading_id);

CREATE INDEX cash_flow_setup_account_master_id_inx
ON core.cash_flow_setup(account_master_id);

CREATE TABLE core.sales_teams
(
    sales_team_id                           SERIAL PRIMARY KEY,
    sales_team_code                         national character varying(12) NOT NULL,
    sales_team_name                         national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX sales_teams_sales_team_code_uix
ON core.sales_teams(UPPER(sales_team_code));

CREATE UNIQUE INDEX sales_teams_sales_team_name_uix
ON core.sales_teams(UPPER(sales_team_name));

CREATE TABLE core.salespersons
(
    salesperson_id                          SERIAL PRIMARY KEY,
    sales_team_id                           integer NOT NULL REFERENCES core.sales_teams(sales_team_id),
    salesperson_code                        national character varying(12) NOT NULL,
    salesperson_name                        national character varying(100) NOT NULL,
    address                                 national character varying(100) NOT NULL,
    contact_number                          national character varying(50) NOT NULL,
    commission_rate                         decimal_strict2 NOT NULL   
                                            DEFAULT(0),
    account_id                              bigint NOT NULL REFERENCES core.accounts(account_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX salespersons_salesperson_name_uix
ON core.salespersons(UPPER(salesperson_name));

CREATE TABLE core.bonus_slabs
(
    bonus_slab_id                           SERIAL PRIMARY KEY,
    bonus_slab_code                         national character varying(12) NOT NULL,
    bonus_slab_name                         national character varying(50) NOT NULL,
    effective_from                          date NOT NULL,
    ends_on                                 date NOT NULL,
    checking_frequency_id                   integer NOT NULL REFERENCES core.frequencies(frequency_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX bonus_slabs_bonus_slab_code_uix
ON core.bonus_slabs(UPPER(bonus_slab_code));


CREATE UNIQUE INDEX bonus_slabs_bonus_slab_name_uix
ON core.bonus_slabs(UPPER(bonus_slab_name));



CREATE TABLE core.bonus_slab_details
(
    bonus_slab_detail_id                    SERIAL PRIMARY KEY,
    bonus_slab_id                           integer NOT NULL REFERENCES core.bonus_slabs(bonus_slab_id),
    amount_from                             money_strict NOT NULL,
    amount_to                               money_strict NOT NULL,
    bonus_rate                              decimal_strict NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW()),
                                            CONSTRAINT bonus_slab_details_amounts_chk 
                                            CHECK(amount_to>amount_from)
);


CREATE TABLE core.salesperson_bonus_setups
(
    salesperson_bonus_setup_id SERIAL       PRIMARY KEY,
    salesperson_id                          integer NOT NULL REFERENCES core.salespersons(salesperson_id),
    bonus_slab_id                           integer NOT NULL REFERENCES core.bonus_slabs(bonus_slab_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX salesperson_bonus_setups_uix
ON core.salesperson_bonus_setups(salesperson_id, bonus_slab_id);

CREATE TABLE core.ageing_slabs
(
    ageing_slab_id SERIAL                   PRIMARY KEY,
    ageing_slab_name                        national character varying(24) NOT NULL,
    from_days                               integer NOT NULL,
    to_days                                 integer NOT NULL CHECK(to_days > 0),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX ageing_slabs_ageing_slab_name_uix
ON core.ageing_slabs(UPPER(ageing_slab_name));


CREATE TABLE core.party_types
(
    party_type_id                           SERIAL PRIMARY KEY,
    party_type_code                         national character varying(12) NOT NULL, 
    party_type_name                         national character varying(50) NOT NULL,
    is_supplier                             boolean NOT NULL   
                                            CONSTRAINT party_types_is_supplier_df   
                                            DEFAULT(false),
    account_id                              bigint NOT NULL REFERENCES core.accounts(account_id),--When a new party is added, this becomes the parent account.
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                              
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX party_types_party_type_code_uix
ON core.party_types(UPPER(party_type_code));

CREATE UNIQUE INDEX party_types_party_type_name_uix
ON core.party_types(UPPER(party_type_name));


CREATE TABLE core.parties
(
    party_id                                BIGSERIAL PRIMARY KEY,
    party_type_id                           integer NOT NULL REFERENCES core.party_types(party_type_id),
    party_code                              national character varying(12) NULL,
    first_name                              national character varying(50) NOT NULL,
    middle_name                             national character varying(50) NULL,
    last_name                               national character varying(50) NOT NULL,
    party_name                              text NULL,
    date_of_birth                           date NULL,
    entity_id                               integer NULL REFERENCES core.entities(entity_id),
    industry_id                             integer NULL REFERENCES core.industries(industry_id),
    country_id                              integer NOT NULL REFERENCES core.countries(country_id),
    state_id                                integer NOT NULL REFERENCES core.states(state_id),
    zip_code                                national character varying(12) NULL,
    address_line_1                          national character varying(128) NULL,   
    address_line_2                          national character varying(128) NULL,
    street                                  national character varying(50) NULL,
    city                                    national character varying(50) NULL,
    phone                                   national character varying(24) NULL,
    fax                                     national character varying(24) NULL,
    cell                                    national character varying(24) NULL,
    email                                   national character varying(128) NULL,
    url                                     national character varying(50) NULL,
    pan_number                              national character varying(50) NULL,
    sst_number                              national character varying(50) NULL,
    cst_number                              national character varying(50) NULL,
    currency_code                           national character varying(12) NOT NULL REFERENCES core.currencies(currency_code),
    allow_credit                            boolean NULL,
    maximum_credit_period                   smallint NULL,
    maximum_credit_amount                   money_strict2 NULL,
    account_id                              bigint NULL REFERENCES core.accounts(account_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);


CREATE UNIQUE INDEX parties_party_code_uix
ON core.parties(UPPER(party_code));

CREATE TABLE core.shipping_addresses
(
    shipping_address_id                     BIGSERIAL PRIMARY KEY,
    shipping_address_code                   national character varying(24) NOT NULL,
    party_id                                bigint NOT NULL REFERENCES core.parties(party_id),
    country_id                              integer NOT NULL REFERENCES core.countries(country_id),
    state_id                                integer NOT NULL REFERENCES core.states(state_id),
    zip_code                                national character varying(12) NULL,
    address_line_1                          national character varying(128) NULL,   
    address_line_2                          national character varying(128) NULL,
    street                                  national character varying(128) NULL,
    city                                    national character varying(128) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX shipping_addresses_shipping_address_code_uix
ON core.shipping_addresses(UPPER(shipping_address_code), party_id);

CREATE TABLE core.tax_master
(
    tax_master_id                           SERIAL PRIMARY KEY,
    tax_master_code                         national character varying(12) NOT NULL,
    tax_master_name                         national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX tax_master_tax_master_code_uix
ON core.tax_master(UPPER(tax_master_code));

CREATE UNIQUE INDEX tax_master_tax_master_name_uix
ON core.tax_master(UPPER(tax_master_name));


CREATE TABLE core.tax_authorities
(
    tax_authority_id                        SERIAL PRIMARY KEY,
    tax_master_id                           integer NOT NULL REFERENCES core.tax_master(tax_master_id),
    tax_authority_code                      national character varying(12) NOT NULL,
    tax_authority_name                      national character varying(100) NOT NULL,
    country_id                              integer NOT NULL REFERENCES core.countries(country_id),
    state_id                                integer NULL REFERENCES core.states(state_id),
    zip_code                                national character varying(12) NULL,
    address_line_1                          national character varying(128) NULL,   
    address_line_2                          national character varying(128) NULL,
    street                                  national character varying(50) NULL,
    city                                    national character varying(50) NULL,
    phone                                   national character varying(100) NULL,
    fax                                     national character varying(24) NULL,
    cell                                    national character varying(24) NULL,
    email                                   national character varying(128) NULL,
    url                                     national character varying(50) NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX tax_authorities_tax_authority_code_uix
ON core.tax_authorities(UPPER(tax_authority_code));


CREATE UNIQUE INDEX tax_authorities_tax_authority_name_uix
ON core.tax_authorities(UPPER(tax_authority_name));

CREATE TABLE core.income_tax_setup
(
    income_tax_setup_id                     SERIAL NOT NULL PRIMARY KEY,
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    effective_from                          date NOT NULL,
    tax_rate                                decimal_strict2 NOT NULL,
    tax_authority_id                        integer NOT NULL REFERENCES core.tax_authorities(tax_authority_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE INDEX income_tax_setup_office_id_inx
ON core.income_tax_setup(office_id);

CREATE TABLE core.sales_tax_types
(
    sales_tax_type_id                       SERIAL PRIMARY KEY,
    sales_tax_type_code                     national character varying(12) NOT NULL,
    sales_tax_type_name                     national character varying(50) NOT NULL,
    is_vat                                  boolean NOT NULL DEFAULT(false),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX sales_tax_types_sales_tax_type_code_uix
ON core.sales_tax_types(UPPER(sales_tax_type_code));

CREATE UNIQUE INDEX sales_tax_types_sales_tax_type_name_uix
ON core.sales_tax_types(UPPER(sales_tax_type_name));

CREATE INDEX sales_tax_types_is_vat_inx
ON core.sales_tax_types(is_vat);


CREATE TABLE core.tax_base_amount_types
(
    tax_base_amount_type_code               national character varying(12) PRIMARY KEY,--Should not be localized
    tax_base_amount_type_name               national character varying(50) NOT NULL
);

CREATE UNIQUE INDEX tax_base_amount_type_tax_base_amount_type_name_uix
ON core.tax_base_amount_types(UPPER(tax_base_amount_type_name));

CREATE TABLE core.tax_rate_types
(
    tax_rate_type_code                      national character varying(4) PRIMARY KEY,--Should not be localized
    tax_rate_type_name                      national character varying(50) NOT NULL
);

CREATE UNIQUE INDEX tax_rate_type_tax_rate_type_name_uix
ON core.tax_rate_types(UPPER(tax_rate_type_name));


CREATE TABLE core.rounding_methods
(
    rounding_method_code                    national character varying(4) PRIMARY KEY, --Should not be localized
    rounding_method_name                    national character varying(50) NOT NULL
);

CREATE UNIQUE INDEX rounding_methods_rounding_method_name_uix
ON core.rounding_methods(UPPER(rounding_method_name));



CREATE TABLE core.state_sales_taxes
(
    state_sales_tax_id                      SERIAL PRIMARY KEY,
    state_sales_tax_code                    character varying(12) NOT NULL,
    state_sales_tax_name                    character varying(100) NOT NULL,
    state_id                                integer NOT NULL REFERENCES core.states(state_id),
    entity_id                               integer NULL REFERENCES core.entities(entity_id),
    industry_id                             integer NULL REFERENCES core.industries(industry_id),
    item_group_id                           integer NULL /*REFERENCES core.item_groups(item_group_id)*/,        
    rate                                    decimal_strict2 NOT NULL DEFAULT(0),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX state_sales_taxes_state_sales_tax_code_uix
ON core.state_sales_taxes(UPPER(state_sales_tax_code));

CREATE UNIQUE INDEX state_sales_taxes_state_sales_tax_name_uix
ON core.state_sales_taxes(UPPER(state_sales_tax_name));

CREATE UNIQUE INDEX state_sales_taxes_state_id_entity_id_uix
ON core.state_sales_taxes(state_id, entity_id);

CREATE UNIQUE INDEX state_sales_taxes_state_id_industry_id_uix
ON core.state_sales_taxes(state_id, industry_id);

CREATE UNIQUE INDEX state_sales_taxes_state_id_item_group_id_uix
ON core.state_sales_taxes(state_id, item_group_id);

CREATE TABLE core.county_sales_taxes
(
    county_sales_tax_id                     SERIAL PRIMARY KEY,
    county_sales_tax_code                    character varying(12) NOT NULL,
    county_sales_tax_name                    character varying(100) NOT NULL,
    county_id                               integer REFERENCES core.counties(county_id),
    entity_id                               integer NULL REFERENCES core.entities(entity_id),
    industry_id                             integer NULL REFERENCES core.industries(industry_id),
    item_group_id                           integer NULL /*REFERENCES core.item_groups(item_group_id)*/,        
    rate                                    decimal_strict2 NOT NULL DEFAULT(0),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())

);


CREATE UNIQUE INDEX county_sales_taxes_county_sales_tax_code_uix
ON core.county_sales_taxes(UPPER(county_sales_tax_code));

CREATE UNIQUE INDEX county_sales_taxes_county_sales_tax_name_uix
ON core.county_sales_taxes(UPPER(county_sales_tax_name));

CREATE UNIQUE INDEX county_sales_taxes_county_id_entity_id_uix
ON core.county_sales_taxes(county_id, entity_id);

CREATE UNIQUE INDEX county_sales_taxes_county_id_industry_id_uix
ON core.county_sales_taxes(county_id, industry_id);

CREATE UNIQUE INDEX county_sales_taxes_county_id_item_group_id_uix
ON core.county_sales_taxes(county_id, item_group_id);

CREATE TABLE core.sales_taxes
(
    sales_tax_id                            SERIAL PRIMARY KEY,
    tax_master_id                           integer NOT NULL REFERENCES core.tax_master(tax_master_id),
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    sales_tax_code                          national character varying(24) NOT NULL,
    sales_tax_name                          national character varying(50) NOT NULL,
    is_exemption                            boolean NOT NULL DEFAULT(false),        
    tax_base_amount_type_code               national character varying(12) NOT NULL 
                                            REFERENCES core.tax_base_amount_types(tax_base_amount_type_code)
                                            DEFAULT('P'),
    rate                                    decimal_strict2 NOT NULL DEFAULT(0), --Tax rate should be zero for parent tax.
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW()),
                                            CONSTRAINT taxes_is_exemption_chk
                                            CHECK
                                            (                                            
                                                CASE WHEN is_exemption = true THEN rate = 0 END
                                            )
);

CREATE UNIQUE INDEX sales_taxes_sales_tax_code_uix
ON core.sales_taxes(office_id, UPPER(sales_tax_code));

CREATE UNIQUE INDEX sales_taxes_sales_tax_name_uix
ON core.sales_taxes(office_id, UPPER(sales_tax_name));

CREATE TABLE core.sales_tax_details
(
    sales_tax_detail_id                     SERIAL PRIMARY KEY,
    sales_tax_id                            integer NOT NULL REFERENCES core.sales_taxes(sales_tax_id),
    sales_tax_type_id                       integer NOT NULL REFERENCES core.sales_tax_types(sales_tax_type_id),
    priority                                smallint NOT NULL DEFAULT(0),
    sales_tax_detail_code                   national character varying(24) NOT NULL,
    sales_tax_detail_name                   national character varying(50) NOT NULL,
    based_on_shipping_address               boolean NOT NULL DEFAULT(true),
    check_nexus                             boolean NOT NULL DEFAULT(true),
    applied_on_shipping_charge              boolean NOT NULL DEFAULT(true),
    state_sales_tax_id                      integer NULL REFERENCES core.state_sales_taxes(state_sales_tax_id),
    county_sales_tax_id                     integer NULL REFERENCES core.county_sales_taxes(county_sales_tax_id),
    tax_rate_type_code                      national character varying(12) NOT NULL 
                                            REFERENCES core.tax_rate_types(tax_rate_type_code)
                                            DEFAULT('P'),
    rate                                    decimal_strict2 NOT NULL
                                            CONSTRAINT sales_tax_details_rate_chk CHECK
                                            (
                                                CASE 
                                                    WHEN
                                                        (
                                                            state_sales_tax_id IS NOT NULL 
                                                            OR
                                                            county_sales_tax_id IS NOT NULL
                                                        )
                                                    THEN 
                                                        rate = 0 
                                                    ELSE 
                                                        rate > 0 
                                                    END
                                            ),
    reporting_tax_authority_id              integer NOT NULL REFERENCES core.tax_authorities(tax_authority_id),
    collecting_tax_authority_id             integer NOT NULL REFERENCES core.tax_authorities(tax_authority_id),
    collecting_account_id                   bigint NOT NULL REFERENCES core.accounts(account_id),
    use_tax_collecting_account_id           bigint NULL REFERENCES core.accounts(account_id),
    rounding_method_code                    national character varying(4) NULL REFERENCES core.rounding_methods(rounding_method_code),
    rounding_decimal_places                 integer_strict2 NOT NULL DEFAULT(2),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX sales_tax_details_sales_tax_detail_code_uix
ON core.sales_tax_details(UPPER(sales_tax_detail_code));

CREATE UNIQUE INDEX sales_tax_details_sales_tax_detail_name_uix
ON core.sales_tax_details(UPPER(sales_tax_detail_name));



CREATE TABLE core.tax_exempt_types
(
    tax_exempt_type_id                      SERIAL PRIMARY KEY,
    tax_exempt_type_code                    national character varying(12) NOT NULL,
    tax_exempt_type_name                    national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX tax_exempt_types_tax_exempt_type_code_uix
ON core.tax_exempt_types(UPPER(tax_exempt_type_code));

CREATE UNIQUE INDEX tax_exempt_types_tax_exempt_type_name_uix
ON core.tax_exempt_types(UPPER(tax_exempt_type_name));


CREATE TABLE core.sales_tax_exempts
(
    sales_tax_exempt_id                     SERIAL PRIMARY KEY,
    tax_master_id                           integer NOT NULL REFERENCES core.tax_master(tax_master_id),
    sales_tax_exempt_code                   national character varying(12),
    sales_tax_exempt_name                   national character varying(100),
    tax_exempt_type_id                      integer NOT NULL REFERENCES core.tax_exempt_types(tax_exempt_type_id),
    store_id                                integer NOT NULL,
    sales_tax_id                            integer NOT NULL REFERENCES core.sales_taxes(sales_tax_id),
    valid_from                              date NOT NULL,
    valid_till                              date NOT NULL,
                                            CONSTRAINT sales_tax_exempts_valid_till_chk 
                                            CHECK(valid_till >= valid_from),
    price_from                              money_strict2 NOT NULL DEFAULT(0),
    price_to                                money_strict2 NOT NULL DEFAULT(0),
                                            CONSTRAINT sales_tax_exempts_price_to_chk 
                                            CHECK(price_to >= price_from),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX sales_tax_exempts_sales_tax_exempt_code_uix
ON core.sales_tax_exempts(UPPER(sales_tax_exempt_code));

CREATE UNIQUE INDEX sales_tax_exempts_sales_tax_exempt_name_uix
ON core.sales_tax_exempts(UPPER(sales_tax_exempt_name));


CREATE TABLE core.sales_tax_exempt_details
(
    sales_tax_exempt_detail_id              SERIAL PRIMARY KEY,
    sales_tax_exempt_id                     integer NOT NULL REFERENCES core.sales_tax_exempts(sales_tax_exempt_id),
    entity_id                               integer NULL REFERENCES core.entities(entity_id),
    industry_id                             integer NULL REFERENCES core.industries(industry_id),    
    party_id                                bigint NULL REFERENCES core.parties(party_id),
    party_type_id                           integer NULL REFERENCES core.party_types(party_type_id),
    item_id                                 integer NULL /*REFERENCES core.items(item_id)*/,
    item_group_id                           integer NULL /*REFERENCES core.item_groups(item_group_id)*/, --Create trigger to disallow adding item group which is not allowed in sales.
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL
                                            DEFAULT(NOW())
);


CREATE TABLE core.brands
(
    brand_id SERIAL                         PRIMARY KEY,
    brand_code                              national character varying(12) NOT NULL,
    brand_name                              national character varying(150) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX brands_brand_code_uix
ON core.brands(UPPER(brand_code));

CREATE UNIQUE INDEX brands_brand_name_uix
ON core.brands(UPPER(brand_name));



CREATE TABLE core.shippers
(
    shipper_id                              SERIAL PRIMARY KEY,
    shipper_code                            national character varying(12) NULL,
    company_name                            national character varying(128) NOT NULL,
    shipper_name                            national character varying(150) NULL,
    po_box                                  national character varying(128) NULL,
    address_line_1                          national character varying(128) NULL,   
    address_line_2                          national character varying(128) NULL,
    street                                  national character varying(50) NULL,
    city                                    national character varying(50) NULL,
    state                                   national character varying(50) NULL,
    country                                 national character varying(50) NULL,
    phone                                   national character varying(50) NULL,
    fax                                     national character varying(50) NULL,
    cell                                    national character varying(50) NULL,
    email                                   national character varying(128) NULL,
    url                                     national character varying(50) NULL,
    contact_person                          national character varying(50) NULL,
    contact_po_box                          national character varying(128) NULL,
    contact_address_line_1                  national character varying(128) NULL,   
    contact_address_line_2                  national character varying(128) NULL,
    contact_street                          national character varying(50) NULL,
    contact_city                            national character varying(50) NULL,
    contact_state                           national character varying(50) NULL,
    contact_country                         national character varying(50) NULL,
    contact_email                           national character varying(128) NULL,
    contact_phone                           national character varying(50) NULL,
    contact_cell                            national character varying(50) NULL,
    factory_address                         national character varying(250) NULL,
    pan_number                              national character varying(50) NULL,
    sst_number                              national character varying(50) NULL,
    cst_number                              national character varying(50) NULL,
    account_id                              bigint NOT NULL REFERENCES core.accounts(account_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                              
                                            DEFAULT(NOW())
);


CREATE UNIQUE INDEX shippers_shipper_code_uix
ON core.shippers(UPPER(shipper_code));

CREATE TABLE core.item_types
(
    item_type_id                            SERIAL PRIMARY KEY,
    item_type_code                          national character varying(12) NOT NULL,
    item_type_name                          national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX item_type_item_type_code_uix
ON core.item_types(UPPER(item_type_code));


CREATE UNIQUE INDEX item_type_item_type_name_uix
ON core.item_types(UPPER(item_type_name));

CREATE TABLE core.item_groups
(
    item_group_id                           SERIAL PRIMARY KEY,
    item_group_code                         national character varying(12) NOT NULL,
    item_group_name                         national character varying(50) NOT NULL,
    exclude_from_purchase                   boolean NOT NULL   
                                            CONSTRAINT item_groups_exclude_from_purchase_df   
                                            DEFAULT(false),
    exclude_from_sales                      boolean NOT NULL   --Todo: Create trigger to disallow switching this on when table "core.sales_tax_exempt_details" depends on it.
                                            CONSTRAINT item_groups_exclude_from_sales_df   
                                            DEFAULT(false),
    sales_tax_id                            integer NOT NULL REFERENCES core.sales_taxes(sales_tax_id),
    sales_account_id                        bigint NOT NULL REFERENCES core.accounts(account_id),
    sales_discount_account_id               bigint NOT NULL REFERENCES core.accounts(account_id),
    sales_return_account_id                 bigint NOT NULL REFERENCES core.accounts(account_id),
    purchase_account_id                     bigint NOT NULL REFERENCES core.accounts(account_id),
    purchase_discount_account_id            bigint NOT NULL REFERENCES core.accounts(account_id),
    inventory_account_id                    bigint NOT NULL REFERENCES core.accounts(account_id),
    cost_of_goods_sold_account_id           bigint NOT NULL REFERENCES core.accounts(account_id),    
    parent_item_group_id                    integer NULL REFERENCES core.item_groups(item_group_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

ALTER TABLE core.sales_tax_exempt_details
ADD FOREIGN KEY(item_group_id) REFERENCES core.item_groups(item_group_id);


ALTER TABLE core.state_sales_taxes
ADD FOREIGN KEY(item_group_id) REFERENCES core.item_groups(item_group_id);

ALTER TABLE core.county_sales_taxes
ADD FOREIGN KEY(item_group_id) REFERENCES core.item_groups(item_group_id);


CREATE UNIQUE INDEX item_groups_item_group_code_uix
ON core.item_groups(UPPER(item_group_code));

CREATE UNIQUE INDEX item_groups_item_group_name_uix
ON core.item_groups(UPPER(item_group_name));



CREATE TABLE core.shipping_mail_types
(
    shipping_mail_type_id                   SERIAL PRIMARY KEY,
    shipping_mail_type_code                 national character varying(12) NOT NULL,
    shipping_mail_type_name                 national character varying(64) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX shipping_mail_types_shipping_mail_type_code_uix
ON core.shipping_mail_types(UPPER(shipping_mail_type_code));

CREATE UNIQUE INDEX shipping_mail_types_shipping_mail_type_name_uix
ON core.shipping_mail_types(UPPER(shipping_mail_type_name));






CREATE TABLE core.shipping_package_shapes
(
    shipping_package_shape_id               SERIAL PRIMARY KEY,
    shipping_package_shape_code             national character varying(12) NOT NULL,
    shipping_package_shape_name             national character varying(64) NOT NULL,
    is_rectangular                          boolean NOT NULL   
                                            DEFAULT(false),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())    
);



CREATE UNIQUE INDEX shipping_package_shapes_shipping_package_shape_code_uix
ON core.shipping_package_shapes(UPPER(shipping_package_shape_code));

CREATE UNIQUE INDEX shipping_package_shapes_shipping_package_shape_name_uix
ON core.shipping_package_shapes(UPPER(shipping_package_shape_name));


CREATE TABLE core.items
(
    item_id                                 SERIAL PRIMARY KEY,
    item_code                               national character varying(12) NOT NULL,
    item_name                               national character varying(150) NOT NULL,
    item_group_id                           integer NOT NULL REFERENCES core.item_groups(item_group_id),
    item_type_id                            integer NOT NULL REFERENCES core.item_types(item_type_id),
    brand_id                                integer NOT NULL REFERENCES core.brands(brand_id),
    preferred_supplier_id                   bigint NOT NULL REFERENCES core.parties(party_id),
    lead_time_in_days                       integer NOT NULL   
                                            DEFAULT(0),
    weight_in_grams                         float NOT NULL   
                                            DEFAULT(0),  
    width_in_centimeters                    float NOT NULL   
                                            DEFAULT(0),
    height_in_centimeters                   float NOT NULL   
                                            DEFAULT(0),
    length_in_centimeters                   float NOT NULL   
                                            DEFAULT(0),
    machinable                              boolean NOT NULL   
                                            DEFAULT(false),
    preferred_shipping_mail_type_id         integer NULL REFERENCES core.shipping_mail_types(shipping_mail_type_id),
    shipping_package_shape_id               integer NULL REFERENCES core.shipping_package_shapes(shipping_package_shape_id),    
    unit_id                                 integer NOT NULL REFERENCES core.units(unit_id),
    hot_item                                boolean NOT NULL,
    cost_price                              money_strict NOT NULL,
    cost_price_includes_tax                 boolean NOT NULL   
                                            CONSTRAINT items_cost_price_includes_tax_df                                               
                                            DEFAULT(false),
    selling_price                           money_strict NOT NULL,
    selling_price_includes_tax              boolean NOT NULL   
                                            CONSTRAINT items_selling_price_includes_tax_df 
                                            DEFAULT(false),
    sales_tax_id                            integer NOT NULL REFERENCES core.sales_taxes(sales_tax_id),
    reorder_unit_id                         integer NOT NULL REFERENCES core.units(unit_id),
    reorder_level                           integer NOT NULL,
    reorder_quantity                        integer NOT NULL
                                            CONSTRAINT items_reorder_quantity_df
                                            DEFAULT(0),
    maintain_stock                          boolean NOT NULL   
                                            DEFAULT(true),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);

ALTER TABLE core.sales_tax_exempt_details
ADD FOREIGN KEY(item_id) REFERENCES core.items(item_id);


CREATE UNIQUE INDEX items_item_name_uix
ON core.items(UPPER(item_name));

CREATE TABLE core.compound_items
(
    compound_item_id                        SERIAL PRIMARY KEY,
    compound_item_code                      national character varying(12) NOT NULL,
    compound_item_name                      national character varying(150) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())        
);

CREATE UNIQUE INDEX compound_items_compound_item_code_uix
ON core.compound_items(LOWER(compound_item_code));


CREATE UNIQUE INDEX compound_items_compound_item_name_uix
ON core.compound_items(LOWER(compound_item_name));

CREATE TABLE core.compound_item_details
(
    compound_item_detail_id                 SERIAL PRIMARY KEY,
    compound_item_id                        integer NOT NULL REFERENCES core.compound_items(compound_item_id),
    item_id                                 integer NOT NULL REFERENCES core.items(item_id),
    unit_id                                 integer NOT NULL REFERENCES core.units(unit_id),
    quantity                                integer_strict NOT NULL,
    price                                   money_strict NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())        
);

CREATE UNIQUE INDEX compound_item_details_item_id_uix
ON core.compound_item_details(compound_item_id, item_id);


CREATE TABLE core.late_fee
(
    late_fee_id                                 SERIAL NOT NULL PRIMARY KEY,
    late_fee_code                               national character varying(12) NOT NULL,
    late_fee_name                               national character varying(50) NOT NULL,
    is_flat_amount                              boolean NOT NULL CONSTRAINT late_fee_is_flat_amount_df DEFAULT(false),
    rate                                        decimal(24, 4) NOT NULL,
    audit_user_id                               integer NULL REFERENCES office.users(user_id),
    audit_ts                                    TIMESTAMP WITH TIME ZONE NULL 
                                                DEFAULT(NOW())
);

CREATE UNIQUE INDEX late_fee_late_fee_code_uix
ON core.late_fee(UPPER(late_fee_code));

CREATE UNIQUE INDEX late_fee_late_fee_name_uix
ON core.late_fee(UPPER(late_fee_name));

CREATE INDEX late_fee_is_flat_amount_inx
ON core.late_fee(is_flat_amount);


CREATE TABLE core.payment_terms
(
    payment_term_id                             SERIAL NOT NULL PRIMARY KEY,
    payment_term_code                           national character varying(12) NOT NULL,
    payment_term_name                           national character varying(50) NOT NULL,
    due_on_date                                 boolean NOT NULL 
                                                CONSTRAINT payment_terms_due_on_specific_date_df DEFAULT(false),
    due_days                                    integer NOT NULL CONSTRAINT payment_terms_days_df DEFAULT(0),
    due_frequency_id                            integer NULL REFERENCES core.frequencies(frequency_id)
                                                CHECK
                                                (
                                                    CASE WHEN due_frequency_id IS NOT NULL THEN due_days = 0 END
                                                ),
    grace_peiod                                 integer NOT NULL CONSTRAINT payment_terms_grace_period_df DEFAULT(0),
    late_fee_id                                 integer NULL REFERENCES core.late_fee(late_fee_id),
    late_fee_posting_frequency_id               integer NULL REFERENCES core.frequencies(frequency_id)
                                                CONSTRAINT payment_terms_late_fee_chk
                                                CHECK
                                                (
                                                    (late_fee_id IS NULL)::integer + 
                                                    (late_fee_posting_frequency_id IS NULL)::integer IN
                                                    (
                                                        0, 2
                                                    )--Either every late fee information should be provided or none.
                                                ),
    audit_user_id                               integer NULL REFERENCES office.users(user_id),
    audit_ts                                    TIMESTAMP WITH TIME ZONE NULL   
                                                DEFAULT(NOW())        
);


CREATE UNIQUE INDEX payment_terms_payment_term_code_uix
ON core.payment_terms(UPPER(payment_term_code));

CREATE UNIQUE INDEX payment_terms_payment_term_name_uix
ON core.payment_terms(UPPER(payment_term_name));

CREATE INDEX payment_terms_due_on_date_inx
ON core.payment_terms(due_on_date);


CREATE INDEX payment_terms_due_frequency_id_inx
ON core.payment_terms(due_frequency_id);



CREATE TABLE core.recurring_invoices
(
    recurring_invoice_id                        SERIAL NOT NULL PRIMARY KEY,
    recurring_invoice_code                      national character varying(12) NOT NULL,
    recurring_invoice_name                      national character varying(50) NOT NULL,
    item_id                                     integer NULL REFERENCES core.items(item_id),
    compound_item_id                            integer NULL REFERENCES core.compound_items(compound_item_id)
                                                CONSTRAINT recurring_invoices_item_chk
                                                CHECK
                                                (
                                                    (item_id IS NULL)::integer + (compound_item_id IS NULL)::integer = 1 --Only one of these two can be NOT NULL.
                                                ),
    recurring_frequency_id                      integer NOT NULL REFERENCES core.frequencies(frequency_id),
    recurring_amount                            money_strict NOT NULL 
                                                CONSTRAINT recurring_invoices_recurring_amount_chk 
                                                CHECK(recurring_amount > 0),
    auto_trigger_on_sales                       boolean NOT NULL,
    audit_user_id                               integer NULL REFERENCES office.users(user_id),
    audit_ts                                    TIMESTAMP WITH TIME ZONE NULL 
                                                DEFAULT(NOW())    
);

CREATE UNIQUE INDEX recurring_invoices_item_id_auto_trigger_on_sales_uix
ON core.recurring_invoices(item_id, auto_trigger_on_sales)
WHERE auto_trigger_on_sales = true;

CREATE UNIQUE INDEX recurring_invoices_compound_item_id_auto_trigger_on_sales_uix
ON core.recurring_invoices(compound_item_id, auto_trigger_on_sales)
WHERE auto_trigger_on_sales = true;


CREATE TABLE core.recurring_invoice_setup
(
    recurring_invoice_setup_id                  SERIAL NOT NULL PRIMARY KEY,
    recurring_invoice_id                        integer NOT NULL REFERENCES core.recurring_invoices(recurring_invoice_id),
    party_id                                    bigint NOT NULL REFERENCES core.parties(party_id),
    starts_from                                 date NOT NULL,
    ends_on                                     date NOT NULL
                                                CONSTRAINT recurring_invoice_setup_date_chk
                                                CHECK
                                                (
                                                    ends_on >= starts_from
                                                ),
    recurring_amount                            money_strict NOT NULL 
                                                CONSTRAINT recurring_invoice_setup_recurring_amount_chk
                                                CHECK(recurring_amount > 0),
    payment_term_id                             integer NOT NULL REFERENCES core.payment_terms(payment_term_id),
    audit_user_id                               integer NULL REFERENCES office.users(user_id),
    audit_ts                                    TIMESTAMP WITH TIME ZONE NULL 
                                                DEFAULT(NOW())    
    
);

/*******************************************************************
    PLEASE NOTE :

    THESE ARE THE MOST EFFECTIVE STOCK ITEM PRICES.
    THE PRICE IN THIS CATALOG IS ACTUALLY
    PICKED UP AT THE TIME OF PURCHASE AND SALES.

    A STOCK ITEM PRICE MAY BE DIFFERENT FOR DIFFERENT UNITS.
    FURTHER, A STOCK ITEM WOULD BE SOLD AT A HIGHER PRICE
    WHEN SOLD LOOSE THAN WHAT IT WOULD ACTUALLY COST IN A
    COMPOUND UNIT.

    EXAMPLE, ONE CARTOON (20 BOTTLES) OF BEER BOUGHT AS A UNIT
    WOULD COST 25% LESS FROM THE SAME STORE.

*******************************************************************/

CREATE TABLE core.item_selling_prices
(   
    item_selling_price_id                   BIGSERIAL PRIMARY KEY,
    item_id                                 integer NOT NULL REFERENCES core.items(item_id),
    unit_id                                 integer NOT NULL REFERENCES core.units(unit_id),
    party_type_id                           integer NULL REFERENCES core.party_types(party_type_id), 
    price_type_id                           integer NULL REFERENCES core.price_types(price_type_id),
    includes_tax                            boolean NOT NULL   
                                            CONSTRAINT item_selling_prices_includes_tax_df   
                                            DEFAULT('No'),
    price                                   money_strict NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);




CREATE TABLE core.item_cost_prices
(   
    item_cost_price_id                      BIGSERIAL PRIMARY KEY,
    item_id                                 integer NOT NULL REFERENCES core.items(item_id),
    entry_ts                                TIMESTAMP WITH TIME ZONE NOT NULL   
                                            DEFAULT(NOW()),
    unit_id                                 integer NOT NULL REFERENCES core.units(unit_id),
    party_id                                bigint NULL REFERENCES core.parties(party_id),
    lead_time_in_days                       integer NOT NULL   
                                            DEFAULT(0),
    includes_tax                            boolean NOT NULL   
                                            CONSTRAINT item_cost_prices_includes_tax_df   
                                            DEFAULT('No'),
    price                                   money_strict NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);



CREATE TABLE office.store_types
(
    store_type_id                           SERIAL PRIMARY KEY,
    store_type_code                         national character varying(12) NOT NULL,
    store_type_name                         national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX store_types_code_uix
ON office.store_types(UPPER(store_type_code));


CREATE UNIQUE INDEX store_types_name_uix
ON office.store_types(UPPER(store_type_name));




CREATE TABLE office.cash_repositories
(
    cash_repository_id                      SERIAL PRIMARY KEY,
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    cash_repository_code                    national character varying(12) NOT NULL,
    cash_repository_name                    national character varying(50) NOT NULL,
    parent_cash_repository_id               integer NULL REFERENCES office.cash_repositories(cash_repository_id),
    description                             national character varying(100) NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);


CREATE UNIQUE INDEX cash_repositories_cash_repository_code_uix
ON office.cash_repositories(office_id, UPPER(cash_repository_code));

CREATE UNIQUE INDEX cash_repositories_cash_repository_name_uix
ON office.cash_repositories(office_id, UPPER(cash_repository_name));



CREATE TABLE office.stores
(
    store_id                                SERIAL PRIMARY KEY,
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    store_code                              national character varying(12) NOT NULL,
    store_name                              national character varying(50) NOT NULL,
    address                                 national character varying(50) NULL,
    store_type_id                           integer NOT NULL REFERENCES office.store_types(store_type_id),
    allow_sales                             boolean NOT NULL   
                                            DEFAULT(true),
    sales_tax_id                            integer NOT NULL REFERENCES core.sales_taxes(sales_tax_id),
    default_cash_account_id                 bigint NOT NULL REFERENCES core.accounts(account_id),
    default_cash_repository_id              integer NOT NULL REFERENCES office.cash_repositories(cash_repository_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);


ALTER TABLE core.sales_tax_exempts
ADD FOREIGN KEY(store_id) REFERENCES office.stores(store_id);

CREATE UNIQUE INDEX stores_store_code_uix
ON office.stores(office_id, UPPER(store_code));

CREATE UNIQUE INDEX stores_store_name_uix
ON office.stores(office_id, UPPER(store_name));


 
CREATE TABLE office.counters
(
    counter_id                              SERIAL PRIMARY KEY,
    store_id                                integer NOT NULL REFERENCES office.stores(store_id),
    cash_repository_id                      integer NOT NULL REFERENCES office.cash_repositories(cash_repository_id),
    counter_code                            national character varying(12) NOT NULL,
    counter_name                            national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);


CREATE UNIQUE INDEX counters_counter_code_uix
ON office.counters(UPPER(counter_code));

CREATE UNIQUE INDEX counters_counter_name_uix
ON office.counters(UPPER(counter_name));


CREATE TABLE office.cost_centers
(
    cost_center_id                          SERIAL PRIMARY KEY,
    cost_center_code                        national character varying(24) NOT NULL,
    cost_center_name                        national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX cost_centers_cost_center_code_uix
ON office.cost_centers(UPPER(cost_center_code));

CREATE UNIQUE INDEX cost_centers_cost_center_name_uix
ON office.cost_centers(UPPER(cost_center_name));


CREATE TABLE office.cashiers
(
    cashier_id                              BIGSERIAL PRIMARY KEY,
    counter_id                              integer NOT NULL REFERENCES office.counters(counter_id),
    user_id                                 integer NOT NULL REFERENCES office.users(user_id),
    assigned_by_user_id                     integer NOT NULL REFERENCES office.users(user_id),
    transaction_date                        date NOT NULL,
    closed                                  boolean NOT NULL
);

CREATE UNIQUE INDEX Cashiers_user_id_TDate_uix
ON office.cashiers(user_id ASC, transaction_date DESC);


/*******************************************************************
    STORE POLICY DEFINES THE RIGHT OF USERS TO ACCESS A STORE.
    AN ADMINISTRATOR CAN ACCESS ALL THE stores, BY DEFAULT.
*******************************************************************/

CREATE TABLE policy.store_policies
(
    store_policy_id                         BIGSERIAL PRIMARY KEY,
    written_by_user_id                      integer NOT NULL REFERENCES office.users(user_id),
    status                                  boolean NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE TABLE policy.store_policy_details
(
    store_policy_detail_id                  BIGSERIAL PRIMARY KEY,
    store_policy_id                         bigint NOT NULL REFERENCES policy.store_policies(store_policy_id),
    user_id                                 integer NOT NULL REFERENCES office.users(user_id),
    store_id                                integer NOT NULL REFERENCES office.stores(store_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);


CREATE TABLE transactions.transaction_master
(
    transaction_master_id                   BIGSERIAL PRIMARY KEY,
    transaction_counter                     integer NOT NULL, --Sequence of transactions of a date
    transaction_code                        national character varying(50) NOT NULL,
    book                                    national character varying(50) NOT NULL, --Transaction book. Ex. Sales, Purchase, Journal
    value_date                              date NOT NULL,
    transaction_ts                          TIMESTAMP WITH TIME ZONE NOT NULL   
                                            DEFAULT(NOW()),
    login_id                                bigint NOT NULL REFERENCES audit.logins(login_id),
    user_id                                 integer NOT NULL REFERENCES office.users(user_id),
    sys_user_id                             integer NULL REFERENCES office.users(user_id),
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    cost_center_id                          integer NULL REFERENCES office.cost_centers(cost_center_id),
    reference_number                        national character varying(24) NULL,
    statement_reference                     text NULL,
    last_verified_on                        TIMESTAMP WITH TIME ZONE NULL, 
    verified_by_user_id                     integer NULL REFERENCES office.users(user_id),
    verification_status_id                  smallint NOT NULL REFERENCES core.verification_statuses(verification_status_id)   
                                            DEFAULT(0/*Awaiting verification*/),
    verification_reason                     national character varying(128) NOT NULL   
                                            CONSTRAINT transaction_master_verification_reason_df   
                                            DEFAULT(''),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL                                               
                                            DEFAULT(NOW()),
                                            CONSTRAINT transaction_master_login_id_sys_user_id_chk
                                                CHECK
                                                (
                                                    (
                                                        login_id IS NULL AND sys_user_id IS NOT NULL
                                                    )

                                                    OR

                                                    (
                                                        login_id IS NOT NULL AND sys_user_id IS NULL
                                                    )
                                                )
);

CREATE UNIQUE INDEX transaction_master_transaction_code_uix
ON transactions.transaction_master(UPPER(transaction_code));



CREATE TABLE transactions.transaction_details
(
    transaction_detail_id                   BIGSERIAL PRIMARY KEY,
    transaction_master_id                   bigint NOT NULL REFERENCES transactions.transaction_master(transaction_master_id),
    value_date                              date NOT NULL,
    tran_type                               transaction_type NOT NULL,
    account_id                              bigint NOT NULL REFERENCES core.accounts(account_id),
    statement_reference                     text NULL,
    cash_repository_id                      integer NULL REFERENCES office.cash_repositories(cash_repository_id),
    currency_code                           national character varying(12) NULL REFERENCES core.currencies(currency_code),
    amount_in_currency                      money_strict NOT NULL,
    local_currency_code                     national character varying(12) NULL REFERENCES core.currencies(currency_code),
    er                                      decimal_strict NOT NULL,
    amount_in_local_currency                money_strict NOT NULL,  
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE TABLE transactions.customer_receipts
(
    receipt_id                              BIGSERIAL PRIMARY KEY,
    transaction_master_id                   bigint NOT NULL REFERENCES transactions.transaction_master(transaction_master_id),
    party_id                                bigint NOT NULL REFERENCES core.parties(party_id),
    currency_code                           national character varying(12) NOT NULL REFERENCES core.currencies(currency_code),
    amount                                  money_strict NOT NULL,
    er_debit                                decimal_strict NOT NULL,
    er_credit                               decimal_strict NOT NULL,
    cash_repository_id                      integer NULL REFERENCES office.cash_repositories(cash_repository_id),
    posted_date                             date NULL,
    bank_account_id                         bigint NULL REFERENCES core.bank_accounts(account_id),
    bank_instrument_code                    national character varying(128) NULL   
                                            CONSTRAINT customer_receipt_bank_instrument_code_df   
                                            DEFAULT(''),
    bank_tran_code                          national character varying(128) NULL   
                                            CONSTRAINT customer_receipt_bank_tran_code_df   
                                            DEFAULT('')
);

CREATE INDEX customer_receipts_transaction_master_id_inx
ON transactions.customer_receipts(transaction_master_id);

CREATE INDEX customer_receipts_party_id_inx
ON transactions.customer_receipts(party_id);

CREATE INDEX customer_receipts_currency_code_inx
ON transactions.customer_receipts(currency_code);

CREATE INDEX customer_receipts_cash_repository_id_inx
ON transactions.customer_receipts(cash_repository_id);

CREATE INDEX customer_receipts_posted_date_inx
ON transactions.customer_receipts(posted_date);

CREATE INDEX customer_receipts_bank_account_id_inx
ON transactions.customer_receipts(bank_account_id);


CREATE TABLE transactions.stock_master
(
    stock_master_id                         BIGSERIAL PRIMARY KEY,
    transaction_master_id                   bigint NOT NULL REFERENCES transactions.transaction_master(transaction_master_id),
    value_date                              date NOT NULL,
    party_id                                bigint NULL REFERENCES core.parties(party_id),
    salesperson_id                          integer NULL REFERENCES core.salespersons(salesperson_id),
    price_type_id                           integer NULL REFERENCES core.price_types(price_type_id),
    is_credit                               boolean NOT NULL   
                                            CONSTRAINT stock_master_is_credit_df   
                                            DEFAULT(false),
    payment_term_id                         integer NULL REFERENCES core.payment_terms(payment_term_id),
    shipper_id                              integer NULL REFERENCES core.shippers(shipper_id),
    shipping_address_id                     bigint NULL REFERENCES core.shipping_addresses(shipping_address_id),
    shipping_charge                         money_strict2 NOT NULL   
                                            CONSTRAINT stock_master_shipping_charge_df   
                                            DEFAULT(0),
    store_id                                integer NULL REFERENCES office.stores(store_id),
    non_taxable                             boolean NOT NULL DEFAULT(false),
    cash_repository_id                      integer NULL REFERENCES office.cash_repositories(cash_repository_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX stock_master_transaction_master_id_uix
ON transactions.stock_master(transaction_master_id);


CREATE TABLE transactions.stock_details
(
    stock_detail_id                         BIGSERIAL PRIMARY KEY,
    value_date                              date NOT NULL,
    stock_master_id                         bigint NOT NULL REFERENCES transactions.stock_master(stock_master_id),
    tran_type                               transaction_type NOT NULL,
    store_id                                integer NULL REFERENCES office.stores(store_id),
    item_id                                 integer NOT NULL REFERENCES core.items(item_id),
    quantity                                integer NOT NULL,
    unit_id                                 integer NOT NULL REFERENCES core.units(unit_id),
    base_quantity                           decimal NOT NULL,
    base_unit_id                            integer NOT NULL REFERENCES core.units(unit_id),
    price                                   money_strict NOT NULL,
    cost_of_goods_sold                      money_strict2 NOT NULL DEFAULT(0),
    discount                                money_strict2 NOT NULL   
                                            CONSTRAINT stock_details_discount_df   
                                            DEFAULT(0),
    shipping_charge                         money_strict2 NOT NULL   
                                            CONSTRAINT stock_master_shipping_charge_df   
                                            DEFAULT(0),
    sales_tax_id                            integer NULL REFERENCES core.sales_taxes(sales_tax_id),
    tax                                     money_strict2 NOT NULL   
                                            CONSTRAINT stock_details_tax_df   
                                            DEFAULT(0)
                                            CONSTRAINT stock_details_tax_chk
                                            CHECK(CASE WHEN tax > 0 THEN sales_tax_id IS NOT NULL END),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE TABLE transactions.stock_tax_details
(
    stock_detail_id                         bigint NOT NULL REFERENCES transactions.stock_details(stock_detail_id),
    sales_tax_detail_id                     integer NOT NULL REFERENCES core.sales_tax_details(sales_tax_detail_id),
    state_sales_tax_id                      integer NULL REFERENCES core.state_sales_taxes(state_sales_tax_id),
    county_sales_tax_id                     integer NULL REFERENCES core.county_sales_taxes(county_sales_tax_id),
    principal                               money_strict NOT NULL,
    rate                                    decimal_strict NOT NULL,
    tax                                     money_strict NOT NULL
);


CREATE TABLE transactions.stock_return
(
    sales_return_id                         BIGSERIAL PRIMARY KEY, 
    transaction_master_id                   bigint NOT NULL REFERENCES transactions.transaction_master(transaction_master_id),
    return_transaction_master_id            bigint NOT NULL REFERENCES transactions.transaction_master(transaction_master_id)
);

CREATE TABLE transactions.non_gl_stock_master
(
    non_gl_stock_master_id                  BIGSERIAL PRIMARY KEY,
    value_date                              date NOT NULL,
    book                                    national character varying(48) NOT NULL,
    party_id                                bigint NULL REFERENCES core.parties(party_id),
    price_type_id                           integer NULL REFERENCES core.price_types(price_type_id),
    transaction_ts                          TIMESTAMP WITH TIME ZONE NOT NULL   
                                            DEFAULT(NOW()),
    login_id                                bigint NOT NULL REFERENCES audit.logins(login_id),
    user_id                                 integer NOT NULL REFERENCES office.users(user_id),
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    reference_number                        national character varying(24) NULL,
    statement_reference                     text NULL,
    non_taxable                             boolean NOT NULL DEFAULT(false),
    salesperson_id                          integer NULL REFERENCES core.salespersons(salesperson_id),
    shipper_id                              integer NULL REFERENCES core.shippers(shipper_id),
    shipping_address_id                     bigint NULL REFERENCES core.shipping_addresses(shipping_address_id),
    shipping_charge                         money_strict2 NOT NULL   
                                            CONSTRAINT stock_master_shipping_charge_df   
                                            DEFAULT(0),
    store_id                                integer NULL REFERENCES office.stores(store_id),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);


CREATE TABLE transactions.non_gl_stock_details
(
    non_gl_stock_detail_id                  BIGSERIAL PRIMARY KEY,
    non_gl_stock_master_id                  bigint NOT NULL REFERENCES transactions.non_gl_stock_master(non_gl_stock_master_id),
    value_date                              date NOT NULL,
    item_id                                 integer NOT NULL REFERENCES core.items(item_id),
    quantity                                integer NOT NULL,
    unit_id                                 integer NOT NULL REFERENCES core.units(unit_id),
    base_quantity                           decimal NOT NULL,
    base_unit_id                            integer NOT NULL REFERENCES core.units(unit_id),
    price                                   money_strict NOT NULL,
    discount                                money_strict2 NOT NULL   
                                            CONSTRAINT non_gl_stock_details_discount_df   
                                            DEFAULT(0),
    shipping_charge                         money_strict2 NOT NULL   
                                            CONSTRAINT stock_master_shipping_charge_df   
                                            DEFAULT(0),
    sales_tax_id                            integer NULL REFERENCES core.sales_taxes(sales_tax_id),
    tax                                     money_strict2 NOT NULL   
                                            CONSTRAINT stock_details_tax_df   
                                            DEFAULT(0)
                                            CONSTRAINT stock_details_tax_chk
                                            CHECK(CASE WHEN tax > 0 THEN sales_tax_id IS NOT NULL END),
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);


CREATE TABLE transactions.non_gl_stock_tax_details
(
    non_gl_stock_detail_id                  bigint NOT NULL REFERENCES transactions.non_gl_stock_details(non_gl_stock_detail_id),
    sales_tax_detail_id                     integer NOT NULL REFERENCES core.sales_tax_details(sales_tax_detail_id),
    state_sales_tax_id                      integer NULL REFERENCES core.state_sales_taxes(state_sales_tax_id),
    county_sales_tax_id                     integer NULL REFERENCES core.county_sales_taxes(county_sales_tax_id),
    principal                               money_strict NOT NULL,
    rate                                    decimal_strict NOT NULL,
    tax                                     money_strict NOT NULL
);



--This table stores information of quotations
--which were upgraded to order(s).
CREATE TABLE transactions.non_gl_stock_master_relations
(
    non_gl_stock_master_relation_id         BIGSERIAL PRIMARY KEY, 
    order_non_gl_stock_master_id            bigint NOT NULL REFERENCES transactions.non_gl_stock_master(non_gl_stock_master_id),
    quotation_non_gl_stock_master_id        bigint NOT NULL REFERENCES transactions.non_gl_stock_master(non_gl_stock_master_id)
);


--This table stores information of Non GL Stock Transactions such as orders and quotations
--which were upgraded to deliveries or invoices.
CREATE TABLE transactions.stock_master_non_gl_relations
(
    stock_master_non_gl_relation_id         BIGSERIAL PRIMARY KEY, 
    stock_master_id                         bigint NOT NULL REFERENCES transactions.stock_master(stock_master_id),
    non_gl_stock_master_id                  bigint NOT NULL REFERENCES transactions.non_gl_stock_master(non_gl_stock_master_id)
);

CREATE TABLE transactions.routines
(
    routine_id                              SERIAL NOT NULL PRIMARY KEY,
    "order"                                 integer NOT NULL,
    routine_code                            national character varying(12) NOT NULL,
    routine_name                            regproc NOT NULL UNIQUE,
    status                                  boolean NOT NULL CONSTRAINT routines_status_df DEFAULT(true)
);

CREATE UNIQUE INDEX routines_routine_code_uix
ON transactions.routines(LOWER(routine_code));

CREATE TABLE transactions.day_operation
(
    day_id                                  BIGSERIAL NOT NULL PRIMARY KEY,
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    value_date                              date NOT NULL,
    started_on                              TIMESTAMP WITH TIME ZONE NOT NULL,
    started_by                              integer NOT NULL REFERENCES office.users(user_id),    
    completed_on                            TIMESTAMP WITH TIME ZONE NULL,
    completed_by                            integer NULL REFERENCES office.users(user_id),
    completed                               boolean NOT NULL 
                                            CONSTRAINT day_operation_completed_df DEFAULT(false)
                                            CONSTRAINT day_operation_completed_chk 
                                            CHECK
                                            (
                                                (completed OR completed_on IS NOT NULL)
                                                OR
                                                (NOT completed OR completed_on IS NULL)
                                            )
);

CREATE UNIQUE INDEX day_operation_value_date_uix
ON transactions.day_operation(value_date);

CREATE INDEX day_operation_completed_on_inx
ON transactions.day_operation(completed_on);

CREATE TABLE transactions.day_operation_routines
(
    day_operation_routine_id                BIGSERIAL NOT NULL PRIMARY KEY,
    day_id                                  bigint NOT NULL REFERENCES transactions.day_operation(day_id),
    routine_id                              integer NOT NULL REFERENCES transactions.routines(routine_id),
    started_on                              TIMESTAMP WITH TIME ZONE NOT NULL,
    completed_on                            TIMESTAMP WITH TIME ZONE NULL
);

CREATE INDEX day_operation_routines_started_on_inx
ON transactions.day_operation_routines(started_on);

CREATE INDEX day_operation_routines_completed_on_inx
ON transactions.day_operation_routines(completed_on);

CREATE TABLE crm.lead_sources
(
    lead_source_id                          SERIAL PRIMARY KEY,
    lead_source_code                        national character varying(12) NOT NULL,
    lead_source_name                        national character varying(128) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX lead_sources_lead_source_code_uix
ON crm.lead_sources(UPPER(lead_source_code));


CREATE UNIQUE INDEX lead_sources_lead_source_name_uix
ON crm.lead_sources(UPPER(lead_source_name));



CREATE TABLE crm.lead_statuses
(
    lead_status_id                          SERIAL PRIMARY KEY,
    lead_status_code                        national character varying(12) NOT NULL,
    lead_status_name                        national character varying(128) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX lead_statuses_lead_status_code_uix
ON crm.lead_statuses(UPPER(lead_status_code));


CREATE UNIQUE INDEX lead_statuses_lead_status_name_uix
ON crm.lead_statuses(UPPER(lead_status_name));



CREATE TABLE crm.opportunity_stages
(
    opportunity_stage_id                    SERIAL  PRIMARY KEY,
    opportunity_stage_code                  national character varying(12) NOT NULL,
    opportunity_stage_name                  national character varying(50) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);


CREATE UNIQUE INDEX opportunity_stages_opportunity_stage_code_uix
ON crm.opportunity_stages(UPPER(opportunity_stage_code));

CREATE UNIQUE INDEX opportunity_stages_opportunity_stage_name_uix
ON crm.opportunity_stages(UPPER(opportunity_stage_name));




CREATE TABLE office.work_centers
(
    work_center_id                          SERIAL PRIMARY KEY,
    office_id                               integer NOT NULL REFERENCES office.offices(office_id),
    work_center_code                        national character varying(12) NOT NULL,
    work_center_name                        national character varying(128) NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);

CREATE UNIQUE INDEX work_centers_work_center_code_uix
ON office.work_centers(UPPER(work_center_code));

CREATE UNIQUE INDEX work_centers_work_center_name_uix
ON office.work_centers(UPPER(work_center_name));


CREATE TABLE policy.voucher_verification_policy
(
    policy_id                               SERIAL NOT NULL PRIMARY KEY,
    user_id                                 integer REFERENCES office.users(user_id),
    can_verify_sales_transactions           boolean NOT NULL   
                                            CONSTRAINT voucher_verification_policy_verify_sales_df 
                                            DEFAULT(false),
    sales_verification_limit                money_strict2 NOT NULL   
                                            CONSTRAINT voucher_verification_policy_sales_verification_limit_df 
                                            DEFAULT(0),
    can_verify_purchase_transactions        boolean NOT NULL   
                                            CONSTRAINT voucher_verification_policy_verify_purchase_df 
                                            DEFAULT(false),
    purchase_verification_limit             money_strict2 NOT NULL   
                                            CONSTRAINT voucher_verification_policy_purchase_verification_limit_df 
                                            DEFAULT(0),
    can_verify_gl_transactions              boolean NOT NULL   
                                            CONSTRAINT voucher_verification_policy_verify_gl_df 
                                            DEFAULT(false),
    gl_verification_limit                   money_strict2 NOT NULL   
                                            CONSTRAINT voucher_verification_policy_gl_verification_limit_df 
                                            DEFAULT(0),
    can_self_verify                         boolean NOT NULL   
                                            CONSTRAINT voucher_verification_policy_verify_self_df 
                                            DEFAULT(false),
    self_verification_limit                 money_strict2 NOT NULL   
                                            CONSTRAINT voucher_verification_policy_self_verification_limit_df 
                                            DEFAULT(0),
    effective_from                          date NOT NULL,
    ends_on                                 date NOT NULL,
    is_active                               boolean NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())
);


CREATE TABLE policy.auto_verification_policy
(
    user_id                                 integer PRIMARY KEY REFERENCES office.users(user_id),
    verify_sales_transactions               boolean NOT NULL   
                                            CONSTRAINT auto_verification_policy_verify_sales_df   
                                            DEFAULT(false),
    sales_verification_limit                money_strict2 NOT NULL   
                                            CONSTRAINT auto_verification_policy_sales_verification_limit_df   
                                            DEFAULT(0),
    verify_purchase_transactions            boolean NOT NULL   
                                            CONSTRAINT auto_verification_policy_verify_purchase_df   
                                            DEFAULT(false),
    purchase_verification_limit             money_strict2 NOT NULL   
                                            CONSTRAINT auto_verification_policy_purchase_verification_limit_df   
                                            DEFAULT(0),
    verify_gl_transactions                  boolean NOT NULL   
                                            CONSTRAINT auto_verification_policy_verify_gl_df   
                                            DEFAULT(false),
    gl_verification_limit                   money_strict2 NOT NULL   
                                            CONSTRAINT auto_verification_policy_gl_verification_limit_df   
                                            DEFAULT(0),
    effective_from                          date NOT NULL,
    ends_on                                 date NOT NULL,
    is_active                               boolean NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())
);


CREATE TABLE core.config
(
    config_id                               integer PRIMARY KEY,
    config_name                             national character varying(50) NOT NULL UNIQUE    
);

CREATE TABLE office.configuration
(
    configuration_id                        SERIAL PRIMARY KEY,
    config_id                               integer REFERENCES core.config(config_id),
    office_id                               integer NOT NULL,
    value                                   text NOT NULL,
    configuration_details                   text NOT NULL,
    audit_user_id                           integer NULL REFERENCES office.users(user_id),
    audit_ts                                TIMESTAMP WITH TIME ZONE NULL   
                                            DEFAULT(NOW())    
);

CREATE TABLE core.widgets
(
    widget_id           SERIAL NOT NULL PRIMARY KEY,
    widget_name         text,
    widget_source       text NOT NULL,
    row_number          integer NOT NULL,
    column_number       integer NOT NULL
);

CREATE UNIQUE INDEX widgets_widget_name_uix
ON core.widgets(UPPER(widget_name));

CREATE UNIQUE INDEX widgets_widget_source_uix
ON core.widgets(UPPER(widget_source));



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/01.types-domains-tables-and-constraints/types.sql --<--<--
DROP TYPE IF EXISTS transactions.stock_detail_type CASCADE;
CREATE TYPE transactions.stock_detail_type AS
(
    store_id            integer,
    item_code           national character varying(12),
    quantity            integer_strict,
    unit_name           national character varying(50),
    price               money_strict,
    discount            money_strict2,
    shipping_charge     money_strict2,
    tax_form            national character varying(24),
    tax                 money_strict2
);


DROP TYPE IF EXISTS core.attachment_type CASCADE;
CREATE TYPE core.attachment_type AS
(
    comment                 national character varying(96),
    file_path               text,
    original_file_name      text,
    file_extension          text
);

DROP TYPE IF EXISTS transactions.purchase_reorder_type CASCADE;
CREATE TYPE transactions.purchase_reorder_type
AS
(
    item_id                 integer,
    supplier_code           national character varying(12),
    unit_id                 integer,
    price                   decimal_strict,
    tax_code                national character varying(24),
    order_quantity          integer_strict
);


DROP TYPE IF EXISTS transactions.stock_adjustment_type CASCADE;
CREATE TYPE transactions.stock_adjustment_type AS
(
    tran_type       transaction_type,
    store_name      national character varying(50),
    item_code       national character varying(12),
    unit_name       national character varying(50),
    quantity        integer_strict
);

DROP TYPE IF EXISTS transactions.opening_stock_type CASCADE;
CREATE TYPE transactions.opening_stock_type AS
(
    store_name      national character varying(50),
    item_code       national character varying(12),
    quantity        integer_strict,
    unit_name       national character varying(50),
    amount          money_strict
);

DROP TYPE IF EXISTS core.period CASCADE;

CREATE TYPE core.period AS
(
    period_name                     text,
    date_from                       date,
    date_to                         date
);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/audit/audit.is_valid_login_id.sql --<--<--
DROP FUNCTION IF EXISTS audit.is_valid_login_id(bigint);

CREATE FUNCTION audit.is_valid_login_id(bigint)
RETURNS boolean
STABLE
AS
$$
BEGIN
    IF EXISTS(SELECT 1 FROM audit.logins WHERE login_id=$1) THEN
            RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.append_if_not_null.sql --<--<--
CREATE FUNCTION core.append_if_not_null(text, text)
RETURNS text
IMMUTABLE
AS
$$
BEGIN
	IF($1 IS NULL) THEN
	    RETURN '';
	END IF;

	RETURN $1 || $2;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.convert_unit.sql --<--<--
DROP FUNCTION IF EXISTS core.convert_unit(from_unit integer, to_unit integer);

CREATE FUNCTION core.convert_unit(from_unit integer, to_unit integer)
RETURNS decimal
STABLE
AS
$$
    DECLARE _factor decimal;
BEGIN
    IF(core.get_root_unit_id($1) != core.get_root_unit_id($2)) THEN
        RETURN 0;
    END IF;

    IF($1 = $2) THEN
        RETURN 1.00;
    END IF;
    
    IF(core.is_parent_unit($1, $2)) THEN
            WITH RECURSIVE unit_cte(unit_id, value) AS 
            (
                SELECT tn.compare_unit_id, tn.value
                FROM core.compound_units AS tn WHERE tn.base_unit_id = $1

                UNION ALL

                SELECT 
                c.compare_unit_id, c.value * p.value
                FROM unit_cte AS p, 
                core.compound_units AS c 
                WHERE base_unit_id = p.unit_id
            )
        SELECT 1.00/value INTO _factor
        FROM unit_cte
        WHERE unit_id=$2;
    ELSE
            WITH RECURSIVE unit_cte(unit_id, value) AS 
            (
             SELECT tn.compare_unit_id, tn.value
                FROM core.compound_units AS tn WHERE tn.base_unit_id = $2
            UNION ALL
             SELECT 
                c.compare_unit_id, c.value * p.value
                FROM unit_cte AS p, 
              core.compound_units AS c 
                WHERE base_unit_id = p.unit_id
            )

        SELECT value INTO _factor
        FROM unit_cte
        WHERE unit_id=$1;
    END IF;

    RETURN _factor;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.count_item_in_stock.sql --<--<--
DROP FUNCTION IF EXISTS core.count_item_in_stock(_item_id integer, _unit_id integer, _store_id integer);

CREATE FUNCTION core.count_item_in_stock(_item_id integer, _unit_id integer, _store_id integer)
RETURNS decimal
STABLE
AS
$$
    DECLARE _debit decimal;
    DECLARE _credit decimal;
    DECLARE _balance decimal;
BEGIN

    _debit := core.count_purchases($1, $2, $3);
    _credit := core.count_sales($1, $2, $3);

    _balance:= _debit - _credit;    
    return _balance;  
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.count_purchases.sql --<--<--
DROP FUNCTION IF EXISTS core.count_purchases(_item_id integer, _unit_id integer, _store_id integer);

CREATE FUNCTION core.count_purchases(_item_id integer, _unit_id integer, _store_id integer)
RETURNS decimal
STABLE
AS
$$
        DECLARE _base_unit_id integer;
        DECLARE _debit decimal;
        DECLARE _factor decimal;
BEGIN
    --Get the base item unit
    SELECT 
        core.get_root_unit_id(core.items.unit_id) 
    INTO _base_unit_id
    FROM core.items
    WHERE core.items.item_id=$1;

    SELECT
        COALESCE(SUM(base_quantity), 0)
    INTO _debit
    FROM transactions.stock_details
    INNER JOIN transactions.stock_master
    ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
    INNER JOIN transactions.transaction_master
    ON transactions.stock_master.transaction_master_id = transactions.transaction_master.transaction_master_id
    WHERE transactions.transaction_master.verification_status_id > 0
    AND transactions.stock_details.item_id=$1
    AND transactions.stock_details.store_id=$3
    AND transactions.stock_details.tran_type='Dr';

    _factor = core.convert_unit($2, _base_unit_id);    
    RETURN _debit * _factor;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.count_sales.sql --<--<--
DROP FUNCTION IF EXISTS core.count_sales(_item_id integer, _unit_id integer, _store_id integer);
CREATE FUNCTION core.count_sales(_item_id integer, _unit_id integer, _store_id integer)
RETURNS decimal
STABLE
AS
$$
        DECLARE _base_unit_id integer;
        DECLARE _credit decimal;
        DECLARE _factor decimal;
BEGIN
    --Get the base item unit
    SELECT 
        core.get_root_unit_id(core.items.unit_id) 
    INTO _base_unit_id
    FROM core.items
    WHERE core.items.item_id=$1;

    SELECT 
        COALESCE(SUM(base_quantity), 0)
    INTO _credit
    FROM transactions.stock_details
    INNER JOIN transactions.stock_master
    ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
    INNER JOIN transactions.transaction_master
    ON transactions.stock_master.transaction_master_id = transactions.transaction_master.transaction_master_id
    WHERE transactions.transaction_master.verification_status_id > 0
    AND transactions.stock_details.item_id=$1
    AND transactions.stock_details.store_id=$3
    AND transactions.stock_details.tran_type='Cr';

    _factor = core.convert_unit($2, _base_unit_id);    
    RETURN _credit * _factor;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.create_flag.sql --<--<--
CREATE FUNCTION core.create_flag
(
    user_id_            integer,
    flag_type_id_       integer,
    resource_           text,
    resource_key_       text,
    resource_id_        text
)
RETURNS void
VOLATILE
AS
$$
BEGIN
    IF NOT EXISTS(SELECT * FROM core.flags WHERE user_id=user_id_ AND resource=resource_ AND resource_key=resource_key_ AND resource_id=resource_id_) THEN
        INSERT INTO core.flags(user_id, flag_type_id, resource, resource_key, resource_id)
        SELECT user_id_, flag_type_id_, resource_, resource_key_, resource_id_;
    ELSE
        UPDATE core.flags
        SET
            flag_type_id=flag_type_id_
        WHERE 
            user_id=user_id_ 
        AND 
            resource=resource_ 
        AND 
            resource_key=resource_key_ 
        AND 
            resource_id=resource_id_;
    END IF;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_id_by_account_number.sql --<--<--
CREATE FUNCTION core.get_account_id_by_account_number(text)
RETURNS bigint
STABLE
AS
$$
BEGIN
    RETURN
		account_id
    FROM core.accounts
    WHERE account_number=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_id_by_parameter.sql --<--<--


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_id_by_party_code.sql --<--<--
CREATE FUNCTION core.get_account_id_by_party_code(party_code text)
RETURNS bigint
STABLE
AS
$$
BEGIN
    RETURN
		account_id
    FROM core.parties
    WHERE core.parties.party_code=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_id_by_party_id.sql --<--<--
CREATE FUNCTION core.get_account_id_by_party_id(party_id bigint)
RETURNS bigint
STABLE
AS
$$
BEGIN
    RETURN account_id
    FROM core.parties
    WHERE core.parties.party_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_id_by_party_type_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_account_id_by_party_type_id(_party_type_id integer);

CREATE FUNCTION core.get_account_id_by_party_type_id(_party_type_id integer)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN account_id
    FROM core.party_types
    WHERE party_type_id=$1;
END;
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_id_by_shipper_id.sql --<--<--
CREATE FUNCTION core.get_account_id_by_shipper_id(integer)
RETURNS bigint
STABLE
AS
$$
BEGIN
    RETURN
        core.shippers.account_id
    FROM
        core.shippers
    WHERE
        core.shippers.shipper_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_ids.sql --<--<--
DROP FUNCTION IF EXISTS core.get_account_ids(root_account_id bigint);

CREATE FUNCTION core.get_account_ids(root_account_id bigint)
RETURNS SETOF bigint
STABLE
AS
$$
BEGIN
    RETURN QUERY 
    (
        WITH RECURSIVE account_cte(account_id, path) AS (
         SELECT
            tn.account_id,  tn.account_id::TEXT AS path
            FROM core.accounts AS tn WHERE tn.account_id =$1
        UNION ALL
         SELECT
            c.account_id, (p.path || '->' || c.account_id::TEXT)
            FROM account_cte AS p, core.accounts AS c WHERE parent_account_id = p.account_id
        )

        SELECT account_id FROM account_cte
    );
END
$$LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_master_id_by_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_account_master_id_by_account_id(bigint) CASCADE;

CREATE FUNCTION core.get_account_master_id_by_account_id(bigint)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN core.accounts.account_master_id
    FROM core.accounts
    WHERE core.accounts.account_id= $1;
END
$$
LANGUAGE plpgsql;

ALTER TABLE core.bank_accounts
ADD CONSTRAINT bank_accounts_account_id_chk 
CHECK
(
    core.get_account_master_id_by_account_id(account_id) = '10102'
);




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_master_id_by_account_master_code.sql --<--<--
CREATE FUNCTION core.get_account_master_id_by_account_master_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN core.account_masters.account_master_id
    FROM core.account_masters
    WHERE core.account_masters.account_master_code = $1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_name.sql --<--<--
--Todo:Rename to core.get_account_name_by_account_id
CREATE FUNCTION core.get_account_name(bigint)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN account_name
    FROM core.accounts
    WHERE account_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_account_name_by_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_account_name_by_account_id(bigint);

CREATE FUNCTION core.get_account_name_by_account_id(bigint)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN account_name
    FROM core.accounts
    WHERE account_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_associated_units.sql --<--<--
DROP FUNCTION IF EXISTS core.get_associated_units(integer);

CREATE FUNCTION core.get_associated_units(integer)
RETURNS TABLE
(
    unit_id integer, 
    unit_code text, 
    unit_name text
)
VOLATILE
AS
$$
    DECLARE root_unit_id integer;
BEGIN
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_unit(unit_id integer) ON COMMIT DROP; 
    
    SELECT core.get_root_unit_id($1) INTO root_unit_id;
    
    INSERT INTO temp_unit(unit_id) 
    SELECT root_unit_id
    WHERE NOT EXISTS
    (
        SELECT * FROM temp_unit
        WHERE temp_unit.unit_id=root_unit_id
    );
    
    WITH RECURSIVE cte(unit_id)
    AS
    (
         SELECT 
            compare_unit_id
         FROM 
            core.compound_units
         WHERE 
            base_unit_id = root_unit_id

        UNION ALL

         SELECT
            units.compare_unit_id
         FROM 
            core.compound_units units
         INNER JOIN cte 
         ON cte.unit_id = units.base_unit_id
    )
    
    INSERT INTO temp_unit(unit_id)
    SELECT cte.unit_id FROM cte;
    
    DELETE FROM temp_unit
    WHERE temp_unit.unit_id IS NULL;
    
    RETURN QUERY 
    SELECT 
        core.units.unit_id,
        core.units.unit_code::text,
        core.units.unit_name::text
    FROM
        core.units
    WHERE
        core.units.unit_id 
    IN
    (
        SELECT temp_unit.unit_id FROM temp_unit
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_associated_units_from_item_code.sql --<--<--
CREATE FUNCTION core.get_associated_units_from_item_code(text)
RETURNS TABLE(unit_id integer, unit_code text, unit_name text)
VOLATILE
AS
$$
	DECLARE _unit_id integer;
BEGIN
    SELECT core.items.unit_id INTO _unit_id
    FROM core.items
    WHERE core.items.item_code=$1;

    RETURN QUERY
    SELECT ret.unit_id, ret.unit_code, ret.unit_name
    FROM core.get_associated_units(_unit_id) AS ret;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_associated_units_from_item_id.sql --<--<--
CREATE FUNCTION core.get_associated_units_from_item_id(integer)
RETURNS TABLE(unit_id integer, unit_code text, unit_name text)
VOLATILE
AS
$$
DECLARE _unit_id integer;
BEGIN
    SELECT core.items.unit_id INTO _unit_id
    FROM core.items
    WHERE core.items.item_id=$1;

    RETURN QUERY
    SELECT ret.unit_id, ret.unit_code, ret.unit_name
    FROM core.get_associated_units(_unit_id) AS ret;

END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_attachment_lookup_info.sql --<--<--
DROP FUNCTION IF EXISTS core.get_attachment_lookup_info(national character varying(50));

CREATE FUNCTION core.get_attachment_lookup_info(national character varying(50))
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN resource || resource_key
    FROM core.attachment_lookup
    WHERE book=$1;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_base_quantity_by_unit_name.sql --<--<--
CREATE FUNCTION core.get_base_quantity_by_unit_name(text, integer)
RETURNS decimal
STABLE
AS
$$
	DECLARE _unit_id integer;
	DECLARE _root_unit_id integer;
	DECLARE _factor decimal;
BEGIN
    _unit_id := core.get_unit_id_by_unit_name($1);
    _root_unit_id = core.get_root_unit_id(_unit_id);
    _factor = core.convert_unit(_unit_id, _root_unit_id);

    RETURN _factor * $2;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_base_unit_id_by_unit_name.sql --<--<--
CREATE FUNCTION core.get_base_unit_id_by_unit_name(text)
RETURNS integer
STABLE
AS
$$
DECLARE _unit_id integer;
BEGIN
    _unit_id := core.get_unit_id_by_unit_name($1);

    RETURN core.get_root_unit_id(_unit_id);
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_brand_code_by_brand_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_brand_code_by_brand_id(integer);

CREATE FUNCTION core.get_brand_code_by_brand_id(integer)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN brand_code
    FROM core.brands
    WHERE brand_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_brand_id_by_brand_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_brand_id_by_brand_code(text);

CREATE FUNCTION core.get_brand_id_by_brand_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
        RETURN brand_id
        FROM core.brands
        WHERE brand_code=$1;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM core.get_brand_id_by_brand_code('DEF');

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_brand_id_by_brand_name.sql --<--<--
DROP FUNCTION IF EXISTS core.get_brand_id_by_brand_name(text);

CREATE FUNCTION core.get_brand_id_by_brand_name(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN brand_id
    FROM core.brands
    WHERE brand_name=$1;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM core.get_brand_id_by_brand_name('DEF');

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_brand_name_by_brand_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_brand_name_by_brand_id(integer);

CREATE FUNCTION core.get_brand_name_by_brand_id(integer)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN brand_name
    FROM core.brands
    WHERE brand_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_cash_account_id.sql --<--<--
--TODO:DROP THIS FUNCTION
CREATE FUNCTION core.get_cash_account_id()
RETURNS bigint
STABLE
AS
$$
BEGIN
    RETURN account_id
    FROM core.accounts
    WHERE account_master_id = 10101
    ORDER BY account_id ASC
    LIMIT 1;
END
$$
LANGUAGE plpgsql;

COMMENT ON FUNCTION core.get_cash_account_id() IS 'This function is now obsolete, core.get_cash_account_id_by_store_id(_store_id integer) should be used instead.';

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_cash_account_id_by_store_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_cash_account_id_by_store_id(_store_id integer);

CREATE FUNCTION core.get_cash_account_id_by_store_id(_store_id integer)
RETURNS bigint
STABLE
AS
$$
BEGIN
    RETURN
        default_cash_account_id
    FROM
        office.stores
    WHERE
        office.stores.store_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_cash_flow_heading_id_by_cash_flow_heading_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_cash_flow_heading_id_by_cash_flow_heading_code(_cash_flow_heading_code national character varying(12));

CREATE FUNCTION core.get_cash_flow_heading_id_by_cash_flow_heading_code(_cash_flow_heading_code national character varying(12))
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN
        cash_flow_heading_id
    FROM
        core.cash_flow_headings
    WHERE
        cash_flow_heading_code = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_cash_repository_id_by_store_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_cash_repository_id_by_store_id(_store_id integer);

CREATE FUNCTION core.get_cash_repository_id_by_store_id(_store_id integer)
RETURNS bigint
STABLE
AS
$$
BEGIN
    RETURN
        default_cash_repository_id
    FROM
        office.stores
    WHERE
        office.stores.store_id=$1;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_cost_of_goods_sold_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_cost_of_goods_sold_account_id(_item_id integer);

CREATE FUNCTION core.get_cost_of_goods_sold_account_id(_item_id integer)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN
        cost_of_goods_sold_account_id
    FROM core.item_groups
    INNER JOIN core.items
    ON core.item_groups.item_group_id = core.items.item_group_id
    WHERE core.items.item_id = $1;    
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_country_id_by_country_code.sql --<--<--
CREATE FUNCTION core.get_country_id_by_country_code(national character varying(12))
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN country_id
    FROM core.countries
    WHERE country_code = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_country_name_by_country_id.sql --<--<--
CREATE FUNCTION core.get_country_name_by_country_id(integer)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN
    country_name
    FROM core.countries
    WHERE country_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_county_id_by_county_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_county_id_by_county_code(national character varying(12));

CREATE FUNCTION core.get_county_id_by_county_code(national character varying(12))
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN county_id
    FROM core.counties
    WHERE county_code = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_county_id_by_county_name.sql --<--<--
DROP FUNCTION IF EXISTS core.get_county_id_by_county_name(text);

CREATE FUNCTION core.get_county_id_by_county_name(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN county_id
    FROM core.counties
    WHERE county_name = $1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_county_sales_tax_rate.sql --<--<--
DROP FUNCTION IF EXISTS core.get_county_sales_tax_rate(_county_sales_tax_id integer);

CREATE FUNCTION core.get_county_sales_tax_rate(_county_sales_tax_id integer)
RETURNS decimal_strict2
STABLE
AS
$$
BEGIN
    RETURN rate
    FROM core.county_sales_taxes
    WHERE county_sales_tax_id=$1;
END
$$
LANGUAGE plpgsql;





-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_currency_code_by_office_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_currency_code_by_office_id(integer);

CREATE FUNCTION core.get_currency_code_by_office_id(office_id integer)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN office.offices.currency_code
    FROM office.offices
    WHERE office.offices.office_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_currency_code_by_party_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_currency_code_by_party_code(national character varying(12));

CREATE FUNCTION core.get_currency_code_by_party_code(_party_code national character varying(12))
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN core.accounts.currency_code
    FROM core.accounts
    INNER JOIN core.parties
    ON core.accounts.account_id = core.parties.account_id
    AND core.parties.party_code=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_currency_code_by_party_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_currency_code_by_party_id(bigint);

CREATE FUNCTION core.get_currency_code_by_party_id(party_id bigint)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN core.accounts.currency_code
    FROM core.accounts
    INNER JOIN core.parties
    ON core.accounts.account_id = core.parties.account_id
    AND core.parties.party_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_current_year.sql --<--<--
--TODO:Drop this function. We now have frequency setup.
DROP FUNCTION IF EXISTS core.get_current_year();
CREATE FUNCTION core.get_current_year()
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN(SELECT EXTRACT(year FROM current_date)::integer);
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_email_address_by_party_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_email_address_by_party_id(bigint);

CREATE FUNCTION core.get_email_address_by_party_id(bigint)
RETURNS TEXT
STABLE
AS
$$
BEGIN
    RETURN email 
    FROM core.parties
    WHERE party_id=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_entity_id_by_party_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_entity_id_by_party_id(_party_id bigint);

CREATE FUNCTION core.get_entity_id_by_party_id(_party_id bigint)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN entity_id
    FROM core.parties
    WHERE party_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_flag_background_color.sql --<--<--
CREATE FUNCTION core.get_flag_background_color(flag_type_id_ integer)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN background_color
    FROM core.flag_types
    WHERE core.flag_types.flag_type_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_flag_foreground_color.sql --<--<--
CREATE FUNCTION core.get_flag_foreground_color(flag_type_id_ integer)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN foreground_color
    FROM core.flag_types
    WHERE core.flag_types.flag_type_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_flag_type_id.sql --<--<--
CREATE FUNCTION core.get_flag_type_id
(
    user_id_        integer,
    resource_       text,
    resource_key_   text,
    resource_id_    text
)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN flag_type_id
    FROM core.flags
    WHERE user_id=$1
    AND resource=$2
    AND resource_key=$3
    AND resource_id=$4;
END
$$
LANGUAGE plpgsql;

-- CREATE FUNCTION core.get_flag_type_id
-- (
--     user_id_        integer,
--     resource_       text,
--     resource_id_    text
-- )
-- RETURNS integer
-- STABLE
-- AS
-- $$
-- BEGIN
--     RETURN core.get_flag_type_id($1, $2, $3::text);
-- END
-- $$
-- LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_frequency_code_by_frequency_id.sql --<--<--
CREATE FUNCTION core.get_frequency_code_by_frequency_id(integer)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN frequency_code
    FROM core.frequencies
    WHERE core.frequencies.frequency_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_frequency_setup_code_by_frequency_setup_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_frequency_setup_code_by_frequency_setup_id(_frequency_setup_id integer);

CREATE FUNCTION core.get_frequency_setup_code_by_frequency_setup_id(_frequency_setup_id integer)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN frequency_setup_code
    FROM core.frequency_setups
    WHERE frequency_setup_id = $1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_frequency_setup_end_date_frequency_setup_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_frequency_setup_end_date_frequency_setup_id(_frequency_setup_id integer);
CREATE FUNCTION core.get_frequency_setup_end_date_frequency_setup_id(_frequency_setup_id integer)
RETURNS date
AS
$$
BEGIN
    RETURN
        value_date
    FROM
        core.frequency_setups
    WHERE
        frequency_setup_id = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_frequency_setup_start_date_frequency_setup_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_frequency_setup_start_date_frequency_setup_id(_frequency_setup_id integer);
CREATE FUNCTION core.get_frequency_setup_start_date_frequency_setup_id(_frequency_setup_id integer)
RETURNS date
AS
$$
    DECLARE _start_date date;
BEGIN
    SELECT MAX(value_date) + 1 
    INTO _start_date
    FROM core.frequency_setups
    WHERE value_date < 
    (
        SELECT value_date
        FROM core.frequency_setups
        WHERE frequency_setup_id = $1
    );

    IF(_start_date IS NULL) THEN
        SELECT starts_from 
        INTO _start_date
        FROM core.fiscal_year;
    END IF;

    RETURN _start_date;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_industry_id_by_party_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_industry_id_by_party_id(_party_id bigint);

CREATE FUNCTION core.get_industry_id_by_party_id(_party_id bigint)
RETURNS integer
AS
$$
BEGIN
    RETURN industry_id
    FROM core.parties
    WHERE party_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_inventory_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_inventory_account_id(_item_id integer);

CREATE FUNCTION core.get_inventory_account_id(_item_id integer)
RETURNS integer
AS
$$
BEGIN
    RETURN
        inventory_account_id
    FROM core.item_groups
    INNER JOIN core.items
    ON core.item_groups.item_group_id = core.items.item_group_id
    WHERE core.items.item_id = $1;    
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_code_by_item_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_code_by_item_id(integer);

CREATE FUNCTION core.get_item_code_by_item_id(integer)
RETURNS text
AS
$$
BEGIN
        RETURN
                item_code
        FROM
                core.items
        WHERE item_id=$1;
END
$$
LANGUAGE plpgsql;

--SELECT core.get_item_code_by_item_id(1);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_cost_price.sql --<--<--
CREATE FUNCTION core.get_item_cost_price(item_id_ integer, unit_id_ integer, party_id_ bigint)
RETURNS money_strict2
AS
$$
    DECLARE _price money_strict2;
    DECLARE _unit_id integer;
    DECLARE _factor decimal;
    DECLARE _tax_rate decimal;
    DECLARE _includes_tax boolean;
    DECLARE _tax money_strict2;
BEGIN
    --Fist pick the catalog price which matches all these fields:
    --Item, Unit, and Supplier.
    --This is the most effective price.
    SELECT 
        item_cost_prices.price, 
        item_cost_prices.unit_id,
        item_cost_prices.includes_tax
    INTO 
        _price, 
        _unit_id,
        _includes_tax       
    FROM core.item_cost_prices
    WHERE item_cost_prices.item_id = $1
    AND item_cost_prices.unit_id = $2
    AND item_cost_prices.party_id =$3;

    IF(_unit_id IS NULL) THEN
        --We do not have a cost price of this item for the unit supplied.
        --Let's see if this item has a price for other units.
        SELECT 
            item_cost_prices.price, 
            item_cost_prices.unit_id,
            item_cost_prices.includes_tax
        INTO 
            _price, 
            _unit_id,
            _includes_tax
        FROM core.item_cost_prices
        WHERE item_cost_prices.item_id=$1
        AND item_cost_prices.party_id =$3;
    END IF;

    
    IF(_price IS NULL) THEN
        --This item does not have cost price defined in the catalog.
        --Therefore, getting the default cost price from the item definition.
        SELECT 
            cost_price, 
            unit_id,
            cost_price_includes_tax
        INTO 
            _price, 
            _unit_id,
            _includes_tax
        FROM core.items
        WHERE core.items.item_id = $1;
    END IF;

    IF(_includes_tax) THEN
        _tax_rate := core.get_item_tax_rate($1);
        _price := _price / ((100 + _tax_rate)/ 100);
    END IF;

    --Get the unitary conversion factor if the requested unit does not match with the price defition.
    _factor := core.convert_unit($2, _unit_id);

    RETURN _price * _factor;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_group_code_by_item_group_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_group_code_by_item_group_id(integer);

CREATE FUNCTION core.get_item_group_code_by_item_group_id(integer)
RETURNS text
AS
$$
BEGIN
        RETURN item_group_code
        FROM core.item_groups
        WHERE item_group_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_group_id_by_item_group_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_group_id_by_item_group_code(text);

CREATE FUNCTION core.get_item_group_id_by_item_group_code(text)
RETURNS integer
AS
$$
BEGIN
        RETURN item_group_id
        FROM core.item_groups
        WHERE item_group_code=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_group_id_by_item_group_name.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_group_id_by_item_group_name(text);

CREATE FUNCTION core.get_item_group_id_by_item_group_name(text)
RETURNS integer
AS
$$
BEGIN
        RETURN item_group_id
        FROM core.item_groups
        WHERE item_group_name=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_group_id_by_item_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_group_id_by_item_id(integer);

CREATE FUNCTION core.get_item_group_id_by_item_id(integer)
RETURNS integer
AS
$$
BEGIN
        RETURN item_group_id
        FROM core.items
        WHERE item_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_group_name_by_item_group_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_group_name_by_item_group_id(integer);

CREATE FUNCTION core.get_item_group_name_by_item_group_id(integer)
RETURNS text
AS
$$
BEGIN
        RETURN item_group_name
        FROM core.item_groups
        WHERE item_group_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_id_by_item_code.sql --<--<--
CREATE FUNCTION core.get_item_id_by_item_code(text)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT
            item_id
        FROM
            core.items
        WHERE 
            core.items.item_code=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_name_by_item_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_name_by_item_id(integer);

CREATE FUNCTION core.get_item_name_by_item_id(integer)
RETURNS text
AS
$$
BEGIN
        RETURN
                item_name
        FROM
                core.items
        WHERE item_id=$1;
END
$$
LANGUAGE plpgsql;

--SELECT core.get_item_name_by_item_id(1);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_tax_rate.sql --<--<--
CREATE FUNCTION core.get_item_tax_rate(_item_id integer)
RETURNS decimal
STABLE
AS
$$
BEGIN
    RETURN
        core.sales_taxes.rate
    FROM core.sales_taxes
    INNER JOIN core.items
    ON core.items.sales_tax_id = core.sales_taxes.sales_tax_id
    AND core.items.item_id = $1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_item_type_id_by_item_type_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_type_id_by_item_type_code(text);

CREATE FUNCTION core.get_item_type_id_by_item_type_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN item_type_id
    FROM core.item_types
    WHERE item_type_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_menu_id.sql --<--<--
CREATE FUNCTION core.get_menu_id(menu_code text)
RETURNS INTEGER
AS
$$
BEGIN
    RETURN
    (
        SELECT core.menus.menu_id
        FROM core.menus
        WHERE core.menus.menu_code=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_office_id_by_sales_tax_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_office_id_by_sales_tax_id(_sales_tax_id integer);

CREATE FUNCTION core.get_office_id_by_sales_tax_id(_sales_tax_id integer)
RETURNS integer
AS
$$
BEGIN
    RETURN office_id
    FROM core.sales_taxes
    WHERE core.sales_taxes.sales_tax_id=$1;
END
$$
LANGUAGE plpgsql;

ALTER TABLE office.stores
ADD CONSTRAINT stores_sales_tax_id_chk
CHECK(core.get_office_id_by_sales_tax_id(sales_tax_id) = office_id);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_party_code.sql --<--<--


/*******************************************************************
    GET UNIQUE EIGHT-TO-TEN DIGIT CUSTOMER CODE
    TO IDENTIFY A PARTY.
    BASIC FORMULA:
        1. FIRST TWO LETTERS OF FIRST NAME
        2. FIRST LETTER OF MIDDLE NAME (IF AVAILABLE)
        3. FIRST TWO LETTERS OF LAST NAME
        4. CUSTOMER NUMBER
*******************************************************************/

CREATE OR REPLACE FUNCTION core.get_party_code
(
    text, --First Name
    text, --Middle Name
    text  --Last Name
)
RETURNS text AS
$$
    DECLARE _party_code TEXT;
BEGIN
    SELECT INTO 
        _party_code 
            party_code
    FROM
        core.parties
    WHERE
        party_code LIKE 
            UPPER(left($1,2) ||
            CASE
                WHEN $2 IS NULL or $2 = '' 
                THEN left($3,3)
            ELSE 
                left($2,1) || left($3,2)
            END 
            || '%')
    ORDER BY party_code desc
    LIMIT 1;

    _party_code :=
                    UPPER
                    (
                        left($1,2)||
                        CASE
                            WHEN $2 IS NULL or $2 = '' 
                            THEN left($3,3)
                        ELSE 
                            left($2,1)||left($3,2)
                        END
                    ) 
                    || '-' ||
                    CASE
                        WHEN _party_code IS NULL 
                        THEN '0001'
                    ELSE 
                        to_char(CAST(right(_party_code,4) AS integer)+1,'FM0000')
                    END;
    RETURN _party_code;
END;
$$
LANGUAGE 'plpgsql';




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_party_id_by_party_code.sql --<--<--
CREATE FUNCTION core.get_party_id_by_party_code(text)
RETURNS bigint
AS
$$
BEGIN
    RETURN
    (
        SELECT
            party_id
        FROM
            core.parties
        WHERE 
            core.parties.party_code=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_party_type_id_by_party_code.sql --<--<--
CREATE FUNCTION core.get_party_type_id_by_party_code(text)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT
            party_type_id
        FROM
            core.parties
        WHERE 
            core.parties.party_code=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_party_type_id_by_party_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_party_type_id_by_party_id(_party_id bigint);

CREATE FUNCTION core.get_party_type_id_by_party_id(_party_id bigint)
RETURNS integer
AS
$$
BEGIN
    RETURN party_type_id
    FROM core.parties
    WHERE party_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_party_type_id_by_party_type_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_party_type_id_by_party_type_code(text);

CREATE FUNCTION core.get_party_type_id_by_party_type_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN party_type_id
    FROM core.party_types
    WHERE party_type_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_payment_term_id_by_payment_term_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_payment_term_id_by_payment_term_code(text);

CREATE FUNCTION core.get_payment_term_id_by_payment_term_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN payment_term_id
    FROM core.payment_terms
    WHERE payment_term_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_price_type_id_by_price_type_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_price_type_id_by_price_type_code(text);

CREATE FUNCTION core.get_price_type_id_by_price_type_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN price_type_id
    FROM core.price_types
    WHERE price_type_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_price_type_name_by_price_type_id.sql --<--<--
CREATE FUNCTION core.get_price_type_name_by_price_type_id(integer)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT price_type_name
        FROM core.price_types
        WHERE price_type_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_purchase_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_purchase_account_id(_item_id integer);

CREATE FUNCTION core.get_purchase_account_id(_item_id integer)
RETURNS integer
AS
$$
BEGIN
    RETURN
        purchase_account_id
    FROM core.item_groups
    INNER JOIN core.items
    ON core.item_groups.item_group_id = core.items.item_group_id
    WHERE core.items.item_id = $1;    
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_purchase_discount_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_purchase_discount_account_id(_item_id integer);

CREATE FUNCTION core.get_purchase_discount_account_id(_item_id integer)
RETURNS integer
AS
$$
BEGIN
    RETURN
        purchase_discount_account_id
    FROM core.item_groups
    INNER JOIN core.items
    ON core.item_groups.item_group_id = core.items.item_group_id
    WHERE core.items.item_id = $1;    
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_recurring_amount_by_recurring_invoice_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_recurring_amount_by_recurring_invoice_id(_recurring_invoice_id integer);

CREATE FUNCTION core.get_recurring_amount_by_recurring_invoice_id(_recurring_invoice_id integer)
RETURNS money_strict
AS
$$
BEGIN
    RETURN
        recurring_amount
    FROM
        core.recurring_invoices
    WHERE
        core.recurring_invoices.recurring_invoice_id=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_root_parent_menu_id.sql --<--<--
CREATE FUNCTION core.get_root_parent_menu_id(text)
RETURNS integer
AS
$$
    DECLARE retVal integer;
BEGIN
    WITH RECURSIVE find_parent(menu_id_group, parent, parent_menu_id, recentness) AS
    (
            SELECT menu_id, menu_id, parent_menu_id, 0
            FROM core.menus
            WHERE url=$1
            UNION ALL
            SELECT fp.menu_id_group, i.menu_id, i.parent_menu_id, fp.recentness + 1
            FROM core.menus i
            JOIN find_parent fp ON i.menu_id = fp.parent_menu_id
    )

        SELECT parent INTO retVal
        FROM find_parent q 
        JOIN
        (
                SELECT menu_id_group, MAX(recentness) AS answer
                FROM find_parent
                GROUP BY menu_id_group 
        ) AS ans ON q.menu_id_group = ans.menu_id_group AND q.recentness = ans.answer 
        ORDER BY q.menu_id_group;

    RETURN retVal;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_root_unit_id.sql --<--<--
CREATE FUNCTION core.get_root_unit_id(integer)
RETURNS integer
AS
$$
    DECLARE root_unit_id integer;
BEGIN
    SELECT base_unit_id INTO root_unit_id
    FROM core.compound_units
    WHERE compare_unit_id=$1;

    IF(root_unit_id IS NULL) THEN
        RETURN $1;
    ELSE
        RETURN core.get_root_unit_id(root_unit_id);
    END IF; 
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_sales_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_sales_account_id(_item_id integer);

CREATE FUNCTION core.get_sales_account_id(_item_id integer)
RETURNS integer
AS
$$
BEGIN
    RETURN
        sales_account_id
    FROM core.item_groups
    INNER JOIN core.items
    ON core.item_groups.item_group_id = core.items.item_group_id
    WHERE core.items.item_id = $1;    
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_sales_discount_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_sales_discount_account_id(_item_id integer);

CREATE FUNCTION core.get_sales_discount_account_id(_item_id integer)
RETURNS integer
AS
$$
BEGIN
    RETURN
        sales_discount_account_id
    FROM core.item_groups
    INNER JOIN core.items
    ON core.item_groups.item_group_id = core.items.item_group_id
    WHERE core.items.item_id = $1;    
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_sales_return_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_sales_return_account_id(_item_id integer);

CREATE FUNCTION core.get_sales_return_account_id(_item_id integer)
RETURNS integer
AS
$$
BEGIN
    RETURN
        sales_return_account_id
    FROM core.item_groups
    INNER JOIN core.items
    ON core.item_groups.item_group_id = core.items.item_group_id
    WHERE core.items.item_id = $1;    
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_sales_tax_code_by_sales_tax_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_sales_tax_code_by_sales_tax_id(_sales_tax_id integer);


CREATE FUNCTION core.get_sales_tax_code_by_sales_tax_id(_sales_tax_id integer)
RETURNS national character varying(24)
AS
$$
BEGIN
    RETURN
        sales_tax_code
    FROM
        core.sales_taxes
    WHERE
        sales_tax_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_sales_tax_id_by_sales_tax_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_sales_tax_id_by_sales_tax_code(_sales_tax_code national character varying(24));


CREATE FUNCTION core.get_sales_tax_id_by_sales_tax_code(_sales_tax_code national character varying(24))
RETURNS integer
AS
$$
BEGIN
    RETURN
        sales_tax_id
    FROM
        core.sales_taxes
    WHERE
        sales_tax_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_sales_tax_name_by_sales_tax_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_sales_tax_name_by_sales_tax_id(_sales_tax_id integer);


CREATE FUNCTION core.get_sales_tax_name_by_sales_tax_id(_sales_tax_id integer)
RETURNS national character varying(24)
AS
$$
BEGIN
    RETURN
        sales_tax_name
    FROM
        core.sales_taxes
    WHERE
        sales_tax_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_sales_team_id_by_sales_team_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_sales_team_id_by_sales_team_code(text);

CREATE FUNCTION core.get_sales_team_id_by_sales_team_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN sales_team_id
    FROM core.sales_teams
    WHERE sales_team_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_salesperson_id_by_salesperson_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_salesperson_id_by_salesperson_code(text);

CREATE FUNCTION core.get_salesperson_id_by_salesperson_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN salesperson_id
    FROM core.salespersons
    WHERE salesperson_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_salesperson_name_by_salesperson_id.sql --<--<--
CREATE FUNCTION core.get_salesperson_name_by_salesperson_id(integer)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT salesperson_name
        FROM core.salespersons
        WHERE salesperson_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_second_root_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_second_root_account_id(integer, integer);

CREATE FUNCTION core.get_second_root_account_id(_account_id bigint, _parent bigint default 0)
RETURNS integer
AS
$$
    DECLARE _parent_account_id bigint;
BEGIN
    SELECT 
        parent_account_id
        INTO _parent_account_id
    FROM core.accounts
    WHERE account_id=$1;

    IF(_parent_account_id IS NULL) THEN
        RETURN $2;
    ELSE
        RETURN core.get_second_root_account_id(_parent_account_id, $1);
    END IF; 
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_shipper_code.sql --<--<--

/*******************************************************************
    GET UNIQUE EIGHT-TO-TEN DIGIT shipper CODE
    TO IDENTIFY A shipper.
    BASIC FORMULA:
        1. FIRST TWO LETTERS OF FIRST NAME
        2. FIRST LETTER OF MIDDLE NAME (IF AVAILABLE)
        3. FIRST TWO LETTERS OF LAST NAME
        4. shipper NUMBER
*******************************************************************/

CREATE OR REPLACE FUNCTION core.get_shipper_code
(
    text --company name
)
RETURNS text AS
$$
    DECLARE __shipper_code TEXT;
BEGIN
    SELECT INTO 
        __shipper_code 
            shipper_code
    FROM
        core.shippers
    WHERE
        shipper_code LIKE 
            UPPER(left($1, 3) || '%')
    ORDER BY shipper_code desc
    LIMIT 1;

    __shipper_code :=
                    UPPER
                    (
                        left($1,3)
                    ) 
                    || '-' ||
                    CASE
                        WHEN __shipper_code IS NULL 
                        THEN '0001'
                    ELSE 
                        to_char(CAST(right(__shipper_code, 4) AS integer)+1,'FM0000')
                    END;
    RETURN __shipper_code;
END;
$$
LANGUAGE 'plpgsql';




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_shipper_id_by_shipper_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_shipper_id_by_shipper_code(text);

CREATE FUNCTION core.get_shipper_id_by_shipper_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN shipper_id
    FROM core.shippers
    WHERE shipper_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_shipper_name_by_shipper_id.sql --<--<--
CREATE FUNCTION core.get_shipper_name_by_shipper_id(integer)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT company_name
        FROM core.shippers
        WHERE shipper_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_shipping_address_by_shipping_address_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_shipping_address_by_shipping_address_id(bigint);

CREATE FUNCTION core.get_shipping_address_by_shipping_address_id(bigint)
RETURNS text
AS
$$
BEGIN
        IF($1 IS NULL OR $1 <=0) THEN
                RETURN '';
        END IF;


        RETURN
                core.append_if_not_null(po_box, '&lt;br /&gt;') || 
                core.append_if_not_null(address_line_1, '&lt;br /&gt;') || 
                core.append_if_not_null(address_line_2, '&lt;br /&gt;') || 
                core.append_if_not_null(street, '&lt;br /&gt;') ||
                city  || '&lt;br /&gt;' ||
                state  || '&lt;br /&gt;' ||
                country 
        FROM core.shipping_addresses
        WHERE shipping_address_id=$1;
        
END
$$
LANGUAGE plpgsql;

--SELECT core.get_shipping_address_by_shipping_address_id(1);



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_shipping_address_code_by_shipping_address_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_shipping_address_code_by_shipping_address_id(bigint);

CREATE FUNCTION core.get_shipping_address_code_by_shipping_address_id(bigint)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT
            shipping_address_code
        FROM
            core.shipping_addresses
        WHERE 
            core.shipping_addresses.shipping_address_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_shipping_address_id_by_shipping_address_code.sql --<--<--

CREATE FUNCTION core.get_shipping_address_id_by_shipping_address_code(text, bigint)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN
    (
        SELECT
            shipping_address_id
        FROM
            core.shipping_addresses
        WHERE 
            core.shipping_addresses.shipping_address_code=$1
        AND
            core.shipping_addresses.party_id=$2
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_state_id_by_shipping_address_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_state_id_by_shipping_address_code(text, bigint);

CREATE FUNCTION core.get_state_id_by_shipping_address_code(text, bigint)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT
            state_id
        FROM
            core.shipping_addresses
        WHERE 
            core.shipping_addresses.shipping_address_code=$1
        AND
            core.shipping_addresses.party_id=$2
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_state_id_by_state_code.sql --<--<--
CREATE FUNCTION core.get_state_id_by_state_code(national character varying(12))
RETURNS integer
AS
$$
BEGIN
    RETURN
        state_id
    FROM
        core.states
    WHERE
        state_code = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_state_id_by_state_name.sql --<--<--
DROP FUNCTION IF EXISTS core.get_state_id_by_state_name(text);

CREATE FUNCTION core.get_state_id_by_state_name(text)
RETURNS integer
AS
$$
BEGIN
    RETURN state_id
    FROM core.states
    WHERE state_name = $1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_state_name_by_state_id.sql --<--<--
CREATE FUNCTION core.get_state_name_by_state_id(integer)
RETURNS text
AS
$$
BEGIN
    RETURN
        state_name
    FROM
        core.states
    WHERE
        state_id = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_state_sales_tax_rate.sql --<--<--
DROP FUNCTION IF EXISTS core.get_state_sales_tax_rate(_state_sales_tax_id integer);

CREATE FUNCTION core.get_state_sales_tax_rate(_state_sales_tax_id integer)
RETURNS decimal_strict2
AS
$$
BEGIN
    RETURN
        rate
    FROM core.state_sales_taxes
    WHERE state_sales_tax_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_tax_master_id_by_tax_master_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_tax_master_id_by_tax_master_code(text);

CREATE FUNCTION core.get_tax_master_id_by_tax_master_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN tax_master_id
    FROM core.tax_master
    WHERE tax_master_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_unit_code_by_unit_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_unit_code_by_unit_id(integer);

CREATE FUNCTION core.get_unit_code_by_unit_id(integer)
RETURNS text
AS
$$
BEGIN
        RETURN
                unit_code
        FROM
                core.units
        WHERE unit_id=$1;
END
$$
LANGUAGE plpgsql;

--SELECT core.get_unit_code_by_unit_id(1);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_unit_id_by_unit_code.sql --<--<--
CREATE FUNCTION core.get_unit_id_by_unit_code(text)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT
            core.units.unit_id
        FROM
            core.units
        WHERE
            core.units.unit_code=$1
    );
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_unit_id_by_unit_name.sql --<--<--
CREATE FUNCTION core.get_unit_id_by_unit_name(text)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT
            core.units.unit_id
        FROM
            core.units
        WHERE
            core.units.unit_name=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_unit_name_by_unit_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_unit_name_by_unit_id(integer);

CREATE FUNCTION core.get_unit_name_by_unit_id(integer)
RETURNS text
AS
$$
BEGIN
        RETURN
                unit_name
        FROM
                core.units
        WHERE unit_id=$1;
END
$$
LANGUAGE plpgsql;

--SELECT core.get_unit_name_by_unit_id(1);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.get_verification_status_name_by_verification_status_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_verification_status_name_by_verification_status_id(integer);

CREATE FUNCTION core.get_verification_status_name_by_verification_status_id(integer)
RETURNS text
AS
$$
BEGIN
    RETURN
        verification_status_name
    FROM core.verification_statuses
    WHERE verification_status_id = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.has_child_accounts.sql --<--<--
CREATE FUNCTION core.has_child_accounts(bigint)
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS(SELECT 0 FROM core.accounts WHERE parent_account_id=$1 LIMIT 1) THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.is_leap_year.sql --<--<--
DROP FUNCTION IF EXISTS core.is_leap_year(integer);
CREATE FUNCTION core.is_leap_year(integer)
RETURNS boolean
AS
$$
BEGIN
    RETURN (SELECT date_part('day', (($1::text || '-02-01')::date + '1 month'::interval - '1 day'::interval)) = 29);
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


DROP FUNCTION IF EXISTS core.is_leap_year();
CREATE FUNCTION core.is_leap_year()
RETURNS boolean
AS
$$
BEGIN
    RETURN core.is_leap_year(core.get_current_year());
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.is_parent_unit.sql --<--<--
CREATE FUNCTION core.is_parent_unit(parent integer, child integer)
RETURNS boolean
AS
$$      
BEGIN
    IF $1!=$2 THEN
        IF EXISTS
        (
            WITH RECURSIVE unit_cte(unit_id) AS 
            (
             SELECT tn.compare_unit_id
                FROM core.compound_units AS tn WHERE tn.base_unit_id = $1
            UNION ALL
             SELECT
                c.compare_unit_id
                FROM unit_cte AS p, 
              core.compound_units AS c 
                WHERE base_unit_id = p.unit_id
            )

            SELECT * FROM unit_cte
            WHERE unit_id=$2
        ) THEN
            RETURN TRUE;
        END IF;
    END IF;
    RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.is_stock_item.sql --<--<--
DROP FUNCTION IF EXISTS core.is_stock_item(item_id integer);

CREATE FUNCTION core.is_stock_item(item_id integer)
RETURNS bool
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT 1 FROM core.items WHERE core.items.item_id=$1 AND maintain_stock=true
    ) THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS core.is_stock_item(item_code national character varying(12));

CREATE FUNCTION core.is_stock_item(item_code national character varying(12))
RETURNS bool
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT 1 FROM core.items WHERE core.items.item_code=$1 AND maintain_stock=true
    ) THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.is_supplier.sql --<--<--
CREATE FUNCTION core.is_supplier(bigint)
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT 1 FROM core.parties 
        INNER JOIN core.party_types 
        ON core.parties.party_type_id=core.party_types.party_type_id
        WHERE core.parties.party_id=$1
        AND core.party_types.is_supplier=true
    ) THEN
        RETURN true;
    END IF;
    
    RETURN false;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.is_valid_item_id.sql --<--<--
DROP FUNCTION IF EXISTS core.is_valid_item_id(integer);

CREATE FUNCTION core.is_valid_item_id(integer)
RETURNS boolean
AS
$$
BEGIN
        IF EXISTS(SELECT 1 FROM core.items WHERE item_id=$1) THEN
                RETURN true;
        END IF;

        RETURN false;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.is_valid_unit.sql --<--<--
DROP FUNCTION IF EXISTS core.is_valid_unit(_item_id integer, _unit_id integer);

CREATE FUNCTION core.is_valid_unit(_item_id integer, _unit_id integer)
RETURNS boolean
AS
$$
        DECLARE _item_unit_id integer;
BEGIN
        SELECT unit_id INTO _item_unit_id
        FROM core.items
        WHERE item_id=$1;

        IF(core.get_root_unit_id(_item_unit_id) = core.get_root_unit_id(_unit_id)) THEN
                RETURN true;
        END IF;

        RETURN false;        
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/core/core.is_valid_unit_id.sql --<--<--
DROP FUNCTION IF EXISTS core.is_valid_unit_id(integer);

CREATE FUNCTION core.is_valid_unit_id(integer)
RETURNS boolean
AS
$$
BEGIN
        IF EXISTS(SELECT 1 FROM core.units WHERE unit_id=$1) THEN
                RETURN true;
        END IF;

        RETURN false;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS core.is_valid_unit_id(_unit_id integer, _item_id integer);

CREATE FUNCTION core.is_valid_unit_id(_unit_id integer, _item_id integer)
RETURNS boolean
AS
$$
BEGIN
        IF EXISTS
        (
                SELECT 1
                FROM core.items
                WHERE item_id = $2
                AND core.get_root_unit_id($1) = core.get_root_unit_id(unit_id)
        ) THEN
                RETURN true;
        END IF;

        RETURN false;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/audit/audit.get_office_information_model.sql --<--<--
DROP FUNCTION IF EXISTS audit.get_office_information_model(integer);

CREATE FUNCTION audit.get_office_information_model(integer)
RETURNS TABLE
(
    office              text,
    logged_in_to        text,
    last_login_ip       text,
    last_login_on       TIMESTAMP WITH TIME ZONE,
    current_ip          text,
    current_login_on    TIMESTAMP WITH TIME ZONE,
    role                text,
    department          text
)
VOLATILE
AS
$$
BEGIN
    CREATE TEMPORARY TABLE temp_model
    (
        office              text,
        logged_in_to        text,
        last_login_ip       text,
        last_login_on       TIMESTAMP WITH TIME ZONE,
        current_ip          text,
        current_login_on    TIMESTAMP WITH TIME ZONE,
        role                text,
        department          text
    ) ON COMMIT DROP;


    INSERT INTO temp_model(office, role, department)
    SELECT 
        office.offices.office_code || ' (' || office.offices.office_name || ')',
        office.roles.role_code || ' (' || office.roles.role_name || ')',
        office.departments.department_code || ' (' || office.departments.department_name
    FROM office.users
    INNER JOIN office.offices
    ON office.users.office_id = office.users.office_id
    INNER JOIN office.roles
    ON office.users.role_id = office.roles.role_id
    INNER JOIN office.departments
    ON office.users.department_id = office.departments.department_id
    WHERE office.users.user_id = $1;

    WITH login_info
    AS
    (
        SELECT 
            office.offices.office_code || ' (' || office.offices.office_name || ')' AS logged_in_to,
            ip_address AS current_ip,
            login_date_time AS current_login_on
        FROM audit.logins
        INNER JOIN office.offices
        ON audit.logins.office_id = office.offices.office_id
        WHERE user_id = $1
        AND login_date_time = 
        (
            SELECT max(login_date_time)
            FROM audit.logins
            WHERE user_id = $1
        )
    )

    UPDATE temp_model
    SET 
        logged_in_to        = login_info.logged_in_to,
        current_ip          = login_info.current_ip,
        current_login_on    = login_info.current_login_on
    FROM login_info;


    WITH last_login_info
    AS
    (
        SELECT 
            ip_address          AS last_login_ip,
            login_date_time     AS last_login_on
        FROM audit.logins
        WHERE user_id = $1
        AND login_date_time < 
        (
            SELECT max(login_date_time)
            FROM audit.logins
            WHERE user_id = $1
        )
        ORDER BY login_date_time DESC
        LIMIT 1
    )
    UPDATE temp_model
    SET 
        last_login_ip       = last_login_info.last_login_ip,
        last_login_on       = last_login_info.last_login_on
    FROM last_login_info;
    
    
    RETURN QUERY
    SELECT * FROM temp_model;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.calculate_interest.sql --<--<--
DROP FUNCTION IF EXISTS core.calculate_interest(principal numeric, rate numeric, days integer, num_of_days_in_year integer, round_up integer);
CREATE FUNCTION core.calculate_interest(principal numeric, rate numeric, days integer, round_up integer, num_of_days_in_year integer)
RETURNS numeric
AS
$$
    DECLARE interest numeric;
BEGIN
    IF num_of_days_in_year = 0 OR num_of_days_in_year IS NULL THEN
        RAISE EXCEPTION 'Cannot calculate interest. The number of days in a year was not provided.'
        USING ERRCODE='P1301';
    END IF;
    
    interest := ROUND(principal * rate * days / (num_of_days_in_year * 100), round_up);

    RETURN interest;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


DROP FUNCTION IF EXISTS core.calculate_interest(principal numeric, rate numeric, days integer, round_up integer);
CREATE FUNCTION core.calculate_interest(principal numeric, rate numeric, days integer, round_up integer)
RETURNS numeric
AS
$$
    DECLARE num_of_days_in_year integer = 365;
BEGIN
    IF core.is_leap_year() THEN
        num_of_days_in_year = 366;
    END IF;
    
    RETURN core.calculate_interest(principal, rate, days, round_up, num_of_days_in_year);
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;



/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.dates.sql --<--<--
DROP FUNCTION IF EXISTS core.get_date(_office_id integer);

CREATE FUNCTION core.get_date(_office_id integer)
RETURNS date
AS
$$
BEGIN
    RETURN transactions.get_value_date($1);
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS core.get_month_end_date(_office_id integer);

CREATE FUNCTION core.get_month_end_date(_office_id integer)
RETURNS date
AS
$$
BEGIN
    RETURN MIN(value_date) 
    FROM core.frequency_setups
    WHERE value_date >= transactions.get_value_date($1);
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS core.get_month_start_date(_office_id integer);

CREATE FUNCTION core.get_month_start_date(_office_id integer)
RETURNS date
AS
$$
    DECLARE _date               date;
BEGIN
    SELECT MAX(value_date) + 1
    INTO _date
    FROM core.frequency_setups
    WHERE value_date < 
    (
        SELECT MIN(value_date)
        FROM core.frequency_setups
        WHERE value_date >= transactions.get_value_date($1)
    );

    IF(_date IS NULL) THEN
        SELECT starts_from 
        INTO _date
        FROM core.fiscal_year;
    END IF;

    RETURN _date;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS core.get_quarter_end_date(_office_id integer);

CREATE FUNCTION core.get_quarter_end_date(_office_id integer)
RETURNS date
AS
$$
BEGIN
    RETURN MIN(value_date) 
    FROM core.frequency_setups
    WHERE value_date >= transactions.get_value_date($1)
    AND frequency_id > 2;
END
$$
LANGUAGE plpgsql;



DROP FUNCTION IF EXISTS core.get_quarter_start_date(_office_id integer);

CREATE FUNCTION core.get_quarter_start_date(_office_id integer)
RETURNS date
AS
$$
    DECLARE _date               date;
BEGIN
    SELECT MAX(value_date) + 1
    INTO _date
    FROM core.frequency_setups
    WHERE value_date < 
    (
        SELECT MIN(value_date)
        FROM core.frequency_setups
        WHERE value_date >= transactions.get_value_date($1)
    )
    AND frequency_id > 2;

    IF(_date IS NULL) THEN
        SELECT starts_from 
        INTO _date
        FROM core.fiscal_year;
    END IF;

    RETURN _date;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS core.get_fiscal_half_end_date(_office_id integer);

CREATE FUNCTION core.get_fiscal_half_end_date(_office_id integer)
RETURNS date
AS
$$
BEGIN
    RETURN MIN(value_date) 
    FROM core.frequency_setups
    WHERE value_date >= transactions.get_value_date($1)
    AND frequency_id > 3;
END
$$
LANGUAGE plpgsql;



DROP FUNCTION IF EXISTS core.get_fiscal_half_start_date(_office_id integer);

CREATE FUNCTION core.get_fiscal_half_start_date(_office_id integer)
RETURNS date
AS
$$
    DECLARE _date               date;
BEGIN
    SELECT MAX(value_date) + 1
    INTO _date
    FROM core.frequency_setups
    WHERE value_date < 
    (
        SELECT MIN(value_date)
        FROM core.frequency_setups
        WHERE value_date >= transactions.get_value_date($1)
    )
    AND frequency_id > 3;

    IF(_date IS NULL) THEN
        SELECT starts_from 
        INTO _date
        FROM core.fiscal_year;
    END IF;

    RETURN _date;
END
$$
LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS core.get_fiscal_year_end_date(_office_id integer);

CREATE FUNCTION core.get_fiscal_year_end_date(_office_id integer)
RETURNS date
AS
$$
BEGIN
    RETURN MIN(value_date) 
    FROM core.frequency_setups
    WHERE value_date >= transactions.get_value_date($1)
    AND frequency_id > 4;
END
$$
LANGUAGE plpgsql;



DROP FUNCTION IF EXISTS core.get_fiscal_year_start_date(_office_id integer);

CREATE FUNCTION core.get_fiscal_year_start_date(_office_id integer)
RETURNS date
AS
$$
    DECLARE _date               date;
BEGIN

    SELECT starts_from 
    INTO _date
    FROM core.fiscal_year;

    RETURN _date;
END
$$
LANGUAGE plpgsql;

--SELECT core.get_date(1), core.get_month_start_date(1),core.get_month_end_date(1), core.get_quarter_start_date(1), core.get_quarter_end_date(1), core.get_fiscal_half_start_date(1), core.get_fiscal_half_end_date(1), core.get_fiscal_year_start_date(1), core.get_fiscal_year_end_date(1);






-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.get_account_view_by_account_master_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_account_view_by_account_master_id
(
    _account_master_id      integer,
    _row_number             integer
);

CREATE FUNCTION core.get_account_view_by_account_master_id
(
    _account_master_id      integer,
    _row_number             integer
)
RETURNS table
(
    id                      bigint,
    account_id              bigint,
    account_name            text    
)
AS
$$
BEGIN
    RETURN QUERY
    SELECT ROW_NUMBER() OVER (ORDER BY accounts.account_id) +_row_number, * FROM 
    (
        SELECT core.accounts.account_id, core.get_account_name_by_account_id(core.accounts.account_id)
        FROM core.accounts
        WHERE core.accounts.account_master_id = _account_master_id
    ) AS accounts;    
END;
$$
LANGUAGE plpgsql;



















-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.get_base_quantity_by_unit_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_base_quantity_by_unit_id(integer, integer);

CREATE FUNCTION core.get_base_quantity_by_unit_id(integer, integer)
RETURNS decimal
AS
$$
DECLARE _root_unit_id integer;
DECLARE _factor decimal;
BEGIN
    _root_unit_id = core.get_root_unit_id($1);
    _factor = core.convert_unit($1, _root_unit_id);

    RETURN _factor * $2;
END
$$
LANGUAGE plpgsql;



/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/


DROP FUNCTION IF EXISTS unit_tests.get_base_quantity_by_unit_id_test();

CREATE FUNCTION unit_tests.get_base_quantity_by_unit_id_test()
RETURNS public.test_result
AS
$$
    DECLARE message test_result;
    DECLARE result boolean;
    DECLARE actual decimal;
    DECLARE expected decimal=345;
BEGIN

        INSERT INTO core.units(unit_code, unit_name)
        SELECT 'TUC-0000001', 'Test Unit 1' UNION ALL 
        SELECT 'TUC-0000002', 'Test Unit 2';


        INSERT INTO core.compound_units(base_unit_id, compare_unit_id, value)
        SELECT core.get_unit_id_by_unit_code('TUC-0000001'), core.get_unit_id_by_unit_code('TUC-0000002'), 345;

        SELECT core.get_base_quantity_by_unit_id(core.get_unit_id_by_unit_code('TUC-0000002'), 1) INTO actual;

        DELETE FROM core.compound_units WHERE base_unit_id = core.get_unit_id_by_unit_code('TUC-0000001');
        DELETE FROM core.units WHERE unit_code IN('TUC-0000001', 'TUC-0000002');

        RAISE NOTICE '%', actual;

        SELECT * FROM assert.is_equal(actual, expected) INTO message, result;        

        IF(result = false) THEN
                RETURN message;
        END IF;

        SELECT assert.ok('End of test.') INTO message;  
        RETURN message;
END
$$
LANGUAGE plpgsql;






-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.get_field.sql --<--<--
DROP FUNCTION IF EXISTS core.get_field(this HSTORE, _column_name text);

CREATE FUNCTION core.get_field(this HSTORE, _column_name text)
RETURNS text
AS
$$
   DECLARE _field_value text;
BEGIN
    _field_value := this->_column_name;
    RETURN _field_value;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.get_income_tax_provison_amount.sql --<--<--
DROP FUNCTION IF EXISTS core.get_income_tax_provison_amount(_office_id integer, _profit  decimal(24, 4), _balance  decimal(24, 4));

CREATE FUNCTION core.get_income_tax_provison_amount(_office_id integer, _profit decimal(24, 4), _balance decimal(24, 4))
RETURNS  decimal(24, 4)
AS
$$
    DECLARE _rate real;
BEGIN
    _rate := core.get_income_tax_rate(_office_id);

    RETURN
    (
        (_profit * _rate/100) - _balance
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.get_income_tax_rate.sql --<--<--
DROP FUNCTION IF EXISTS core.get_income_tax_rate(_office_id integer);

CREATE FUNCTION core.get_income_tax_rate(_office_id integer)
RETURNS real
AS
$$
BEGIN
    RETURN 19.00;--TODO
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.get_item_cost_price.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_cost_price(item_id_ integer, party_id_ bigint, unit_id_ integer);
CREATE FUNCTION core.get_item_cost_price(item_id_ integer, party_id_ bigint, unit_id_ integer)
RETURNS money_strict2
AS
$$
    DECLARE _price money_strict2;
    DECLARE _unit_id integer;
    DECLARE _factor decimal;
    DECLARE _tax_rate decimal;
    DECLARE _includes_tax boolean;
    DECLARE _tax money_strict2;
BEGIN

    --Fist pick the catalog price which matches all these fields:
    --Item, Customer Type, Price Type, and Unit.
    --This is the most effective price.
    SELECT 
        item_cost_prices.price, 
        item_cost_prices.unit_id,
        item_cost_prices.includes_tax
    INTO 
        _price, 
        _unit_id,
        _includes_tax       
    FROM core.item_cost_prices
    WHERE item_cost_prices.item_id=$1
    AND item_cost_prices.party_id=$2
    AND item_cost_prices.unit_id = $3;

    IF(_unit_id IS NULL) THEN
        --We do not have a cost price of this item for the unit supplied.
        --Let's see if this item has a price for other units.
        SELECT 
            item_cost_prices.price, 
            item_cost_prices.unit_id,
            item_cost_prices.includes_tax
        INTO 
            _price, 
            _unit_id,
            _includes_tax
        FROM core.item_cost_prices
        WHERE item_cost_prices.item_id=$1
        AND item_cost_prices.party_id=$2;
    END IF;

    
    IF(_price IS NULL) THEN
        --This item does not have cost price defined in the catalog.
        --Therefore, getting the default cost price from the item definition.
        SELECT 
            cost_price, 
            unit_id,
            cost_price_includes_tax
        INTO 
            _price, 
            _unit_id,
            _includes_tax
        FROM core.items
        WHERE core.items.item_id = $1;
    END IF;

    IF(_includes_tax) THEN
        _tax_rate := core.get_item_tax_rate($1);
        _price := _price / ((100 + _tax_rate)/ 100);
    END IF;

    --Get the unitary conversion factor if the requested unit does not match with the price defition.
    _factor := core.convert_unit($3, _unit_id);

    RETURN _price * _factor;
END
$$
LANGUAGE plpgsql;


/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.get_item_selling_price.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_selling_price(item_id_ integer, party_type_id_ integer, price_type_id_ integer, unit_id_ integer);
CREATE FUNCTION core.get_item_selling_price(item_id_ integer, party_type_id_ integer, price_type_id_ integer, unit_id_ integer)
RETURNS money_strict2
AS
$$
    DECLARE _price money_strict2;
    DECLARE _unit_id integer;
    DECLARE _factor decimal;
    DECLARE _tax_rate decimal;
    DECLARE _includes_tax boolean;
    DECLARE _tax money_strict2;
BEGIN

    --Fist pick the catalog price which matches all these fields:
    --Item, Customer Type, Price Type, and Unit.
    --This is the most effective price.
    SELECT 
        item_selling_prices.price, 
        item_selling_prices.unit_id,
        item_selling_prices.includes_tax
    INTO 
        _price, 
        _unit_id,
        _includes_tax       
    FROM core.item_selling_prices
    WHERE item_selling_prices.item_id=$1
    AND item_selling_prices.party_type_id=$2
    AND item_selling_prices.price_type_id =$3
    AND item_selling_prices.unit_id = $4;

    IF(_unit_id IS NULL) THEN
        --We do not have a selling price of this item for the unit supplied.
        --Let's see if this item has a price for other units.
        SELECT 
            item_selling_prices.price, 
            item_selling_prices.unit_id,
            item_selling_prices.includes_tax
        INTO 
            _price, 
            _unit_id,
            _includes_tax
        FROM core.item_selling_prices
        WHERE item_selling_prices.item_id=$1
        AND item_selling_prices.party_type_id=$2
        AND item_selling_prices.price_type_id =$3;
    END IF;

    
    IF(_price IS NULL) THEN
        --This item does not have selling price defined in the catalog.
        --Therefore, getting the default selling price from the item definition.
        SELECT 
            selling_price, 
            unit_id,
            selling_price_includes_tax
        INTO 
            _price, 
            _unit_id,
            _includes_tax
        FROM core.items
        WHERE core.items.item_id = $1;
    END IF;

    IF(_includes_tax) THEN
        _tax_rate := core.get_item_tax_rate($1);
        _price := _price / ((100 + _tax_rate)/ 100);
    END IF;

    --Get the unitary conversion factor if the requested unit does not match with the price defition.
    _factor := core.convert_unit($4, _unit_id);

    RETURN _price * _factor;
END
$$
LANGUAGE plpgsql;



/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.get_ordered_quantity.sql --<--<--
DROP FUNCTION IF EXISTS core.get_ordered_quantity(_item_id integer, _unit_id integer, _office_id integer);

CREATE FUNCTION core.get_ordered_quantity(_item_id integer, _unit_id integer, _office_id integer)
RETURNS numeric
AS
$$
        DECLARE last_received_on date;
        DECLARE factor decimal(24, 8);
BEGIN
        SELECT 
        MAX(transactions.transaction_master.value_date) INTO last_received_on
        FROM transactions.transaction_master
        INNER JOIN transactions.stock_master
        ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_id
        INNER JOIN transactions.stock_details
        ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
        WHERE transactions.stock_details.item_id = $1
        AND transactions.transaction_master.office_id = $3        
        AND transactions.transaction_master.book like 'Purchase%';

        RAISE NOTICE '%', last_received_on;

        RETURN COALESCE(SUM(quantity * core.convert_unit(unit_id, $2)), 0)
        FROM transactions.non_gl_stock_details
        INNER JOIN transactions.non_gl_stock_master
        ON transactions.non_gl_stock_details.non_gl_stock_master_id = transactions.non_gl_stock_master.non_gl_stock_master_id
        WHERE transactions.non_gl_stock_master.office_id = $3        
        AND item_id = $1
        AND transactions.non_gl_stock_details.value_date > last_received_on
        AND transactions.non_gl_stock_master.book = 'Purchase.Order';
        
END
$$
LANGUAGE plpgsql;



--SELECT core.get_ordered_quantity(17, 1, 2);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.get_periods.sql --<--<--
DROP FUNCTION IF EXISTS core.get_periods
(
    _date_from                      date,
    _date_to                        date
);

CREATE FUNCTION core.get_periods
(
    _date_from                      date,
    _date_to                        date
)
RETURNS core.period[]
AS
$$
BEGIN
    RETURN 
        array_agg
        (
            (
                core.get_frequency_setup_code_by_frequency_setup_id(frequency_setup_id),
                core.get_frequency_setup_start_date_frequency_setup_id(frequency_setup_id),
                core.get_frequency_setup_end_date_frequency_setup_id(frequency_setup_id)
            )::core.period
        )::core.period[]
    FROM core.frequency_setups
    WHERE value_date BETWEEN _date_from AND _date_to;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.get_workflow_model.sql --<--<--
DROP FUNCTION IF EXISTS core.get_workflow_model();

CREATE FUNCTION core.get_workflow_model()
RETURNS TABLE
(
    flagged_transactions        integer,
    in_verification_stack       integer,
    auto_approved               integer,
    approved                    integer,
    rejected                    integer,
    closed                      integer,
    withdrawn                   integer
)
VOLATILE
AS
$$
    DECLARE _flagged            integer;
    DECLARE _in_verification    integer;
    DECLARE _auto_approved      integer;
    DECLARE _approved           integer;
    DECLARE _rejected           integer;
    DECLARE _closed             integer;
    DECLARE _withdrawn          integer;
BEGIN
    SELECT COUNT(*) INTO _flagged 
    FROM core.flags;

    SELECT COUNT(*) INTO _in_verification
    FROM transactions.transaction_master
    WHERE verification_status_id = 0;

    SELECT COUNT(*) INTO _auto_approved
    FROM transactions.transaction_master
    WHERE verification_status_id = 1;

    SELECT COUNT(*) INTO _approved
    FROM transactions.transaction_master
    WHERE verification_status_id = 2;

    SELECT COUNT(*) INTO _rejected
    FROM transactions.transaction_master
    WHERE verification_status_id = -3;

    SELECT COUNT(*) INTO _closed
    FROM transactions.transaction_master
    WHERE verification_status_id = -2;

    SELECT COUNT(*) INTO _withdrawn
    FROM transactions.transaction_master
    WHERE verification_status_id = -1;

    RETURN QUERY
    SELECT
        _flagged, 
        _in_verification, 
        _auto_approved,
        _approved,
        _rejected,
        _closed,
        _withdrawn;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.is_cash_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.is_cash_account_id(_account_id bigint);

CREATE FUNCTION core.is_cash_account_id(_account_id bigint)
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT 1 FROM core.accounts WHERE account_master_id IN(10101)
        AND account_id=$1
    ) THEN
        RETURN true;
    END IF;
    RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/core/core.is_cash_equivalent.sql --<--<--
DROP FUNCTION IF EXISTS core.is_cash_equivalent(_account_id bigint);

CREATE FUNCTION core.is_cash_equivalent(_account_id bigint)
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT 1 FROM core.accounts WHERE account_master_id IN(10101, 10102)
        AND account_id=$1
    ) THEN
        RETURN true;
    END IF;
    RETURN false;
END
$$
LANGUAGE plpgsql;

ALTER TABLE office.stores
ADD CONSTRAINT stores_default_cash_account_id_chk
CHECK(core.is_cash_equivalent(default_cash_account_id));


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/office/office.can_login.sql --<--<--
DROP FUNCTION IF EXISTS office.can_login(user_id integer_strict, office_id integer_strict, OUT result boolean, OUT message text);
CREATE FUNCTION office.can_login(user_id integer_strict, office_id integer_strict, OUT result boolean, OUT message text)
RETURNS RECORD
AS
$$
DECLARE _office_id      integer;
BEGIN
    _office_id  := office.get_office_id_by_user_id($1);
    message     := '';

    IF $1 = office.get_sys_user_id() THEN
        result = false;
    END IF;

    IF $2=_office_id THEN
        result = true;
    ELSE
        IF office.is_parent_office(_office_id,$2) THEN
            result = true;
        END IF;
    END IF;

    IF(result) THEN
        IF(policy.is_restricted_mode() AND NOT policy.is_elevated_user($1)) THEN
            result := false;
            message := 'You need to have an elevated priviledge to login interactively during end of day operation';
            RAISE WARNING '%', message;
        END IF;
    END IF;
    
    RETURN;
END;
$$
LANGUAGE plpgsql;




/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/office/office.has_child_offices.sql --<--<--
CREATE FUNCTION office.has_child_offices(integer)
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS(SELECT 0 FROM office.offices WHERE parent_office_id=$1 LIMIT 1) THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/office/office.sign_in.sql --<--<--
DROP FUNCTION IF EXISTS office.sign_in
(
    office_id       integer_strict, 
    user_name       text, 
    password        text, 
    browser         text, 
    ip_address      text, 
    remote_user     text, 
    culture         text, 
    challenge       text, 
    OUT login_id    bigint, 
    OUT message     text
);
CREATE FUNCTION office.sign_in
(
    office_id       integer_strict, 
    user_name       text, 
    password        text, 
    browser         text, 
    ip_address      text, 
    remote_user     text, 
    culture         text, 
    challenge       text, 
    OUT login_id    bigint, 
    OUT message     text
)
RETURNS RECORD
AS
$$
    DECLARE _user_id            integer;
    DECLARE _lock_out_till      TIMESTAMP WITH TIME ZONE;
    DECLARE result              boolean;
BEGIN
    _user_id        :=office.get_user_id_by_user_name($2);
    login_id        := 0;
    
    IF _user_id IS NULL THEN
        INSERT INTO audit.failed_logins(user_name,browser,ip_address,remote_user,details)
        SELECT $2, $4, $5, $6, 'Invalid user name.';
        message := 'Invalid login attempt.';
    ELSE
        _lock_out_till:=policy.is_locked_out_till(_user_id);


        IF NOT ((_lock_out_till IS NOT NULL) AND (_lock_out_till>NOW())) THEN
            IF(office.validate_login($2,$3, $8)) THEN

                SELECT * FROM office.can_login(_user_id,$1) 
                INTO result, message;

                IF(result) THEN
                    INSERT INTO audit.logins(office_id,user_id,browser,ip_address,remote_user, culture)
                    SELECT $1, _user_id, $4, $5, $6, $7;

                    login_id := currval('audit.logins_login_id_seq')::bigint;
                ELSE
                    IF(COALESCE(message, '') = '') THEN
                        message := format('A user from %1$s cannot login to %2$s.', office.get_office_name_by_id(office.get_office_id_by_user_id(_user_id)), office.get_office_name_by_id($1));
                    END IF;

                    INSERT INTO audit.failed_logins(office_id,user_id,user_name,browser,ip_address,remote_user,details)
                    SELECT $1, _user_id, $2, $4, $5, $6, message;
                END IF;
            ELSE
                IF(COALESCE(message, '') = '') THEN
                    message := 'Invalid login attempt.';
                END IF;
                
                INSERT INTO audit.failed_logins(office_id,user_id,user_name,browser,ip_address,remote_user,details)
                SELECT $1, _user_id, $2, $4, $5, $6, message;
            END IF;
        ELSE
             message        := format('You are locked out till %1$s.', _lock_out_till);

            INSERT INTO audit.failed_logins(office_id,user_id,user_name,browser,ip_address,remote_user,details)
            SELECT $1, _user_id, $2, $4, $5, $6, message;
        END IF;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;


--SELECT * FROM office.sign_in(2, 'binod2', '4e99cb7523794ad53b4da66c91f56d0143a679e1c6d396cda9ad0c9b41ed53e90bd5c59bf98255a4f1946b216b3ba539074a8a86cedd4af8bb208a8fad748e82', 'Firefox', '0.0.0.0', 'N/A', 'en-US', 'cd0ad7446ab64801837bfd43197d19c1');


/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/policy/policy.can_post_transaction.sql --<--<--
DROP FUNCTION IF EXISTS policy.can_post_transaction(_login_id bigint, _user_id integer, _office_id integer, transaction_book text, _value_date date);

CREATE FUNCTION policy.can_post_transaction(_login_id bigint, _user_id integer, _office_id integer, transaction_book text, _value_date date)
RETURNS bool
AS
$$
BEGIN
    IF(audit.is_valid_login_id(_login_id) = false) THEN
        RAISE EXCEPTION 'Invalid LoginId.'
        USING ERRCODE='P3101';
    END IF; 

    IF(office.is_valid_office_id(_office_id) = false) THEN
        RAISE EXCEPTION 'Invalid OfficeId.'
        USING ERRCODE='P3010';
    END IF;

    IF(policy.is_transaction_restricted(_office_id)) THEN
        RAISE EXCEPTION 'This establishment does not allow transaction posting.'
        USING ERRCODE='P5100';
    END IF;
    
    IF(policy.is_restricted_mode()) THEN
        RAISE EXCEPTION 'Cannot post transaction during restricted transaction mode.'
        USING ERRCODE='P5101';
    END IF;

    IF(_value_date < transactions.get_value_date(_office_id)) THEN
        RAISE EXCEPTION 'Past dated transactions are not allowed.'
        USING ERRCODE='P5010';
    END IF;
    
    IF NOT EXISTS 
    (
        SELECT *
        FROM office.users
        INNER JOIN office.roles
        ON office.users.role_id = office.roles.role_id
        WHERE is_system=false
        AND user_id = $2
    ) THEN
        RAISE EXCEPTION 'Access is denied. You are not authorized to post this transaction.'
        USING ERRCODE='P9010';        
    END IF;

    RETURN true;
END
$$
LANGUAGE plpgsql;




/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/policy/policy.change_password.sql --<--<--
DROP FUNCTION IF EXISTS policy.change_password
(
    _user_name          text,
    _current_password   text,
    _new_password       text
);

CREATE FUNCTION policy.change_password
(
    _user_name          text,
    _current_password   text,
    _new_password       text
)
RETURNS boolean
VOLATILE
AS
$$
BEGIN
    IF(COALESCE($1, '') = '') THEN
        RAISE EXCEPTION 'Invalid user name.'
        USING ERRCODE='P3001';
    END IF;

    IF(COALESCE($2, '') = '' OR COALESCE($3, '') = '') THEN
        RAISE EXCEPTION 'Password cannot be empty.'
        USING ERRCODE='P3005';
    END IF;

    IF($2=$3) THEN
        RAISE EXCEPTION 'Please provide a new password.'
        USING ERRCODE='P3006';
    END IF;

    IF NOT EXISTS
    (
        SELECT * FROM office.users
        WHERE user_name = $1
        AND can_change_password
        AND role_id NOT IN
        (
            SELECT role_id FROM office.roles
            WHERE is_system
        )
    ) THEN
        RAISE EXCEPTION 'Access is denied.'
        USING ERRCODE='P9001';
    END IF;

    IF NOT EXISTS
    (
        SELECT * FROM office.users 
        WHERE office.users.user_name=$1
        AND encode(digest($1 || $2, 'sha512'), 'hex') = office.users.password 
    ) THEN
        RAISE EXCEPTION 'Your current password is incorrect.'
        USING ERRCODE='P3104';
    END IF;

    UPDATE office.users
    SET password = encode(digest($1 || $3, 'sha512'), 'hex')
    WHERE office.users.user_name=$1;
    

    RETURN true;
END
$$
LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS policy.change_password
(
    _admin_user_id          integer,
    _user_name              text,
    _new_password           text
);

CREATE FUNCTION policy.change_password
(
    _admin_user_id          integer,
    _user_name              text,
    _new_password           text
)
RETURNS void
VOLATILE
AS
$$
    DECLARE _user_id            integer;
    DECLARE _office_id          integer;
    DECLARE _admin_office_id    integer;
BEGIN
    IF(COALESCE($2, '') = '') THEN
        RAISE EXCEPTION 'Invalid user name.'
        USING ERRCODE='P3001';
    END IF;

    IF(COALESCE($3, '') = '') THEN
        RAISE EXCEPTION 'Password cannot be empty.'
        USING ERRCODE='P3005';
    END IF;

    SELECT 
        office.users.user_id,
        office.users.office_id
    INTO
        _user_id,
        _office_id
    FROM office.users
    WHERE office.users.user_name=_user_name;

    IF(COALESCE(_user_id, 0) = 0) THEN
        RAISE EXCEPTION 'Invalid user name.'
        USING ERRCODE='P3001';
    END IF;

    IF(NOT office.is_admin(_admin_user_id)) THEN
        RAISE EXCEPTION 'Access is denied.'
        USING ERRCODE='P9001';
    END IF;

    SELECT office.users.office_id INTO _admin_office_id
    FROM office.users
    WHERE office.users.user_id = _admin_user_id;

    IF(_admin_office_id != _office_id AND NOT office.is_parent_office(_admin_office_id, _office_id)) THEN
        RAISE EXCEPTION 'Access is denied.'
        USING ERRCODE='P9001';
    END IF;

    UPDATE office.users
    SET password = encode(digest($2 || $3, 'sha512'), 'hex')
    WHERE office.users.user_name=$2;    
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/policy/policy.get_menu.sql --<--<--
DROP FUNCTION IF EXISTS policy.get_menu
(
    _user_id    integer, 
    _office_id  integer, 
    _culture_   text
);

CREATE FUNCTION policy.get_menu
(
    _user_id    integer, 
    _office_id  integer, 
    _culture_   text
)
RETURNS TABLE
(
    menu_id         integer,
    menu_text       national character varying(250),
    url             national character varying(250),
    menu_code       character varying(12),
    level           smallint,
    parent_menu_id  integer
)
AS
$$
    DECLARE culture_exists boolean = false;
BEGIN    
    IF EXISTS(SELECT * FROM core.menu_locale WHERE culture=$3) THEN
        culture_exists := true;
    END IF;

    IF(NOT culture_exists) THEN
        IF EXISTS(SELECT * FROM core.menu_locale WHERE culture=split_part($3,'-', 1)) THEN
            $3 := split_part($3,'-', 1);
            culture_exists := true;
        END IF;
    END IF;

    IF culture_exists THEN
        RETURN QUERY 
        SELECT
            core.menus.menu_id,
            core.menu_locale.menu_text,
            core.menus.url,
            core.menus.menu_code,
            core.menus.level,
            core.menus.parent_menu_id   
        FROM core.menus
        INNER JOIN policy.menu_access
        ON core.menus.menu_id = policy.menu_access.menu_id
        INNER JOIN core.menu_locale
        ON core.menus.menu_id = core.menu_locale.menu_id
        WHERE policy.menu_access.user_id=$1
        AND policy.menu_access.office_id=$2
        AND core.menu_locale.culture=$3;
    ELSE
        RETURN QUERY 
        SELECT
            core.menus.menu_id,
            core.menus.menu_text,
            core.menus.url,
            core.menus.menu_code,
            core.menus.level,
            core.menus.parent_menu_id   
        FROM core.menus
        INNER JOIN policy.menu_access
        ON core.menus.menu_id = policy.menu_access.menu_id
        WHERE policy.menu_access.user_id=$1
        AND policy.menu_access.office_id=$2;
    END IF;

END
$$
LANGUAGE plpgsql;

--SELECT * FROM policy.get_menu(2, 2, 'de-DE');

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/policy/policy.get_menu_policy.sql --<--<--
DROP FUNCTION IF EXISTS policy.get_menu_policy
(
    _user_id        integer,
    _office_id      integer,
    _culture        text
);

CREATE FUNCTION policy.get_menu_policy
(
    _user_id        integer,
    _office_id      integer,
    _culture        text
)
RETURNS TABLE
(
    row_number      bigint,
    access          boolean,
    menu_id         integer,
    menu_code       text,
    menu_text       text,
    url             text
)
STABLE AS
$$
    DECLARE culture_exists boolean = false;
BEGIN
    IF EXISTS(SELECT * FROM core.menu_locale WHERE culture=$3) THEN
        culture_exists := true;
    END IF;


    IF culture_exists THEN
        RETURN QUERY 
        SELECT
            row_number() OVER(ORDER BY core.menus.menu_id),
            CASE WHEN policy.menu_access.access_id IS NOT NULL THEN true ELSE false END as access,
            core.menus.menu_id,
            core.menus.menu_code::text, 
            core.menu_locale.menu_text::text, 
            core.menus.url::text
        FROM core.menus
        INNER JOIN core.menu_locale
        ON core.menus.menu_id = core.menu_locale.menu_id
        LEFT JOIN policy.menu_access
        ON core.menus.menu_id = policy.menu_access.menu_id
        WHERE policy.menu_access.user_id = $1
        AND policy.menu_access.office_id = $2
        AND core.menu_locale.culture = $3
        ORDER BY core.menus.menu_id;

        RETURN;
    END IF;
    
    RETURN QUERY
    SELECT
        row_number() OVER(ORDER BY core.menus.menu_id),
        CASE WHEN policy.menu_access.access_id IS NOT NULL THEN true ELSE false END as access,
        core.menus.menu_id,
        core.menus.menu_code::text, 
        core.menus.menu_text::text, 
        core.menus.url::text
    FROM core.menus
    LEFT JOIN policy.menu_access
    ON core.menus.menu_id = policy.menu_access.menu_id
    AND policy.menu_access.user_id = $1
    AND policy.menu_access.office_id = $2
    ORDER BY core.menus.menu_id;

    RETURN;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/policy/policy.is_transaction_restricted.sql --<--<--
DROP FUNCTION IF EXISTS policy.is_transaction_restricted
(
    _office_id      integer
);

CREATE FUNCTION policy.is_transaction_restricted
(
    _office_id      integer
)
RETURNS boolean
STABLE
AS
$$
BEGIN
    RETURN NOT allow_transaction_posting
    FROM office.offices
    WHERE office_id=$1;
END
$$
LANGUAGE plpgsql;

ALTER TABLE transactions.transaction_master
ADD CONSTRAINT transaction_master_office_id_chk
CHECK(NOT policy.is_transaction_restricted(office_id));

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/policy/policy.save_menu_policy.sql --<--<--
DROP FUNCTION IF EXISTS policy.save_menu_policy
(
    _user_id        integer,
    _office_id      integer,
    _menu_ids       int[]
);

CREATE FUNCTION policy.save_menu_policy
(
    _user_id        integer,
    _office_id      integer,
    _menu_ids       int[]
)
RETURNS void
VOLATILE AS
$$
BEGIN
    DELETE FROM policy.menu_access
    WHERE NOT policy.menu_access.menu_id = ANY(_menu_ids)
    AND user_id = _user_id
    AND office_id = _office_id;

    WITH menus
    AS
    (
        SELECT explode_array(_menu_ids) AS _menu_id
    )
    
    INSERT INTO policy.menu_access(user_id, office_id, menu_id)
    SELECT _user_id, _office_id, _menu_id
    FROM menus
    WHERE _menu_id NOT IN
    (
        SELECT menu_id
        FROM policy.menu_access
        WHERE policy.menu_access.user_id = _user_id
        AND policy.menu_access.office_id = _office_id
    );

    RETURN;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM policy.save_menu_policy(2, 2, string_to_array('1,2,3, 4', ',')::int[])

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/public/poco_get_table_function_definition.sql --<--<--
DROP FUNCTION IF EXISTS public.poco_get_table_function_definition
(
    _schema         text,
    _name           text
);

CREATE FUNCTION public.poco_get_table_function_definition
(
    _schema                 text,
    _name                   text
)
RETURNS TABLE
(
    column_name             text,
    is_nullable             text,
    udt_name                text,
    column_default          text
)
STABLE
AS
$$
    DECLARE _oid            oid;
    DECLARE _typoid         oid;
BEGIN
    SELECT 
        pg_proc.oid,
        pg_proc.prorettype
    INTO 
        _oid,
        _typoid
    FROM pg_proc
    INNER JOIN pg_namespace
    ON pg_proc.pronamespace = pg_namespace.oid
    WHERE pg_proc.proname=_name
    AND pg_namespace.nspname=_schema
    LIMIT 1;

    IF EXISTS
    (
        SELECT 1
        FROM information_schema.columns 
        WHERE table_schema=_schema 
        AND table_name=_name
    ) THEN
        RETURN QUERY
        SELECT 
            information_schema.columns.column_name::text, 
            information_schema.columns.is_nullable::text, 
            information_schema.columns.udt_name::text, 
            information_schema.columns.column_default::text
        FROM information_schema.columns 
        WHERE table_schema=_schema 
        AND table_name=_name;
        RETURN;
    END IF;

    IF EXISTS(SELECT * FROM pg_type WHERE oid = _typoid AND typtype='c') THEN
        --Composite Type
        RETURN QUERY
        SELECT 
            attname::text               AS column_name,
            'NO'::text                  AS is_nullable, 
            format_type(t.oid,NULL)     AS udt_name,
            ''::text                    AS column_default
        FROM pg_attribute att
        JOIN pg_type t ON t.oid=atttypid
        JOIN pg_namespace nsp ON t.typnamespace=nsp.oid
        LEFT OUTER JOIN pg_type b ON t.typelem=b.oid
        LEFT OUTER JOIN pg_collation c ON att.attcollation=c.oid
        LEFT OUTER JOIN pg_namespace nspc ON c.collnamespace=nspc.oid
        WHERE att.attrelid=(SELECT typrelid FROM pg_type WHERE pg_type.oid = _typoid)
        ORDER by attnum;
        RETURN;
    END IF;

    IF(_oid IS NOT NULL) THEN
        RETURN QUERY
        WITH procs
        AS
        (
            SELECT 
            explode_array(proargnames) as column_name,
            explode_array(proargmodes) as column_mode,
            explode_array(proallargtypes) as argument_type
            FROM pg_proc
            WHERE oid = _oid
        )
        SELECT 
            procs.column_name::text,
            'NO'::text AS is_nullable, 
            format_type(procs.argument_type, null) as udt_name,
            ''::text AS column_default
        FROM procs
        WHERE column_mode=ANY(ARRAY['t', 'o']);

        RETURN;
    END IF;

    RETURN QUERY
    SELECT 
        attname::text               AS column_name,
        'NO'::text                  AS is_nullable, 
        format_type(t.oid,NULL)     AS udt_name,
        ''::text                    AS column_default
    FROM pg_attribute att
    JOIN pg_type t ON t.oid=atttypid
    JOIN pg_namespace nsp ON t.typnamespace=nsp.oid
    LEFT OUTER JOIN pg_type b ON t.typelem=b.oid
    LEFT OUTER JOIN pg_collation c ON att.attcollation=c.oid
    LEFT OUTER JOIN pg_namespace nspc ON c.collnamespace=nspc.oid
    WHERE att.attrelid=
    (
        SELECT typrelid 
        FROM pg_type
        INNER JOIN pg_namespace
        ON pg_type.typnamespace = pg_namespace.oid
        WHERE typname=_name
        AND pg_namespace.nspname=_schema
    )
    ORDER by attnum;
END;
$$
LANGUAGE plpgsql;


--SELECT * from public.poco_get_table_function_definition('office', 'get_offices');

--SELECT * FROM public.poco_get_table_function_definition('transactions', 'opening_stock_type');

--SELECT * FROM public.poco_get_table_function_definition('core', 'item_types');

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.auto_verify.sql --<--<--
DROP FUNCTION IF EXISTS transactions.auto_verify
(
    _tran_id        bigint,
    _office_id      integer
) CASCADE;

CREATE FUNCTION transactions.auto_verify
(
    _tran_id        bigint,
    _office_id      integer
)
RETURNS VOID
VOLATILE
AS
$$
    DECLARE _transaction_master_id bigint;
    DECLARE _transaction_posted_by integer;
    DECLARE _verifier integer;
    DECLARE _status integer;
    DECLARE _reason national character varying(128);
    DECLARE _rejected smallint=-3;
    DECLARE _closed smallint=-2;
    DECLARE _withdrawn smallint=-1;
    DECLARE _unapproved smallint = 0;
    DECLARE _auto_approved smallint = 1;
    DECLARE _approved smallint=2;
    DECLARE _book text;
    DECLARE _auto_verify_sales boolean;
    DECLARE _sales_verification_limit money_strict2;
    DECLARE _auto_verify_purchase boolean;
    DECLARE _purchase_verification_limit money_strict2;
    DECLARE _auto_verify_gl boolean;
    DECLARE _gl_verification_limit money_strict2;
    DECLARE _posted_amount money_strict2;
    DECLARE _auto_verification boolean=true;
    DECLARE _has_policy boolean=false;
    DECLARE _voucher_date date;
    DECLARE _value_date date=transactions.get_value_date(_office_id);
BEGIN
    _transaction_master_id := $1;

    SELECT
        transactions.transaction_master.book,
        transactions.transaction_master.value_date,
        transactions.transaction_master.user_id
    INTO
        _book,
        _voucher_date,
        _transaction_posted_by  
    FROM
    transactions.transaction_master
    WHERE transactions.transaction_master.transaction_master_id=_transaction_master_id;

    IF(_voucher_date <> _value_date) THEN
        RETURN;
    END IF;

    _verifier := office.get_sys_user_id();
    _status := 2;
    _reason := 'Automatically verified by workflow.';

    SELECT
        SUM(amount_in_local_currency)
    INTO
        _posted_amount
    FROM
        transactions.transaction_details
    WHERE transactions.transaction_details.transaction_master_id = _transaction_master_id
    AND transactions.transaction_details.tran_type='Cr';


    SELECT
        true,
        verify_sales_transactions,
        sales_verification_limit,
        verify_purchase_transactions,
        purchase_verification_limit,
        verify_gl_transactions,
        gl_verification_limit
    INTO
        _has_policy,
        _auto_verify_sales,
        _sales_verification_limit,
        _auto_verify_purchase,
        _purchase_verification_limit,
        _auto_verify_gl,
        _gl_verification_limit
    FROM
    policy.auto_verification_policy
    WHERE user_id=_transaction_posted_by
    AND is_active=true
    AND now() >= effective_from
    AND now() <= ends_on;



    IF(lower(_book) LIKE 'sales%') THEN
        IF(_auto_verify_sales = false) THEN
            _auto_verification := false;
        END IF;
        IF(_auto_verify_sales = true) THEN
            IF(_posted_amount > _sales_verification_limit AND _sales_verification_limit > 0::money_strict2) THEN
                _auto_verification := false;
            END IF;
        END IF;         
    END IF;


    IF(lower(_book) LIKE 'purchase%') THEN
        IF(_auto_verify_purchase = false) THEN
            _auto_verification := false;
        END IF;
        IF(_auto_verify_purchase = true) THEN
            IF(_posted_amount > _purchase_verification_limit AND _purchase_verification_limit > 0::money_strict2) THEN
                _auto_verification := false;
            END IF;
        END IF;         
    END IF;


    IF(lower(_book) LIKE 'journal%') THEN
        IF(_auto_verify_gl = false) THEN
            _auto_verification := false;
        END IF;
        IF(_auto_verify_gl = true) THEN
            IF(_posted_amount > _gl_verification_limit AND _gl_verification_limit > 0::money_strict2) THEN
                _auto_verification := false;
            END IF;
        END IF;         
    END IF;

    IF(_has_policy=true) THEN
        IF(_auto_verification = true) THEN
            UPDATE transactions.transaction_master
            SET 
                last_verified_on = now(),
                verified_by_user_id=_verifier,
                verification_status_id=_status,
                verification_reason=_reason
            WHERE
                transactions.transaction_master.transaction_master_id=_transaction_master_id;
        END IF;
    ELSE
        RAISE NOTICE 'No auto verification policy found for this user.';
    END IF;
    RETURN;
END
$$
LANGUAGE plpgsql;



/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/


DROP FUNCTION IF EXISTS unit_tests.auto_verify_sales_test1();

CREATE FUNCTION unit_tests.auto_verify_sales_test1()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE _book_name                              national character varying(12)='Sales.Direct';
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _cost_center_id                         integer;
    DECLARE _reference_number                       national character varying(24)='Plpgunit.fixture';
    DECLARE _statement_reference                    text='Plpgunit test was here.';
    DECLARE _is_credit                              boolean=false;
    DECLARE _payment_term_id                        integer;
    DECLARE _party_code                             national character varying(12);
    DECLARE _price_type_id                          integer;
    DECLARE _salesperson_id                         integer;
    DECLARE _shipper_id                             integer;
    DECLARE _shipping_address_code                  national character varying(12)='';
    DECLARE _store_id                               integer;
    DECLARE _is_non_taxable_sales                   boolean=true;
    DECLARE _details                                transactions.stock_detail_type[];
    DECLARE _attachments                            core.attachment_type[];
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);
    _value_date         := transactions.get_value_date(_office_id);
    _cost_center_id     := office.get_cost_center_id_by_cost_center_code('dummy-cs01');
    _payment_term_id    := core.get_payment_term_id_by_payment_term_code('dummy-pt01');
    _party_code         := 'dummy-pr01';
    _price_type_id      := core.get_price_type_id_by_price_type_code('dummy-pt01');
    _salesperson_id     := core.get_salesperson_id_by_salesperson_code('dummy-sp01');
    _shipper_id         := core.get_shipper_id_by_shipper_code('dummy-sh01');
    _store_id           := office.get_store_id_by_store_code('dummy-st01');

    
    _details            := ARRAY[
                             ROW(_store_id, 'dummy-it01', 1, 'Test Mock Unit',1800000, 0, 0, '', 0)::transactions.stock_detail_type,
                             ROW(_store_id, 'dummy-it02', 2, 'Test Mock Unit',1300000, 300, 0, '', 0)::transactions.stock_detail_type];
             
    
    PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), true, 0, true, 0, true, 0, '1-1-2000', '1-1-2020', true);


    SELECT * FROM transactions.post_sales
    (
        _book_name,_office_id, _user_id, _login_id, _value_date, _cost_center_id, _reference_number, _statement_reference,
        _is_credit, _payment_term_id, _party_code, _price_type_id, _salesperson_id, _shipper_id,
        _shipping_address_code,
        _store_id,
        _is_non_taxable_sales,
        _details,
        _attachments
    ) INTO _tran_id;

    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id < 1) THEN
        SELECT assert.fail('This transaction should have been verified.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS unit_tests.auto_verify_sales_test2();

CREATE FUNCTION unit_tests.auto_verify_sales_test2()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE _book_name                              national character varying(12)='Sales.Direct';
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _cost_center_id                         integer;
    DECLARE _reference_number                       national character varying(24)='Plpgunit.fixture';
    DECLARE _statement_reference                    text='Plpgunit test was here.';
    DECLARE _is_credit                              boolean=false;
    DECLARE _payment_term_id                        integer;
    DECLARE _party_code                             national character varying(12);
    DECLARE _price_type_id                          integer;
    DECLARE _salesperson_id                         integer;
    DECLARE _shipper_id                             integer;
    DECLARE _shipping_address_code                  national character varying(12)='';
    DECLARE _store_id                               integer;
    DECLARE _is_non_taxable_sales                   boolean=true;
    DECLARE _details                                transactions.stock_detail_type[];
    DECLARE _attachments                            core.attachment_type[];
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);
    _value_date         := transactions.get_value_date(_office_id);
    _cost_center_id     := office.get_cost_center_id_by_cost_center_code('dummy-cs01');
    _payment_term_id    := core.get_payment_term_id_by_payment_term_code('dummy-pt01');
    _party_code         := 'dummy-pr01';
    _price_type_id      := core.get_price_type_id_by_price_type_code('dummy-pt01');
    _salesperson_id     := core.get_salesperson_id_by_salesperson_code('dummy-sp01');
    _shipper_id         := core.get_shipper_id_by_shipper_code('dummy-sh01');
    _store_id           := office.get_store_id_by_store_code('dummy-st01');

    
    _details            := ARRAY[
                             ROW(_store_id, 'dummy-it01', 1, 'Test Mock Unit',180000, 0, 0, '', 0)::transactions.stock_detail_type,
                             ROW(_store_id, 'dummy-it02', 2, 'Test Mock Unit',130000, 300, 0, '', 0)::transactions.stock_detail_type];

    PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), true, 100, true, 0, true, 0, '1-1-2000', '1-1-2020', true);

    SELECT * FROM transactions.post_sales
    (
        _book_name,_office_id, _user_id, _login_id, _value_date, _cost_center_id, _reference_number, _statement_reference,
        _is_credit, _payment_term_id, _party_code, _price_type_id, _salesperson_id, _shipper_id,
        _shipping_address_code,
        _store_id,
        _is_non_taxable_sales,
        _details,
        _attachments
    ) INTO _tran_id;


    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id > 0) THEN
            SELECT assert.fail('This transaction should not have been verified.') INTO message;
            RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;






DROP FUNCTION IF EXISTS unit_tests.auto_verify_purchase_test1();

CREATE FUNCTION unit_tests.auto_verify_purchase_test1()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE _book_name                              national character varying(12)='Sales.Direct';
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _cost_center_id                         integer;
    DECLARE _reference_number                       national character varying(24)='Plpgunit.fixture';
    DECLARE _statement_reference                    text='Plpgunit test was here.';
    DECLARE _is_credit                              boolean=false;
    DECLARE _payment_term_id                        integer;
    DECLARE _party_code                             national character varying(12);
    DECLARE _price_type_id                          integer;
    DECLARE _shipper_id                             integer;
    DECLARE _store_id                               integer;
    DECLARE _is_non_taxable_sales                   boolean=true;
    DECLARE _tran_ids                               bigint[];
    DECLARE _details                                transactions.stock_detail_type[];
    DECLARE _attachments                            core.attachment_type[];
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);
    _value_date         := transactions.get_value_date(_office_id);
    _cost_center_id     := office.get_cost_center_id_by_cost_center_code('dummy-cs01');
    _party_code         := 'dummy-pr01';
    _price_type_id      := core.get_price_type_id_by_price_type_code('dummy-pt01');
    _shipper_id         := core.get_shipper_id_by_shipper_code('dummy-sh01');
    _store_id           := office.get_store_id_by_store_code('dummy-st01');

    
    _details            := ARRAY[
                             ROW(_store_id, 'dummy-it01', 1, 'Test Mock Unit',180000, 0, 0, '', 0)::transactions.stock_detail_type,
                             ROW(_store_id, 'dummy-it02', 2, 'Test Mock Unit',130000, 300, 0, '', 0)::transactions.stock_detail_type];

    PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), true, 0, true, 0, true, 0, '1-1-2000', '1-1-2020', true);

    SELECT * FROM transactions.post_purchase
    (
        _book_name,_office_id, _user_id, _login_id, _value_date, _cost_center_id, _reference_number, _statement_reference,
        _is_credit, _party_code, _price_type_id, _shipper_id,
        _store_id, _tran_ids, _details, _attachments
    ) INTO _tran_id;


    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id < 1) THEN
            SELECT assert.fail('This transaction should have been verified.') INTO message;
            RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS unit_tests.auto_verify_purchase_test2();

CREATE FUNCTION unit_tests.auto_verify_purchase_test2()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE _book_name                              national character varying(12)='Sales.Direct';
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _cost_center_id                         integer;
    DECLARE _reference_number                       national character varying(24)='Plpgunit.fixture';
    DECLARE _statement_reference                    text='Plpgunit test was here.';
    DECLARE _is_credit                              boolean=false;
    DECLARE _payment_term_id                        integer;
    DECLARE _party_code                             national character varying(12);
    DECLARE _price_type_id                          integer;
    DECLARE _shipper_id                             integer;
    DECLARE _store_id                               integer;
    DECLARE _is_non_taxable_sales                   boolean=true;
    DECLARE _tran_ids                               bigint[];
    DECLARE _details                                transactions.stock_detail_type[];
    DECLARE _attachments                            core.attachment_type[];
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);
    _value_date         := transactions.get_value_date(_office_id);
    _cost_center_id     := office.get_cost_center_id_by_cost_center_code('dummy-cs01');
    _party_code         := 'dummy-pr01';
    _price_type_id      := core.get_price_type_id_by_price_type_code('dummy-pt01');
    _shipper_id         := core.get_shipper_id_by_shipper_code('dummy-sh01');
    _store_id           := office.get_store_id_by_store_code('dummy-st01');

    
    _details            := ARRAY[
                             ROW(_store_id, 'dummy-it01', 1, 'Test Mock Unit',180000, 0, 0, '', 0)::transactions.stock_detail_type,
                             ROW(_store_id, 'dummy-it02', 2, 'Test Mock Unit',130000, 300, 0, '', 0)::transactions.stock_detail_type];

    PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), true, 0, true, 100, true, 0, '1-1-2000', '1-1-2000', true);


    SELECT * FROM transactions.post_purchase
    (
        _book_name,_office_id, _user_id, _login_id, _value_date, _cost_center_id, _reference_number, _statement_reference,
        _is_credit, _party_code, _price_type_id, _shipper_id,
        _store_id, _tran_ids, _details, _attachments
    ) INTO _tran_id;


    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id > 0) THEN
        SELECT assert.fail('This transaction should not have been verified.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS unit_tests.auto_verify_journal_test1();

CREATE FUNCTION unit_tests.auto_verify_journal_test1()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _value_date         := transactions.get_value_date(_office_id);
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);

    PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), true, 0, true, 0, true, 0, '1-1-2000', '1-1-2020', true);

    _tran_id := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));

    INSERT INTO transactions.transaction_master
    (
        transaction_master_id, 
        transaction_counter, 
        transaction_code, 
        book, 
        value_date, 
        user_id, 
        login_id, 
        office_id, 
        reference_number, 
        statement_reference
    )
    SELECT 
        _tran_id, 
        transactions.get_new_transaction_counter(_value_date), 
        transactions.get_transaction_code(_value_date, _office_id, _user_id, 1),
        'Journal',
        _value_date,
        _user_id,
        _login_id,
        _office_id,
        'REF# TEST',
        'Thou art not able to see this.';



    INSERT INTO transactions.transaction_details
    (
        transaction_master_id, 
        value_date,
        tran_type, 
        account_id, 
        statement_reference, 
        currency_code, 
        amount_in_currency, 
        local_currency_code,    
        er, 
        amount_in_local_currency
    )

    SELECT _tran_id, _value_date, 'Cr', core.get_account_id_by_account_number('dummy-acc01'), '', 'NPR', 12000, 'NPR', 1, 12000 UNION ALL
    SELECT _tran_id, _value_date, 'Dr', core.get_account_id_by_account_number('dummy-acc02'), '', 'NPR', 3000, 'NPR', 1, 3000 UNION ALL
    SELECT _tran_id, _value_date, 'Dr', core.get_account_id_by_account_number('dummy-acc03'), '', 'NPR', 9000, 'NPR', 1, 9000;


    PERFORM transactions.auto_verify(currval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id')), office.get_office_id_by_office_code('dummy-off01'));

    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id < 1) THEN
            SELECT assert.fail('This transaction should have been verified.') INTO message;
            RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;



DROP FUNCTION IF EXISTS unit_tests.auto_verify_journal_test2();

CREATE FUNCTION unit_tests.auto_verify_journal_test2()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _value_date         := transactions.get_value_date(_office_id);
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);

     PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), true, 0, true, 0, true, 100, '1-1-2000', '1-1-2020', true);
    _tran_id := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));

    INSERT INTO transactions.transaction_master
    (
        transaction_master_id, 
        transaction_counter, 
        transaction_code, 
        book, 
        value_date, 
        user_id, 
        login_id, 
        office_id, 
        reference_number, 
        statement_reference
    )
    SELECT 
        _tran_id, 
        transactions.get_new_transaction_counter(_value_date), 
        transactions.get_transaction_code(_value_date, _office_id, _user_id, 1),
        'Journal',
        _value_date,
        _user_id,
        _login_id,
        _office_id,
        'REF# TEST',
        'Thou art not able to see this.';



    INSERT INTO transactions.transaction_details
    (
        transaction_master_id,
        value_date,
        tran_type, 
        account_id, 
        statement_reference, 
        currency_code, 
        amount_in_currency, 
        local_currency_code,    
        er, 
        amount_in_local_currency
    )
    SELECT _tran_id, _value_date, 'Cr', core.get_account_id_by_account_number('dummy-acc01'), '', 'NPR', 12000, 'NPR', 1, 12000 UNION ALL
    SELECT _tran_id, _value_date, 'Dr', core.get_account_id_by_account_number('dummy-acc02'), '', 'NPR', 3000, 'NPR', 1, 3000 UNION ALL
    SELECT _tran_id, _value_date, 'Dr', core.get_account_id_by_account_number('dummy-acc03'), '', 'NPR', 9000, 'NPR', 1, 9000;


    PERFORM transactions.auto_verify(currval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id')), office.get_office_id_by_office_code('dummy-off01'));

    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id > 0) THEN
            SELECT assert.fail('This transaction should not have been verified.') INTO message;
            RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.create_routine.sql --<--<--
DROP FUNCTION IF EXISTS transactions.create_routine(_routine_code national character varying(12), _routine regproc, _order integer);

CREATE FUNCTION transactions.create_routine(_routine_code national character varying(12), _routine regproc, _order integer)
RETURNS void
AS
$$
BEGIN
   INSERT INTO transactions.routines(routine_code, routine_name, "order")
   SELECT $1, $2, $3;
   
   RETURN;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_account_statement.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_account_statement
(
    _value_date_from        date,
    _value_date_to          date,
    _user_id                integer,
    _account_id             bigint,
    _office_id              integer
);

CREATE FUNCTION transactions.get_account_statement
(
    _value_date_from        date,
    _value_date_to          date,
    _user_id                integer,
    _account_id             bigint,
    _office_id              integer
)
RETURNS TABLE
(
    id                      integer,
    value_date              date,
    tran_code               text,
    statement_reference     text,
    debit                   decimal(24, 4),
    credit                  decimal(24, 4),
    balance                 decimal(24, 4),
    office                  text,
    book                    text,
    account_id              integer,
    account_number          text,
    account                 text,
    posted_on               TIMESTAMP WITH TIME ZONE,
    posted_by               text,
    approved_by             text,
    verification_status     integer,
    flag_bg                 text,
    flag_fg                 text
)
AS
$$
    DECLARE _normally_debit boolean;
BEGIN

    _normally_debit             := transactions.is_normally_debit(_account_id);

    DROP TABLE IF EXISTS temp_account_statement;
    CREATE TEMPORARY TABLE temp_account_statement
    (
        id                      SERIAL,
        value_date              date,
        tran_code               text,
        statement_reference     text,
        debit                   decimal(24, 4),
        credit                  decimal(24, 4),
        balance                 decimal(24, 4),
        office                  text,
        book                    text,
        account_id              integer,
        account_number          text,
        account                 text,
        posted_on               TIMESTAMP WITH TIME ZONE,
        posted_by               text,
        approved_by             text,
        verification_status     integer,
        flag_bg                 text,
        flag_fg                 text
    ) ON COMMIT DROP;


    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit, office, book, account_id, posted_on, posted_by, approved_by, verification_status)
    SELECT
        _value_date_from,
        NULL,
        'Opening Balance',
        NULL,
        SUM
        (
            CASE transactions.transaction_details.tran_type
            WHEN 'Cr' THEN amount_in_local_currency
            ELSE amount_in_local_currency * -1 
            END            
        ) as credit,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL
    FROM transactions.transaction_master
    INNER JOIN transactions.transaction_details
    ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
    WHERE
        transactions.transaction_master.verification_status_id > 0
    AND
        transactions.transaction_master.value_date < _value_date_from
    AND
       transactions.transaction_master.office_id IN (SELECT * FROM office.get_office_ids(_office_id)) 
    AND
       transactions.transaction_details.account_id IN (SELECT * FROM core.get_account_ids(_account_id));

    DELETE FROM temp_account_statement
    WHERE COALESCE(temp_account_statement.debit, 0) = 0
    AND COALESCE(temp_account_statement.credit, 0) = 0;
    

    UPDATE temp_account_statement SET 
    debit = temp_account_statement.credit * -1,
    credit = 0
    WHERE temp_account_statement.credit < 0;
    

    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit, office, book, account_id, posted_on, posted_by, approved_by, verification_status)
    SELECT
        transactions.transaction_master.value_date,
        transactions.transaction_master. transaction_code,
        transactions.transaction_details.statement_reference,
        CASE transactions.transaction_details.tran_type
        WHEN 'Dr' THEN amount_in_local_currency
        ELSE NULL END,
        CASE transactions.transaction_details.tran_type
        WHEN 'Cr' THEN amount_in_local_currency
        ELSE NULL END,
        office.get_office_name_by_id(transactions.transaction_master.office_id),
        transactions.transaction_master.book,
        transactions.transaction_details.account_id,
        transactions.transaction_master.transaction_ts,
        office.get_user_name_by_user_id(COALESCE(transactions.transaction_master.user_id, transactions.transaction_master.sys_user_id)),
        office.get_user_name_by_user_id(transactions.transaction_master.verified_by_user_id),
        transactions.transaction_master.verification_status_id
    FROM transactions.transaction_master
    INNER JOIN transactions.transaction_details
    ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
    WHERE
        transactions.transaction_master.verification_status_id > 0
    AND
        transactions.transaction_master.value_date >= _value_date_from
    AND
        transactions.transaction_master.value_date <= _value_date_to
    AND
       transactions.transaction_master.office_id IN (SELECT * FROM office.get_office_ids(_office_id)) 
    AND
       transactions.transaction_details.account_id IN (SELECT * FROM core.get_account_ids(_account_id))
    ORDER BY 
        transactions.transaction_master.value_date,
        transactions.transaction_master.last_verified_on;



    UPDATE temp_account_statement
    SET balance = c.balance
    FROM
    (
        SELECT
            temp_account_statement.id, 
            SUM(COALESCE(c.credit, 0)) 
            - 
            SUM(COALESCE(c.debit,0)) As balance
        FROM temp_account_statement
        LEFT JOIN temp_account_statement AS c 
            ON (c.id <= temp_account_statement.id)
        GROUP BY temp_account_statement.id
        ORDER BY temp_account_statement.id
    ) AS c
    WHERE temp_account_statement.id = c.id;


    UPDATE temp_account_statement SET 
        account_number = core.accounts.account_number,
        account = core.accounts.account_name
    FROM core.accounts
    WHERE temp_account_statement.account_id = core.accounts.account_id;


    UPDATE temp_account_statement SET
        flag_bg = core.get_flag_background_color(core.get_flag_type_id(_user_id, 'account_statement', 'transaction_code', temp_account_statement.tran_code::text)),
        flag_fg = core.get_flag_foreground_color(core.get_flag_type_id(_user_id, 'account_statement', 'transaction_code', temp_account_statement.tran_code::text));


    IF(_normally_debit) THEN
        UPDATE temp_account_statement SET balance = temp_account_statement.balance * -1;
    END IF;

    RETURN QUERY
    SELECT * FROM temp_account_statement;
END;
$$
LANGUAGE plpgsql;

--SELECT * FROM transactions.get_account_statement('1-1-2010','1-1-2020',1,1,1);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_accrued_interest-todo.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_accrued_interest(office_id integer, party_id bigint);

CREATE FUNCTION transactions.get_accrued_interest(office_id integer, party_id bigint)
RETURNS money_strict2
AS
$$
BEGIN
    RETURN NULL;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_average_party_transaction.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_average_party_transaction(party_id bigint);


CREATE FUNCTION transactions.get_average_party_transaction(party_id bigint)
RETURNS money_strict2
STABLE
AS
$$
    DECLARE _account_id bigint= 0;
    DECLARE _debit money_strict2 = 0;
    DECLARE _credit money_strict2 = 0;
BEGIN

    IF(COALESCE($1, 0) <= 0) THEN
        RAISE EXCEPTION 'Invalid party.'
        USING ERRCODE='P3050';
    END IF;

    _account_id := core.get_account_id_by_party_id($1);

    IF(COALESCE(_account_id, 0) <= 0) THEN
        RAISE EXCEPTION 'Invalid party.'
        USING ERRCODE='P3050';
    END IF;

    
    SELECT SUM(amount_in_local_currency)
    INTO _debit
    FROM transactions.verified_transaction_view
    WHERE transactions.verified_transaction_view.account_id=_account_id
    AND tran_type='Dr';

    SELECT SUM(amount_in_local_currency)
    INTO _credit
    FROM transactions.verified_transaction_view
    WHERE transactions.verified_transaction_view.account_id=_account_id
    AND tran_type='Cr';

    RETURN FLOOR( (COALESCE(_credit, '0') + COALESCE(_debit, '0')) /2 );
END
$$
LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS transactions.get_average_party_transaction(party_id bigint, office_id integer);


CREATE FUNCTION transactions.get_average_party_transaction(party_id bigint, office_id integer)
RETURNS money_strict2
STABLE
AS
$$
    DECLARE _account_id bigint = 0;
    DECLARE _debit money_strict2 = 0;
    DECLARE _credit money_strict2 = 0;
BEGIN
    IF(COALESCE($1, 0) <= 0) THEN
        RAISE EXCEPTION 'Invalid party.'
        USING ERRCODE='P3050';
    END IF;

    IF(COALESCE($2, 0) <= 0) THEN
        RAISE EXCEPTION 'Invalid office.'
        USING ERRCODE='P3011';
    END IF;

    _account_id := core.get_account_id_by_party_id($1);

    IF(COALESCE(_account_id, 0) <= 0) THEN
        RAISE EXCEPTION 'Invalid party.'
        USING ERRCODE='P3050';
    END IF;

    SELECT SUM(amount_in_local_currency)
    INTO _debit
    FROM transactions.verified_transaction_view
    WHERE transactions.verified_transaction_view.account_id=_account_id
    AND transactions.verified_transaction_view.office_id=$2
    AND tran_type='Dr';

    SELECT SUM(amount_in_local_currency)
    INTO _credit
    FROM transactions.verified_transaction_view
    WHERE transactions.verified_transaction_view.account_id=_account_id
    AND transactions.verified_transaction_view.office_id=$2
    AND tran_type='Cr';

    RETURN FLOOR( (COALESCE(_credit, '0') + COALESCE(_debit, '0')) /2 );
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_balance_sheet.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_balance_sheet
(
    _previous_period                date,
    _current_period                 date,
    _user_id                        integer,
    _office_id                      integer,
    _factor                         integer
);

CREATE FUNCTION transactions.get_balance_sheet
(
    _previous_period                date,
    _current_period                 date,
    _user_id                        integer,
    _office_id                      integer,
    _factor                         integer
)
RETURNS TABLE
(
    id                              bigint,
    item                            text,
    previous_period                 decimal(24, 4),
    current_period                  decimal(24, 4),
    account_id                      integer,
    account_number                  text,
    is_retained_earning             boolean
)
AS
$$
    DECLARE this                    RECORD;
    DECLARE _date_from              date;
BEGIN
    _date_from := core.get_fiscal_year_start_date(_office_id);

    IF(COALESCE(_factor, 0) = 0) THEN
        _factor := 1;
    END IF;

    DROP TABLE IF EXISTS bs_temp;
    CREATE TEMPORARY TABLE bs_temp
    (
        item_id                     int PRIMARY KEY,
        item                        text,
        account_number              text,
        account_id                  integer,
        child_accounts              integer[],
        parent_item_id              integer REFERENCES bs_temp(item_id),
        is_debit                    boolean DEFAULT(false),
        previous_period             decimal(24, 4) DEFAULT(0),
        current_period              decimal(24, 4) DEFAULT(0),
        sort                        int,
        skip                        boolean DEFAULT(false),
        is_retained_earning         boolean DEFAULT(false)
    ) ON COMMIT DROP;
    
    --BS structure setup start
    INSERT INTO bs_temp(item_id, item, parent_item_id)
    SELECT  1,       'Assets',                              NULL::numeric   UNION ALL
    SELECT  10100,   'Current Assets',                      1               UNION ALL
    SELECT  10101,   'Cash A/C',                            1               UNION ALL
    SELECT  10102,   'Bank A/C',                            1               UNION ALL
    SELECT  10110,   'Accounts Receivable',                 10100           UNION ALL
    SELECT  10200,   'Fixed Assets',                        1               UNION ALL
    SELECT  10201,   'Property, Plants, and Equipments',    10201           UNION ALL
    SELECT  10300,   'Other Assets',                        1               UNION ALL
    SELECT  14900,   'Liabilities & Shareholders'' Equity', NULL            UNION ALL
    SELECT  15000,   'Current Liabilities',                 14900           UNION ALL
    SELECT  15010,   'Accounts Payable',                    15000           UNION ALL
    SELECT  15011,   'Salary Payable',                      15000           UNION ALL
    SELECT  15100,   'Long-Term Liabilities',               14900           UNION ALL
    SELECT  15200,   'Shareholders'' Equity',               14900           UNION ALL
    SELECT  15300,   'Retained Earnings',                   15200;

    UPDATE bs_temp SET is_debit = true WHERE bs_temp.item_id <= 10300;
    UPDATE bs_temp SET is_retained_earning = true WHERE bs_temp.item_id = 15300;
    
    INSERT INTO bs_temp(item_id, account_id, account_number, parent_item_id, item, is_debit, child_accounts)
    SELECT 
        row_number() OVER(ORDER BY core.accounts.account_master_id) + (core.accounts.account_master_id * 100) AS id,
        core.accounts.account_id,
        core.accounts.account_number,
        core.accounts.account_master_id,
        core.accounts.account_name,
        core.account_masters.normally_debit,
        array_agg(agg)
    FROM core.accounts
    INNER JOIN core.account_masters
    ON core.accounts.account_master_id = core.account_masters.account_master_id,
    core.get_account_ids(core.accounts.account_id) as agg
    WHERE parent_account_id IN
    (
        SELECT core.accounts.account_id
        FROM core.accounts
        WHERE core.accounts.sys_type
        AND core.accounts.account_master_id BETWEEN 10100 AND 15200
    )
    AND core.accounts.account_master_id BETWEEN 10100 AND 15200
    GROUP BY core.accounts.account_id, core.account_masters.normally_debit
    ORDER BY account_master_id;


    --Updating credit balances of individual GL accounts.
    UPDATE bs_temp SET previous_period = tran.previous_period
    FROM
    (
        SELECT 
            bs_temp.account_id,         
            SUM(CASE tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE amount_in_local_currency * -1 END) AS previous_period
        FROM bs_temp
        INNER JOIN transactions.verified_transaction_mat_view
        ON transactions.verified_transaction_mat_view.account_id = ANY(bs_temp.child_accounts)
        WHERE value_date <=_previous_period
        AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
        GROUP BY bs_temp.account_id
    ) AS tran
    WHERE bs_temp.account_id = tran.account_id;

    --Updating credit balances of individual GL accounts.
    UPDATE bs_temp SET current_period = tran.current_period
    FROM
    (
        SELECT 
            bs_temp.account_id,         
            SUM(CASE tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE amount_in_local_currency * -1 END) AS current_period
        FROM bs_temp
        INNER JOIN transactions.verified_transaction_mat_view
        ON transactions.verified_transaction_mat_view.account_id = ANY(bs_temp.child_accounts)
        WHERE value_date <=_current_period
        AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
        GROUP BY bs_temp.account_id
    ) AS tran
    WHERE bs_temp.account_id = tran.account_id;


    --Dividing by the factor.
    UPDATE bs_temp SET 
        previous_period = bs_temp.previous_period / _factor,
        current_period = bs_temp.current_period / _factor;

    --Upading balance of retained earnings
    UPDATE bs_temp SET 
        previous_period = transactions.get_retained_earnings(_previous_period, _office_id, _factor),
        current_period = transactions.get_retained_earnings(_current_period, _office_id, _factor)
    WHERE bs_temp.item_id = 15300;

    --Reversing assets to debit balance.
    UPDATE bs_temp SET 
        previous_period=bs_temp.previous_period*-1,
        current_period=bs_temp.current_period*-1 
    WHERE bs_temp.is_debit;



    FOR this IN 
    SELECT * FROM bs_temp 
    WHERE COALESCE(bs_temp.previous_period, 0) + COALESCE(bs_temp.current_period, 0) != 0 
    AND bs_temp.account_id IS NOT NULL
    LOOP
        UPDATE bs_temp SET skip = true WHERE this.account_id = ANY(bs_temp.child_accounts)
        AND bs_temp.account_id != this.account_id;
    END LOOP;

    --Updating current period amount on GL parent item by the sum of their respective child balances.
    WITH running_totals AS
    (
        SELECT bs_temp.parent_item_id,
        SUM(COALESCE(bs_temp.previous_period, 0)) AS previous_period,
        SUM(COALESCE(bs_temp.current_period, 0)) AS current_period
        FROM bs_temp
        WHERE NOT skip
        AND parent_item_id IS NOT NULL
        GROUP BY bs_temp.parent_item_id
    )
    UPDATE bs_temp SET 
        previous_period = running_totals.previous_period,
        current_period = running_totals.current_period
    FROM running_totals
    WHERE running_totals.parent_item_id = bs_temp.item_id
    AND bs_temp.item_id
    IN
    (
        SELECT parent_item_id FROM running_totals
    );


    --Updating sum amount on parent item by the sum of their respective child balances.
    UPDATE bs_temp SET 
        previous_period = tran.previous_period,
        current_period = tran.current_period
    FROM 
    (
        SELECT bs_temp.parent_item_id,
        SUM(bs_temp.previous_period) AS previous_period,
        SUM(bs_temp.current_period) AS current_period
        FROM bs_temp
        WHERE bs_temp.parent_item_id IS NOT NULL
        GROUP BY bs_temp.parent_item_id
    ) 
    AS tran 
    WHERE tran.parent_item_id = bs_temp.item_id
    AND tran.parent_item_id IS NOT NULL;


    --Updating sum amount on grandparents.
    UPDATE bs_temp SET 
        previous_period = tran.previous_period,
        current_period = tran.current_period
    FROM 
    (
        SELECT bs_temp.parent_item_id,
        SUM(bs_temp.previous_period) AS previous_period,
        SUM(bs_temp.current_period) AS current_period
        FROM bs_temp
        WHERE bs_temp.parent_item_id IS NOT NULL
        GROUP BY bs_temp.parent_item_id
    ) 
    AS tran 
    WHERE tran.parent_item_id = bs_temp.item_id;

    --Removing ledgers having zero balances
    DELETE FROM bs_temp
    WHERE COALESCE(bs_temp.previous_period, 0) + COALESCE(bs_temp.current_period, 0) = 0
    AND bs_temp.account_id IS NOT NULL;

    --Converting 0's to NULLS.
    UPDATE bs_temp SET previous_period = CASE WHEN bs_temp.previous_period = 0 THEN NULL ELSE bs_temp.previous_period END;
    UPDATE bs_temp SET current_period = CASE WHEN bs_temp.current_period = 0 THEN NULL ELSE bs_temp.current_period END;
    
    UPDATE bs_temp SET sort = bs_temp.item_id WHERE bs_temp.item_id < 15400;
    UPDATE bs_temp SET sort = bs_temp.parent_item_id WHERE bs_temp.item_id >= 15400;

    RETURN QUERY
    SELECT
        row_number() OVER(order by bs_temp.sort, bs_temp.item_id) AS id,
        bs_temp.item,
        bs_temp.previous_period,
        bs_temp.current_period,
        bs_temp.account_id,
        bs_temp.account_number,
        bs_temp.is_retained_earning
    FROM bs_temp;
END;
$$
LANGUAGE plpgsql;

--SELECT * FROM transactions.get_balance_sheet('7/17/2014', '7/16/2015', 2, 2, 1000);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_cash_flow_statement.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_cash_flow_statement
(
    _date_from                      date,
    _date_to                        date,
    _user_id                        integer,
    _office_id                      integer,
    _factor                         integer
);

CREATE FUNCTION transactions.get_cash_flow_statement
(
    _date_from                      date,
    _date_to                        date,
    _user_id                        integer,
    _office_id                      integer,
    _factor                         integer
)
RETURNS json
AS
$$
    DECLARE _sql                    text;
    DECLARE _periods                core.period[];
    DECLARE _json                   json;
    DECLARE this                    RECORD;
    DECLARE _balance                decimal(24, 4);
    DECLARE _is_periodic            boolean = office.is_periodic_inventory(_office_id);
BEGIN    
    --We cannot divide by zero.
    IF(COALESCE(_factor, 0) = 0) THEN
        _factor := 1;
    END IF;

    DROP TABLE IF EXISTS cf_temp;
    CREATE TEMPORARY TABLE cf_temp
    (
        item_id                     integer PRIMARY KEY,
        item                        text,
        account_master_id           integer,
        parent_item_id              integer REFERENCES cf_temp(item_id),
        is_summation                boolean DEFAULT(false),
        is_debit                    boolean DEFAULT(false),
        is_sales                    boolean DEFAULT(false),
        is_purchase                 boolean DEFAULT(false)
    ) ON COMMIT DROP;


    _periods            := core.get_periods(_date_from, _date_to);

    IF(_periods IS NULL) THEN
        RAISE EXCEPTION 'Invalid period specified.'
        USING ERRCODE='P3009';
    END IF;

    /**************************************************************************************************************************************************************************************
        CREATING PERIODS
    **************************************************************************************************************************************************************************************/
    SELECT string_agg(dynamic, '') FROM
    (
            SELECT 'ALTER TABLE cf_temp ADD COLUMN "' || period_name || '" decimal(24, 4) DEFAULT(0);' as dynamic
            FROM explode_array(_periods)
         
    ) periods
    INTO _sql;
    
    EXECUTE _sql;

    /**************************************************************************************************************************************************************************************
        CASHFLOW TABLE STRUCTURE START
    **************************************************************************************************************************************************************************************/
    INSERT INTO cf_temp(item_id, item, is_summation, is_debit)
    SELECT  10000,  'Cash and cash equivalents, beginning of period',   false,  true    UNION ALL    
    SELECT  20000,  'Cash flows from operating activities',             true,   false   UNION ALL    
    SELECT  30000,  'Cash flows from investing activities',             true,   false   UNION ALL
    SELECT  40000,  'Cash flows from financing acticities',             true,   false   UNION ALL    
    SELECT  50000,  'Net increase in cash and cash equivalents',        false,  false   UNION ALL    
    SELECT  60000,  'Cash and cash equivalents, end of period',         false,  true;    

    INSERT INTO cf_temp(item_id, item, parent_item_id, is_debit, is_sales, is_purchase)
    SELECT  cash_flow_heading_id,   cash_flow_heading_name, 20000,  is_debit,   is_sales,   is_purchase FROM core.cash_flow_headings WHERE cash_flow_heading_type = 'O' UNION ALL
    SELECT  cash_flow_heading_id,   cash_flow_heading_name, 30000,  is_debit,   is_sales,   is_purchase FROM core.cash_flow_headings WHERE cash_flow_heading_type = 'I' UNION ALL 
    SELECT  cash_flow_heading_id,   cash_flow_heading_name, 40000,  is_debit,   is_sales,   is_purchase FROM core.cash_flow_headings WHERE cash_flow_heading_type = 'F';

    INSERT INTO cf_temp(item_id, item, parent_item_id, is_debit, account_master_id)
    SELECT core.account_masters.account_master_id + 50000, core.account_masters.account_master_name,  core.cash_flow_setup.cash_flow_heading_id, core.cash_flow_headings.is_debit, core.account_masters.account_master_id
    FROM core.cash_flow_setup
    INNER JOIN core.account_masters
    ON core.cash_flow_setup.account_master_id = core.account_masters.account_master_id
    INNER JOIN core.cash_flow_headings
    ON core.cash_flow_setup.cash_flow_heading_id = core.cash_flow_headings.cash_flow_heading_id;

    /**************************************************************************************************************************************************************************************
        CASHFLOW TABLE STRUCTURE END
    **************************************************************************************************************************************************************************************/


    /**************************************************************************************************************************************************************************************
        ITERATING THROUGH PERIODS TO UPDATE TRANSACTION BALANCES
    **************************************************************************************************************************************************************************************/
    FOR this IN SELECT * FROM explode_array(_periods) ORDER BY date_from ASC
    LOOP
        --
        --
        --Opening cash balance.
        --
        --
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"=
            (
                SELECT
                SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) - 
                SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) AS total_amount
            FROM transactions.verified_cash_transaction_mat_view
            WHERE account_master_id IN(10101, 10102) 
            AND value_date <''' || this.date_from::text ||
            ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
            )
        WHERE cf_temp.item_id = 10000;';

        EXECUTE _sql;

        --
        --
        --Updating debit balances of mapped account master heads.
        --
        --
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"=tran.total_amount
        FROM
        (
            SELECT transactions.verified_cash_transaction_mat_view.account_master_id,
            SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) - 
            SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) AS total_amount
        FROM transactions.verified_cash_transaction_mat_view
        WHERE transactions.verified_cash_transaction_mat_view.book NOT IN (''Sales.Direct'', ''Sales.Receipt'', ''Sales.Delivery'', ''Purchase.Direct'', ''Purchase.Receipt'')
        AND NOT account_master_id IN(10101, 10102) 
        AND value_date >=''' || this.date_from::text || ''' AND value_date <=''' || this.date_to::text ||
        ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
        GROUP BY transactions.verified_cash_transaction_mat_view.account_master_id
        ) AS tran
        WHERE tran.account_master_id = cf_temp.account_master_id';
        EXECUTE _sql;

        --
        --
        --Updating cash paid to suppliers.
        --
        --
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"=
        
        (
            SELECT
            SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) - 
            SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) 
        FROM transactions.verified_cash_transaction_mat_view
        WHERE transactions.verified_cash_transaction_mat_view.book IN (''Purchase.Direct'', ''Purchase.Receipt'')
        AND NOT account_master_id IN(10101, 10102) 
        AND value_date >=''' || this.date_from::text || ''' AND value_date <=''' || this.date_to::text ||
        ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
        )
        WHERE cf_temp.is_purchase;';
        EXECUTE _sql;

        --
        --
        --Updating cash received from customers.
        --
        --
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"=
        
        (
            SELECT
            SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) - 
            SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) 
        FROM transactions.verified_cash_transaction_mat_view
        WHERE transactions.verified_cash_transaction_mat_view.book IN (''Sales.Direct'', ''Sales.Receipt'', ''Sales.Delivery'')
        AND account_master_id IN(10101, 10102) 
        AND value_date >=''' || this.date_from::text || ''' AND value_date <=''' || this.date_to::text ||
        ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
        )
        WHERE cf_temp.is_sales;';
        RAISE NOTICE '%', _SQL;
        EXECUTE _sql;

        --Closing cash balance.
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"
        =
        (
            SELECT
            SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) - 
            SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) AS total_amount
        FROM transactions.verified_cash_transaction_mat_view
        WHERE account_master_id IN(10101, 10102) 
        AND value_date <''' || this.date_to::text ||
        ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
        ) 
        WHERE cf_temp.item_id = 60000;';

        EXECUTE _sql;

        --Reversing to debit balance for associated headings.
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"="' || this.period_name || '"*-1 WHERE is_debit=true;';
        EXECUTE _sql;
    END LOOP;



    --Updating periodic balances on parent item by the sum of their respective child balances.
    SELECT 'UPDATE cf_temp SET ' || array_to_string(array_agg('"' || period_name || '"' || '=cf_temp."' || period_name || '" + tran."' || period_name || '"'), ',') || 
    ' FROM 
    (
        SELECT parent_item_id, '
        || array_to_string(array_agg('SUM("' || period_name || '") AS "' || period_name || '"'), ',') || '
         FROM cf_temp
        GROUP BY parent_item_id
    ) 
    AS tran
        WHERE tran.parent_item_id = cf_temp.item_id
        AND cf_temp.item_id NOT IN (10000, 60000);'
    INTO _sql
    FROM explode_array(_periods);

        RAISE NOTICE '%', _SQL;
    EXECUTE _sql;


    SELECT 'UPDATE cf_temp SET ' || array_to_string(array_agg('"' || period_name || '"=tran."' || period_name || '"'), ',') 
    || ' FROM 
    (
        SELECT
            cf_temp.parent_item_id,'
        || array_to_string(array_agg('SUM(CASE is_debit WHEN true THEN "' || period_name || '" ELSE "' || period_name || '" *-1 END) AS "' || period_name || '"'), ',') ||
    '
         FROM cf_temp
         GROUP BY cf_temp.parent_item_id
    ) 
    AS tran
    WHERE cf_temp.item_id = tran.parent_item_id
    AND cf_temp.parent_item_id IS NULL;'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql;


    --Dividing by the factor.
    SELECT 'UPDATE cf_temp SET ' || array_to_string(array_agg('"' || period_name || '"="' || period_name || '"/' || _factor::text), ',') || ';'
    INTO _sql
    FROM explode_array(_periods);
    EXECUTE _sql;


    --Converting 0's to NULLS.
    SELECT 'UPDATE cf_temp SET ' || array_to_string(array_agg('"' || period_name || '"= CASE WHEN "' || period_name || '" = 0 THEN NULL ELSE "' || period_name || '" END'), ',') || ';'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql;

    SELECT 
    'SELECT array_to_json(array_agg(row_to_json(report)))
    FROM
    (
        SELECT item, '
        || array_to_string(array_agg('"' || period_name || '"'), ',') ||
        ', is_summation FROM cf_temp
        WHERE account_master_id IS NULL
        ORDER BY item_id
    ) AS report;'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql INTO _json ;

    RETURN _json;
END
$$
LANGUAGE plpgsql;

--SELECT transactions.get_cash_flow_statement('1-1-2000','1-15-2020', 2, 2, 1)

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_cash_repository_balance.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_cash_repository_balance(_cash_repository_id integer, _currency_code national character varying(12));
CREATE FUNCTION transactions.get_cash_repository_balance(_cash_repository_id integer, _currency_code national character varying(12))
RETURNS money_strict2
AS
$$
    DECLARE _debit money_strict2;
    DECLARE _credit money_strict2;
BEGIN
    SELECT COALESCE(SUM(amount_in_currency), 0::money_strict2) INTO _debit
    FROM transactions.verified_transaction_view
    WHERE cash_repository_id=$1
    AND currency_code=$2
    AND tran_type='Dr';

    SELECT COALESCE(SUM(amount_in_currency), 0::money_strict2) INTO _credit
    FROM transactions.verified_transaction_view
    WHERE cash_repository_id=$1
    AND currency_code=$2
    AND tran_type='Cr';

    RETURN _debit - _credit;
END
$$
LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS transactions.get_cash_repository_balance(_cash_repository_id integer);
CREATE FUNCTION transactions.get_cash_repository_balance(_cash_repository_id integer)
RETURNS money_strict2
AS
$$
    DECLARE _local_currency_code national character varying(12) = transactions.get_default_currency_code($1);
    DECLARE _debit money_strict2;
    DECLARE _credit money_strict2;
BEGIN
    SELECT COALESCE(SUM(amount_in_currency), 0::money_strict2) INTO _debit
    FROM transactions.verified_transaction_view
    WHERE cash_repository_id=$1
    AND currency_code=_local_currency_code
    AND tran_type='Dr';

    SELECT COALESCE(SUM(amount_in_currency), 0::money_strict2) INTO _credit
    FROM transactions.verified_transaction_view
    WHERE cash_repository_id=$1
    AND currency_code=_local_currency_code
    AND tran_type='Cr';

    RETURN _debit - _credit;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_closing_stock.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_closing_stock
(
    _on_date            date,
    _office_id          integer
);

CREATE FUNCTION transactions.get_closing_stock
(
    _on_date            date,
    _office_id          integer
)
RETURNS decimal(24, 4)
AS
$$
BEGIN
    RETURN 0;--TODO
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_cost_of_goods_sold.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_cost_of_goods_sold(_item_id integer, _unit_id integer, _store_id integer, _quantity integer);

CREATE FUNCTION transactions.get_cost_of_goods_sold(_item_id integer, _unit_id integer, _store_id integer, _quantity integer)
RETURNS money_strict
AS
$$
    DECLARE _base_quantity decimal;
    DECLARE _base_unit_id integer;
    DECLARE _base_unit_cost money_strict;
    DECLARE _total_sold integer;
    DECLARE _office_id integer      = office.get_office_id_by_store_id($3);
    DECLARE _method text            = office.get_cost_of_good_method(_office_id);
BEGIN
    _base_quantity   = core.get_base_quantity_by_unit_id($2, $4);
    _base_unit_id    = core.get_root_unit_id($2);


    IF(_method = 'MAVCO') THEN
            --RAISE NOTICE '% % % %',_item_id, _store_id, _base_quantity, 1.00;
            RETURN transactions.get_mavcogs(_item_id, _store_id, _base_quantity, 1.00);
    END IF;


    DROP TABLE IF EXISTS temp_cost_of_goods_sold;
    CREATE TEMPORARY TABLE temp_cost_of_goods_sold
    (
            id                     BIGSERIAL,
            stock_detail_id        bigint,
            audit_ts               TIMESTAMP WITH TIME ZONE,
            value_date             date,
            price                  money_strict,
            tran_type              text
                    
    ) ON COMMIT DROP;

    WITH stock_cte AS
    (
        SELECT
            stock_detail_id, 
            audit_ts,
            value_date,
            generate_series(1, base_quantity::integer) AS series,
            (price * quantity) / base_quantity AS price,
            tran_type
        FROM transactions.verified_stock_details_view
        WHERE item_id = $1
        AND store_id = $3
    )
    
    INSERT INTO temp_cost_of_goods_sold(stock_detail_id, audit_ts, value_date, price, tran_type)
    SELECT stock_detail_id, audit_ts, value_date, price, tran_type FROM stock_cte
    ORDER BY value_date, audit_ts, stock_detail_id;

    SELECT COUNT(*) INTO _total_sold 
    FROM temp_cost_of_goods_sold
    WHERE tran_type='Cr';

    IF(_method = 'LIFO') THEN
        SELECT SUM(price) INTO _base_unit_cost
        FROM 
        (
                SELECT price
                FROM temp_cost_of_goods_sold
                WHERE tran_type ='Dr'
                ORDER BY id DESC
                OFFSET _total_sold
                LIMIT _base_quantity
        ) S;
    ELSIF (_method = 'FIFO') THEN
        SELECT SUM(price) INTO _base_unit_cost
        FROM 
        (
                SELECT price
                FROM temp_cost_of_goods_sold
                WHERE tran_type ='Dr'
                ORDER BY id
                OFFSET _total_sold
                LIMIT _base_quantity
        ) S;
    ELSIF (_method != 'MAVCO') THEN
        RAISE EXCEPTION 'Invalid configuration: COGS method.'
        USING ERRCODE='P6010';
    END IF;

    RETURN _base_unit_cost;
END
$$
LANGUAGE PLPGSQL;

-- UPDATE office.configuration
-- SET value = 'MAVCO'
-- WHERE config_id = 2;
-- 
-- 
--SELECT * FROM transactions.get_cost_of_goods_sold(1, 1, 1, 1);


-- 
-- 
-- 
--SELECT * FROM transactions.get_cost_of_goods_sold(1, 7, 1, 1);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_income_expenditure_statement.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_income_expenditure_statement
(
    _date_from              date,
    _date_to                date,
    _user_id                integer,
    _office_id              integer,
    _compact                boolean
);

CREATE FUNCTION transactions.get_income_expenditure_statement
(
    _date_from              date,
    _date_to                date,
    _user_id                integer,
    _office_id              integer,
    _compact                boolean
)
RETURNS TABLE
(
    id                      integer,
    account_id              integer,
    account_number          text,
    account                 text,
    previous_debit          decimal(24, 4),
    previous_credit         decimal(24, 4),
    previous_balance        decimal(24, 4),
    debit                   decimal(24, 4),
    credit                  decimal(24, 4),
    balance                 decimal(24, 4),
    closing_debit           decimal(24, 4),
    closing_credit          decimal(24, 4),
    closing_balance         decimal(24, 4)
)
AS
$$
    DECLARE _account_master_id  integer;
BEGIN
    IF(_date_from = 'infinity') THEN
        RAISE EXCEPTION '%', 'Invalid date.'
        USING ERRCODE='P3008';
    END IF;

    IF NOT EXISTS
    (
        SELECT 0 FROM office.offices
        WHERE office_id IN 
        (
            SELECT * FROM office.get_office_ids(1)
        )
        HAVING count(DISTINCT currency_code) = 1
   ) THEN
        RAISE EXCEPTION 'Cannot produce P/L statement of office(s) having different base currencies.'
        USING ERRCODE='P8001';
   END IF;

   SELECT 
    account_master_id 
   INTO 
    _account_master_id
   FROM core.account_masters
   WHERE core.account_masters.account_master_code = 'PLA';


    DROP TABLE IF EXISTS temp_income_expenditure_statement;
    CREATE TEMPORARY TABLE temp_income_expenditure_statement
    (
        id                      integer,
        account_id              integer,
        account_number          text,
        account                 text,
        previous_debit          decimal(24, 4) DEFAULT(0),
        previous_credit         decimal(24, 4) DEFAULT(0),
        previous_balance        decimal(24, 4) DEFAULT(0),
        debit                   decimal(24, 4) DEFAULT(0),
        credit                  decimal(24, 4) DEFAULT(0),
        balance                 decimal(24, 4) DEFAULT(0),
        closing_debit           decimal(24, 4) DEFAULT(0),
        closing_credit          decimal(24, 4) DEFAULT(0),
        closing_balance         decimal(24, 4) DEFAULT(0),
        root_account_id         integer,
        normally_debit          boolean
    ) ON COMMIT DROP;

    INSERT INTO temp_income_expenditure_statement(account_id, previous_debit, previous_credit)    
    SELECT 
        verified_transaction_mat_view.account_id, 
        SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE 0 END),
        SUM(CASE tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE 0 END)        
    FROM transactions.verified_transaction_mat_view
    WHERE value_date < _date_from
    AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
    AND account_master_id = _account_master_id
    GROUP BY verified_transaction_mat_view.account_id;



    IF(_date_to = 'infinity') THEN
        INSERT INTO temp_income_expenditure_statement(account_id, debit, credit)    
        SELECT 
            verified_transaction_mat_view.account_id, 
            SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE 0 END),
            SUM(CASE tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE 0 END)        
        FROM transactions.verified_transaction_mat_view
        WHERE value_date > _date_from
        AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
        AND account_master_id = _account_master_id
        GROUP BY verified_transaction_mat_view.account_id;
    ELSE
        INSERT INTO temp_income_expenditure_statement(account_id, debit, credit)    
        SELECT 
            verified_transaction_mat_view.account_id, 
            SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE 0 END),
            SUM(CASE tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE 0 END)        
        FROM transactions.verified_transaction_mat_view
        WHERE value_date >= _date_from AND value_date <= _date_to
        AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
        AND account_master_id = _account_master_id
        GROUP BY verified_transaction_mat_view.account_id;    
    END IF;

    UPDATE temp_income_expenditure_statement SET root_account_id = core.get_second_root_account_id(temp_income_expenditure_statement.account_id);


    DROP TABLE IF EXISTS temp_income_expenditure_statement2;
    
    IF(_compact) THEN
        CREATE TEMPORARY TABLE temp_income_expenditure_statement2
        ON COMMIT DROP
        AS
        SELECT
            temp_income_expenditure_statement.root_account_id AS account_id,
            ''::text as account_number,
            ''::text as account,
            SUM(temp_income_expenditure_statement.previous_debit) AS previous_debit,
            SUM(temp_income_expenditure_statement.previous_credit) AS previous_credit,
            0::decimal(24, 4) AS previous_balance,
            SUM(temp_income_expenditure_statement.debit) AS debit,
            SUM(temp_income_expenditure_statement.credit) as credit,
            0::decimal(24, 4) AS balance,
            SUM(temp_income_expenditure_statement.closing_debit) AS closing_debit,
            SUM(temp_income_expenditure_statement.closing_credit) AS closing_credit,
            0::decimal(24, 4) AS closing_balance,
            temp_income_expenditure_statement.normally_debit
        FROM temp_income_expenditure_statement
        GROUP BY 
            temp_income_expenditure_statement.root_account_id,
            temp_income_expenditure_statement.normally_debit;
    ELSE
        CREATE TEMPORARY TABLE temp_income_expenditure_statement2
        ON COMMIT DROP
        AS
        SELECT
            temp_income_expenditure_statement.account_id,
            ''::text as account_number,
            ''::text as account,
            SUM(temp_income_expenditure_statement.previous_debit) AS previous_debit,
            SUM(temp_income_expenditure_statement.previous_credit) AS previous_credit,
            0::decimal(24, 4) AS previous_balance,
            SUM(temp_income_expenditure_statement.debit) AS debit,
            SUM(temp_income_expenditure_statement.credit) as credit,
            0::decimal(24, 4) AS balance,
            SUM(temp_income_expenditure_statement.closing_debit) AS closing_debit,
            SUM(temp_income_expenditure_statement.closing_credit) AS closing_credit,
            0::decimal(24, 4) AS closing_balance,
            temp_income_expenditure_statement.normally_debit
        FROM temp_income_expenditure_statement
        GROUP BY 
            temp_income_expenditure_statement.account_id,
            temp_income_expenditure_statement.normally_debit;
    END IF;
    
    UPDATE temp_income_expenditure_statement2 SET
        account_number = core.accounts.account_number,
        account = core.accounts.account_name,
        normally_debit = core.account_masters.normally_debit
    FROM core.accounts
    INNER JOIN core.account_masters
    ON core.accounts.account_master_id = core.account_masters.account_master_id
    WHERE temp_income_expenditure_statement2.account_id = core.accounts.account_id;

    UPDATE temp_income_expenditure_statement2 SET 
        previous_balance = temp_income_expenditure_statement2.previous_credit - temp_income_expenditure_statement2.previous_debit,
        balance = temp_income_expenditure_statement2.credit - temp_income_expenditure_statement2.debit,
        closing_debit = temp_income_expenditure_statement2.previous_debit + temp_income_expenditure_statement2.debit,
        closing_credit = temp_income_expenditure_statement2.previous_credit + temp_income_expenditure_statement2.credit,
        closing_balance = temp_income_expenditure_statement2.previous_credit + temp_income_expenditure_statement2.credit - (temp_income_expenditure_statement2.previous_debit + temp_income_expenditure_statement2.debit);


    UPDATE temp_income_expenditure_statement2 SET 
        previous_balance = temp_income_expenditure_statement2.previous_balance * -1,
        balance = temp_income_expenditure_statement2.balance * -1,
        closing_balance = temp_income_expenditure_statement2.closing_balance * -1
    WHERE temp_income_expenditure_statement2.normally_debit;

    UPDATE temp_income_expenditure_statement2 SET previous_debit   = NULL WHERE temp_income_expenditure_statement2.previous_debit     = 0;
    UPDATE temp_income_expenditure_statement2 SET previous_credit  = NULL WHERE temp_income_expenditure_statement2.previous_credit    = 0;
    UPDATE temp_income_expenditure_statement2 SET previous_balance = NULL WHERE temp_income_expenditure_statement2.previous_balance   = 0;
    UPDATE temp_income_expenditure_statement2 SET debit            = NULL WHERE temp_income_expenditure_statement2.debit              = 0;
    UPDATE temp_income_expenditure_statement2 SET credit           = NULL WHERE temp_income_expenditure_statement2.credit             = 0;
    UPDATE temp_income_expenditure_statement2 SET balance          = NULL WHERE temp_income_expenditure_statement2.balance            = 0;
    UPDATE temp_income_expenditure_statement2 SET closing_debit    = NULL WHERE temp_income_expenditure_statement2.closing_debit      = 0;
    UPDATE temp_income_expenditure_statement2 SET closing_credit   = NULL WHERE temp_income_expenditure_statement2.closing_credit     = 0;
    UPDATE temp_income_expenditure_statement2 SET closing_balance  = NULL WHERE temp_income_expenditure_statement2.closing_balance    = 0;


    DELETE FROM temp_income_expenditure_statement2 WHERE temp_income_expenditure_statement2.closing_balance = 0;
   
    RETURN QUERY
    SELECT
        row_number() OVER(ORDER BY temp_income_expenditure_statement2.account_id)::integer AS id,
        temp_income_expenditure_statement2.account_id,
        temp_income_expenditure_statement2.account_number,
        temp_income_expenditure_statement2.account,
        temp_income_expenditure_statement2.previous_debit,
        temp_income_expenditure_statement2.previous_credit,
        temp_income_expenditure_statement2.previous_balance,
        temp_income_expenditure_statement2.debit,
        temp_income_expenditure_statement2.credit,
        temp_income_expenditure_statement2.balance,
        temp_income_expenditure_statement2.closing_debit,
        temp_income_expenditure_statement2.closing_credit,
        temp_income_expenditure_statement2.closing_balance
    FROM temp_income_expenditure_statement2;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM transactions.get_income_expenditure_statement('1-1-2010','1-1-2020',1,1, true);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_journal_view.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_journal_view
(
    _user_id                        integer,
    _office_id                      integer,
    _from                           date,
    _to                             date,
    _tran_id                        bigint,
    _tran_code                      national character varying(50),
    _book                           national character varying(50),
    _reference_number               national character varying(50),
    _statement_reference            national character varying(50),
    _posted_by                      national character varying(50),
    _office                         national character varying(50),
    _status                         national character varying(12),
    _verified_by                    national character varying(50),
    _reason                         national character varying(128)
);

CREATE FUNCTION transactions.get_journal_view
(
    _user_id                        integer,
    _office_id                      integer,
    _from                           date,
    _to                             date,
    _tran_id                        bigint,
    _tran_code                      national character varying(50),
    _book                           national character varying(50),
    _reference_number               national character varying(50),
    _statement_reference            national character varying(50),
    _posted_by                      national character varying(50),
    _office                         national character varying(50),
    _status                         national character varying(12),
    _verified_by                    national character varying(50),
    _reason                         national character varying(128)
)
RETURNS TABLE
(
    transaction_master_id           bigint,
    transaction_code                national character varying(50),
    book                            national character varying(50),
    value_date                      date,
    reference_number                national character varying(24),
    statement_reference             text,
    posted_by                       text,
    office                          text,
    status                          text,
    verified_by                     text,
    verified_on                     TIMESTAMP WITH TIME ZONE,
    reason                          national character varying(128),
    transaction_ts                  TIMESTAMP WITH TIME ZONE,
    flag_bg                         text,
    flag_fg                         text
)
AS
$$
BEGIN
    RETURN QUERY
    WITH RECURSIVE office_cte(office_id) AS 
    (
        SELECT _office_id
        UNION ALL
        SELECT
            c.office_id
        FROM 
        office_cte AS p, 
        office.offices AS c 
        WHERE 
        parent_office_id = p.office_id
    )

    SELECT 
        transactions.transaction_master.transaction_master_id, 
        transactions.transaction_master.transaction_code,
        transactions.transaction_master.book,
        transactions.transaction_master.value_date,
        transactions.transaction_master.reference_number,
        transactions.transaction_master.statement_reference,
        office.get_user_name_by_user_id(transactions.transaction_master.user_id) as posted_by,
        office.get_office_name_by_id(transactions.transaction_master.office_id) as office,
        core.get_verification_status_name_by_verification_status_id(transactions.transaction_master.verification_status_id) as status,
        office.get_user_name_by_user_id(transactions.transaction_master.verified_by_user_id) as verified_by,
        transactions.transaction_master.last_verified_on AS verified_on,
        transactions.transaction_master.verification_reason AS reason,    
        transactions.transaction_master.transaction_ts,
        core.get_flag_background_color(core.get_flag_type_id(_user_id, 'transactions.transaction_master', 'transaction_master_id', transactions.transaction_master.transaction_master_id::text)) AS flag_bg,
        core.get_flag_foreground_color(core.get_flag_type_id(_user_id, 'transactions.transaction_master', 'transaction_master_id', transactions.transaction_master.transaction_master_id::text)) AS flag_fg
    FROM transactions.transaction_master
    WHERE 1 = 1
    AND transactions.transaction_master.value_date BETWEEN _from AND _to
    AND office_id IN (SELECT office_id FROM office_cte)
    AND (_tran_id = 0 OR _tran_id  = transactions.transaction_master.transaction_master_id)
    AND lower(transactions.transaction_master.transaction_code) LIKE '%' || lower(_tran_code) || '%' 
    AND lower(transactions.transaction_master.book) LIKE '%' || lower(_book) || '%' 
    AND COALESCE(lower(transactions.transaction_master.reference_number), '') LIKE '%' || lower(_reference_number) || '%' 
    AND COALESCE(lower(transactions.transaction_master.statement_reference), '') LIKE '%' || lower(_statement_reference) || '%' 
    AND COALESCE(lower(transactions.transaction_master.verification_reason), '') LIKE '%' || lower(_reason) || '%' 
    AND lower(office.get_user_name_by_user_id(transactions.transaction_master.user_id)) LIKE '%' || lower(_posted_by) || '%' 
    AND lower(office.get_office_name_by_id(transactions.transaction_master.office_id)) LIKE '%' || lower(_office) || '%' 
    AND COALESCE(lower(core.get_verification_status_name_by_verification_status_id(transactions.transaction_master.verification_status_id)), '') LIKE '%' || lower(_status) || '%' 
    AND COALESCE(lower(office.get_user_name_by_user_id(transactions.transaction_master.verified_by_user_id)), '') LIKE '%' || lower(_verified_by) || '%'    
    ORDER BY value_date ASC, verification_status_id DESC;
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.get_journal_view(2,1,'1-1-2000','1-1-2020',0,'', 'Jou', '', '','', '','','', '');


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_last_receipt_date.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_last_receipt_date(office_id integer, party_id bigint);
CREATE FUNCTION transactions.get_last_receipt_date(office_id integer, party_id bigint)
RETURNS date
AS
$$
BEGIN
    RETURN
    (
        SELECT MAX(transactions.verified_transaction_view.value_date)
        FROM transactions.verified_transaction_view
        INNER JOIN transactions.customer_receipts
        ON transactions.verified_transaction_view.transaction_master_id = transactions.customer_receipts.transaction_master_id
        WHERE transactions.verified_transaction_view.office_id=$1
        AND transactions.customer_receipts.party_id = $2
    );
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_mavcogs.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_mavcogs(_item_id integer, _store_id integer, _base_quantity decimal, _factor decimal(24, 4));

CREATE FUNCTION transactions.get_mavcogs(_item_id integer, _store_id integer, _base_quantity decimal, _factor decimal(24, 4))
RETURNS decimal(24, 4)
AS
$$
        DECLARE _base_unit_cost money_strict;
BEGIN
        CREATE TEMPORARY TABLE temp_staging
        (
                id              SERIAL NOT NULL,
                value_date      date,
                audit_ts        TIMESTAMP WITH TIME ZONE,
                base_quantity   decimal,
                price           decimal
                
        ) ON COMMIT DROP;


        INSERT INTO temp_staging(value_date, audit_ts, base_quantity, price)
        SELECT value_date, audit_ts, 
        CASE WHEN tran_type = 'Dr' THEN
        base_quantity ELSE base_quantity  * -1 END, 
        CASE WHEN tran_type = 'Dr' THEN
        (price * quantity/base_quantity)
        ELSE
        0
        END
        FROM transactions.verified_stock_details_view
        WHERE item_id = $1
        AND store_id=$2
        order by value_date, audit_ts, stock_detail_id;




        WITH RECURSIVE stock_transaction(id, base_quantity, price, sum_m, sum_base_quantity, last_id) AS 
        (
          SELECT id, base_quantity, price, base_quantity * price, base_quantity, id
          FROM temp_staging WHERE id = 1
          UNION ALL
          SELECT child.id, child.base_quantity, 
                 CASE WHEN child.base_quantity < 0 then parent.sum_m / parent.sum_base_quantity ELSE child.price END, 
                 parent.sum_m + CASE WHEN child.base_quantity < 0 then parent.sum_m / parent.sum_base_quantity ELSE child.price END * child.base_quantity,
                 parent.sum_base_quantity + child.base_quantity,
                 child.id 
          FROM temp_staging child JOIN stock_transaction parent on child.id = parent.last_id + 1
        )

        SELECT 
                --base_quantity,                                                        --left for debuging purpose
                --price,                                                                --left for debuging purpose
                --base_quantity * price AS amount,                                      --left for debuging purpose
                --SUM(base_quantity * price) OVER(ORDER BY id) AS cv_amount,            --left for debuging purpose
                --SUM(base_quantity) OVER(ORDER BY id) AS cv_quantity,                  --left for debuging purpose
                SUM(base_quantity * price) OVER(ORDER BY id)  / SUM(base_quantity) OVER(ORDER BY id) INTO _base_unit_cost
        FROM stock_transaction
        ORDER BY id DESC
        LIMIT 1;

        RETURN _base_unit_cost * _factor * _base_quantity;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_non_gl_product_view.sql --<--<--

DROP FUNCTION IF EXISTS transactions.get_non_gl_product_view
(   
    user_id_                integer,
    book_                   text,
    office_id_              integer,
    date_from_              date, 
    date_to_                date, 
    office_                 national character varying(12),
    party_                  text,   
    price_type_             text,
    user_                   national character varying(50),
    reference_number_           national character varying(24),
    statement_reference_            text
 );

CREATE FUNCTION transactions.get_non_gl_product_view
(
    user_id_                integer,
    book_                   text,
    office_id_              integer,
    date_from_              date, 
    date_to_                date, 
    office_                 national character varying(12),
    party_                  text,   
    price_type_             text,
    user_                   national character varying(50),
    reference_number_           national character varying(24),
    statement_reference_            text
 )
RETURNS TABLE
(
    id                  bigint,
    value_date              date,
    office                  national character varying(12),
    party                   text,
    price_type              text,
    amount                      decimal(24, 4),
    transaction_ts              TIMESTAMP WITH TIME ZONE,
    "user"                  national character varying(50),
    reference_number            national character varying(24),
    statement_reference         text,
    book                            text,
    flag_background_color           text,
    flag_foreground_color           text
)
AS
$$
BEGIN
    RETURN QUERY 
    WITH RECURSIVE office_cte(office_id) AS 
    (
        SELECT office_id_
        UNION ALL
        SELECT
            c.office_id
        FROM 
        office_cte AS p, 
        office.offices AS c 
        WHERE 
        parent_office_id = p.office_id
    )

    SELECT
        transactions.non_gl_stock_master.non_gl_stock_master_id AS id,
        transactions.non_gl_stock_master.value_date,
        office.offices.office_code AS office,
        core.parties.party_code || ' (' || core.parties.party_name || ')' AS party,
        core.price_types.price_type_code || ' (' || core.price_types.price_type_name || ')' AS price_type,
        SUM(transactions.non_gl_stock_details.price * transactions.non_gl_stock_details.quantity + tax - discount)::decimal(24, 4) AS amount,
        transactions.non_gl_stock_master.transaction_ts,
        office.users.user_name AS user,
        transactions.non_gl_stock_master.reference_number,
        transactions.non_gl_stock_master.statement_reference,
        transactions.non_gl_stock_master.book::text,
        core.get_flag_background_color(core.get_flag_type_id(user_id_, 'transactions.non_gl_stock_master', 'non_gl_stock_master_id', transactions.non_gl_stock_master.non_gl_stock_master_id::text)) AS flag_bg,
        core.get_flag_foreground_color(core.get_flag_type_id(user_id_, 'transactions.non_gl_stock_master', 'non_gl_stock_master_id', transactions.non_gl_stock_master.non_gl_stock_master_id::text)) AS flag_fg
    FROM transactions.non_gl_stock_master
    INNER JOIN transactions.non_gl_stock_details
    ON transactions.non_gl_stock_master.non_gl_stock_master_id = transactions.non_gl_stock_details.non_gl_stock_master_id
    INNER JOIN core.parties
    ON transactions.non_gl_stock_master.party_id = core.parties.party_id
    INNER JOIN office.users
    ON transactions.non_gl_stock_master.user_id = office.users.user_id
    INNER JOIN office.offices
    ON transactions.non_gl_stock_master.office_id = office.offices.office_id
    LEFT OUTER JOIN core.price_types
    ON transactions.non_gl_stock_master.price_type_id = core.price_types.price_type_id
    WHERE transactions.non_gl_stock_master.book = book_
    AND transactions.non_gl_stock_master.value_date BETWEEN date_from_ AND date_to_
    AND 
    lower
    (
        core.parties.party_code || ' (' || core.parties.party_name || ')'
    ) LIKE '%' || lower(party_) || '%'
    AND
    lower
    (
        COALESCE(core.price_types.price_type_code, '') || ' (' || COALESCE(core.price_types.price_type_name, '') || ')'
    ) LIKE '%' || lower(price_type_) || '%'
    AND 
    lower
    (
        office.users.user_name
    )  LIKE '%' || lower(user_) || '%'
    AND 
    lower
    (
        COALESCE(transactions.non_gl_stock_master.reference_number, '')
    ) LIKE '%' || lower(reference_number_) || '%'
    AND 
    lower
    (
        COALESCE(transactions.non_gl_stock_master.statement_reference, '')
    ) LIKE '%' || lower(statement_reference_) || '%'    
    AND lower
    (
        office.offices.office_code
    ) LIKE '%' || lower(office_) || '%' 
    AND office.offices.office_id IN (SELECT office_id FROM office_cte)
    GROUP BY 
        transactions.non_gl_stock_master.non_gl_stock_master_id,
        transactions.non_gl_stock_master.value_date,
        office.offices.office_code,
        core.parties.party_code,
        core.parties.party_name,
        core.price_types.price_type_code,
        core.price_types.price_type_name,
        transactions.non_gl_stock_master.transaction_ts,
        office.users.user_name,
        transactions.non_gl_stock_master.reference_number,
        transactions.non_gl_stock_master.statement_reference,
        transactions.non_gl_stock_master.book
    LIMIT 100;
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.get_non_gl_product_view(1,'Purchase.Order',1, '1-1-2000', '1-1-2050', '', '', '', '', '', '');




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_party_transaction_summary.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_party_transaction_summary
(
    office_id integer, 
    party_id bigint
);

CREATE FUNCTION transactions.get_party_transaction_summary
(
    office_id integer, 
    party_id bigint, 
    OUT currency_code text, 
    OUT currency_symbol text, 
    OUT total_due_amount decimal(24, 4), 
    OUT office_due_amount decimal(24, 4), 
    OUT accrued_interest decimal(24, 4), 
    OUT last_receipt_date date, 
    OUT transaction_value decimal(24, 4)
)
AS
$$
    DECLARE root_office_id integer = 0;
BEGIN
    currency_code := core.get_currency_code_by_party_id(party_id);

    SELECT core.currencies.currency_symbol into $4
    FROM core.currencies
    WHERE core.currencies.currency_code = $3;

    SELECT office.offices.office_id INTO root_office_id
    FROM office.offices
    WHERE parent_office_id IS NULL;

    total_due_amount := transactions.get_total_due(root_office_id, party_id);

    office_due_amount := transactions.get_total_due(office_id, party_id);


    accrued_interest := transactions.get_accrued_interest(office_id, party_id);

    last_receipt_date := transactions.get_last_receipt_date(office_id, party_id);

    transaction_value := transactions.get_average_party_transaction(party_id, office_id);


    RETURN;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_product_view.sql --<--<--

DROP FUNCTION IF EXISTS transactions.get_product_view
(   
    user_id_                integer,
    book_                   text,
    office_id_              integer,
    date_from_              date, 
    date_to_                date, 
    office_                 national character varying(12),
    party_                  text,   
    price_type_             text,
    user_                   national character varying(50),
    reference_number_           national character varying(24),
    statement_reference_            text
 );

CREATE FUNCTION transactions.get_product_view
(
    user_id_                integer,
    book_                   text,
    office_id_              integer,
    date_from_              date, 
    date_to_                date, 
    office_                 national character varying(12),
    party_                  text,   
    price_type_             text,
    user_                   national character varying(50),
    reference_number_           national character varying(24),
    statement_reference_            text
 )
RETURNS TABLE
(
    id                      bigint,
    value_date              date,
    office                  national character varying(12),
    party                   text,
    price_type              text,
    amount                  decimal(24, 4),
    transaction_ts          TIMESTAMP WITH TIME ZONE,
    "user"                  national character varying(50),
    reference_number        national character varying(24),
    statement_reference     text,
    book                    text,
    salesperson             text,
    is_credit               boolean,
    shipper                 text,
    shipping_address_code   text,
    store                   text,   
    flag_background_color   text,
    flag_foreground_color   text
)
AS
$$
BEGIN
        CREATE TEMPORARY TABLE IF NOT EXISTS temp_book(book text) ON COMMIT DROP;

    RETURN QUERY
    WITH RECURSIVE office_cte(office_id) AS 
    (
        SELECT office_id_
        UNION ALL
        SELECT
            c.office_id
        FROM 
        office_cte AS p, 
        office.offices AS c 
        WHERE 
        parent_office_id = p.office_id
    )

    SELECT
        transactions.stock_master.transaction_master_id AS id,
        transactions.transaction_master.value_date,
        office.offices.office_code AS office,
        core.parties.party_code || ' (' || core.parties.party_name || ')' AS party,
        core.price_types.price_type_code || ' (' || core.price_types.price_type_name || ')' AS price_type,
        SUM(transactions.stock_details.price * transactions.stock_details.quantity + tax - discount)::decimal(24, 4) AS amount,
        transactions.transaction_master.transaction_ts,
        office.users.user_name AS user,
        transactions.transaction_master.reference_number,
        transactions.transaction_master.statement_reference,
                transactions.transaction_master.book::text,
        core.get_salesperson_name_by_salesperson_id(transactions.stock_master.salesperson_id),
        transactions.stock_master.is_credit,
        core.get_shipper_name_by_shipper_id(transactions.stock_master.shipper_id),
        core.get_shipping_address_code_by_shipping_address_id(transactions.stock_master.shipping_address_id),
        office.get_store_name_by_store_id(transactions.stock_master.store_id),
        core.get_flag_background_color(core.get_flag_type_id(user_id_, 'transactions.transaction_master', 'transaction_master_id', transactions.stock_master.transaction_master_id::text)) AS flag_bg,
        core.get_flag_foreground_color(core.get_flag_type_id(user_id_, 'transactions.transaction_master', 'transaction_master_id', transactions.stock_master.transaction_master_id::text)) AS flag_fg
    FROM transactions.stock_master
    INNER JOIN transactions.stock_details
    ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
    LEFT OUTER JOIN core.parties
    ON transactions.stock_master.party_id = core.parties.party_id
    INNER JOIN transactions.transaction_master
    ON transactions.transaction_master.transaction_master_id=transactions.stock_master.transaction_master_id
    INNER JOIN office.users
    ON transactions.transaction_master.user_id = office.users.user_id
    INNER JOIN office.offices
    ON transactions.transaction_master.office_id = office.offices.office_id
    LEFT OUTER JOIN core.price_types
    ON transactions.stock_master.price_type_id = core.price_types.price_type_id
    WHERE transactions.transaction_master.book = book_
    AND transactions.transaction_master.verification_status_id > 0
    AND transactions.transaction_master.value_date BETWEEN date_from_ AND date_to_
    AND 
    lower
    (
        COALESCE(core.parties.party_code || ' (' || core.parties.party_name || ')', '')
    ) LIKE '%' || lower(party_) || '%'
    AND
    lower
    (
        COALESCE(core.price_types.price_type_code, '') || ' (' || COALESCE(core.price_types.price_type_name, '') || ')'
    ) LIKE '%' || lower(price_type_) || '%'
    AND 
    lower
    (
        office.users.user_name
    )  LIKE '%' || lower(user_) || '%'
    AND 
    lower
    (
        transactions.transaction_master.reference_number
    ) LIKE '%' || lower(reference_number_) || '%'
    AND 
    lower
    (
        transactions.transaction_master.statement_reference
    ) LIKE '%' || lower(statement_reference_) || '%'    
    AND lower
    (
        office.offices.office_code
    ) LIKE '%' || lower(office_) || '%' 
    AND office.offices.office_id IN (SELECT office_id FROM office_cte)
    GROUP BY 
        transactions.stock_master.stock_master_id,
        transactions.transaction_master.value_date,
        office.offices.office_code,
        core.parties.party_code,
        core.parties.party_name,
        core.price_types.price_type_code,
        core.price_types.price_type_name,
        transactions.transaction_master.transaction_ts,
        office.users.user_name,
        transactions.transaction_master.reference_number,
        transactions.transaction_master.statement_reference,
        transactions.transaction_master.book    
    LIMIT 100;
END
$$
LANGUAGE plpgsql;

--select * from transactions.get_product_view(1, 'Inventory.Transfer', 1, '1-1-2000',  '1-1-2020', '', '', '', '', '', '');



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_profit_and_loss_statement.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_profit_and_loss_statement
(
    _date_from                      date,
    _date_to                        date,
    _user_id                        integer,
    _office_id                      integer,
    _factor                         integer,
    _compact                        boolean
);

CREATE FUNCTION transactions.get_profit_and_loss_statement
(
    _date_from                      date,
    _date_to                        date,
    _user_id                        integer,
    _office_id                      integer,
    _factor                         integer,
    _compact                        boolean DEFAULT(true)
)
RETURNS json
AS
$$
    DECLARE _sql                    text;
    DECLARE _periods                core.period[];
    DECLARE _json                   json;
    DECLARE this                    RECORD;
    DECLARE _balance                decimal(24, 4);
    DECLARE _is_periodic            boolean = office.is_periodic_inventory(_office_id);
BEGIN    
    DROP TABLE IF EXISTS pl_temp;
    CREATE TEMPORARY TABLE pl_temp
    (
        item_id                     integer PRIMARY KEY,
        item                        text,
        account_id                  integer,
        parent_item_id              integer REFERENCES pl_temp(item_id),
        is_profit                   boolean DEFAULT(false),
        is_summation                boolean DEFAULT(false),
        is_debit                    boolean DEFAULT(false),
        amount                      decimal(24, 4) DEFAULT(0)
    ) ON COMMIT DROP;

    IF(COALESCE(_factor, 0) = 0) THEN
        _factor := 1;
    END IF;

    _periods            := core.get_periods(_date_from, _date_to);

    IF(_periods IS NULL) THEN
        RAISE EXCEPTION 'Invalid period specified.'
        USING ERRCODE='P3009';
    END IF;

    SELECT string_agg(dynamic, '') FROM
    (
            SELECT 'ALTER TABLE pl_temp ADD COLUMN "' || period_name || '" decimal(24, 4) DEFAULT(0);' as dynamic
            FROM explode_array(_periods)
         
    ) periods
    INTO _sql;
    
    EXECUTE _sql;

    --PL structure setup start
    INSERT INTO pl_temp(item_id, item, is_summation, parent_item_id)
    SELECT 1000,   'Revenue',                      true,   NULL::integer   UNION ALL
    SELECT 2000,   'Cost of Sales',                true,   NULL::integer   UNION ALL
    SELECT 2001,   'Opening Stock',                false,  1000            UNION ALL
    SELECT 3000,   'Purchases',                    false,  1000            UNION ALL
    SELECT 4000,   'Closing Stock',                false,  1000            UNION ALL
    SELECT 5000,   'Direct Costs',                 true,   NULL::integer   UNION ALL
    SELECT 6000,   'Gross Profit',                 false,  NULL::integer   UNION ALL
    SELECT 7000,   'Operating Expenses',           true,   NULL::integer   UNION ALL
    SELECT 8000,   'Operating Profit',             false,  NULL::integer   UNION ALL
    SELECT 9000,   'Nonoperating Incomes',         true,   NULL::integer   UNION ALL
    SELECT 10000,  'Financial Incomes',            true,   NULL::integer   UNION ALL
    SELECT 11000,  'Financial Expenses',           true,   NULL::integer   UNION ALL
    SELECT 11100,  'Interest Expenses',            true,   11000           UNION ALL
    SELECT 12000,  'Profit Before Income Taxes',   false,  NULL::integer   UNION ALL
    SELECT 13000,  'Income Taxes',                 true,   NULL::integer   UNION ALL
    SELECT 13001,  'Income Tax Provison',          false,  13000            UNION ALL
    SELECT 14000,  'Net Profit',                   true,   NULL::integer;

    UPDATE pl_temp SET is_debit = true WHERE item_id IN(2001, 3000, 4000);
    UPDATE pl_temp SET is_profit = true WHERE item_id IN(6000,8000, 12000, 14000);
    
    INSERT INTO pl_temp(item_id, account_id, item, parent_item_id, is_debit)
    SELECT id, account_id, account_name, 1000 as parent_item_id, false as is_debit FROM core.get_account_view_by_account_master_id(20100, 1000) UNION ALL--Sales Accounts
    SELECT id, account_id, account_name, 2000 as parent_item_id, true as is_debit FROM core.get_account_view_by_account_master_id(20400, 2001) UNION ALL--COGS Accounts
    SELECT id, account_id, account_name, 5000 as parent_item_id, true as is_debit FROM core.get_account_view_by_account_master_id(20500, 5000) UNION ALL--Direct Cost
    SELECT id, account_id, account_name, 7000 as parent_item_id, true as is_debit FROM core.get_account_view_by_account_master_id(20600, 7000) UNION ALL--Operating Expenses
    SELECT id, account_id, account_name, 9000 as parent_item_id, false as is_debit FROM core.get_account_view_by_account_master_id(20200, 9000) UNION ALL--Nonoperating Incomes
    SELECT id, account_id, account_name, 10000 as parent_item_id, false as is_debit FROM core.get_account_view_by_account_master_id(20300, 10000) UNION ALL--Financial Incomes
    SELECT id, account_id, account_name, 11000 as parent_item_id, true as is_debit FROM core.get_account_view_by_account_master_id(20700, 11000) UNION ALL--Financial Expenses
    SELECT id, account_id, account_name, 11100 as parent_item_id, true as is_debit FROM core.get_account_view_by_account_master_id(20701, 11100) UNION ALL--Interest Expenses
    SELECT id, account_id, account_name, 13000 as parent_item_id, true as is_debit FROM core.get_account_view_by_account_master_id(20800, 13001);--Income Tax Expenses

    IF(NOT _is_periodic) THEN
        DELETE FROM pl_temp WHERE item_id IN(2001, 3000, 4000);
    END IF;
    --PL structure setup end


    FOR this IN SELECT * FROM explode_array(_periods) ORDER BY date_from ASC
    LOOP
        --Updating credit balances of individual GL accounts.
        _sql := 'UPDATE pl_temp SET "' || this.period_name || '"=tran.total_amount
        FROM
        (
            SELECT transactions.verified_transaction_mat_view.account_id,
            SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) - 
            SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) AS total_amount
        FROM transactions.verified_transaction_mat_view
        WHERE value_date >=''' || this.date_from::text || ''' AND value_date <=''' || this.date_to::text ||
        ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
        GROUP BY transactions.verified_transaction_mat_view.account_id
        ) AS tran
        WHERE tran.account_id = pl_temp.account_id';
        EXECUTE _sql;

        --Reversing to debit balance for expense headings.
        _sql := 'UPDATE pl_temp SET "' || this.period_name || '"="' || this.period_name || '"*-1 WHERE is_debit;';
        EXECUTE _sql;

        --Getting purchase and stock balances if this is a periodic inventory system.
        --In perpetual accounting system, one would not need to include these headings 
        --because the COGS A/C would be automatically updated on each transaction.
        IF(_is_periodic) THEN
            _sql := 'UPDATE pl_temp SET "' || this.period_name || '"=transactions.get_closing_stock(''' || (this.date_from::TIMESTAMP - INTERVAL '1 day')::text ||  ''', ' || _office_id::text || ') WHERE item_id=2001;';
            EXECUTE _sql;

            _sql := 'UPDATE pl_temp SET "' || this.period_name || '"=transactions.get_purchase(''' || this.date_from::text ||  ''', ''' || this.date_to::text || ''', ' || _office_id::text || ') *-1 WHERE item_id=3000;';
            EXECUTE _sql;

            _sql := 'UPDATE pl_temp SET "' || this.period_name || '"=transactions.get_closing_stock(''' || this.date_from::text ||  ''', ' || _office_id::text || ') WHERE item_id=4000;';
            EXECUTE _sql;
        END IF;
    END LOOP;

    --Updating the column "amount" on each row by the sum of all periods.
    SELECT 'UPDATE pl_temp SET amount = ' || array_to_string(array_agg('COALESCE("' || period_name || '", 0)'), ' +') || ';'::text INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql;

    --Updating amount and periodic balances on parent item by the sum of their respective child balances.
    SELECT 'UPDATE pl_temp SET amount = tran.amount, ' || array_to_string(array_agg('"' || period_name || '"=tran."' || period_name || '"'), ',') || 
    ' FROM 
    (
        SELECT parent_item_id,
        SUM(amount) AS amount, '
        || array_to_string(array_agg('SUM("' || period_name || '") AS "' || period_name || '"'), ',') || '
         FROM pl_temp
        GROUP BY parent_item_id
    ) 
    AS tran
        WHERE tran.parent_item_id = pl_temp.item_id;'
    INTO _sql
    FROM explode_array(_periods);
    EXECUTE _sql;

    --Updating Gross Profit.
    --Gross Profit = Revenue - (Cost of Sales + Direct Costs)
    SELECT 'UPDATE pl_temp SET amount = tran.amount, ' || array_to_string(array_agg('"' || period_name || '"=tran."' || period_name || '"'), ',') 
    || ' FROM 
    (
        SELECT
        SUM(CASE item_id WHEN 1000 THEN amount ELSE amount * -1 END) AS amount, '
        || array_to_string(array_agg('SUM(CASE item_id WHEN 1000 THEN "' || period_name || '" ELSE "' || period_name || '" *-1 END) AS "' || period_name || '"'), ',') ||
    '
         FROM pl_temp
         WHERE item_id IN
         (
             1000,2000,5000
         )
    ) 
    AS tran
    WHERE item_id = 6000;'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql;


    --Updating Operating Profit.
    --Operating Profit = Gross Profit - Operating Expenses
    SELECT 'UPDATE pl_temp SET amount = tran.amount, ' || array_to_string(array_agg('"' || period_name || '"=tran."' || period_name || '"'), ',') 
    || ' FROM 
    (
        SELECT
        SUM(CASE item_id WHEN 6000 THEN amount ELSE amount * -1 END) AS amount, '
        || array_to_string(array_agg('SUM(CASE item_id WHEN 6000 THEN "' || period_name || '" ELSE "' || period_name || '" *-1 END) AS "' || period_name || '"'), ',') ||
    '
         FROM pl_temp
         WHERE item_id IN
         (
             6000, 7000
         )
    ) 
    AS tran
    WHERE item_id = 8000;'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql;

    --Updating Profit Before Income Taxes.
    --Profit Before Income Taxes = Operating Profit + Nonoperating Incomes + Financial Incomes - Financial Expenses
    SELECT 'UPDATE pl_temp SET amount = tran.amount, ' || array_to_string(array_agg('"' || period_name || '"=tran."' || period_name || '"'), ',') 
    || ' FROM 
    (
        SELECT
        SUM(CASE WHEN item_id IN(11000, 11100) THEN amount *-1 ELSE amount END) AS amount, '
        || array_to_string(array_agg('SUM(CASE WHEN item_id IN(11000, 11100) THEN "' || period_name || '"*-1  ELSE "' || period_name || '" END) AS "' || period_name || '"'), ',') ||
    '
         FROM pl_temp
         WHERE item_id IN
         (
             8000, 9000, 10000, 11000, 11100
         )
    ) 
    AS tran
    WHERE item_id = 12000;'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql;

    --Updating Income Tax Provison.
    --Income Tax Provison = Profit Before Income Taxes * Income Tax Rate - Paid Income Taxes
    SELECT * INTO this FROM pl_temp WHERE item_id = 12000;
    
    _sql := 'UPDATE pl_temp SET amount = core.get_income_tax_provison_amount(' || _office_id::text || ',' || this.amount::text || ',(SELECT amount FROM pl_temp WHERE item_id = 13000)), ' 
    || array_to_string(array_agg('"' || period_name || '"=core.get_income_tax_provison_amount(' || _office_id::text || ',' || core.get_field(hstore(this.*), period_name) || ', (SELECT "' || period_name || '" FROM pl_temp WHERE item_id = 13000))'), ',')
            || ' WHERE item_id = 13001;'
    FROM explode_array(_periods);

    EXECUTE _sql;

    --Updating amount and periodic balances on parent item by the sum of their respective child balances, once again to add the Income Tax Provison to Income Tax Expenses.
    SELECT 'UPDATE pl_temp SET amount = tran.amount, ' || array_to_string(array_agg('"' || period_name || '"=tran."' || period_name || '"'), ',') 
    || ' FROM 
    (
        SELECT parent_item_id,
        SUM(amount) AS amount, '
        || array_to_string(array_agg('SUM("' || period_name || '") AS "' || period_name || '"'), ',') ||
    '
         FROM pl_temp
        GROUP BY parent_item_id
    ) 
    AS tran
        WHERE tran.parent_item_id = pl_temp.item_id;'
    INTO _sql
    FROM explode_array(_periods);
    EXECUTE _sql;


    --Updating Net Profit.
    --Net Profit = Profit Before Income Taxes - Income Tax Expenses
    SELECT 'UPDATE pl_temp SET amount = tran.amount, ' || array_to_string(array_agg('"' || period_name || '"=tran."' || period_name || '"'), ',') 
    || ' FROM 
    (
        SELECT
        SUM(CASE item_id WHEN 13000 THEN amount *-1 ELSE amount END) AS amount, '
        || array_to_string(array_agg('SUM(CASE item_id WHEN 13000 THEN "' || period_name || '"*-1  ELSE "' || period_name || '" END) AS "' || period_name || '"'), ',') ||
    '
         FROM pl_temp
         WHERE item_id IN
         (
             12000, 13000
         )
    ) 
    AS tran
    WHERE item_id = 14000;'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql;

    --Removing ledgers having zero balances
    DELETE FROM pl_temp
    WHERE COALESCE(amount, 0) = 0
    AND account_id IS NOT NULL;


    --Dividing by the factor.
    SELECT 'UPDATE pl_temp SET amount = amount /' || _factor::text || ',' || array_to_string(array_agg('"' || period_name || '"="' || period_name || '"/' || _factor::text), ',') || ';'
    INTO _sql
    FROM explode_array(_periods);
    EXECUTE _sql;


    --Converting 0's to NULLS.
    SELECT 'UPDATE pl_temp SET amount = CASE WHEN amount = 0 THEN NULL ELSE amount END,' || array_to_string(array_agg('"' || period_name || '"= CASE WHEN "' || period_name || '" = 0 THEN NULL ELSE "' || period_name || '" END'), ',') || ';'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql;

    IF(_compact) THEN
        SELECT array_to_json(array_agg(row_to_json(report)))
        INTO _json
        FROM
        (
            SELECT item, amount, is_profit, is_summation
            FROM pl_temp
            ORDER BY item_id
        ) AS report;
    ELSE
        SELECT 
        'SELECT array_to_json(array_agg(row_to_json(report)))
        FROM
        (
            SELECT item, amount,'
            || array_to_string(array_agg('"' || period_name || '"'), ',') ||
            ', is_profit, is_summation FROM pl_temp
            ORDER BY item_id
        ) AS report;'
        INTO _sql
        FROM explode_array(_periods);

        EXECUTE _sql INTO _json ;
    END IF;    

    RETURN _json;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS transactions.get_net_profit
(
    _date_from                      date,
    _date_to                        date,
    _office_id                      integer,
    _factor                         integer,
    _no_provison                    boolean
);

CREATE FUNCTION transactions.get_net_profit
(
    _date_from                      date,
    _date_to                        date,
    _office_id                      integer,
    _factor                         integer,
    _no_provison                    boolean DEFAULT false
)
RETURNS decimal(24, 4)
AS
$$
    DECLARE _incomes                decimal(24, 4) = 0;
    DECLARE _expenses               decimal(24, 4) = 0;
    DECLARE _profit_before_tax      decimal(24, 4) = 0;
    DECLARE _tax_paid               decimal(24, 4) = 0;
    DECLARE _tax_provison           decimal(24, 4) = 0;
BEGIN
    SELECT SUM(CASE tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE amount_in_local_currency * -1 END)
    INTO _incomes
    FROM transactions.verified_transaction_mat_view
    WHERE value_date >= _date_from AND value_date <= _date_to
    AND account_master_id >=20100
    AND account_master_id <= 20300;
    
    SELECT SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE amount_in_local_currency * -1 END)
    INTO _expenses
    FROM transactions.verified_transaction_mat_view
    WHERE value_date >= _date_from AND value_date <= _date_to
    AND account_master_id >=20400
    AND account_master_id <= 20701;
    
    SELECT SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE amount_in_local_currency * -1 END)
    INTO _tax_paid
    FROM transactions.verified_transaction_mat_view
    WHERE value_date >= _date_from AND value_date <= _date_to
    AND account_master_id =20800;
    
    _profit_before_tax := COALESCE(_incomes, 0) - COALESCE(_expenses, 0);

    IF(_no_provison) THEN
        RETURN (_profit_before_tax - COALESCE(_tax_paid, 0)) / _factor;
    END IF;
    
    _tax_provison      := core.get_income_tax_provison_amount(_office_id, _profit_before_tax, COALESCE(_tax_paid, 0));
    
    RETURN (_profit_before_tax - (COALESCE(_tax_provison, 0) + COALESCE(_tax_paid, 0))) / _factor;
END
$$
LANGUAGE plpgsql;



--SELECT transactions.get_profit_and_loss_statement('1-1-2000','1-15-2020', 2, 2, 1000,false), transactions.get_net_profit('1-1-2000','1-15-2020', 2, 1000);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_purchase.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_purchase
(
    _date_from          date,
    _date_to            date,
    _office_id          integer
);

CREATE FUNCTION transactions.get_purchase
(
    _date_from          date,
    _date_to            date,
    _office_id          integer
)
RETURNS decimal(24, 4)
AS
$$
BEGIN
    RETURN 0;--TODO
END
$$
LANGUAGE plpgsql;

SELECT transactions.get_purchase('2-3-30', '1-1-10', 2);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_receipt_view.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_receipt_view
(
    _user_id                integer,
    _office_id              integer,
    _date_from              date, 
    _date_to                date, 
    _office                 national character varying(12),
    _party                  text,   
    _user                   national character varying(50),
    _reference_number           national character varying(24),
    _statement_reference            text
);

CREATE FUNCTION transactions.get_receipt_view
(
    _user_id                integer,
    _office_id              integer,
    _date_from              date, 
    _date_to                date, 
    _office                 national character varying(12),
    _party                  text,   
    _user                   national character varying(50),
    _reference_number           national character varying(24),
    _statement_reference            text
)
RETURNS TABLE
(
        id                                      bigint,
        value_date                              date,
        reference_number                        text,
        statement_reference                     text,
        office                                  text,
        party                                   text,
        "user"                                    text,
        currency_code                           text,
        amount                                  money_strict,
    transaction_ts              TIMESTAMP WITH TIME ZONE,
    flag_background_color           text,
    flag_foreground_color           text
)
AS
$$
BEGIN
    RETURN QUERY 
        SELECT
                transactions.transaction_master.transaction_master_id,
                transactions.transaction_master.value_date,
                transactions.transaction_master.reference_number::text,
                transactions.transaction_master.statement_reference::text,
                office.offices.office_code || ' (' || office.offices.office_name || ')' as office,
                core.parties.party_code || ' (' || core.parties.party_name || ')' as party,
                office.users.user_name::text,
                transactions.customer_receipts.currency_code::text,
                transactions.customer_receipts.amount,
        transactions.transaction_master.transaction_ts,
        core.get_flag_background_color(core.get_flag_type_id(_user_id, 'transactions.transaction_master', 'transaction_master_id', transactions.transaction_master.transaction_master_id::text)) AS flag_bg,
        core.get_flag_foreground_color(core.get_flag_type_id(_user_id, 'transactions.transaction_master', 'transaction_master_id', transactions.transaction_master.transaction_master_id::text)) AS flag_fg                
        FROM transactions.customer_receipts
        INNER JOIN core.parties
        ON transactions.customer_receipts.party_id = core.parties.party_id
        INNER JOIN transactions.transaction_master
        ON transactions.customer_receipts.transaction_master_id = transactions.transaction_master.transaction_master_id
        INNER JOIN office.offices
        ON transactions.transaction_master.office_id = office.offices.office_id
        INNER JOIN office.users
        ON transactions.transaction_master.user_id = office.users.user_id
        WHERE transactions.transaction_master.verification_status_id > 0
        AND transactions.transaction_master.office_id IN (SELECT * FROM office.get_office_ids(_office_id))
    AND transactions.transaction_master.value_date BETWEEN _date_from AND _date_to
        AND
    lower
    (
        core.parties.party_code || ' (' || core.parties.party_name || ')'
    ) LIKE '%' || lower(_party) || '%'
    AND 
    lower
    (
        office.users.user_name
    )  LIKE '%' || lower(_user) || '%'
    AND 
    lower
    (
        transactions.transaction_master.reference_number
    ) LIKE '%' || lower(_reference_number) || '%'
    AND 
    lower
    (
        transactions.transaction_master.statement_reference
    ) LIKE '%' || lower(_statement_reference) || '%'    
    AND lower
    (
        office.offices.office_code
    ) LIKE '%' || lower(_office) || '%'
    LIMIT 100;
END
$$
LANGUAGE plpgsql;




--SELECT * FROM transactions.get_receipt_view(1, 1,'1-1-2000','1-1-2020','','','','','');



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_reorder_view_function.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_reorder_view_function(office_id integer);

CREATE FUNCTION transactions.get_reorder_view_function(office_id integer)
RETURNS TABLE
(
        item_id                 integer,
        item_code               national character varying(12),
        item_name               national character varying(150),
        unit_id                 integer,
        unit                    text,
        quantity_on_hand        numeric,
        reorder_level           integer,
        reorder_quantity        integer,
        preferred_supplier_id   bigint,
        preferred_supplier      text,
        price                   money_strict2,
        tax                     national character varying(24)
)
AS
$$
BEGIN
        RETURN QUERY
        SELECT 
                core.items.item_id,
                core.items.item_code,
                core.items.item_name,
                core.items.reorder_unit_id,
                core.units.unit_name::text AS unit,
                floor(office.count_item_in_stock(core.items.item_id, core.items.reorder_unit_id, $1)) AS quantity_on_hand,
                core.items.reorder_level,
                core.items.reorder_quantity,
                core.items.preferred_supplier_id,
                core.parties.party_code || ' (' || core.parties.party_name || ')'::text AS party,
                core.get_item_cost_price(core.items.item_id, core.items.reorder_unit_id, core.items.preferred_supplier_id),
                core.get_sales_tax_code_by_sales_tax_id(core.items.sales_tax_id) as tax
        FROM core.items
        INNER JOIN core.parties
        ON core.items.preferred_supplier_id = core.parties.party_id
        INNER JOIN core.units
        ON core.items.reorder_unit_id = core.units.unit_id
        WHERE 
        floor
        (
                office.count_item_in_stock(core.items.item_id, core.items.reorder_unit_id, $1)
                +
                core.get_ordered_quantity(core.items.item_id, core.items.reorder_unit_id, $1)
        ) 

        < core.items.reorder_level
        AND core.items.reorder_quantity > 0;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM transactions.get_reorder_view_function(2);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_retained_earnings.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_retained_earnings
(
    _date_to                        date,
    _office_id                      integer,
    _factor                         integer
);

CREATE FUNCTION transactions.get_retained_earnings
(
    _date_to                        date,
    _office_id                      integer,
    _factor                         integer
)
RETURNS decimal(24, 4)
AS
$$
    DECLARE     _date_from              date;
    DECLARE     _net_profit             decimal(24, 4);
    DECLARE     _paid_dividends         decimal(24, 4);
BEGIN
    IF(COALESCE(_factor, 0) = 0) THEN
        _factor := 1;
    END IF;
    _date_from              := core.get_fiscal_year_start_date(_office_id);    
    _net_profit             := transactions.get_net_profit(_date_from, _date_to, _office_id, _factor, true);

    SELECT 
        COALESCE(SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE amount_in_local_currency * -1 END) / _factor, 0)
    INTO 
        _paid_dividends
    FROM transactions.verified_transaction_mat_view
    WHERE value_date <=_date_to
    AND account_master_id BETWEEN 15300 AND 15400
    AND office_id IN (SELECT * FROM office.get_office_ids(_office_id));
    
    RETURN _net_profit - _paid_dividends;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_retained_earnings_statement.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_retained_earnings_statement
(
    _date_to                        date,
    _office_id                      integer,
    _factor                         integer    
);

CREATE FUNCTION transactions.get_retained_earnings_statement
(
    _date_to                        date,
    _office_id                      integer,
    _factor                         integer    
)
RETURNS TABLE
(
    id                              integer,
    value_date                      date,
    tran_code                       text,
    statement_reference             text,
    debit                           decimal(24, 4),
    credit                          decimal(24, 4),
    balance                         decimal(24, 4),
    office                          text,
    book                            text,
    account_id                      integer,
    account_number                  text,
    account                         text,
    posted_on                       TIMESTAMP WITH TIME ZONE,
    posted_by                       text,
    approved_by                     text,
    verification_status             integer
)
AS
$$
    DECLARE _accounts               integer[];
    DECLARE _date_from              date;
    DECLARE _net_profit             decimal(24, 4)  = 0;
    DECLARE _income_tax_rate        real            = 0;
    DECLARE _itp                    decimal(24, 4)  = 0;
BEGIN
    _date_from                      := core.get_fiscal_year_start_date(_office_id);
    _net_profit                     := transactions.get_net_profit(_date_from, _date_to, _office_id, _factor);
    _income_tax_rate                := core.get_income_tax_rate(_office_id);

    IF(COALESCE(_factor , 0) = 0) THEN
        _factor                         := 1;
    END IF; 

    IF(_income_tax_rate != 0) THEN
        _itp                            := (_net_profit * _income_tax_rate) / (100 - _income_tax_rate);
    END IF;

    DROP TABLE IF EXISTS temp_account_statement;
    CREATE TEMPORARY TABLE temp_account_statement
    (
        id                          SERIAL,
        value_date                  date,
        tran_code                   text,
        statement_reference         text,
        debit                       decimal(24, 4),
        credit                      decimal(24, 4),
        balance                     decimal(24, 4),
        office                      text,
        book                        text,
        account_id                  integer,
        account_number              text,
        account                     text,
        posted_on                   TIMESTAMP WITH TIME ZONE,
        posted_by                   text,
        approved_by                 text,
        verification_status         integer
    ) ON COMMIT DROP;

    SELECT array_agg(core.accounts.account_id) INTO _accounts
    FROM core.accounts
    WHERE core.accounts.account_master_id BETWEEN 15300 AND 15400;

    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit, office, book, account_id, posted_on, posted_by, approved_by, verification_status)
    SELECT
        _date_from,
        NULL,
        'Beginning balance on this fiscal year.',
        NULL,
        SUM
        (
            CASE transactions.transaction_details.tran_type
            WHEN 'Cr' THEN amount_in_local_currency
            ELSE amount_in_local_currency * -1 
            END            
        ) as credit,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL
    FROM transactions.transaction_master
    INNER JOIN transactions.transaction_details
    ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
    WHERE
        transactions.transaction_master.verification_status_id > 0
    AND
        transactions.transaction_master.value_date < _date_from
    AND
       transactions.transaction_master.office_id IN (SELECT * FROM office.get_office_ids(_office_id)) 
    AND
       transactions.transaction_details.account_id = ANY(_accounts);

    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit)
    SELECT _date_to, '', format('Add: Net Profit as on %1$s.', _date_to::text), 0, _net_profit;

    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit)
    SELECT _date_to, '', 'Add: Income Tax provison.', 0, _itp;

--     DELETE FROM temp_account_statement
--     WHERE COALESCE(temp_account_statement.debit, 0) = 0
--     AND COALESCE(temp_account_statement.credit, 0) = 0;
    

    UPDATE temp_account_statement SET 
    debit = temp_account_statement.credit * -1,
    credit = 0
    WHERE temp_account_statement.credit < 0;


    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit, office, book, account_id, posted_on, posted_by, approved_by, verification_status)
    SELECT
        transactions.transaction_master.value_date,
        transactions.transaction_master. transaction_code,
        transactions.transaction_details.statement_reference,
        CASE transactions.transaction_details.tran_type
        WHEN 'Dr' THEN amount_in_local_currency / _factor
        ELSE NULL END,
        CASE transactions.transaction_details.tran_type
        WHEN 'Cr' THEN amount_in_local_currency / _factor
        ELSE NULL END,
        office.get_office_name_by_id(transactions.transaction_master.office_id),
        transactions.transaction_master.book,
        transactions.transaction_details.account_id,
        transactions.transaction_master.transaction_ts,
        office.get_user_name_by_user_id(COALESCE(transactions.transaction_master.user_id, transactions.transaction_master.sys_user_id)),
        office.get_user_name_by_user_id(transactions.transaction_master.verified_by_user_id),
        transactions.transaction_master.verification_status_id
    FROM transactions.transaction_master
    INNER JOIN transactions.transaction_details
    ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
    WHERE
        transactions.transaction_master.verification_status_id > 0
    AND
        transactions.transaction_master.value_date >= _date_from
    AND
        transactions.transaction_master.value_date <= _date_to
    AND
       transactions.transaction_master.office_id IN (SELECT * FROM office.get_office_ids(_office_id)) 
    AND
       transactions.transaction_details.account_id = ANY(_accounts)
    ORDER BY 
        transactions.transaction_master.value_date,
        transactions.transaction_master.last_verified_on;


    UPDATE temp_account_statement
    SET balance = c.balance
    FROM
    (
        SELECT
            temp_account_statement.id, 
            SUM(COALESCE(c.credit, 0)) 
            - 
            SUM(COALESCE(c.debit,0)) As balance
        FROM temp_account_statement
        LEFT JOIN temp_account_statement AS c 
            ON (c.id <= temp_account_statement.id)
        GROUP BY temp_account_statement.id
        ORDER BY temp_account_statement.id
    ) AS c
    WHERE temp_account_statement.id = c.id;

    UPDATE temp_account_statement SET 
        account_number = core.accounts.account_number,
        account = core.accounts.account_name
    FROM core.accounts
    WHERE temp_account_statement.account_id = core.accounts.account_id;


    UPDATE temp_account_statement SET debit = NULL WHERE temp_account_statement.debit = 0;
    UPDATE temp_account_statement SET credit = NULL WHERE temp_account_statement.credit = 0;

    RETURN QUERY
    SELECT * FROM temp_account_statement
    ORDER BY id;    
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.get_retained_earnings_statement('7/16/2015', 2, 1000);

--SELECT * FROM transactions.get_retained_earnings('7/16/2015', 2, 100);



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_sales_by_offices.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_sales_by_offices(office_id integer, divide_by integer);

CREATE FUNCTION transactions.get_sales_by_offices(office_id integer, divide_by integer)
RETURNS TABLE
(
  office text,
  jan numeric,
  feb numeric,
  mar numeric,
  apr numeric,
  may numeric,
  jun numeric,
  jul numeric,
  aug numeric,
  sep numeric,
  oct numeric,
  nov numeric,
  "dec" numeric
)
AS
$$
BEGIN
        IF divide_by <= 0 THEN
                divide_by := 1;
        END IF;
        
        RETURN QUERY
        SELECT * FROM crosstab
        (
                '
                SELECT 
                office.get_office_code_by_id(office_id) AS office,
                date_part(''month'', value_date) AS month_id,
                SUM((price * quantity) - discount + tax)/' || divide_by::text || '::integer AS total
                FROM transactions.verified_stock_transaction_view
                WHERE book IN (''Sales.Direct'', ''Sales.Delivery'')
                AND office_id IN (SELECT * FROM office.get_office_ids(' || quote_literal($1::text) || '))
                GROUP BY office_id,
                date_part(''month'', value_date),
                date_trunc(''month'',value_date)
                ',
                'select m from generate_series(1,12) m'
        )as (
          office text,
          "Jan" numeric,
          "Feb" numeric,
          "Mar" numeric,
          "Apr" numeric,
          "May" numeric,
          "Jun" numeric,
          "Jul" numeric,
          "Aug" numeric,
          "Sep" numeric,
          "Oct" numeric,
          "Nov" numeric,
          "Dec" numeric
        ) ;

END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS transactions.get_sales_by_offices(divide_by integer);

CREATE FUNCTION transactions.get_sales_by_offices(divide_by integer)
RETURNS TABLE
(
  office text,
  jan numeric,
  feb numeric,
  mar numeric,
  apr numeric,
  may numeric,
  jun numeric,
  jul numeric,
  aug numeric,
  sep numeric,
  oct numeric,
  nov numeric,
  "dec" numeric
)
AS
$$
    DECLARE root_office_id integer = 0;
BEGIN
    SELECT office.offices.office_id INTO root_office_id
    FROM office.offices
    WHERE parent_office_id IS NULL
    LIMIT 1;

        IF divide_by <= 0 THEN
                divide_by := 1;
        END IF;
        
        RETURN QUERY
        SELECT * FROM transactions.get_sales_by_offices(root_office_id, divide_by);
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.get_sales_by_offices(1, 1);
--SELECT * FROM transactions.get_sales_by_offices(1000);



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_sales_tax.sql --<--<--
DROP TYPE IF EXISTS transactions.sales_tax_type CASCADE;

CREATE TYPE transactions.sales_tax_type AS
(
    id                          integer,
    sales_tax_detail_id         integer,
    sales_tax_id                integer,
    sales_tax_detail_code       text,
    sales_tax_detail_name       text,
    is_use_tax                  boolean,
    account_id                  integer,
    price                       money_strict,
    quantity                    integer_strict,
    discount                    money_strict2,
    shipping_charge             money_strict2,
    taxable_amount              money_strict2,
    state_sales_tax_id          integer,
    county_sales_tax_id         integer,
    rate                        decimal_strict2,
    base_amount_type            text,
    rate_type                   text,
    rounding_type               text,
    rounding_places             integer,
    tax                         money_strict2
);

DROP FUNCTION IF EXISTS transactions.get_sales_tax
(
    _tran_book                  national character varying(12),
    _store_id                   integer,
    _party_code                 national character varying(12), 
    _shipping_address_code      national character varying(12),
    _price_type_id              integer,
    _item_code                  national character varying(12),
    _price                      money_strict2,
    _quantity                   integer_strict2,
    _discount                   money_strict2,
    _shipping_charge            money_strict2,
    _sales_tax_id               integer
);

CREATE FUNCTION transactions.get_sales_tax
(
    _tran_book                  national character varying(12),
    _store_id                   integer,
    _party_code                 national character varying(12), 
    _shipping_address_code      national character varying(12),
    _price_type_id              integer,
    _item_code                  national character varying(12),
    _price                      money_strict2,
    _quantity                   integer_strict2,
    _discount                   money_strict2,
    _shipping_charge            money_strict2,
    _sales_tax_id               integer
)
RETURNS SETOF transactions.sales_tax_type
AS
$$
    DECLARE _has_nexus                      boolean=false;
    DECLARE _party_id                       bigint;
    DECLARE _state_id                       integer;
    DECLARE _state_sales_tax_id             integer;
    DECLARE _state_sales_tax_rate           decimal_strict2;
    DECLARE _tax_base_amount_type_code      text;
    DECLARE _tax                            money_strict2=0;
    DECLARE _cumulative_tax                 money_strict2=0;
    DECLARE _taxable_amount                 money_strict2=0;
    DECLARE this                            RECORD;
BEGIN

    DROP TABLE IF EXISTS temp_sales_tax;
    
    CREATE TEMPORARY TABLE temp_sales_tax
    (
        id                          SERIAL,
        sales_tax_detail_id         integer,
        sales_tax_id                integer,
        sales_tax_detail_code       text,
        sales_tax_detail_name       text,
        is_use_tax                  boolean,
        account_id                  integer,
        price                       money_strict,
        quantity                    integer_strict,
        discount                    money_strict2,
        shipping_charge             money_strict2,
        taxable_amount              money_strict2,
        state_sales_tax_id          integer,
        county_sales_tax_id         integer,
        rate                        decimal_strict2,
        base_amount_type            text,
        rate_type                   text,
        rounding_type               text,
        rounding_places             integer,
        tax                         money_strict2
    ) ON COMMIT DROP;

    IF(COALESCE(_tran_book, '') = '') THEN
        RETURN QUERY SELECT * FROM temp_sales_tax;
    END IF;

    IF(COALESCE(_store_id, 0) = 0) THEN
        RETURN QUERY SELECT * FROM temp_sales_tax;
    END IF;

    IF(COALESCE(_party_code, '') = '') THEN
        RETURN QUERY SELECT * FROM temp_sales_tax;
    END IF;
    
    IF(COALESCE(_price, 0) = 0) THEN
        RETURN QUERY SELECT * FROM temp_sales_tax;
    END IF;
    
    IF(COALESCE(_quantity, 0) = 0) THEN
        RETURN QUERY SELECT * FROM temp_sales_tax;
    END IF;
    
    IF(COALESCE(_sales_tax_id, 0) = 0) THEN
        RETURN QUERY SELECT * FROM temp_sales_tax;
    END IF;

    IF(TRIM(COALESCE(_shipping_address_code, '')) = '') THEN
        _has_nexus                  := false;        
    ELSE
        _state_id                   := core.get_state_id_by_shipping_address_code(_shipping_address_code, _party_id);
        _has_nexus                  := transactions.has_nexus(_state_id);
    END IF;

    IF(_has_nexus) THEN
        SELECT 
            state_sales_tax_id,
            rate
        INTO
            _state_sales_tax_id         
            _state_sales_tax_rate      
        FROM
        core.state_sales_taxes;

    END IF;

    IF(COALESCE(_state_sales_tax_id) = 0) THEN
        _has_nexus                  := false;
    END IF;


    SELECT tax_base_amount_type_code INTO _tax_base_amount_type_code
    FROM core.sales_taxes
    WHERE sales_tax_id=_sales_tax_id;
    


    INSERT INTO temp_sales_tax
    (
        sales_tax_detail_id, 
        sales_tax_id, 
        sales_tax_detail_code, 
        sales_tax_detail_name, 
        price, 
        quantity, 
        discount, 
        shipping_charge, 
        taxable_amount,
        is_use_tax,        
        account_id,
        state_sales_tax_id,
        county_sales_tax_id,
        rate,
        base_amount_type,
        rate_type,
        rounding_type,
        rounding_places,
        tax

    )
    SELECT 
        sales_tax_detail_id, 
        sales_tax_id, 
        sales_tax_detail_code, 
        sales_tax_detail_name,
        _price,
        _quantity,
        _discount,
        _shipping_charge,

        (_price * _quantity) 
        + 
        CASE 
            WHEN applied_on_shipping_charge 
            THEN _shipping_charge 
        ELSE 0 
        END
        - 
        _discount,
        CASE 
            WHEN state_sales_tax_id IS NOT NULL AND based_on_shipping_address AND check_nexus AND _has_nexus
            THEN true
            ELSE false
        END,
        CASE 
            WHEN based_on_shipping_address AND check_nexus AND _has_nexus AND use_tax_collecting_account_id IS NOT NULL
            THEN use_tax_collecting_account_id
            ELSE collecting_account_id
        END,
        CASE 
            WHEN based_on_shipping_address AND check_nexus AND _has_nexus
            THEN _state_sales_tax_id
            ELSE state_sales_tax_id
        END,
        county_sales_tax_id,
        CASE 
            WHEN state_sales_tax_id IS NOT NULL 
            THEN 
                CASE WHEN based_on_shipping_address AND check_nexus AND _has_nexus
                THEN _state_sales_tax_rate
                ELSE
                    core.get_state_sales_tax_rate(state_sales_tax_id)
                END
            WHEN county_sales_tax_id IS NOT NULL
            THEN 
                core.get_county_sales_tax_rate(county_sales_tax_id)
            ELSE
                rate
        END,
        _tax_base_amount_type_code,
        tax_rate_type_code,
        rounding_method_code,
        rounding_decimal_places,
        CASE WHEN state_sales_tax_id IS NULL AND county_sales_tax_id IS NULL AND tax_rate_type_code = 'F'
        THEN
            rate
        ELSE
            NULL
        END
    FROM core.sales_tax_details
    WHERE sales_tax_id=_sales_tax_id;


    IF(_tax_base_amount_type_code = 'L') THEN
        FOR this IN SELECT * FROM temp_sales_tax ORDER BY id
        LOOP
            _taxable_amount     := this.taxable_amount + _cumulative_tax;
            _tax                := 0;
            
            IF(this.rounding_type = 'R') THEN
                _tax            := ROUND((_taxable_amount * this.rate)/100, this.rounding_places);
            ELSIF(this.rounding_type = 'F') THEN
                _tax            := FLOOR((_taxable_amount * this.rate)/100);
            ELSIF(this.rounding_type = 'C') THEN
                _tax            := CEILING((_taxable_amount * this.rate)/100);
            END IF;

            _cumulative_tax     := _cumulative_tax + _tax;

            UPDATE temp_sales_tax SET 
            tax = _tax,
            taxable_amount = _taxable_amount
            WHERE id = this.id;
            
        END LOOP;
    ELSE
        UPDATE temp_sales_tax
        SET tax = 
        CASE WHEN rounding_type = 'R'
        THEN ROUND((taxable_amount * rate)/100, rounding_places)
        WHEN rounding_type = 'F'
        THEN FLOOR((taxable_amount * rate)/100)
        WHEN rounding_type = 'C'
        THEN CEILING((taxable_amount * rate)/100)
        END;
    END IF;


    
    RETURN QUERY SELECT * FROM temp_sales_tax;
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.get_sales_tax('Sales', 1, 'JASMI-0002', 'None', 1, 'RMBP', 225000, 1, 0, 0, 3);



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_sales_tax_id.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_sales_tax_id
(
    _tran_book                  national character varying(12),
    _store_id                   integer,
    _party_code                 national character varying(12),
    _shipping_address_code      national character varying(12),
    _price_type_id              integer,
    _item_code                  national character varying(12),
    _unit_id                    integer,
    _price                      money_strict
);

CREATE FUNCTION transactions.get_sales_tax_id
(
    _tran_book                  national character varying(12),
    _store_id                   integer,
    _party_code                 national character varying(12),
    _shipping_address_code      national character varying(12),
    _price_type_id              integer,
    _item_code                  national character varying(12),
    _unit_id                    integer,--todo
    _price                      money_strict
)
RETURNS integer
AS
$$
    DECLARE _item_id                    integer;
    DECLARE _party_id                   bigint;
    DECLARE _party_type_id              integer;
    DECLARE _value_date                 date;
    DECLARE _sales_tax_id               integer;
    DECLARE _item_group_id              integer;
    DECLARE _entity_id                  integer;
    DECLARE _industry_id                integer;
    DECLARE _office_id                  integer;
BEGIN
    IF(COALESCE(_tran_book, '') = '') THEN
        RETURN 0;
    END IF;

    IF(COALESCE(_store_id, 0) = 0) THEN
        RETURN 0;
    END IF;

    IF(COALESCE(_party_code, '') = '') THEN
        RETURN 0;
    END IF;

    IF(COALESCE(_price, 0) = 0 ) THEN
        RETURN 0;
    END IF;

    _office_id      := office.get_office_id_by_store_id(_store_id);
    _item_id        := core.get_item_id_by_item_code(_item_code);
    _party_id       := core.get_party_id_by_party_code(_party_code);
    _party_type_id  := core.get_party_type_id_by_party_id(_party_id);
    _value_date     := transactions.get_value_date(_office_id);
    _item_group_id  := core.get_item_group_id_by_item_id(_item_id);
    _entity_id      := core.get_entity_id_by_party_id(_party_id);
    _industry_id    := core.get_industry_id_by_party_id(_party_id);
       
    --Exempt by item
    SELECT core.sales_tax_exempts.sales_tax_id INTO _sales_tax_id
    FROM core.sales_tax_exempts
    INNER JOIN core.sales_tax_exempt_details
    ON core.sales_tax_exempt_details.sales_tax_exempt_id = core.sales_tax_exempts.sales_tax_exempt_id
    WHERE (item_id = _item_id)
    AND store_id = _store_id
    AND price_from <= _price AND price_to >= _price
    AND core.sales_tax_exempts.valid_from <= _value_date AND core.sales_tax_exempts.valid_till >= _value_date;

    IF(_sales_tax_id IS NOT NULL) THEN
        RETURN _sales_tax_id;
    END IF;

    --Exempt by item group
    SELECT core.sales_tax_exempts.sales_tax_id INTO _sales_tax_id
    FROM core.sales_tax_exempts
    INNER JOIN core.sales_tax_exempt_details
    ON core.sales_tax_exempt_details.sales_tax_exempt_id = core.sales_tax_exempts.sales_tax_exempt_id
    WHERE (item_group_id = _item_group_id)
    AND store_id = _store_id
    AND price_from <= _price AND price_to >= _price
    AND core.sales_tax_exempts.valid_from <= _value_date AND core.sales_tax_exempts.valid_till >= _value_date;

    IF(_sales_tax_id IS NOT NULL) THEN
        RETURN _sales_tax_id;
    END IF;

    --Exempt by party
    SELECT core.sales_tax_exempts.sales_tax_id INTO _sales_tax_id
    FROM core.sales_tax_exempts
    INNER JOIN core.sales_tax_exempt_details
    ON core.sales_tax_exempt_details.sales_tax_exempt_id = core.sales_tax_exempts.sales_tax_exempt_id
    WHERE (party_id = _party_id)
    AND store_id = _store_id
    AND price_from <= _price AND price_to >= _price
    AND core.sales_tax_exempts.valid_from <= _value_date AND core.sales_tax_exempts.valid_till >= _value_date;

    --Exempt by party type
    SELECT core.sales_tax_exempts.sales_tax_id INTO _sales_tax_id
    FROM core.sales_tax_exempts
    INNER JOIN core.sales_tax_exempt_details
    ON core.sales_tax_exempt_details.sales_tax_exempt_id = core.sales_tax_exempts.sales_tax_exempt_id
    WHERE (party_type_id = _party_type_id)
    AND store_id = _store_id
    AND price_from <= _price AND price_to >= _price
    AND core.sales_tax_exempts.valid_from <= _value_date AND core.sales_tax_exempts.valid_till >= _value_date;

    IF(_sales_tax_id IS NOT NULL) THEN
        RETURN _sales_tax_id;
    END IF;

    --Exempt by entity
    IF(_entity_id IS NOT NULL) THEN
        SELECT core.sales_tax_exempts.sales_tax_id INTO _sales_tax_id
        FROM core.sales_tax_exempts
        INNER JOIN core.sales_tax_exempt_details
        ON core.sales_tax_exempt_details.sales_tax_exempt_id = core.sales_tax_exempts.sales_tax_exempt_id
        WHERE (entity_id = _entity_id)
        AND store_id = _store_id
        AND price_from <= _price AND price_to >= _price
        AND core.sales_tax_exempts.valid_from <= _value_date AND core.sales_tax_exempts.valid_till >= _value_date;

        IF(_sales_tax_id IS NOT NULL) THEN
            RETURN _sales_tax_id;
        END IF;
    END IF;

    --Exempt by industry
    IF(_industry_id IS NOT NULL) THEN
        SELECT core.sales_tax_exempts.sales_tax_id INTO _sales_tax_id
        FROM core.sales_tax_exempts
        INNER JOIN core.sales_tax_exempt_details
        ON core.sales_tax_exempt_details.sales_tax_exempt_id = core.sales_tax_exempts.sales_tax_exempt_id
        WHERE (industry_id = _industry_id)
        AND store_id = _store_id
        AND price_from <= _price AND price_to >= _price
        AND core.sales_tax_exempts.valid_from <= _value_date AND core.sales_tax_exempts.valid_till >= _value_date;

        IF(_sales_tax_id IS NOT NULL) THEN
            RETURN _sales_tax_id;
        END IF;
    END IF;
    

    --Get default tax from store
    SELECT sales_tax_id INTO _sales_tax_id FROM office.stores WHERE store_id=_store_id;    
    IF(_sales_tax_id IS NOT NULL) THEN
        RETURN _sales_tax_id;
    END IF;

    --Fallback to item sales tax

    RETURN
        sales_tax_id
    FROM
        core.items
    WHERE
        item_id=_item_id;
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.get_sales_tax_id('Purchase', 1, 'JASMI-0002', '', 1, 'RMBP', 1, 30000);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_stock_account_statement.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_stock_account_statement
(
    _value_date_from        date,
    _value_date_to          date,
    _user_id                integer,
    _item_id                integer,
    _store_id               integer
);

CREATE FUNCTION transactions.get_stock_account_statement
(
    _value_date_from        date,
    _value_date_to          date,
    _user_id                integer,
    _item_id                integer,
    _store_id               integer
)
RETURNS TABLE
(
    id                      integer,
    value_date              date,
    tran_code               text,
    statement_reference     text,
    debit                   decimal(24, 4),
    credit                  decimal(24, 4),
    balance                 decimal(24, 4),
    book                    text,
    item_id                 integer,
    item_code               text,
    item_name               text,
    posted_on               TIMESTAMP WITH TIME ZONE,
    posted_by               text,
    approved_by             text,
    verification_status     integer,
    flag_bg                 text,
    flag_fg                 text
)
VOLATILE AS
$$
BEGIN

    DROP TABLE IF EXISTS temp_account_statement;
    CREATE TEMPORARY TABLE temp_account_statement
    (
        id                      SERIAL,
        value_date              date,
        tran_code               text,
        statement_reference     text,
        debit                   decimal(24, 4),
        credit                  decimal(24, 4),
        balance                 decimal(24, 4),
        book                    text,
        item_id                 integer,
        item_code               text,
        item_name               text,
        posted_on               TIMESTAMP WITH TIME ZONE,
        posted_by               text,
        approved_by             text,
        verification_status     integer,
        flag_bg                 text,
        flag_fg                 text
    ) ON COMMIT DROP;

    INSERT INTO temp_account_statement(value_date, statement_reference, debit, item_id)
    SELECT 
        _value_date_from, 
        'Opening Balance', 
        SUM
        (
            CASE transactions.stock_details.tran_type
            WHEN 'Dr' THEN base_quantity
            ELSE base_quantity * -1 
            END            
        ) as debit,
        _item_id
    FROM transactions.stock_details
    INNER JOIN transactions.stock_master
    ON transactions.stock_details.stock_master_id = transactions.stock_master.stock_master_id
    INNER JOIN transactions.transaction_master
    ON transactions.stock_master.transaction_master_id = transactions.transaction_master.transaction_master_id
    WHERE
        transactions.transaction_master.verification_status_id > 0
    AND 
        transactions.transaction_master.value_date < _value_date_from
    AND 
        transactions.stock_details.store_id = _store_id
    AND
        transactions.stock_details.item_id = _item_id;

    DELETE FROM temp_account_statement
    WHERE COALESCE(temp_account_statement.debit, 0) = 0
    AND COALESCE(temp_account_statement.credit, 0) = 0;

    UPDATE temp_account_statement SET 
    debit = temp_account_statement.credit * -1,
    credit = 0
    WHERE temp_account_statement.credit < 0;

    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit, book, item_id, posted_on, posted_by, approved_by, verification_status)
    SELECT
        transactions.transaction_master.value_date,
        transactions.transaction_master.transaction_code,
        transactions.transaction_master.statement_reference,
        CASE transactions.stock_details.tran_type
        WHEN 'Dr' THEN base_quantity
        ELSE 0 END AS debit,
        CASE transactions.stock_details.tran_type
        WHEN 'Cr' THEN base_quantity
        ELSE 0 END AS credit,
        transactions.transaction_master.book,
        transactions.stock_details.item_id,
        transactions.transaction_master.transaction_ts AS posted_on,
        office.get_user_name_by_user_id(COALESCE(transactions.transaction_master.user_id, transactions.transaction_master.sys_user_id)),
        office.get_user_name_by_user_id(transactions.transaction_master.verified_by_user_id),
        transactions.transaction_master.verification_status_id
    FROM transactions.transaction_master
    INNER JOIN transactions.stock_master
    ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_Id
    INNER JOIN transactions.stock_details
    ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
    WHERE
        transactions.transaction_master.verification_status_id > 0
    AND
        transactions.transaction_master.value_date >= _value_date_from
    AND
        transactions.transaction_master.value_date <= _value_date_to
    AND
       transactions.stock_details.store_id = _store_id 
    AND
       transactions.stock_details.item_id = _item_id
    ORDER BY 
        transactions.transaction_master.value_date,
        transactions.transaction_master.last_verified_on;
    
    UPDATE temp_account_statement
    SET balance = c.balance
    FROM
    (
        SELECT
            temp_account_statement.id, 
            SUM(COALESCE(c.debit, 0)) 
            - 
            SUM(COALESCE(c.credit,0)) As balance
        FROM temp_account_statement
        LEFT JOIN temp_account_statement AS c 
            ON (c.id <= temp_account_statement.id)
        GROUP BY temp_account_statement.id
        ORDER BY temp_account_statement.id
    ) AS c
    WHERE temp_account_statement.id = c.id;

    UPDATE temp_account_statement SET 
        item_code = core.items.item_code,
        item_name = core.items.item_name
    FROM core.items
    WHERE temp_account_statement.item_id = core.items.item_id;

    UPDATE temp_account_statement SET
        flag_bg = core.get_flag_background_color(core.get_flag_type_id(_user_id, 'account_statement', 'transaction_code', temp_account_statement.tran_code::text)),
        flag_fg = core.get_flag_foreground_color(core.get_flag_type_id(_user_id, 'account_statement', 'transaction_code', temp_account_statement.tran_code::text));

        
    RETURN QUERY
    SELECT * FROM temp_account_statement;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS transactions.get_stock_account_statement
(
    _value_date_from        date,
    _value_date_to          date,
    _user_id                integer,
    _item_code              text,
    _store_id               integer
);

CREATE FUNCTION transactions.get_stock_account_statement
(
    _value_date_from        date,
    _value_date_to          date,
    _user_id                integer,
    _item_code              text,
    _store_id               integer
)
RETURNS TABLE
(
    id                      integer,
    value_date              date,
    tran_code               text,
    statement_reference     text,
    debit                   decimal(24, 4),
    credit                  decimal(24, 4),
    balance                 decimal(24, 4),
    book                    text,
    item_id                 integer,
    item_code               text,
    item_name               text,
    posted_on               TIMESTAMP WITH TIME ZONE,
    posted_by               text,
    approved_by             text,
    verification_status     integer,
    flag_bg                 text,
    flag_fg                 text
)
VOLATILE AS
$$
    DECLARE _item_id        integer;
BEGIN

    SELECT core.items.item_id INTO _item_id
    FROM core.items
    WHERE core.items.item_code = _item_code;

    RETURN QUERY
    SELECT * FROM transactions.get_stock_account_statement(_value_date_from, _value_date_to, _user_id, _item_id, _store_id);
END
$$
LANGUAGE plpgsql;

--SELECT * FROM transactions.get_stock_account_statement('1-1-2010', '1-1-2020', 2, 'RMBP', 1);



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_top_selling_products_by_office.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_top_selling_products_by_office(_office_id integer, top integer);

CREATE FUNCTION transactions.get_top_selling_products_by_office(_office_id integer, top integer)
RETURNS TABLE
(
        id              integer,
        office_id       integer,
        office_code     text,
        office_name     text,
        item_id         integer,
        item_code       text,
        item_name       text,
        total_sales     numeric
)
AS
$$
BEGIN
        CREATE TEMPORARY TABLE top_selling_products
        (
                item_id integer
        ) ON COMMIT DROP;

        INSERT INTO top_selling_products
        SELECT t.item_id FROM transactions.get_top_selling_products_of_all_time(top) AS t;


        CREATE TEMPORARY TABLE top_selling_products_by_office
        (
                id              SERIAL,
                office_id       integer,
                office_code     text,
                office_name     text,
                item_id         integer,
                item_code       text,
                item_name       text,
                total_sales     numeric
        ) ON COMMIT DROP;


        INSERT INTO top_selling_products_by_office(office_id, item_id, total_sales)
        SELECT
                transactions.verified_stock_transaction_view.office_id,
                transactions.verified_stock_transaction_view.item_id, 
                SUM((price * quantity) - discount + tax) AS sales_amount
        FROM transactions.verified_stock_transaction_view
        WHERE transactions.verified_stock_transaction_view.item_id IN (SELECT top_selling_products.item_id FROM top_selling_products)
        AND transactions.verified_stock_transaction_view.office_id IN (SELECT * FROM office.get_office_ids(_office_id))
        GROUP BY 
                transactions.verified_stock_transaction_view.office_id, 
                transactions.verified_stock_transaction_view.item_id
        ORDER BY sales_amount DESC, item_id ASC;


        UPDATE top_selling_products_by_office AS t
        SET 
                item_code = core.items.item_code,
                item_name = core.items.item_name
        FROM core.items
        WHERE t.item_id = core.items.item_id;


        UPDATE top_selling_products_by_office AS t
        SET 
                office_code = office.offices.office_code,
                office_name= office.offices.office_name
        FROM office.offices
        WHERE t.office_id = office.offices.office_id;


        RETURN QUERY 
        SELECT * FROM top_selling_products_by_office;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS transactions.get_top_selling_products_by_office();

CREATE FUNCTION transactions.get_top_selling_products_by_office()
RETURNS TABLE
(
        id              integer,
        office_id       integer,
        office_code     text,
        office_name     text,
        item_id         integer,
        item_code       text,
        item_name       text,
        total_sales     numeric
)
AS
$$
    DECLARE root_office_id integer = 0;
BEGIN
    SELECT office.offices.office_id INTO root_office_id
    FROM office.offices
    WHERE parent_office_id IS NULL
    LIMIT 1;

        RETURN QUERY 
        SELECT * FROM transactions.get_top_selling_products_by_office(root_office_id, 5);
END
$$
LANGUAGE plpgsql;


--SELECT  id, office_code, item_name, total_sales FROM transactions.get_top_selling_products_by_office()


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_top_selling_products_of_all_time.sql --<--<--

DROP FUNCTION IF EXISTS transactions.get_top_selling_products_of_all_time(top int);

CREATE FUNCTION transactions.get_top_selling_products_of_all_time(top int)
RETURNS TABLE
(
        id              integer,
        item_id         integer,
        item_code       text,
        item_name       text,
        total_sales     numeric
)
AS
$$
BEGIN
        CREATE TEMPORARY TABLE IF NOT EXISTS top_selling_products_of_all_time
        (
                id              integer,
                item_id         integer,
                item_code       text,
                item_name       text,
                total_sales     numeric
        ) ON COMMIT DROP;

        INSERT INTO top_selling_products_of_all_time(id, item_id, total_sales)
        SELECT ROW_NUMBER() OVER(), *
        FROM
        (
                SELECT         
                        transactions.verified_stock_transaction_view.item_id, 
                        SUM((price * quantity) - discount + tax) AS sales_amount
                FROM transactions.verified_stock_transaction_view
                GROUP BY transactions.verified_stock_transaction_view.item_id
                ORDER BY 2 DESC
                LIMIT $1
        ) t;

        UPDATE top_selling_products_of_all_time AS t
        SET 
                item_code = core.items.item_code,
                item_name = core.items.item_name
        FROM core.items
        WHERE t.item_id = core.items.item_id;
        

        RETURN QUERY
        SELECT * FROM top_selling_products_of_all_time;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS transactions.get_top_selling_products_of_all_time();

CREATE FUNCTION transactions.get_top_selling_products_of_all_time()
RETURNS TABLE
(
        id              integer,
        item_id         integer,
        item_code       text,
        item_name       text,
        total_sales     numeric
)
AS
$$
BEGIN
        RETURN QUERY
        SELECT * FROM transactions.get_top_selling_products_of_all_time(5);
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.get_top_selling_products_of_all_time();



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_total_due.sql --<--<--
CREATE FUNCTION transactions.get_total_due(office_id integer, party_id bigint)
RETURNS DECIMAL(24, 4)
AS
$$
    DECLARE _accrued_interest DECIMAL(24, 4)= transactions.get_accrued_interest($1, $2);
    DECLARE _account_id bigint= core.get_account_id_by_party_id($2);
    DECLARE _debit DECIMAL(24, 4) = 0;
    DECLARE _credit DECIMAL(24, 4) = 0;
    DECLARE _local_currency_code national character varying(12) = core.get_currency_code_by_office_id($1); 
    DECLARE _base_currency_code  national character varying(12) = core.get_currency_code_by_party_id($2);
    DECLARE _amount_in_local_currency DECIMAL(24, 4)= 0;
    DECLARE _amount_in_base_currency DECIMAL(24, 4)= 0;
    DECLARE _er decimal_strict2 = 0;
BEGIN

    SELECT SUM(amount_in_local_currency)
    INTO _debit
    FROM transactions.verified_transaction_view
    WHERE transactions.verified_transaction_view.account_id IN (SELECT * FROM core.get_account_ids(_account_id))
    AND transactions.verified_transaction_view.office_id IN (SELECT * FROM office.get_office_ids($1))
    AND tran_type='Dr';

    SELECT SUM(amount_in_local_currency)
    INTO _credit
    FROM transactions.verified_transaction_view
    WHERE transactions.verified_transaction_view.account_id IN (SELECT * FROM core.get_account_ids(_account_id))
    AND transactions.verified_transaction_view.office_id IN (SELECT * FROM office.get_office_ids($1))
    AND tran_type='Cr';

    _er := COALESCE(transactions.get_exchange_rate($1, _local_currency_code, _base_currency_code), 0);

    IF(_er = 0) THEN
        RAISE EXCEPTION 'Exchange rate between % and % was not found.', _local_currency_code, _base_currency_code
        USING ERRCODE='P4010';
    END IF;


    _amount_in_local_currency = COALESCE(_credit, 0) - COALESCE(_debit, 0) - COALESCE(_accrued_interest, 0);


    _amount_in_base_currency = _amount_in_local_currency * _er; 

    RETURN _amount_in_base_currency;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_trial_balance.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_trial_balance
(
    _date_from                      date,
    _date_to                        date,
    _user_id                        integer,
    _office_id                      integer,
    _compact                        boolean,
    _factor                         decimal(24, 4),
    _change_side_when_negative      boolean,
    _include_zero_balance_accounts  boolean
);

CREATE FUNCTION transactions.get_trial_balance
(
    _date_from                      date,
    _date_to                        date,
    _user_id                        integer,
    _office_id                      integer,
    _compact                        boolean,
    _factor                         decimal(24, 4),
    _change_side_when_negative      boolean DEFAULT(true),
    _include_zero_balance_accounts  boolean DEFAULT(true)
)
RETURNS TABLE
(
    id                      integer,
    account_id              integer,
    account_number          text,
    account                 text,
    previous_debit          decimal(24, 4),
    previous_credit         decimal(24, 4),
    debit                   decimal(24, 4),
    credit                  decimal(24, 4),
    closing_debit           decimal(24, 4),
    closing_credit          decimal(24, 4)
)
AS
$$
BEGIN
    IF(_date_from = 'infinity') THEN
        RAISE EXCEPTION 'Invalid date.'
        USING ERRCODE='P3008';
    END IF;

    IF NOT EXISTS
    (
        SELECT 0 FROM office.offices
        WHERE office_id IN 
        (
            SELECT * FROM office.get_office_ids(1)
        )
        HAVING count(DISTINCT currency_code) = 1
   ) THEN
        RAISE EXCEPTION 'Cannot produce trial balance of office(s) having different base currencies.'
        USING ERRCODE='P8002';
   END IF;


    DROP TABLE IF EXISTS temp_trial_balance;
    CREATE TEMPORARY TABLE temp_trial_balance
    (
        id                      integer,
        account_id              integer,
        account_number          text,
        account                 text,
        previous_debit          decimal(24, 4),
        previous_credit         decimal(24, 4),
        debit                   decimal(24, 4),
        credit                  decimal(24, 4),
        closing_debit           decimal(24, 4),
        closing_credit          decimal(24, 4),
        root_account_id         integer,
        normally_debit          boolean
    ) ON COMMIT DROP;

    INSERT INTO temp_trial_balance(account_id, previous_debit, previous_credit)    
    SELECT 
        verified_transaction_mat_view.account_id, 
        SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE 0 END),
        SUM(CASE tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE 0 END)        
    FROM transactions.verified_transaction_mat_view
    WHERE value_date < _date_from
    AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
    GROUP BY verified_transaction_mat_view.account_id;

    IF(_date_to = 'infinity') THEN
        INSERT INTO temp_trial_balance(account_id, debit, credit)    
        SELECT 
            verified_transaction_mat_view.account_id, 
            SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE 0 END),
            SUM(CASE tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE 0 END)        
        FROM transactions.verified_transaction_mat_view
        WHERE value_date > _date_from
        AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
        GROUP BY verified_transaction_mat_view.account_id;
    ELSE
        INSERT INTO temp_trial_balance(account_id, debit, credit)    
        SELECT 
            verified_transaction_mat_view.account_id, 
            SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE 0 END),
            SUM(CASE tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE 0 END)        
        FROM transactions.verified_transaction_mat_view
        WHERE value_date >= _date_from AND value_date <= _date_to
        AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
        GROUP BY verified_transaction_mat_view.account_id;    
    END IF;

    UPDATE temp_trial_balance SET root_account_id = core.get_second_root_account_id(temp_trial_balance.account_id);


    DROP TABLE IF EXISTS temp_trial_balance2;
    
    IF(_compact) THEN
        CREATE TEMPORARY TABLE temp_trial_balance2
        ON COMMIT DROP
        AS
        SELECT
            temp_trial_balance.root_account_id AS account_id,
            ''::text as account_number,
            ''::text as account,
            SUM(temp_trial_balance.previous_debit) AS previous_debit,
            SUM(temp_trial_balance.previous_credit) AS previous_credit,
            SUM(temp_trial_balance.debit) AS debit,
            SUM(temp_trial_balance.credit) as credit,
            SUM(temp_trial_balance.closing_debit) AS closing_debit,
            SUM(temp_trial_balance.closing_credit) AS closing_credit,
            temp_trial_balance.normally_debit
        FROM temp_trial_balance
        GROUP BY 
            temp_trial_balance.root_account_id,
            temp_trial_balance.normally_debit
        ORDER BY temp_trial_balance.normally_debit;
    ELSE
        CREATE TEMPORARY TABLE temp_trial_balance2
        ON COMMIT DROP
        AS
        SELECT
            temp_trial_balance.account_id,
            ''::text as account_number,
            ''::text as account,
            SUM(temp_trial_balance.previous_debit) AS previous_debit,
            SUM(temp_trial_balance.previous_credit) AS previous_credit,
            SUM(temp_trial_balance.debit) AS debit,
            SUM(temp_trial_balance.credit) as credit,
            SUM(temp_trial_balance.closing_debit) AS closing_debit,
            SUM(temp_trial_balance.closing_credit) AS closing_credit,
            temp_trial_balance.normally_debit
        FROM temp_trial_balance
        GROUP BY 
            temp_trial_balance.account_id,
            temp_trial_balance.normally_debit
        ORDER BY temp_trial_balance.normally_debit;
    END IF;
    
    UPDATE temp_trial_balance2 SET
        account_number = core.accounts.account_number,
        account = core.accounts.account_name,
        normally_debit = core.account_masters.normally_debit
    FROM core.accounts
    INNER JOIN core.account_masters
    ON core.accounts.account_master_id = core.account_masters.account_master_id
    WHERE temp_trial_balance2.account_id = core.accounts.account_id;

    UPDATE temp_trial_balance2 SET 
        closing_debit = COALESCE(temp_trial_balance2.previous_debit, 0) + COALESCE(temp_trial_balance2.debit, 0),
        closing_credit = COALESCE(temp_trial_balance2.previous_credit, 0) + COALESCE(temp_trial_balance2.credit, 0);
        


     UPDATE temp_trial_balance2 SET previous_debit = COALESCE(temp_trial_balance2.previous_debit, 0) - COALESCE(temp_trial_balance2.previous_credit, 0), previous_credit = NULL WHERE normally_debit;
     UPDATE temp_trial_balance2 SET previous_credit = COALESCE(temp_trial_balance2.previous_credit, 0) - COALESCE(temp_trial_balance2.previous_debit, 0), previous_debit = NULL WHERE NOT normally_debit;
 
     UPDATE temp_trial_balance2 SET debit = COALESCE(temp_trial_balance2.debit, 0) - COALESCE(temp_trial_balance2.credit, 0), credit = NULL WHERE normally_debit;
     UPDATE temp_trial_balance2 SET credit = COALESCE(temp_trial_balance2.credit, 0) - COALESCE(temp_trial_balance2.debit, 0), debit = NULL WHERE NOT normally_debit;
 
     UPDATE temp_trial_balance2 SET closing_debit = COALESCE(temp_trial_balance2.closing_debit, 0) - COALESCE(temp_trial_balance2.closing_credit, 0), closing_credit = NULL WHERE normally_debit;
     UPDATE temp_trial_balance2 SET closing_credit = COALESCE(temp_trial_balance2.closing_credit, 0) - COALESCE(temp_trial_balance2.closing_debit, 0), closing_debit = NULL WHERE NOT normally_debit;


    IF(NOT _include_zero_balance_accounts) THEN
        DELETE FROM temp_trial_balance2 WHERE COALESCE(temp_trial_balance2.closing_debit) + COALESCE(temp_trial_balance2.closing_credit) = 0;
    END IF;
    
    IF(_factor > 0) THEN
        UPDATE temp_trial_balance2 SET previous_debit   = temp_trial_balance2.previous_debit/_factor;
        UPDATE temp_trial_balance2 SET previous_credit  = temp_trial_balance2.previous_credit/_factor;
        UPDATE temp_trial_balance2 SET debit            = temp_trial_balance2.debit/_factor;
        UPDATE temp_trial_balance2 SET credit           = temp_trial_balance2.credit/_factor;
        UPDATE temp_trial_balance2 SET closing_debit    = temp_trial_balance2.closing_debit/_factor;
        UPDATE temp_trial_balance2 SET closing_credit   = temp_trial_balance2.closing_credit/_factor;
    END IF;

    --Remove Zeros
    UPDATE temp_trial_balance2 SET previous_debit = NULL WHERE temp_trial_balance2.previous_debit = 0;
    UPDATE temp_trial_balance2 SET previous_credit = NULL WHERE temp_trial_balance2.previous_credit = 0;
    UPDATE temp_trial_balance2 SET debit = NULL WHERE temp_trial_balance2.debit = 0;
    UPDATE temp_trial_balance2 SET credit = NULL WHERE temp_trial_balance2.credit = 0;
    UPDATE temp_trial_balance2 SET closing_debit = NULL WHERE temp_trial_balance2.closing_debit = 0;
    UPDATE temp_trial_balance2 SET closing_debit = NULL WHERE temp_trial_balance2.closing_credit = 0;

    IF(_change_side_when_negative) THEN
        UPDATE temp_trial_balance2 SET previous_debit = temp_trial_balance2.previous_credit * -1, previous_credit = NULL WHERE temp_trial_balance2.previous_credit < 0;
        UPDATE temp_trial_balance2 SET previous_credit = temp_trial_balance2.previous_debit * -1, previous_debit = NULL WHERE temp_trial_balance2.previous_debit < 0;

        UPDATE temp_trial_balance2 SET debit = temp_trial_balance2.credit * -1, credit = NULL WHERE temp_trial_balance2.credit < 0;
        UPDATE temp_trial_balance2 SET credit = temp_trial_balance2.debit * -1, debit = NULL WHERE temp_trial_balance2.debit < 0;

        UPDATE temp_trial_balance2 SET closing_debit = temp_trial_balance2.closing_credit * -1, closing_credit = NULL WHERE temp_trial_balance2.closing_credit < 0;
        UPDATE temp_trial_balance2 SET closing_credit = temp_trial_balance2.closing_debit * -1, closing_debit = NULL WHERE temp_trial_balance2.closing_debit < 0;
    END IF;
    
    RETURN QUERY
    SELECT
        row_number() OVER(ORDER BY temp_trial_balance2.normally_debit DESC, temp_trial_balance2.account_id)::integer AS id,
        temp_trial_balance2.account_id,
        temp_trial_balance2.account_number,
        temp_trial_balance2.account,
        temp_trial_balance2.previous_debit,
        temp_trial_balance2.previous_credit,
        temp_trial_balance2.debit,
        temp_trial_balance2.credit,
        temp_trial_balance2.closing_debit,
        temp_trial_balance2.closing_credit
    FROM temp_trial_balance2;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM transactions.get_trial_balance('12-1-2014','12-31-2014',1,1, false, 1000, false, false);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_value_date.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_value_date(_office_id integer);

CREATE FUNCTION transactions.get_value_date(_office_id integer)
RETURNS date
AS
$$
    DECLARE this            RECORD;
    DECLARE _value_date     date=NOW();
BEGIN
    SELECT * FROM transactions.day_operation
    WHERE office_id = _office_id
    AND value_date =
    (
        SELECT MAX(value_date)
        FROM transactions.day_operation
        WHERE office_id = _office_id
    ) INTO this;

    IF(this.day_id IS NOT NULL) THEN
        IF(this.completed) THEN
            _value_date  := this.value_date + interval '1' day;
        ELSE
            _value_date  := this.value_date;    
        END IF;
    END IF;
    
    RETURN _value_date;
END
$$
LANGUAGE plpgsql;


--select transactions.get_value_date(2);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.get_write_off_cost_of_goods_sold.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_write_off_cost_of_goods_sold(_stock_master_id bigint, _item_id integer, _unit_id integer, _quantity integer);

CREATE FUNCTION transactions.get_write_off_cost_of_goods_sold(_stock_master_id bigint, _item_id integer, _unit_id integer, _quantity integer)
RETURNS money_strict2
AS
$$
    DECLARE _base_unit_id integer;
    DECLARE _factor decimal;
BEGIN
    _base_unit_id    = core.get_root_unit_id(_unit_id);
    _factor          = core.convert_unit(_unit_id, _base_unit_id);

    RAISE NOTICE 'Item Id ->%, Unit ID->%, Quantity->%', _item_id, _unit_id, _quantity;

    RETURN
        SUM((cost_of_goods_sold / base_quantity) * _factor * _quantity)     
         FROM transactions.stock_details        
    WHERE stock_master_id = _stock_master_id
    AND item_id = _item_id;    
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.get_write_off_cost_of_goods_sold(7, 3, 1, 1);



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.initialize_eod_operation.sql --<--<--
DROP FUNCTION IF EXISTS transactions.initialize_eod_operation(_user_id integer, _office_id integer, _value_date date);

CREATE FUNCTION transactions.initialize_eod_operation(_user_id integer, _office_id integer, _value_date date)
RETURNS void
AS
$$
    DECLARE this            RECORD;    
BEGIN
    IF(_value_date IS NULL) THEN
        RAISE EXCEPTION 'Invalid date.'
        USING ERRCODE='P3008';        
    END IF;

    IF(NOT policy.is_elevated_user(_user_id)) THEN
        RAISE EXCEPTION 'Access is denied.'
        USING ERRCODE='P9010';
    END IF;

    IF(_value_date != transactions.get_value_date(_office_id)) THEN
        RAISE EXCEPTION 'Invalid value date.'
        USING ERRCODE='P3007';
    END IF;

    SELECT * FROM transactions.day_operation
    WHERE value_date=_value_date 
    AND office_id = _office_id INTO this;

    IF(this IS NULL) THEN
        INSERT INTO transactions.day_operation(office_id, value_date, started_on, started_by)
        SELECT _office_id, _value_date, NOW(), _user_id;
    ELSE    
        RAISE EXCEPTION 'EOD operation was already initialized.'
        USING ERRCODE='P8101';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.is_eod_initialized.sql --<--<--
DROP FUNCTION IF EXISTS transactions.is_eod_initialized(_office_id integer, _value_date date);

CREATE FUNCTION transactions.is_eod_initialized(_office_id integer, _value_date date)
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT * FROM transactions.day_operation
        WHERE office_id = _office_id
        AND value_date = _value_date
        AND completed = false
    ) then
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.list_closing_stock.sql --<--<--
DROP FUNCTION IF EXISTS transactions.list_closing_stock
(
    _store_id               integer
);

CREATE FUNCTION transactions.list_closing_stock
(
    _store_id               integer
)
RETURNS
TABLE
(
    item_id                 integer,
    item_code               text,
    item_name               text,
    unit_id                 integer,
    unit_name               text,
    quantity                integer
)
AS
$$
BEGIN
    DROP TABLE IF EXISTS temp_closing_stock;

    CREATE TEMPORARY TABLE temp_closing_stock
    (
        item_id             integer,
        item_code           text,
        item_name           text,
        unit_id             integer,
        unit_name           text,
        quantity            integer,
        maintain_stock      boolean
    ) ON COMMIT DROP;

    INSERT INTO temp_closing_stock(item_id, unit_id, quantity)
    SELECT 
        transactions.verified_stock_details_view.item_id, 
        transactions.verified_stock_details_view.base_unit_id,
        SUM(CASE WHEN transactions.verified_stock_details_view.tran_type='Dr' THEN transactions.verified_stock_details_view.base_quantity ELSE transactions.verified_stock_details_view.base_quantity * -1 END)
    FROM transactions.verified_stock_details_view
    WHERE transactions.verified_stock_details_view.store_id = _store_id
    GROUP BY transactions.verified_stock_details_view.item_id, transactions.verified_stock_details_view.store_id, transactions.verified_stock_details_view.base_unit_id;

    UPDATE temp_closing_stock SET 
        item_code = core.items.item_code,
        item_name = core.items.item_name,
        maintain_stock = core.items.maintain_stock
    FROM core.items
    WHERE temp_closing_stock.item_id = core.items.item_id;

    DELETE FROM temp_closing_stock WHERE NOT temp_closing_stock.maintain_stock;

    UPDATE temp_closing_stock SET 
        unit_name = core.units.unit_name
    FROM core.units
    WHERE temp_closing_stock.unit_id = core.units.unit_id;

    RETURN QUERY
    SELECT 
        temp_closing_stock.item_id, 
        temp_closing_stock.item_code, 
        temp_closing_stock.item_name, 
        temp_closing_stock.unit_id, 
        temp_closing_stock.unit_name, 
        temp_closing_stock.quantity
    FROM temp_closing_stock
    ORDER BY item_id;
END;
$$
LANGUAGE plpgsql;

COMMENT ON FUNCTION transactions.list_closing_stock(integer) 
IS 'Lists stock items, their respective base units, and closing stock quantity.';

--SELECT * FROM transactions.list_closing_stock(1);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.opening_inventory_exists.sql --<--<--
DROP FUNCTION IF EXISTS transactions.opening_inventory_exists
(
    _office_id          integer
);

CREATE FUNCTION transactions.opening_inventory_exists
(
    _office_id          integer
)
RETURNS boolean
STABLE
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT 1
        FROM transactions.transaction_master
        WHERE book = 'Opening.Inventory'
        AND office_id = _office_id
    ) THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.perform_eod_operation.sql --<--<--
DROP FUNCTION IF EXISTS transactions.perform_eod_operation(_user_id integer, _office_id integer, _value_date date);

CREATE FUNCTION transactions.perform_eod_operation(_user_id integer, _office_id integer, _value_date date)
RETURNS boolean
AS
$$
    DECLARE _routine            regproc;
    DECLARE _routine_id         integer;
    DECLARE this                RECORD;
    DECLARE _sql                text;
    DECLARE _is_error           boolean=false;
    DECLARE _notice             text;
    DECLARE _office_code        text;
BEGIN
    IF(_value_date IS NULL) THEN
        RAISE EXCEPTION 'Invalid date.'
        USING ERRCODE='P3008';
    END IF;

    IF(NOT policy.is_elevated_user(_user_id)) THEN
        RAISE EXCEPTION 'Access is denied.'
        USING ERRCODE='P9001';
    END IF;

    IF(_value_date != transactions.get_value_date(_office_id)) THEN
        RAISE EXCEPTION 'Invalid value date.'
        USING ERRCODE='P3007';
    END IF;

    SELECT * FROM transactions.day_operation
    WHERE value_date=_value_date 
    AND office_id = _office_id INTO this;

    IF(this IS NULL) THEN
        RAISE EXCEPTION 'Invalid value date.'
        USING ERRCODE='P3007';
    ELSE    
        IF(this.completed OR this.completed_on IS NOT NULL) THEN
            RAISE WARNING 'EOD operation was already performed.';
            _is_error        := true;
        END IF;
    END IF;
    
    IF(NOT _is_error) THEN
        _office_code        := office.get_office_code_by_id(_office_id);
        _notice             := 'EOD started.'::text;
        RAISE INFO  '%', _notice;

        FOR this IN
        SELECT routine_id, routine_name 
        FROM transactions.routines 
        WHERE status 
        ORDER BY "order" ASC
        LOOP
            _routine_id             := this.routine_id;
            _routine                := this.routine_name;
            _sql                    := format('SELECT * FROM %1$s($1);', _routine);

            RAISE NOTICE '%', _sql;

            _notice             := 'Performing ' || _routine::text || '.';
            RAISE INFO '%', _notice;

            PERFORM pg_sleep(5);
            EXECUTE _sql USING _office_id;

            _notice             := 'Completed  ' || _routine::text || '.';
            RAISE INFO '%', _notice;
            
            PERFORM pg_sleep(5);            
        END LOOP;


        UPDATE transactions.day_operation SET 
            completed_on = NOW(), 
            completed_by = _user_id,
            completed = true
        WHERE value_date=_value_date
        AND office_id = _office_id;

        _notice             := 'EOD of ' || _office_code || ' for ' || _value_date::text || ' completed without errors.'::text;
        RAISE INFO '%', _notice;

        _notice             := 'OK'::text;
        RAISE INFO '%', _notice;

        RETURN true;
    END IF;

    RETURN false;    
END;
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS transactions.perform_eod_operation(_login_id bigint);

CREATE FUNCTION transactions.perform_eod_operation(_login_id bigint)
RETURNS boolean
AS
$$
    DECLARE _user_id    integer;
    DECLARE _office_id integer;
    DECLARE _value_date date;
BEGIN
    SELECT 
        user_id,
        office_id,
        transactions.get_value_date(office_id)
    INTO
        _user_id,
        _office_id,
        _value_date
    FROM audit.logins
    WHERE login_id=$1;

    RETURN transactions.perform_eod_operation(_user_id, _office_id, _value_date);
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.post_non_gl_transaction.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_non_gl_transaction
(
    _book_name                              national character varying(12),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _is_non_taxable_sales                   boolean,
    _salesperson_id                        integer,
    _shipper_id                             integer,
    _shipping_address_code                  national character varying(12),
    _store_id                               integer,
    _tran_ids                               bigint[],
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]

);


CREATE FUNCTION transactions.post_non_gl_transaction
(
    _book_name                              national character varying(12),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _is_non_taxable_sales                   boolean,
    _salesperson_id                        integer,
    _shipper_id                             integer,
    _shipping_address_code                  national character varying(12),
    _store_id                               integer,
    _tran_ids                               bigint[],
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]

)
RETURNS bigint
AS
$$
    DECLARE _party_id                       bigint;
    DECLARE _non_gl_stock_master_id         bigint;
    DECLARE _non_gl_stock_detail_id         bigint;
    DECLARE _shipping_address_id            bigint;
    DECLARE _shipping_charge                money_strict2;
    DECLARE _tran_type                      transaction_type;
    DECLARE this                            RECORD;
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;

    _party_id                               := core.get_party_id_by_party_code(_party_code);
    _shipping_address_id                    := core.get_shipping_address_id_by_shipping_address_code(_shipping_address_code, _party_id);

    DROP TABLE IF EXISTS temp_stock_details CASCADE;

    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        non_gl_stock_master_id          bigint, 
        tran_type                       transaction_type, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        integer_strict,
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           money_strict,
        cost_of_goods_sold              money_strict2 DEFAULT(0),
        discount                        money_strict2,
        shipping_charge                 money_strict2,
        tax_form                        text,
        sales_tax_id                    integer,
        tax                             money_strict2
    ) ON COMMIT DROP;


    DROP TABLE IF EXISTS temp_stock_tax_details;
    
    CREATE TEMPORARY TABLE temp_stock_tax_details
    (
        id                                      SERIAL,
        temp_stock_detail_id                    integer REFERENCES temp_stock_details(id),
        sales_tax_detail_code                   text,
        stock_detail_id                         bigint,
        sales_tax_detail_id                     integer,
        state_sales_tax_id                      integer,
        county_sales_tax_id                     integer,
        account_id                              integer,
        principal                               money_strict,
        rate                                    decimal_strict,
        tax                                     money_strict
    ) ON COMMIT DROP;

    INSERT INTO temp_stock_details(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);

    UPDATE temp_stock_details 
    SET
        tran_type                   = _tran_type,
        sales_tax_id                = core.get_sales_tax_id_by_sales_tax_code(tax_form),
        item_id                     = core.get_item_id_by_item_code(item_code),
        unit_id                     = core.get_unit_id_by_unit_name(unit_name),
        base_quantity               = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                = core.get_base_unit_id_by_unit_name(unit_name);

    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;

    SELECT SUM(COALESCE(shipping_charge, 0))                    INTO _shipping_charge FROM temp_stock_details;

    IF(_is_non_taxable_sales) THEN
        IF EXISTS(SELECT * FROM temp_stock_details WHERE sales_tax_id IS NOT NULL LIMIT 1) THEN
            RAISE EXCEPTION 'You cannot provide sales tax information for non taxable sales.'
            USING ERRCODE='P5110';
        END IF;
    END IF;


    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        INSERT INTO temp_stock_tax_details
        (
            temp_stock_detail_id,
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            principal, 
            rate, 
            tax
        )
        SELECT 
            this.id, 
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            taxable_amount, 
            rate, 
            tax
        FROM transactions.get_sales_tax('Sales', _store_id, _party_code, _shipping_address_code, _price_type_id, this.item_code, this.price, this.quantity, this.discount, this.shipping_charge, this.sales_tax_id);
    END LOOP;

    UPDATE temp_stock_details
    SET tax =
    (SELECT SUM(COALESCE(temp_stock_tax_details.tax, 0)) FROM temp_stock_tax_details
    WHERE temp_stock_tax_details.temp_stock_detail_id = temp_stock_details.id);

    _non_gl_stock_master_id          := nextval(pg_get_serial_sequence('transactions.non_gl_stock_master', 'non_gl_stock_master_id'));

    UPDATE temp_stock_details SET non_gl_stock_master_id = _non_gl_stock_master_id;
    
    INSERT INTO transactions.non_gl_stock_master(non_gl_stock_master_id, value_date, book, party_id, price_type_id, login_id, user_id, office_id, reference_number, statement_reference, non_taxable, salesperson_id, shipper_id, shipping_address_id, shipping_charge, store_id) 
    SELECT _non_gl_stock_master_id, _value_date, _book_name, _party_id, _price_type_id, _login_id, _user_id, _office_id, _reference_number, _statement_reference, _is_non_taxable_sales, _salesperson_id, _shipper_id, _shipping_address_id, _shipping_charge, _store_id;


    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        _non_gl_stock_detail_id        := nextval(pg_get_serial_sequence('transactions.non_gl_stock_details', 'non_gl_stock_detail_id'));

        INSERT INTO transactions.non_gl_stock_details(non_gl_stock_detail_id, non_gl_stock_master_id, value_date, item_id, quantity, unit_id, base_quantity, base_unit_id, price, discount, shipping_charge, sales_tax_id, tax)    
        SELECT _non_gl_stock_detail_id, non_gl_stock_master_id, _value_date, item_id, quantity, unit_id, base_quantity, base_unit_id, price, discount, shipping_charge, sales_tax_id, COALESCE(this.tax, 0) 
        FROM temp_stock_details
        WHERE id = this.id;


        INSERT INTO transactions.non_gl_stock_tax_details(non_gl_stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax)
        SELECT _non_gl_stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax
        FROM temp_stock_tax_details
        WHERE temp_stock_detail_id = this.id;
        
    END LOOP;

    IF(array_length(_tran_ids, 1) > 0 AND _tran_ids != ARRAY[NULL::bigint]) THEN
        INSERT INTO transactions.non_gl_stock_master_relations(order_non_gl_stock_master_id, quotation_non_gl_stock_master_id)
        SELECT _non_gl_stock_master_id, explode_array(_tran_ids);
    END IF;

    IF(array_length(_attachments, 1) > 0 AND _attachments != ARRAY[NULL::core.attachment_type]) THEN
        INSERT INTO core.attachments(user_id, resource, resource_key, resource_id, original_file_name, file_extension, file_path, comment)
        SELECT _user_id, 'transactions.non_gl_stock_master', 'non_gl_stock_master_id', _non_gl_stock_master_id, original_file_name, file_extension, file_path, comment 
        FROM explode_array(_attachments);
    END IF;

    
    RETURN _non_gl_stock_master_id;
END;
$$
LANGUAGE plpgsql;

-- SELECT * FROM transactions.post_non_gl_transaction('Sales.Order', 2, 2, 5, '1-1-2020', '1', 'asdf', 'JASMI-0002', 1, false, 1, 1, '',  1, null::bigint[],
-- ARRAY[
--            ROW(1, 'RMBP', 1, 'Piece',180000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--            ROW(1, '13MBA', 1, 'Dozen',130000, 300, 30, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--            ROW(1, '11MBA', 1, 'Piece',110000, 5000, 50, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type], 
-- ARRAY[NULL::core.attachment_type]);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.post_opening_inventory.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_opening_inventory
(
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _details                                transactions.opening_stock_type[]    
);

CREATE FUNCTION transactions.post_opening_inventory
(
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _details                                transactions.opening_stock_type[]    
)
RETURNS bigint
VOLATILE
AS
$$
    DECLARE _book_name                      text = 'Opening.Inventory';
    DECLARE _transaction_master_id          bigint;
    DECLARE _stock_master_id                bigint;
    DECLARE _tran_counter                   integer;
    DECLARE _transaction_code               text;
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;

    DROP TABLE IF EXISTS temp_stock_details;
    
    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        tran_type                       transaction_type,
        store_name                      text, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        integer_strict,
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           money_strict
    ) ON COMMIT DROP;

    INSERT INTO temp_stock_details(store_name, item_code, quantity, unit_name, price)
    SELECT store_name, item_code, quantity, unit_name, amount
    FROM explode_array(_details);

    UPDATE temp_stock_details 
    SET
        tran_type                       = 'Dr',
        store_id                        = office.get_store_id_by_store_name(store_name),
        item_id                         = core.get_item_id_by_item_code(item_code),
        unit_id                         = core.get_unit_id_by_unit_name(unit_name),
        base_quantity                   = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                    = core.get_base_unit_id_by_unit_name(unit_name);

    IF EXISTS
    (
        SELECT * FROM temp_stock_details
        WHERE store_id IS NULL
        OR item_id IS NULL
        OR unit_id IS NULL
    ) THEN
        RAISE EXCEPTION 'Access is denied. Invalid values supplied.'
        USING ERRCODE='P9011';
    END IF;

    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;

    
    _transaction_master_id  := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _stock_master_id        := nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));
    _tran_counter           := transactions.get_new_transaction_counter(_value_date);
    _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

    INSERT INTO transactions.transaction_master(transaction_master_id, transaction_counter, transaction_code, book, value_date, user_id, login_id, office_id, reference_number, statement_reference) 
    SELECT _transaction_master_id, _tran_counter, _transaction_code, _book_name, _value_date, _user_id, _login_id, _office_id, _reference_number, _statement_reference;

    INSERT INTO transactions.stock_master(value_date, stock_master_id, transaction_master_id)
    SELECT _value_date, _stock_master_id, _transaction_master_id;

    INSERT INTO transactions.stock_details(value_date, stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price)
    SELECT _value_date, _stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price
    FROM temp_stock_details;
    
    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);    
    RETURN _transaction_master_id;
END;
$$
LANGUAGE plpgsql;


-- SELECT * FROM transactions.post_opening_inventory
-- (
--     2,
--     2,
--     5,
--     transactions.get_value_date(2),
--     '3424',
--     'ASDF',
--     ARRAY[
--          ROW('Store 1', 'RMBP', 1, 'Box',180000)::transactions.opening_stock_type,
--          ROW('Store 1', '13MBA', 1, 'Dozen',130000)::transactions.opening_stock_type,
--          ROW('Store 1', '11MBA', 1, 'Piece',110000)::transactions.opening_stock_type]);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.post_purchase.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_purchase
(
    _book_name                              national character varying(12),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _cost_center_id                         integer,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _is_credit                              boolean,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _shipper_id                             integer,
    _store_id                               integer,
    _tran_ids                               bigint[],
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]
);


CREATE FUNCTION transactions.post_purchase
(
    _book_name                              national character varying(12),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _cost_center_id                         integer,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _is_credit                              boolean,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _shipper_id                             integer,
    _store_id                               integer,
    _tran_ids                               bigint[],
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]
)
RETURNS bigint
AS
$$
    DECLARE _party_id                       bigint;
    DECLARE _transaction_master_id          bigint;
    DECLARE _stock_master_id                bigint;
    DECLARE _stock_detail_id                bigint;
    DECLARE _shipping_address_id            integer;
    DECLARE _grand_total                    money_strict;
    DECLARE _discount_total                 money_strict2;
    DECLARE _tax_total                      money_strict2;
    DECLARE _payable                        money_strict2;
    DECLARE _default_currency_code          national character varying(12);
    DECLARE _is_periodic                    boolean = office.is_periodic_inventory(_office_id);
    DECLARE _tran_counter                   integer;
    DECLARE _transaction_code               text;
    DECLARE _shipping_charge                money_strict2;
    DECLARE _tax                            RECORD;
    DECLARE _cash_repository_id             integer;
    DECLARE _cash_account_id                bigint;
    DECLARE _is_cash                        boolean;
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;

    _party_id                               := core.get_party_id_by_party_code(_party_code);
    _default_currency_code                  := transactions.get_default_currency_code_by_office_id(_office_id);
    _cash_account_id                        := core.get_cash_account_id_by_store_id(_store_id);
    _cash_repository_id                     := core.get_cash_repository_id_by_store_id(_store_id);
    _is_cash                                := core.is_cash_account_id(_cash_account_id);

    IF(NOT _is_cash) THEN
        _cash_repository_id                 := NULL;
    END IF;

    DROP TABLE IF EXISTS temp_stock_details CASCADE;
    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        stock_master_id                 bigint, 
        tran_type                       transaction_type, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        integer_strict,
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           money_strict,
        cost_of_goods_sold              money_strict2,
        discount                        money_strict2,
        shipping_charge                 money_strict2,
        tax_form                        text,
        sales_tax_id                    integer,
        tax                             money_strict2,
        purchase_account_id             integer, 
        purchase_discount_account_id    integer, 
        inventory_account_id            integer
    ) ON COMMIT DROP;


    DROP TABLE IF EXISTS temp_stock_tax_details;
    CREATE TEMPORARY TABLE temp_stock_tax_details
    (
        id                                      SERIAL,
        temp_stock_detail_id                    integer REFERENCES temp_stock_details(id),
        sales_tax_detail_code                   text,
        stock_detail_id                         bigint,
        sales_tax_detail_id                     integer,
        state_sales_tax_id                      integer,
        county_sales_tax_id                     integer,
        account_id                              integer,
        principal                               money_strict,
        rate                                    decimal_strict,
        tax                                     money_strict
    ) ON COMMIT DROP;
    

    INSERT INTO temp_stock_details(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);

    UPDATE temp_stock_details 
    SET
        tran_type                       = 'Dr',
        sales_tax_id                    = core.get_sales_tax_id_by_sales_tax_code(tax_form),
        item_id                         = core.get_item_id_by_item_code(item_code),
        unit_id                         = core.get_unit_id_by_unit_name(unit_name),
        base_quantity                   = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                    = core.get_base_unit_id_by_unit_name(unit_name);

    UPDATE temp_stock_details
    SET
        purchase_account_id             = core.get_purchase_account_id(item_id),
        purchase_discount_account_id    = core.get_purchase_discount_account_id(item_id),
        inventory_account_id            = core.get_inventory_account_id(item_id);

    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;

    FOR _tax IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        INSERT INTO temp_stock_tax_details
        (
            temp_stock_detail_id,
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id,            
            principal, 
            rate, 
            tax
        )
        SELECT 
            _tax.id, 
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            taxable_amount, 
            rate, 
            tax
        FROM transactions.get_sales_tax('Sales', _store_id, _party_code, NULL, _price_type_id, _tax.item_code, _tax.price, _tax.quantity, _tax.discount, _tax.shipping_charge, _tax.sales_tax_id);
    END LOOP;

    UPDATE temp_stock_details
    SET tax =
    (SELECT SUM(COALESCE(temp_stock_tax_details.tax, 0)) FROM temp_stock_tax_details
    WHERE temp_stock_tax_details.temp_stock_detail_id = temp_stock_tax_details.id);

    SELECT SUM(COALESCE(tax,0))                                     INTO _tax_total FROM temp_stock_details;
    SELECT SUM(COALESCE(discount, 0))                               INTO _discount_total FROM temp_stock_details;
    SELECT SUM(COALESCE(price, 0) * COALESCE(quantity, 0))          INTO _grand_total FROM temp_stock_details;
    SELECT SUM(COALESCE(shipping_charge, 0))                        INTO _shipping_charge FROM temp_stock_details;

    _payable                                := _grand_total - COALESCE(_discount_total, 0) + COALESCE(_tax_total, 0) + COALESCE(_shipping_charge, 0);

    DROP TABLE IF EXISTS temp_transaction_details;
    CREATE TEMPORARY TABLE temp_transaction_details
    (
        transaction_master_id       BIGINT, 
        tran_type                   transaction_type, 
        account_id                  integer, 
        statement_reference         text, 
        cash_repository_id          integer, 
        currency_code               national character varying(12), 
        amount_in_currency          money_strict, 
        local_currency_code         national character varying(12), 
        er                          decimal_strict, 
        amount_in_local_currency    money_strict
    ) ON COMMIT DROP;


    IF(_is_periodic = true) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', purchase_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), 1, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
        FROM temp_stock_details
        GROUP BY purchase_account_id;
    ELSE
        --Perpetutal Inventory Accounting System
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', inventory_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), 1, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
        FROM temp_stock_details
        GROUP BY inventory_account_id;
    END IF;

    IF(_tax_total > 0) THEN
        FOR _tax IN 
        SELECT 
            format('P: %s x R: %s %% = %s (%s)', principal::text, rate::text, tax::text, sales_tax_detail_code) as statement_reference,
            account_id,
            tax
        FROM temp_stock_tax_details ORDER BY id
        LOOP    
            INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
            SELECT 'Dr', _tax.account_id, _tax.statement_reference || _statement_reference, _default_currency_code, _tax.tax, 1, _default_currency_code, _tax.tax;
        END LOOP;
    END IF;


    IF(_discount_total > 0) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', purchase_discount_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(discount, 0)), 1, _default_currency_code, SUM(COALESCE(discount, 0))
        FROM temp_stock_details
        GROUP BY purchase_discount_account_id;
    END IF;

    IF(_is_credit = true) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', core.get_account_id_by_party_id(_party_id), _statement_reference, _default_currency_code, _payable, 1, _default_currency_code, _payable;
    ELSE
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', _cash_account_id, _statement_reference, _cash_repository_id, _default_currency_code, _payable, 1, _default_currency_code, _payable;
    END IF;


    _transaction_master_id  := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _stock_master_id        := nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));
    _tran_counter           := transactions.get_new_transaction_counter(_value_date);
    _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

    UPDATE temp_transaction_details     SET transaction_master_id   = _transaction_master_id;
    UPDATE temp_stock_details           SET stock_master_id         = _stock_master_id;
    
    INSERT INTO transactions.transaction_master(transaction_master_id, transaction_counter, transaction_code, book, value_date, user_id, login_id, office_id, cost_center_id, reference_number, statement_reference) 
    SELECT _transaction_master_id, _tran_counter, _transaction_code, _book_name, _value_date, _user_id, _login_id, _office_id, _cost_center_id, _reference_number, _statement_reference;


    INSERT INTO transactions.transaction_details(value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency)
    SELECT _value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency
    FROM temp_transaction_details
    ORDER BY tran_type DESC;


    INSERT INTO transactions.stock_master(value_date, stock_master_id, transaction_master_id, party_id, price_type_id, is_credit, shipper_id, shipping_charge, store_id, cash_repository_id)
    SELECT _value_date, _stock_master_id, _transaction_master_id, _party_id, _price_type_id, _is_credit, _shipper_id, _shipping_charge, _store_id, _cash_repository_id;
            
    FOR _tax IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        _stock_detail_id        := nextval(pg_get_serial_sequence('transactions.stock_details', 'stock_detail_id'));

        INSERT INTO transactions.stock_details(stock_detail_id, value_date, stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price, cost_of_goods_sold, discount, sales_tax_id, tax)
        SELECT _stock_detail_id, _value_date, _tax.stock_master_id, _tax.tran_type, _tax.store_id, _tax.item_id, _tax.quantity, _tax.unit_id, _tax.base_quantity, _tax.base_unit_id, _tax.price, COALESCE(_tax.cost_of_goods_sold, 0), _tax.discount, _tax.sales_tax_id, COALESCE(_tax.tax, 0)
        FROM temp_stock_details
        WHERE id = _tax.id;


        INSERT INTO transactions.stock_tax_details(stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax)
        SELECT _stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax
        FROM temp_stock_tax_details
        WHERE temp_stock_detail_id = _tax.id;
        
    END LOOP;


    IF(array_length(_tran_ids, 1) > 0 AND _tran_ids != ARRAY[NULL::bigint]) THEN
        INSERT INTO transactions.stock_master_non_gl_relations(stock_master_id, non_gl_stock_master_id)
        SELECT _stock_master_id, explode_array(_tran_ids);
    END IF;

    IF(array_length(_attachments, 1) > 0 AND _attachments != ARRAY[NULL::core.attachment_type]) THEN
        INSERT INTO core.attachments(user_id, resource, resource_key, resource_id, original_file_name, file_extension, file_path, comment)
        SELECT _user_id, 'transactions.transaction_master', 'transaction_master_id', _transaction_master_id, original_file_name, file_extension, file_path, comment 
        FROM explode_array(_attachments);
    END IF;
    
    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);
    RETURN _transaction_master_id;
END
$$
LANGUAGE plpgsql;


-- 
-- SELECT * FROM transactions.post_purchase('Purchase.Direct', 2, 2, 56, '2/2/2015', 1, '', '', false, 'JASMI-0002', NULL, NULL, 1, ARRAY[]::bigint[], 
--       ARRAY[
--                  ROW(1, 'RMBP', 1, 'Piece',180000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--                  ROW(1, '13MBA', 1, 'Dozen',130000, 300, 30, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--                  ROW(1, '11MBA', 1, 'Piece',110000, 5000, 50, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type], 
--       ARRAY[NULL::core.attachment_type]);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.post_purchase_return.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_purchase_return
(
    _transaction_master_id          bigint,
    _office_id                      integer,
    _user_id                        integer,
    _login_id                       bigint,
    _value_date                     date,
    _store_id                       integer,
    _party_code                     national character varying(12),
    _price_type_id                  integer,
    _reference_number               national character varying(24),
    _statement_reference            text,
    _details                        transactions.stock_detail_type[],
    _attachments                    core.attachment_type[]
);

CREATE FUNCTION transactions.post_purchase_return
(
    _transaction_master_id          bigint,
    _office_id                      integer,
    _user_id                        integer,
    _login_id                       bigint,
    _value_date                     date,
    _store_id                       integer,
    _party_code                     national character varying(12),
    _price_type_id                  integer,
    _reference_number               national character varying(24),
    _statement_reference            text,
    _details                        transactions.stock_detail_type[],
    _attachments                    core.attachment_type[]
)
RETURNS bigint
AS
$$
    DECLARE _party_id                       bigint;
    DECLARE _cost_center_id                 bigint;
    DECLARE _tran_master_id                 bigint;
    DECLARE _stock_detail_id                bigint;
    DECLARE _tran_counter                   integer;
    DECLARE _tran_code                      text;
    DECLARE _transaction_code               text;
    DECLARE _stock_master_id                bigint;
    DECLARE _grand_total                    money_strict;
    DECLARE _discount_total                 money_strict2;
    DECLARE _tax_total                      money_strict2;
    DECLARE _is_credit                      boolean;
    DECLARE _credit_account_id              bigint;
    DECLARE _default_currency_code          national character varying(12);
    DECLARE _sm_id                          bigint;
    DECLARE this                            RECORD;
    DECLARE _shipping_address_code          national character varying(12);
    DECLARE _is_periodic                    boolean = office.is_periodic_inventory(_office_id);
    DECLARE _book_name                      text='Purchase.Return';
    DECLARE _receivable                     money_strict;
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;
    
    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        stock_master_id                 bigint, 
        tran_type                       transaction_type, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        integer_strict,
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           money_strict,
        discount                        money_strict2,
        shipping_charge                 money_strict2,
        tax_form                        text,
        sales_tax_id                    integer,
        tax                             money_strict2,
        purchase_account_id             integer, 
        purchase_discount_account_id    integer, 
        inventory_account_id            integer
    ) ON COMMIT DROP;

    CREATE TEMPORARY TABLE temp_stock_tax_details
    (
        id                                      SERIAL,
        temp_stock_detail_id                    integer REFERENCES temp_stock_details(id),
        sales_tax_detail_code                   text,
        stock_detail_id                         bigint,
        sales_tax_detail_id                     integer,
        state_sales_tax_id                      integer,
        county_sales_tax_id                     integer,
        account_id                              integer,
        principal                               money_strict,
        rate                                    decimal_strict,
        tax                                     money_strict
    ) ON COMMIT DROP;

    CREATE TEMPORARY TABLE temp_transaction_details
    (
        transaction_master_id       BIGINT, 
        tran_type                   transaction_type, 
        account_id                  integer, 
        statement_reference         text, 
        cash_repository_id          integer, 
        currency_code               national character varying(12), 
        amount_in_currency          money_strict, 
        local_currency_code         national character varying(12), 
        er                          decimal_strict, 
        amount_in_local_currency    money_strict
    ) ON COMMIT DROP;

    _party_id                       := core.get_party_id_by_party_code(_party_code);
    _default_currency_code          := transactions.get_default_currency_code_by_office_id(_office_id);
    
    SELECT 
        cost_center_id   
    INTO 
        _cost_center_id    
    FROM transactions.transaction_master 
    WHERE transactions.transaction_master.transaction_master_id = _transaction_master_id;

    SELECT 
        is_credit,
        core.get_shipping_address_code_by_shipping_address_id(shipping_address_id),
        stock_master_id
    INTO 
        _is_credit,
        _shipping_address_code,
        _sm_id
    FROM transactions.stock_master 
    WHERE transaction_master_id = _transaction_master_id;

    INSERT INTO temp_stock_details(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);

    UPDATE temp_stock_details 
    SET
        tran_type                   = 'Cr',
        sales_tax_id                = core.get_sales_tax_id_by_sales_tax_code(tax_form),
        item_id                     = core.get_item_id_by_item_code(item_code),
        unit_id                     = core.get_unit_id_by_unit_name(unit_name),
        base_quantity               = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                = core.get_base_unit_id_by_unit_name(unit_name);

    UPDATE temp_stock_details
    SET
        purchase_account_id             = core.get_purchase_account_id(item_id),
        purchase_discount_account_id    = core.get_purchase_discount_account_id(item_id),
        inventory_account_id            = core.get_inventory_account_id(item_id);

    IF EXISTS
    (

        SELECT * 
        FROM transactions.stock_details
        INNER JOIN temp_stock_details
        ON temp_stock_details.item_id = transactions.stock_details.item_id
        WHERE transactions.stock_details.stock_master_id = _sm_id
        AND COALESCE(temp_stock_details.sales_tax_id, 0) != COALESCE(transactions.stock_details.sales_tax_id, 0)
        LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Tax form mismatch.'
        USING ERRCODE='P3202';
    END IF;

    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;

    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        INSERT INTO temp_stock_tax_details
        (
            temp_stock_detail_id,
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            principal, 
            rate, 
            tax
        )
        SELECT 
            this.id, 
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            taxable_amount, 
            rate, 
            tax
        FROM transactions.get_sales_tax('Purchase', _store_id, _party_code, _shipping_address_code, _price_type_id, this.item_code, this.price, this.quantity, this.discount, this.shipping_charge, this.sales_tax_id);
    END LOOP;
    
    UPDATE temp_stock_details
    SET tax =
    (SELECT SUM(COALESCE(temp_stock_tax_details.tax, 0)) FROM temp_stock_tax_details
    WHERE temp_stock_tax_details.temp_stock_detail_id = temp_stock_details.id);

    _credit_account_id = core.get_account_id_by_party_code(_party_code); 

    _tran_master_id             := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _stock_master_id            := nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));
    _tran_counter               := transactions.get_new_transaction_counter(_value_date);
    _tran_code                  := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);
        
    SELECT SUM(COALESCE(tax, 0))                                INTO _tax_total FROM temp_stock_tax_details;
    SELECT SUM(COALESCE(discount, 0))                           INTO _discount_total FROM temp_stock_details;
    SELECT SUM(COALESCE(price, 0) * COALESCE(quantity, 0))      INTO _grand_total FROM temp_stock_details;

    _receivable := _grand_total - COALESCE(_discount_total, 0) + COALESCE(_tax_total, 0);


    IF(_is_periodic = true) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', purchase_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), 1, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
        FROM temp_stock_details
        GROUP BY purchase_account_id;
    ELSE
        --Perpetutal Inventory Accounting System
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', inventory_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), 1, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
        FROM temp_stock_details
        GROUP BY inventory_account_id;
    END IF;


    IF(_tax_total IS NOT NULL AND _tax_total > 0) THEN
        FOR this IN 
        SELECT 
            format('P: %s x R: %s %% = %s (%s)', principal::text, rate::text, tax::text, sales_tax_detail_code) as statement_reference,
            account_id,
            tax
        FROM temp_stock_tax_details ORDER BY id
        LOOP    
            INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
            SELECT 'Cr', this.account_id, this.statement_reference || _statement_reference, _default_currency_code, this.tax, 1, _default_currency_code, this.tax;
        END LOOP;
    END IF;

    IF(_discount_total IS NOT NULL AND _discount_total > 0) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', purchase_discount_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(discount, 0)), 1, _default_currency_code, SUM(COALESCE(discount, 0))
        FROM temp_stock_details
        GROUP BY purchase_discount_account_id;
    END IF;

    INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
    SELECT 'Dr', core.get_account_id_by_party_id(_party_id), _statement_reference, _default_currency_code, _receivable, 1, _default_currency_code, _receivable;


    _transaction_master_id  := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _stock_master_id        := nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));
    _tran_counter           := transactions.get_new_transaction_counter(_value_date);
    _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

    UPDATE temp_transaction_details     SET transaction_master_id   = _transaction_master_id;
    UPDATE temp_stock_details           SET stock_master_id         = _stock_master_id;

    INSERT INTO transactions.transaction_master(transaction_master_id, transaction_counter, transaction_code, book, value_date, user_id, login_id, office_id, cost_center_id, reference_number, statement_reference) 
    SELECT _transaction_master_id, _tran_counter, _transaction_code, _book_name, _value_date, _user_id, _login_id, _office_id, _cost_center_id, _reference_number, _statement_reference;


    INSERT INTO transactions.transaction_details(value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency)
    SELECT _value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency
    FROM temp_transaction_details
    ORDER BY tran_type DESC;


    INSERT INTO transactions.stock_master(value_date, stock_master_id, transaction_master_id, party_id, price_type_id, is_credit, shipper_id, shipping_charge, store_id, cash_repository_id)
    SELECT _value_date, _stock_master_id, _transaction_master_id, _party_id, _price_type_id, _is_credit, NULL, 0, _store_id, NULL;
            
    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        _stock_detail_id        := nextval(pg_get_serial_sequence('transactions.stock_details', 'stock_detail_id'));

        INSERT INTO transactions.stock_details(stock_detail_id, value_date, stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price, discount, sales_tax_id, tax)
        SELECT _stock_detail_id, _value_date, this.stock_master_id, this.tran_type, this.store_id, this.item_id, this.quantity, this.unit_id, this.base_quantity, this.base_unit_id, this.price, this.discount, this.sales_tax_id, COALESCE(this.tax, 0)
        FROM temp_stock_details
        WHERE id = this.id;


        INSERT INTO transactions.stock_tax_details(stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax)
        SELECT _stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax
        FROM temp_stock_tax_details
        WHERE temp_stock_detail_id = this.id;
        
    END LOOP;

    IF(array_length(_attachments, 1) > 0 AND _attachments != ARRAY[NULL::core.attachment_type]) THEN
        INSERT INTO core.attachments(user_id, resource, resource_key, resource_id, original_file_name, file_extension, file_path, comment)
        SELECT _user_id, 'transactions.transaction_master', 'transaction_master_id', _transaction_master_id, original_file_name, file_extension, file_path, comment 
        FROM explode_array(_attachments);
    END IF;
    
    RETURN _transaction_master_id;
    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);
    RETURN _tran_master_id;
END
$$
LANGUAGE plpgsql;




-- CREATE TEMPORARY TABLE temp_purchase_return
-- ON COMMIT DROP
-- AS
-- 
-- SELECT * FROM transactions.post_purchase_return(5, 2, 2, 1, '1-1-2000', 1, 'MAJON-0002', 1, '1234-AD', 'Test', 
-- ARRAY[
--  ROW(1, 'RMBP', 1, 'Piece', 180000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--  ROW(1, '13MBA', 1, 'Piece', 110000, 5000, 50, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type
-- ],
-- ARRAY[
-- NULL::core.attachment_type
-- ]);
-- 
-- SELECT  tran_type, core.get_account_name_by_account_id(account_id), amount_in_local_currency 
-- FROM transactions.transaction_details
-- WHERE transaction_master_id  = (SELECT * FROM temp_purchase_return);


/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.post_purhcase_reorder.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_purhcase_reorder
(
    _value_date                             date,
    _login_id                               bigint,
    _user_id                                integer,
    _office_id                              integer,
    _details                                transactions.purchase_reorder_type[]
);

CREATE FUNCTION transactions.post_purhcase_reorder
(
    _value_date                             date,
    _login_id                               bigint,
    _user_id                                integer,
    _office_id                              integer,
    _details                                transactions.purchase_reorder_type[]
)
RETURNS bool
AS
$$
    DECLARE this                                RECORD;
    DECLARE detail                              transactions.stock_detail_type[];
BEGIN
        
        CREATE TEMPORARY TABLE _temp_transaction(supplier_code national character varying(12))  ON COMMIT DROP;

        INSERT INTO _temp_transaction(supplier_code)
        SELECT DISTINCT supplier_code FROM explode_array(_details);

        FOR this IN SELECT supplier_code FROM _temp_transaction
        LOOP
            detail := 
                    (
                        SELECT 
                            array_agg
                            (
                                (
                                    NULL,--store_id
                                    core.get_item_code_by_item_id(details.item_id),
                                    details.order_quantity,
                                    core.get_unit_name_by_unit_id(details.unit_id),
                                    details.price,
                                    0, --discount
                                    0, --shipping_charge
                                    details.tax_code,
                                    NULL --tax (will be automatically caculated)
                               )::transactions.stock_detail_type
                           )
                        FROM explode_array(_details) as details
                        WHERE details.supplier_code = this.supplier_code
                    )::transactions.stock_detail_type[];

            
            PERFORM transactions.post_non_gl_transaction(
                'Purchase.Order', 
                _office_id,
                _user_id,
                _login_id,
                _value_date,
                '',
                'Automatically generated order.',
                this.supplier_code,
                NULL,
                false,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                detail,
                NULL

            );

        END LOOP;

        RETURN true;
END
$$
LANGUAGE plpgsql;


-- SELECT * FROM transactions.post_purhcase_reorder('1-1-2000', 1, 2, 2,
-- ARRAY[
-- ROW(1, 'ETBRO-0002', 1, 40000, 'MoF-NP-KTM-VAT', 10)::transactions.purchase_reorder_type,
-- ROW(1, 'ETBRO-0002', 1, 40000, '', 10)::transactions.purchase_reorder_type
-- ]);
-- 



/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.post_receipt_function.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_receipt_function
(
    _user_id                                integer, 
    _office_id                              integer, 
    _login_id                               bigint,
    _party_code                             national character varying(12), 
    _currency_code                          national character varying(12), 
    _amount                                 money_strict, 
    _exchange_rate_debit                    decimal_strict, 
    _exchange_rate_credit                   decimal_strict,
    _reference_number                       national character varying(24), 
    _statement_reference                    national character varying(128), 
    _cost_center_id                         integer,
    _cash_repository_id                     integer,
    _posted_date                            date,
    _bank_account_id                        integer,
    _bank_instrument_code                   national character varying(128),
    _bank_tran_code                         national character varying(128)
);

CREATE FUNCTION transactions.post_receipt_function
(
    _user_id                                integer, 
    _office_id                              integer, 
    _login_id                               bigint,
    _party_code                             national character varying(12), 
    _currency_code                          national character varying(12), 
    _amount                                 money_strict, 
    _exchange_rate_debit                    decimal_strict, 
    _exchange_rate_credit                   decimal_strict,
    _reference_number                       national character varying(24), 
    _statement_reference                    national character varying(128), 
    _cost_center_id                         integer,
    _cash_repository_id                     integer,
    _posted_date                            date,
    _bank_account_id                        integer,
    _bank_instrument_code                   national character varying(128),
    _bank_tran_code                         national character varying(128)
)
RETURNS bigint
AS
$$
    DECLARE _value_date                     date;
    DECLARE _book                           text;
    DECLARE _transaction_master_id          bigint;
    DECLARE _base_currency_code             national character varying(12);
    DECLARE _local_currency_code            national character varying(12);
    DECLARE _party_id                       bigint;
    DECLARE _party_account_id               bigint;
    DECLARE _debit                          money_strict2;
    DECLARE _credit                         money_strict2;
    DECLARE _lc_debit                       money_strict2;
    DECLARE _lc_credit                      money_strict2;
    DECLARE _is_cash                        boolean;
    DECLARE _cash_account_id                bigint;
BEGIN
    _value_date                             := transactions.get_value_date(_office_id);

    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book, _value_date) = false) THEN
        RETURN 0;
    END IF;

    IF(_cash_repository_id > 0) THEN
        IF(_posted_Date IS NOT NULL OR _bank_account_id IS NOT NULL OR COALESCE(_bank_instrument_code, '') != '' OR COALESCE(_bank_tran_code, '') != '') THEN
            RAISE EXCEPTION 'Invalid bank transaction information provided.'
            USING ERRCODE='P5111';
        END IF;
        _is_cash                            := true;
    END IF;

    _book                                   := 'Sales.Receipt';
    
    _party_id                               := core.get_party_id_by_party_code(_party_code);
    _party_account_id                       := core.get_account_id_by_party_id(_party_id);
    _cash_account_id                        := core.get_cash_account_id();
    
    _local_currency_code                    := core.get_currency_code_by_office_id(_office_id);
    _base_currency_code                     := core.get_currency_code_by_party_id(_party_id);

    _debit                                  := _amount;
    _lc_debit                               := _amount * _exchange_rate_debit;

    _credit                                 := _amount * (_exchange_rate_debit/ _exchange_rate_credit);
    _lc_credit                              := _amount * _exchange_rate_debit;
    

    INSERT INTO transactions.transaction_master
    (
        transaction_master_id, 
        transaction_counter, 
        transaction_code, 
        book, 
        value_date, 
        user_id, 
        login_id, 
        office_id, 
        cost_center_id, 
        reference_number, 
        statement_reference
    )
    SELECT 
        nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id')), 
        transactions.get_new_transaction_counter(_value_date), 
        transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id),
        _book,
        _value_date,
        _user_id,
        _login_id,
        _office_id,
        _cost_center_id,
        _reference_number,
        _statement_reference;


    _transaction_master_id := currval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));

    --Debit
    IF(_is_cash) THEN
            INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency, audit_user_id)
            SELECT _transaction_master_id, _value_date, 'Dr', _cash_account_id, _statement_reference, _cash_repository_id, _currency_code, _debit, _local_currency_code, _exchange_rate_debit, _lc_debit, _user_id;
    ELSE
            INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency, audit_user_id)
            SELECT _transaction_master_id, _value_date, 'Dr', _bank_account_id, _statement_reference, NULL, _currency_code, _debit, _local_currency_code, _exchange_rate_debit, _lc_debit, _user_id;        
    END IF;

    --Credit
    INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency, audit_user_id)
    SELECT _transaction_master_id, _value_date, 'Cr', _party_account_id, _statement_reference, NULL, _base_currency_code, _credit, _local_currency_code, _exchange_rate_credit, _lc_credit, _user_id;        
    
    
    INSERT INTO transactions.customer_receipts(transaction_master_id, party_id, currency_code, amount, er_debit, er_credit, cash_repository_id, posted_date, bank_account_id, bank_instrument_code, bank_tran_code)
    SELECT _transaction_master_id, _party_id, _currency_code, _amount,  _exchange_rate_debit, _exchange_rate_credit, _cash_repository_id, _posted_date, _bank_account_id, _bank_instrument_code, _bank_tran_code;

    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);
    ------------TODO-----------------
    RETURN _transaction_master_id;
END
$$
LANGUAGE plpgsql;



/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.post_sales.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_sales
(
    _book_name                              national character varying(12),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _cost_center_id                         integer,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _is_credit                              boolean,
    _payment_term_id                        integer,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _salesperson_id                         integer,
    _shipper_id                             integer,
    _shipping_address_code                  national character varying(12),
    _store_id                               integer,
    _is_non_taxable_sales                   boolean,
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]
);

CREATE FUNCTION transactions.post_sales
(
    _book_name                              national character varying(12),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _cost_center_id                         integer,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _is_credit                              boolean,
    _payment_term_id                        integer,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _salesperson_id                         integer,
    _shipper_id                             integer,
    _shipping_address_code                  national character varying(12),
    _store_id                               integer,
    _is_non_taxable_sales                   boolean,
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]
)
RETURNS bigint
AS
$$
    DECLARE _party_id                       bigint;
    DECLARE _transaction_master_id          bigint;
    DECLARE _stock_master_id                bigint;
    DECLARE _stock_detail_id                bigint;
    DECLARE _shipping_address_id            integer;
    DECLARE _grand_total                    money_strict;
    DECLARE _discount_total                 money_strict2;
    DECLARE _tax_total                      money_strict2;
    DECLARE _receivable                     money_strict2;
    DECLARE _default_currency_code          national character varying(12);
    DECLARE _is_periodic                    boolean = office.is_periodic_inventory(_office_id);
    DECLARE _cost_of_goods                  money_strict;
    DECLARE _tran_counter                   integer;
    DECLARE _transaction_code               text;
    DECLARE _shipping_charge                money_strict2;
    DECLARE this                            RECORD;
    DECLARE _cash_repository_id             integer;
    DECLARE _cash_account_id                bigint;
    DECLARE _is_cash                        boolean;
BEGIN        
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;

    _party_id                               := core.get_party_id_by_party_code(_party_code);
    _default_currency_code                  := transactions.get_default_currency_code_by_office_id(_office_id);
    _cash_account_id                        := core.get_cash_account_id_by_store_id(_store_id);
    _cash_repository_id                     := core.get_cash_repository_id_by_store_id(_store_id);
    _is_cash                                := core.is_cash_account_id(_cash_account_id);

    IF(NOT _is_cash) THEN
        _cash_repository_id                 := NULL;
    END IF;

    DROP TABLE IF EXISTS temp_stock_details CASCADE;
    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        stock_master_id                 bigint, 
        tran_type                       transaction_type, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        integer_strict,
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           money_strict,
        cost_of_goods_sold              money_strict2 DEFAULT(0),
        discount                        money_strict2,
        shipping_charge                 money_strict2,
        tax_form                        text,
        sales_tax_id                    integer,
        tax                             money_strict2,
        sales_account_id                integer,
        sales_discount_account_id       integer,
        inventory_account_id            integer,
        cost_of_goods_sold_account_id   integer
    ) ON COMMIT DROP;


    DROP TABLE IF EXISTS temp_stock_tax_details;
    CREATE TEMPORARY TABLE temp_stock_tax_details
    (
        id                                      SERIAL,
        temp_stock_detail_id                    integer REFERENCES temp_stock_details(id),
        sales_tax_detail_code                   text,
        stock_detail_id                         bigint,
        sales_tax_detail_id                     integer,
        state_sales_tax_id                      integer,
        county_sales_tax_id                     integer,
        account_id                              integer,
        principal                               money_strict,
        rate                                    decimal_strict,
        tax                                     money_strict
    ) ON COMMIT DROP;
    


    INSERT INTO temp_stock_details(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);


    UPDATE temp_stock_details 
    SET
        tran_type                       = 'Cr',
        sales_tax_id                    = core.get_sales_tax_id_by_sales_tax_code(tax_form),
        item_id                         = core.get_item_id_by_item_code(item_code),
        unit_id                         = core.get_unit_id_by_unit_name(unit_name),
        base_quantity                   = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                    = core.get_base_unit_id_by_unit_name(unit_name);

    UPDATE temp_stock_details
    SET
        sales_account_id                = core.get_sales_account_id(item_id),
        sales_discount_account_id       = core.get_sales_discount_account_id(item_id),
        inventory_account_id            = core.get_inventory_account_id(item_id),
        cost_of_goods_sold_account_id   = core.get_cost_of_goods_sold_account_id(item_id);
            
    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;

    IF(_is_non_taxable_sales) THEN
        IF EXISTS(SELECT * FROM temp_stock_details WHERE sales_tax_id IS NOT NULL LIMIT 1) THEN
            RAISE EXCEPTION 'You cannot provide sales tax information for non taxable sales.'
            USING ERRCODE='P5110';
        END IF;
    END IF;

    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        INSERT INTO temp_stock_tax_details
        (
            temp_stock_detail_id,
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            principal, 
            rate, 
            tax
        )
        SELECT 
            this.id, 
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            taxable_amount, 
            rate, 
            tax
        FROM transactions.get_sales_tax('Sales', _store_id, _party_code, _shipping_address_code, _price_type_id, this.item_code, this.price, this.quantity, this.discount, this.shipping_charge, this.sales_tax_id);
    END LOOP;

    UPDATE temp_stock_details
    SET tax =
    (SELECT SUM(COALESCE(temp_stock_tax_details.tax, 0)) FROM temp_stock_tax_details
    WHERE temp_stock_tax_details.temp_stock_detail_id = temp_stock_details.id);


    SELECT SUM(COALESCE(tax, 0))                                INTO _tax_total FROM temp_stock_tax_details;
    SELECT SUM(COALESCE(discount, 0))                           INTO _discount_total FROM temp_stock_details;
    SELECT SUM(COALESCE(price, 0) * COALESCE(quantity, 0))      INTO _grand_total FROM temp_stock_details;
    SELECT SUM(COALESCE(shipping_charge, 0))                    INTO _shipping_charge FROM temp_stock_details;
    
     _receivable                    := _grand_total - COALESCE(_discount_total, 0) + COALESCE(_tax_total, 0) + COALESCE(_shipping_charge, 0);
    
    DROP TABLE IF EXISTS temp_transaction_details;
    CREATE TEMPORARY TABLE temp_transaction_details
    (
        transaction_master_id       BIGINT, 
        tran_type                   transaction_type, 
        account_id                  integer, 
        statement_reference         text, 
        cash_repository_id          integer, 
        currency_code               national character varying(12), 
        amount_in_currency          money_strict, 
        local_currency_code         national character varying(12), 
        er                          decimal_strict, 
        amount_in_local_currency    money_strict
    ) ON COMMIT DROP;


    INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
    SELECT 'Cr', sales_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), 1, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
    FROM temp_stock_details
    GROUP BY sales_account_id;

    IF(_is_periodic = false) THEN
        --Perpetutal Inventory Accounting System

        UPDATE temp_stock_details SET cost_of_goods_sold = transactions.get_cost_of_goods_sold(item_id, unit_id, store_id, quantity);
        
        SELECT SUM(cost_of_goods_sold) INTO _cost_of_goods
        FROM temp_stock_details;

        IF(_cost_of_goods > 0) THEN
            INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
            SELECT 'Dr', cost_of_goods_sold_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0)), 1, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0))
            FROM temp_stock_details
            GROUP BY cost_of_goods_sold_account_id;

            INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
            SELECT 'Cr', inventory_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0)), 1, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0))
            FROM temp_stock_details
            GROUP BY inventory_account_id;
        END IF;
    END IF;

    IF(_tax_total > 0) THEN
        FOR this IN 
        SELECT 
            format('P: %s x R: %s %% = %s (%s)/', SUM(principal)::text, rate::text, SUM(tax)::text, sales_tax_detail_code) as statement_reference,
            account_id,
            SUM(tax) AS tax 
        FROM temp_stock_tax_details
        GROUP BY account_id, rate, sales_tax_detail_code
        LOOP
            INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
            SELECT 'Cr', this.account_id, this.statement_reference || _statement_reference, _default_currency_code, this.tax, 1, _default_currency_code, this.tax;
        END LOOP;    
    END IF;

    IF(COALESCE(_shipping_charge, 0) > 0) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', core.get_account_id_by_shipper_id(_shipper_id), _statement_reference, _default_currency_code, _shipping_charge, 1, _default_currency_code, _shipping_charge;                
    END IF;


    IF(_discount_total > 0) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', sales_discount_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(discount, 0)), 1, _default_currency_code, SUM(COALESCE(discount, 0))
        FROM temp_stock_details
        GROUP BY sales_discount_account_id;
    END IF;

    IF(_is_credit = true) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', core.get_account_id_by_party_id(_party_id), _statement_reference, _default_currency_code, _receivable, 1, _default_currency_code, _receivable;
    ELSE
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', _cash_account_id, _statement_reference, _cash_repository_id, _default_currency_code, _receivable, 1, _default_currency_code, _receivable;
    END IF;

    _transaction_master_id  := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _stock_master_id        := nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));    
    _tran_counter           := transactions.get_new_transaction_counter(_value_date);
    _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);
    _shipping_address_id    := core.get_shipping_address_id_by_shipping_address_code(_shipping_address_code, _party_id);

    UPDATE temp_transaction_details     SET transaction_master_id   = _transaction_master_id;
    UPDATE temp_stock_details           SET stock_master_id         = _stock_master_id;
    
    INSERT INTO transactions.transaction_master(transaction_master_id, transaction_counter, transaction_code, book, value_date, user_id, login_id, office_id, cost_center_id, reference_number, statement_reference) 
    SELECT _transaction_master_id, _tran_counter, _transaction_code, _book_name, _value_date, _user_id, _login_id, _office_id, _cost_center_id, _reference_number, _statement_reference;


    INSERT INTO transactions.transaction_details(value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency)
    SELECT _value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency
    FROM temp_transaction_details
    ORDER BY tran_type DESC;


    INSERT INTO transactions.stock_master(value_date, stock_master_id, transaction_master_id, party_id, salesperson_id, price_type_id, is_credit, payment_term_id, shipper_id, shipping_address_id, shipping_charge, store_id, cash_repository_id, non_taxable)
    SELECT _value_date, _stock_master_id, _transaction_master_id, _party_id, _salesperson_id, _price_type_id, _is_credit, _payment_term_id, _shipper_id, _shipping_address_id, _shipping_charge, _store_id, _cash_repository_id, _is_non_taxable_sales;
            

    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        _stock_detail_id        := nextval(pg_get_serial_sequence('transactions.stock_details', 'stock_detail_id'));

        INSERT INTO transactions.stock_details(stock_detail_id, value_date, stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price, cost_of_goods_sold, discount, shipping_charge, sales_tax_id, tax)
        SELECT _stock_detail_id, _value_date, this.stock_master_id, this.tran_type, this.store_id, this.item_id, this.quantity, this.unit_id, this.base_quantity, this.base_unit_id, this.price, COALESCE(this.cost_of_goods_sold, 0), this.discount, this.shipping_charge, this.sales_tax_id, COALESCE(this.tax, 0) 
        FROM temp_stock_details
        WHERE id = this.id;


        INSERT INTO transactions.stock_tax_details(stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax)
        SELECT _stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax
        FROM temp_stock_tax_details
        WHERE temp_stock_detail_id = this.id;
        
    END LOOP;



    IF(array_length(_attachments, 1) > 0 AND _attachments != ARRAY[NULL::core.attachment_type]) THEN
        INSERT INTO core.attachments(user_id, resource, resource_key, resource_id, original_file_name, file_extension, file_path, comment)
        SELECT _user_id, 'transactions.transaction_master', 'transaction_master_id', _transaction_master_id, original_file_name, file_extension, file_path, comment 
        FROM explode_array(_attachments);
    END IF;
    
    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);
    RETURN _transaction_master_id;
END
$$
LANGUAGE plpgsql;



--       SELECT * FROM transactions.post_sales('Sales.Direct', 2, 2, 5, '1-1-2020', 1, 'asdf', 'Test', false, NULL, 'JASMI-0002', 1, 1, 1, NULL, 1, false,
--       ARRAY[
--                  ROW(1, 'RMBP', 1, 'Piece',180000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--                  ROW(1, '13MBA', 1, 'Dozen',130000, 300, 30, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--                  ROW(1, '11MBA', 1, 'Piece',110000, 5000, 50, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type], 
--       ARRAY[NULL::core.attachment_type]);



/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.post_sales_return.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_sales_return
(
    _transaction_master_id          bigint,
    _office_id                      integer,
    _user_id                        integer,
    _login_id                       bigint,
    _value_date                     date,
    _store_id                       integer,
    _party_code                     national character varying(12),
    _price_type_id                  integer,
    _reference_number               national character varying(24),
    _statement_reference            text,
    _details                        transactions.stock_detail_type[],
    _attachments                    core.attachment_type[]
);

CREATE FUNCTION transactions.post_sales_return
(
    _transaction_master_id          bigint,
    _office_id                      integer,
    _user_id                        integer,
    _login_id                       bigint,
    _value_date                     date,
    _store_id                       integer,
    _party_code                     national character varying(12),
    _price_type_id                  integer,
    _reference_number               national character varying(24),
    _statement_reference            text,
    _details                        transactions.stock_detail_type[],
    _attachments                    core.attachment_type[]
)
RETURNS bigint
AS
$$
    DECLARE _party_id               bigint;
    DECLARE _cost_center_id         bigint;
    DECLARE _tran_master_id         bigint;
    DECLARE _tran_counter           integer;
    DECLARE _tran_code              text;
    DECLARE _stock_master_id        bigint;
    DECLARE _grand_total            money_strict;
    DECLARE _discount_total         money_strict2;
    DECLARE _tax_total              money_strict2;
    DECLARE _is_credit              boolean;
    DECLARE _default_currency_code  national character varying(12);
    DECLARE _cost_of_goods_sold     money_strict2;
    DECLARE _sm_id                  bigint;
    DECLARE _is_non_taxable_sales   boolean;
    DECLARE this                    RECORD;
    DECLARE _shipping_address_code  national character varying(12);
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, 'Sales.Return', _value_date) = false) THEN
        RETURN 0;
    END IF;
    
    _party_id                       := core.get_party_id_by_party_code(_party_code);
    _default_currency_code          := transactions.get_default_currency_code_by_office_id(_office_id);
    
    SELECT cost_center_id   INTO _cost_center_id    FROM transactions.transaction_master WHERE transactions.transaction_master.transaction_master_id = _transaction_master_id;

    SELECT 
        is_credit,
        non_taxable,
        core.get_shipping_address_code_by_shipping_address_id(shipping_address_id),
        stock_master_id
    INTO 
        _is_credit,
        _is_non_taxable_sales,
        _shipping_address_code,
        _sm_id
    FROM transactions.stock_master 
    WHERE transaction_master_id = _transaction_master_id;

    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        stock_master_id                 bigint, 
        tran_type                       transaction_type, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        integer_strict,
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           money_strict,
        cost_of_goods_sold              money_strict2 DEFAULT(0),
        discount                        money_strict2,
        shipping_charge                 money_strict2,
        tax_form                        text,
        sales_tax_id                    integer,
        tax                             money_strict2,
        sales_account_id                integer,
        sales_discount_account_id       integer,
        sales_return_account_id         integer,
        inventory_account_id            integer,
        cost_of_goods_sold_account_id   integer        
    ) ON COMMIT DROP;

    CREATE TEMPORARY TABLE temp_stock_tax_details
    (
        id                                      SERIAL,
        temp_stock_detail_id                    integer REFERENCES temp_stock_details(id),
        sales_tax_detail_code                   text,
        stock_detail_id                         bigint,
        sales_tax_detail_id                     integer,
        state_sales_tax_id                      integer,
        county_sales_tax_id                     integer,
        account_id                              integer,
        principal                               money_strict,
        rate                                    decimal_strict,
        tax                                     money_strict
    ) ON COMMIT DROP;

    INSERT INTO temp_stock_details(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);

    UPDATE temp_stock_details 
    SET
        tran_type                   = 'Dr',
        sales_tax_id                = core.get_sales_tax_id_by_sales_tax_code(tax_form),
        item_id                     = core.get_item_id_by_item_code(item_code),
        unit_id                     = core.get_unit_id_by_unit_name(unit_name),
        base_quantity               = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                = core.get_base_unit_id_by_unit_name(unit_name);

    UPDATE temp_stock_details
    SET
        sales_account_id                = core.get_sales_account_id(item_id),
        sales_discount_account_id       = core.get_sales_discount_account_id(item_id),
        sales_return_account_id         = core.get_sales_return_account_id(item_id),        
        inventory_account_id            = core.get_inventory_account_id(item_id),
        cost_of_goods_sold_account_id   = core.get_cost_of_goods_sold_account_id(item_id);
    
    IF EXISTS
    (

        SELECT * 
        FROM transactions.stock_details
        INNER JOIN temp_stock_details
        ON temp_stock_details.item_id = transactions.stock_details.item_id
        WHERE transactions.stock_details.stock_master_id = _sm_id
        AND COALESCE(temp_stock_details.sales_tax_id, 0) != COALESCE(transactions.stock_details.sales_tax_id, 0)
        LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Tax form mismatch.'
        USING ERRCODE='P3202';
    END IF;

    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;

    IF(_is_non_taxable_sales) THEN
        IF EXISTS(SELECT * FROM temp_stock_details WHERE sales_tax_id IS NOT NULL LIMIT 1) THEN
            RAISE EXCEPTION 'You cannot provide sales tax information for non taxable sales.'
            USING ERRCODE='P5110';
        END IF;
    END IF;

    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        INSERT INTO temp_stock_tax_details
        (
            temp_stock_detail_id,
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            principal, 
            rate, 
            tax
        )
        SELECT 
            this.id, 
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            taxable_amount, 
            rate, 
            tax
        FROM transactions.get_sales_tax('Sales', _store_id, _party_code, _shipping_address_code, _price_type_id, this.item_code, this.price, this.quantity, this.discount, this.shipping_charge, this.sales_tax_id);
    END LOOP;
    
    UPDATE temp_stock_details
    SET tax =
    (SELECT SUM(COALESCE(temp_stock_tax_details.tax, 0)) FROM temp_stock_tax_details
    WHERE temp_stock_tax_details.temp_stock_detail_id = temp_stock_details.id);

    _tran_master_id             := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _stock_master_id            := nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));
    _tran_counter               := transactions.get_new_transaction_counter(_value_date);
    _tran_code                  := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

    INSERT INTO transactions.transaction_master(transaction_master_id, transaction_counter, transaction_code, book, value_date, user_id, login_id, office_id, cost_center_id, reference_number, statement_reference)
    SELECT _tran_master_id, _tran_counter, _tran_code, 'Sales.Return', _value_date, _user_id, _login_id, _office_id, _cost_center_id, _reference_number, _statement_reference;
        
    SELECT SUM(COALESCE(tax, 0))                                INTO _tax_total FROM temp_stock_tax_details;
    SELECT SUM(COALESCE(discount, 0))                           INTO _discount_total FROM temp_stock_details;
    SELECT SUM(COALESCE(price, 0) * COALESCE(quantity, 0))      INTO _grand_total FROM temp_stock_details;



    UPDATE temp_stock_details
    SET cost_of_goods_sold = transactions.get_write_off_cost_of_goods_sold(_sm_id, item_id, unit_id, quantity);


    SELECT SUM(cost_of_goods_sold) INTO _cost_of_goods_sold FROM temp_stock_details;


    IF(_cost_of_goods_sold > 0) THEN
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT _tran_master_id, _value_date, 'Dr', inventory_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0)), 1, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0))
        FROM temp_stock_details
        GROUP BY inventory_account_id;


        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT _tran_master_id, _value_date, 'Cr', cost_of_goods_sold_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0)), 1, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0))
        FROM temp_stock_details
        GROUP BY cost_of_goods_sold_account_id;
    END IF;


    INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, local_currency_code, er,amount_in_local_currency) 
    SELECT _tran_master_id, _value_date, 'Dr', sales_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), _default_currency_code, 1, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
    FROM temp_stock_details
    GROUP BY sales_account_id;


    IF(_tax_total IS NOT NULL AND _tax_total > 0) THEN
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency)
        SELECT _tran_master_id, _value_date, 'Dr', temp_stock_tax_details.account_id, _statement_reference, _default_currency_code, SUM(COALESCE(tax, 0)), _default_currency_code, 1, SUM(COALESCE(tax, 0))
        FROM temp_stock_tax_details
        GROUP BY temp_stock_tax_details.account_id;
    END IF;

    IF(_discount_total IS NOT NULL AND _discount_total > 0) THEN
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency) 
        SELECT _tran_master_id, _value_date, 'Cr', sales_discount_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(discount, 0)), _default_currency_code, 1, SUM(COALESCE(discount, 0))
        FROM temp_stock_details
        GROUP BY sales_discount_account_id;
    END IF;

    IF(_is_credit) THEN
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency) 
        SELECT _tran_master_id, _value_date, 'Cr',  core.get_account_id_by_party_code(_party_code), _statement_reference, _default_currency_code, _grand_total + _tax_total - _discount_total, _default_currency_code, 1, _grand_total + _tax_total - _discount_total;
    ELSE
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency) 
        SELECT _tran_master_id, _value_date, 'Cr',  sales_return_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)) + SUM(COALESCE(tax, 0)) - SUM(COALESCE(discount, 0)), _default_currency_code, 1, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)) + SUM(COALESCE(tax, 0)) - SUM(COALESCE(discount, 0))
        FROM temp_stock_details
        GROUP BY sales_return_account_id;
    END IF;



    INSERT INTO transactions.stock_master(stock_master_id, value_date, transaction_master_id, party_id, price_type_id, is_credit, store_id) 
    SELECT _stock_master_id, _value_date, _tran_master_id, _party_id, _price_type_id, false, _store_id;


    INSERT INTO transactions.stock_details(value_date, stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price, cost_of_goods_sold, discount, sales_tax_id, tax)
    SELECT _value_date, _stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price, cost_of_goods_sold, discount, sales_tax_id, tax FROM temp_stock_details;

    INSERT INTO transactions.stock_return(transaction_master_id, return_transaction_master_id)
    SELECT _transaction_master_id, _tran_master_id;

    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);
    RETURN _tran_master_id;
END
$$
LANGUAGE plpgsql;




-- CREATE TEMPORARY TABLE temp_sales_return
-- ON COMMIT DROP
-- AS
-- 
-- SELECT * FROM transactions.post_sales_return(5, 2, 2, 1, '1-1-2000', 1, 'MAJON-0002', 1, '1234-AD', 'Test', 
-- ARRAY[
--  ROW(1, 'RMBP', 1, 'Piece', 180000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--  ROW(1, '13MBA', 1, 'Piece', 110000, 5000, 50, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type
-- ],
-- ARRAY[
-- NULL::core.attachment_type
-- ]);
-- 
-- SELECT  tran_type, core.get_account_name_by_account_id(account_id), amount_in_local_currency 
-- FROM transactions.transaction_details
-- WHERE transaction_master_id  = (SELECT * FROM temp_sales_return);


/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.post_stock_adjustment.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_stock_adjustment
(
        _office_id                              integer,
        _user_id                                integer,
        _login_id                               bigint,
        _value_date                             date,
        _reference_number                       national character varying(24),
        _statement_reference                    text,
        _details                                transactions.stock_adjustment_type[]
);


CREATE FUNCTION transactions.post_stock_adjustment
(
        _office_id                              integer,
        _user_id                                integer,
        _login_id                               bigint,
        _value_date                             date,
        _reference_number                       national character varying(24),
        _statement_reference                    text,
        _details                                transactions.stock_adjustment_type[]
)
RETURNS bigint
AS
$$
    DECLARE _transaction_master_id                  bigint;
    DECLARE _stock_master_id                        bigint;
    DECLARE _book_name                              text='Stock.Adjustment';
    DECLARE _is_periodic                            boolean = office.is_periodic_inventory(_office_id);
    DECLARE _default_currency_code                  national character varying(12);
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;

    CREATE TEMPORARY TABLE IF NOT EXISTS temp_stock_details
    (
        tran_type                       transaction_type,
        store_id                        integer,
        store_name                      national character varying(50),
        item_id                         integer,
        item_code                       national character varying(12),
        unit_id                         integer,
        base_unit_id                    integer,
        unit_name                       national character varying(50),
        quantity                        integer_strict,
        base_quantity                   integer,                
        price                           money_strict,
        cost_of_goods_sold              money_strict2 DEFAULT(0),
        inventory_account_id            integer,
        cost_of_goods_sold_account_id   integer
    ) 
    ON COMMIT DROP; 

    DROP TABLE IF EXISTS temp_transaction_details;
    CREATE TEMPORARY TABLE temp_transaction_details
    (
        tran_type                   transaction_type, 
        account_id                  integer, 
        statement_reference         text, 
        cash_repository_id          integer, 
        currency_code               national character varying(12), 
        amount_in_currency          money_strict, 
        local_currency_code         national character varying(12), 
        er                          decimal_strict, 
        amount_in_local_currency    money_strict
    ) ON COMMIT DROP;

    INSERT INTO temp_stock_details(tran_type, store_name, item_code, unit_name, quantity)
    SELECT tran_type, store_name, item_code, unit_name, quantity FROM explode_array(_details);

    IF EXISTS
    (
        SELECT * FROM temp_stock_details
        WHERE tran_type = 'Dr'
    ) THEN
        RAISE EXCEPTION 'A stock adjustment entry can not contain debit item(s).'
        USING ERRCODE='P5201';
    END IF;

    IF EXISTS
    (
        SELECT 1 FROM temp_stock_details
        GROUP BY item_code, store_name
        HAVING COUNT(item_code) <> 1
    ) THEN
        RAISE EXCEPTION 'An item can appear only once in a store.'
        USING ERRCODE='P5202';
    END IF;

    UPDATE temp_stock_details 
    SET 
        item_id         = core.get_item_id_by_item_code(item_code),
        unit_id         = core.get_unit_id_by_unit_name(unit_name),
        store_id        = office.get_store_id_by_store_name(store_name);

    IF EXISTS
    (
        SELECT * FROM temp_stock_details
        WHERE item_id IS NULL OR unit_id IS NULL OR store_id IS NULL
    ) THEN
        RAISE EXCEPTION 'Invalid data supplied.'
        USING ERRCODE='P3000';
    END IF;

    UPDATE temp_stock_details 
    SET
        tran_type                       = 'Cr',
        base_quantity                   = core.get_base_quantity_by_unit_id(unit_id, quantity),
        base_unit_id                    = core.get_root_unit_id(unit_id),
        price                           = core.get_item_cost_price(item_id, unit_id, NULL),
        inventory_account_id            = core.get_inventory_account_id(item_id),
        cost_of_goods_sold_account_id   = core.get_cost_of_goods_sold_account_id(item_id);


    IF EXISTS
    (
            SELECT 1
            FROM 
            office.stores
            WHERE office.stores.store_id
            IN
            (
                SELECT temp_stock_details.store_id
                FROM temp_stock_details
            )
            HAVING COUNT(DISTINCT office.stores.office_id) > 1

    ) THEN
        RAISE EXCEPTION E'Access is denied!\nA stock adjustment transaction cannot references multiple branches.'
        USING ERRCODE='P9012';
    END IF;

    IF EXISTS
    (
            SELECT 1
            FROM 
            temp_stock_details
            WHERE tran_type = 'Cr'
            AND quantity > core.count_item_in_stock(item_id, unit_id, store_id)
    ) THEN
        RAISE EXCEPTION 'Negative stock is not allowed.'
        USING ERRCODE='P5001';
    END IF;

    --No accounting treatment is needed for periodic accounting system.
    IF(_is_periodic = false) THEN
        _default_currency_code  := transactions.get_default_currency_code_by_office_id(_office_id);

        UPDATE temp_stock_details 
        SET 
            cost_of_goods_sold = transactions.get_cost_of_goods_sold(item_id, unit_id, store_id, quantity);
    
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', cost_of_goods_sold_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0)), 1, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0))
        FROM temp_stock_details
        GROUP BY cost_of_goods_sold_account_id;

        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', inventory_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0)), 1, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0))
        FROM temp_stock_details
        GROUP BY inventory_account_id;
    END IF;
    
    _transaction_master_id  := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));

    INSERT INTO transactions.transaction_master
    (
            transaction_master_id,
            transaction_counter,
            transaction_code,
            book,
            value_date,
            login_id,
            user_id,
            office_id,
            reference_number,
            statement_reference
    )
    SELECT
            _transaction_master_id, 
            transactions.get_new_transaction_counter(_value_date), 
            transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id),
            _book_name,
            _value_date,
            _login_id,
            _user_id,
            _office_id,
            _reference_number,
            _statement_reference;

    INSERT INTO transactions.transaction_details(value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency)
    SELECT _value_date, _transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency
    FROM temp_transaction_details
    ORDER BY tran_type DESC;


    INSERT INTO transactions.stock_master(stock_master_id, transaction_master_id, value_date)
    SELECT nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id')), _transaction_master_id, _value_date;

    _stock_master_id                                := currval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));

    INSERT INTO transactions.stock_details(stock_master_id, value_date, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price)
    SELECT _stock_master_id, _value_date, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price
    FROM temp_stock_details;

    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);
    
    RETURN _transaction_master_id;
END
$$
LANGUAGE plpgsql;


-- SELECT * FROM transactions.post_stock_adjustment(2, 2, 5, '1-1-2020', '22', 'Test', 
-- ARRAY[
-- ROW('Cr', 'Store 1', 'RMBP', 'Piece', 1)::transactions.stock_adjustment_type,
-- ROW('Cr', 'Godown 1', 'RMBP', 'Piece', 1)::transactions.stock_adjustment_type,
-- ROW('Cr', 'Store 1', '11MBA', 'Piece', 1)::transactions.stock_adjustment_type,
-- ROW('Cr', 'Godown 1', '11MBA', 'Piece', 1)::transactions.stock_adjustment_type
-- ]
-- );




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.post_stock_journal.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_stock_journal
(
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _details                                transactions.stock_adjustment_type[]
);


CREATE FUNCTION transactions.post_stock_journal
(
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _details                                transactions.stock_adjustment_type[]
)
RETURNS bigint
AS
$$
    DECLARE _transaction_master_id                  bigint;
    DECLARE _stock_master_id                        bigint;
    DECLARE _book_name                              text='Stock.Transfer';
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;

    CREATE TEMPORARY TABLE IF NOT EXISTS temp_stock_details
    (
        tran_type       transaction_type,
        store_id        integer,
        store_name      national character varying(50),
        item_id         integer,
        item_code       national character varying(12),
        unit_id         integer,
        base_unit_id    integer,
        unit_name       national character varying(50),
        quantity        integer_strict,
        base_quantity   integer,                
        price           money_strict                             
    ) 
    ON COMMIT DROP; 

    INSERT INTO temp_stock_details(tran_type, store_name, item_code, unit_name, quantity)
    SELECT tran_type, store_name, item_code, unit_name, quantity FROM explode_array(_details);

    IF EXISTS
    (
        SELECT 1 FROM temp_stock_details
        GROUP BY item_code, store_name
        HAVING COUNT(item_code) <> 1
    ) THEN
        RAISE EXCEPTION 'An item can appear only once in a store.'
        USING ERRCODE='P5202';
    END IF;

    IF EXISTS
    (
        SELECT item_code FROM temp_stock_details
        GROUP BY item_code
        HAVING SUM(CASE WHEN tran_type='Dr' THEN quantity ELSE quantity *-1 END) <> 0
    ) THEN
        RAISE EXCEPTION 'Referencing sides are not equal.'
        USING ERRCODE='P5000';        
    END IF;


    UPDATE temp_stock_details SET 
    item_id         = core.get_item_id_by_item_code(item_code),
    unit_id         = core.get_unit_id_by_unit_name(unit_name),
    store_id        = office.get_store_id_by_store_name(store_name);

    IF EXISTS
    (
        SELECT * FROM temp_stock_details
        WHERE item_id IS NULL OR unit_id IS NULL OR store_id IS NULL
    ) THEN
        RAISE EXCEPTION 'Invalid data supplied.'
        USING ERRCODE='P3000';
    END IF;

    UPDATE temp_stock_details SET
    base_unit_id    = core.get_root_unit_id(unit_id),
    base_quantity   = core.get_base_quantity_by_unit_id(unit_id, quantity),
    price           = core.get_item_cost_price(item_id, unit_id, NULL);



    IF EXISTS
    (
            SELECT 1
            FROM 
            office.stores
            WHERE office.stores.store_id
            IN
            (
                SELECT temp_stock_details.store_id
                FROM temp_stock_details
            )
            HAVING COUNT(DISTINCT office.stores.office_id) > 1

    ) THEN
        RAISE EXCEPTION E'Access is denied!\nA stock journal transaction cannot references multiple branches.'
        USING ERRCODE='P9013';
    END IF;

    IF EXISTS
    (
            SELECT 1
            FROM 
            temp_stock_details
            WHERE tran_type = 'Cr'
            AND quantity > core.count_item_in_stock(item_id, unit_id, store_id)
    ) THEN
        RAISE EXCEPTION 'Negative stock is not allowed.'
        USING ERRCODE='P5001';
    END IF;

    INSERT INTO transactions.transaction_master
    (
            transaction_master_id,
            transaction_counter,
            transaction_code,
            book,
            value_date,
            login_id,
            user_id,
            office_id,
            reference_number,
            statement_reference
    )
    SELECT
            nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id')), 
            transactions.get_new_transaction_counter(_value_date), 
            transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id),
            _book_name,
            _value_date,
            _login_id,
            _user_id,
            _office_id,
            _reference_number,
            _statement_reference;


    _transaction_master_id                          := currval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));


    INSERT INTO transactions.stock_master(stock_master_id, transaction_master_id, value_date)
    SELECT nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id')), _transaction_master_id, _value_date;

    _stock_master_id                                := currval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));

    INSERT INTO transactions.stock_details(stock_master_id, value_date, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price)
    SELECT _stock_master_id, _value_date, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price
    FROM temp_stock_details;
    
    
    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);
    RETURN _transaction_master_id;
END
$$
LANGUAGE plpgsql;


-- SELECT * FROM transactions.post_stock_journal(2, 2, 5, '1-1-2020', '22', 'Test', 
-- ARRAY[
-- ROW('Cr', 'Store 1', 'RMBP', 'Piece', 1)::transactions.stock_adjustment_type,
-- ROW('Dr', 'Godown 1', 'RMBP', 'Piece', 1)::transactions.stock_adjustment_type,
-- ROW('Cr', 'Store 1', '11MBA', 'Piece', 1)::transactions.stock_adjustment_type,
-- ROW('Dr', 'Godown 1', '11MBA', 'Piece', 1)::transactions.stock_adjustment_type
-- ]
-- );




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.refresh_materialized_views.sql --<--<--
DROP FUNCTION IF EXISTS transactions.refresh_materialized_views(_office_id integer);

CREATE FUNCTION transactions.refresh_materialized_views(_office_id integer)
RETURNS void
AS
$$
BEGIN
        REFRESH MATERIALIZED VIEW transactions.trial_balance_view;
        REFRESH MATERIALIZED VIEW transactions.verified_stock_transaction_view;
        REFRESH MATERIALIZED VIEW transactions.verified_transaction_mat_view;
        REFRESH MATERIALIZED VIEW transactions.verified_cash_transaction_mat_view;
END
$$
LANGUAGE plpgsql;


SELECT transactions.create_routine('REF-MV', 'transactions.refresh_materialized_views', 1000);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.validate_item_for_return.sql --<--<--
DROP FUNCTION IF EXISTS transactions.validate_item_for_return(_transaction_master_id bigint, _store_id integer, _item_code national character varying(12), _unit_name national character varying(50), _quantity integer, _price money_strict);

CREATE FUNCTION transactions.validate_item_for_return(_transaction_master_id bigint, _store_id integer, _item_code national character varying(12), _unit_name national character varying(50), _quantity integer, _price money_strict)
RETURNS boolean
AS
$$
        DECLARE _stock_master_id bigint = 0;
        DECLARE _is_purchase boolean = false;
        DECLARE _item_id integer = 0;
        DECLARE _unit_id integer = 0;
        DECLARE _actual_quantity decimal_strict2 = 0;
        DECLARE _returned_in_previous_batch decimal_strict2 = 0;
        DECLARE _actual_price_in_root_unit money_strict2 = 0;
        DECLARE _price_in_root_unit money_strict2 = 0;
        DECLARE _item_in_stock decimal_strict2 = 0;        
BEGIN        
        IF(_store_id IS NULL OR _store_id <= 0) THEN
                RAISE EXCEPTION 'Invalid store.'
                USING ERRCODE='P3012';
        END IF;


        IF(_item_code IS NULL OR trim(_item_code) = '') THEN
                RAISE EXCEPTION 'Invalid item.'
                USING ERRCODE='P3051';
        END IF;

        IF(_unit_name IS NULL OR trim(_unit_name) = '') THEN
                RAISE EXCEPTION 'Invalid unit.'
                USING ERRCODE='P3052';
        END IF;

        IF(_quantity IS NULL OR _quantity <= 0) THEN
                RAISE EXCEPTION 'Invalid quantity.'
                USING ERRCODE='P3301';
        END IF;


        IF NOT EXISTS
        (
                SELECT * FROM transactions.transaction_master
                WHERE transaction_master_id = _transaction_master_id
                AND verification_status_id > 0
        ) THEN
                RAISE EXCEPTION 'Invalid or rejected transaction.'
                USING ERRCODE='P5301';
        END IF;
        
        
        _stock_master_id                := transactions.get_stock_master_id_by_transaction_master_id(_transaction_master_id);
        IF(_stock_master_id  IS NULL OR _stock_master_id  <= 0) THEN
                RAISE EXCEPTION 'Invalid transaction id.'
                USING ERRCODE='P3302';
        END IF;

        _item_id                        := core.get_item_id_by_item_code(_item_code);
        IF(_item_id IS NULL OR _item_id <= 0) THEN
                RAISE EXCEPTION 'Invalid item.'
                USING ERRCODE='P3051';
        END IF;

        IF NOT EXISTS
        (
                SELECT * FROM transactions.stock_details
                WHERE stock_master_id = _stock_master_id
                AND item_id = _item_id
                LIMIT 1
        ) THEN
                RAISE EXCEPTION '%', format('The item %1$s is not associated with this transaction.', _item_code)
                USING ERRCODE='P4020';
        END IF;

        _unit_id                        := core.get_unit_id_by_unit_name(_unit_name);
        IF(_unit_id IS NULL OR _unit_id <= 0) THEN
                RAISE EXCEPTION 'Invalid unit.'
                USING ERRCODE='P3052';
        END IF;


        _is_purchase                    := transactions.is_purchase(_transaction_master_id);

        IF NOT EXISTS
        (
                SELECT * FROM transactions.stock_details
                WHERE stock_master_id = _stock_master_id
                AND item_id = _item_id
                AND core.get_root_unit_id(_unit_id) = core.get_root_unit_id(unit_id)
                LIMIT 1
        ) THEN
                RAISE EXCEPTION 'Invalid or incompatible unit specified'
                USING ERRCODE='P3053';
        END IF;

        IF(_is_purchase = true) THEN
                _item_in_stock = core.count_item_in_stock(_item_id, _unit_id, _store_id);

                IF(_item_in_stock < _quantity) THEN
                        RAISE EXCEPTION '%', format('Only %1$s %2$s of %3$s left in stock.',_item_in_stock, _unit_name, _item_code)
                        USING ERRCODE='P5500';
                END IF;
        END IF;

        SELECT 
                COALESCE(core.convert_unit(base_unit_id, _unit_id) * base_quantity, 0)
                INTO _actual_quantity
        FROM transactions.stock_details
        WHERE stock_master_id = _stock_master_id
        AND item_id = _item_id;

        SELECT 
                COALESCE(SUM(core.convert_unit(base_unit_id, 1) * base_quantity), 0)
                INTO _returned_in_previous_batch
        FROM transactions.stock_details
        WHERE stock_master_id IN
        (
                SELECT stock_master_id
                FROM transactions.stock_master
                INNER JOIN transactions.transaction_master
                ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_id
                WHERE transactions.transaction_master.verification_status_id > 0
                AND transactions.stock_master.transaction_master_id IN (

                        SELECT 
                        return_transaction_master_id 
                        FROM transactions.stock_return
                        WHERE transaction_master_id = _transaction_master_id
                )
        )
        AND item_id = _item_id;



        IF(_quantity + _returned_in_previous_batch > _actual_quantity) THEN
                RAISE EXCEPTION 'The returned quantity cannot be greater than actual quantity.'
                USING ERRCODE='P5203';
        END IF;



        _price_in_root_unit := core.convert_unit(core.get_root_unit_id(_unit_id), _unit_id) * _price;



        SELECT 
                (core.convert_unit(core.get_root_unit_id(transactions.stock_details.unit_id), transactions.stock_details.base_unit_id) * price) / (base_quantity/quantity)
                INTO _actual_price_in_root_unit
        FROM transactions.stock_details
        WHERE stock_master_id = _stock_master_id
        AND item_id = _item_id;


        IF(_price_in_root_unit > _actual_price_in_root_unit) THEN
                RAISE EXCEPTION 'The returned amount cannot be greater than actual amount.'
                USING ERRCODE='P5204';

                RETURN FALSE;
        END IF;

        RETURN TRUE;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM transactions.validate_item_for_return(9, 1, 'RMBP', 'Piece', 1, 180000);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/functions/transactions/transactions.verify_transaction.sql --<--<--
-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/FrontEnd/MixERP.Net.FrontEnd/db/src/02. functions and logic/logic/functions/transactions/transactions.verify_transaction.sql --<--<--
DROP FUNCTION IF EXISTS transactions.verify_transaction
(
    _transaction_master_id                  bigint,
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _verification_status_id                 smallint,
    _reason                                 national character varying
) 
CASCADE;

CREATE FUNCTION transactions.verify_transaction
(
    _transaction_master_id                  bigint,
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _verification_status_id                 smallint,
    _reason                                 national character varying
)
RETURNS VOID
VOLATILE
AS
$$
    DECLARE _transaction_posted_by integer;
    DECLARE _can_approve boolean=true;
    DECLARE _book text;
    DECLARE _verify_sales boolean;
    DECLARE _sales_verification_limit money_strict2;
    DECLARE _verify_purchase boolean;
    DECLARE _purchase_verification_limit money_strict2;
    DECLARE _verify_gl boolean;
    DECLARE _gl_verification_limit money_strict2;
    DECLARE _posted_amount money_strict2;
    DECLARE _has_policy boolean=false;
    DECLARE _voucher_date date;
    DECLARE _voucher_office_id integer;
    DECLARE _value_date date=transactions.get_value_date(_office_id);
BEGIN

    SELECT
        transactions.transaction_master.book,
        transactions.transaction_master.value_date,
        transactions.transaction_master.office_id,
        transactions.transaction_master.user_id
    INTO
        _book,
        _voucher_date,
        _voucher_office_id,
        _transaction_posted_by  
    FROM
    transactions.transaction_master
    WHERE transactions.transaction_master.transaction_master_id=_transaction_master_id;


    IF(_voucher_office_id <> _office_id) THEN
        RAISE EXCEPTION 'Access is denied. You cannot verify a transaction of another office.'
        USING ERRCODE='P9014';
    END IF;
    
    IF(_voucher_date <> _value_date) THEN
        RAISE EXCEPTION 'Access is denied. You cannot verify past or futuer dated transaction.'
        USING ERRCODE='P9015';
    END IF;
    
    SELECT
        SUM(amount_in_local_currency)
    INTO
        _posted_amount
    FROM
        transactions.transaction_details
    WHERE transactions.transaction_details.transaction_master_id = _transaction_master_id
    AND transactions.transaction_details.tran_type='Cr';


    SELECT
        true,
        can_verify_sales_transactions,
        sales_verification_limit,
        can_verify_purchase_transactions,
        purchase_verification_limit,
        can_verify_gl_transactions,
        gl_verification_limit
    INTO
        _has_policy,
        _verify_sales,
        _sales_verification_limit,
        _verify_purchase,
        _purchase_verification_limit,
        _verify_gl,
        _gl_verification_limit
    FROM
    policy.voucher_verification_policy
    WHERE user_id=_user_id
    AND is_active=true
    AND now() >= effective_from
    AND now() <= ends_on;


    IF(lower(_book) LIKE 'sales%') THEN
        IF(_verify_sales = false) THEN
            _can_approve := false;
        END IF;
        IF(_verify_sales = true) THEN
            IF(_posted_amount > _sales_verification_limit AND _sales_verification_limit > 0::money_strict2) THEN
                _can_approve := false;
            END IF;
        END IF;         
    END IF;


    IF(lower(_book) LIKE 'purchase%') THEN
        IF(_verify_purchase = false) THEN
            _can_approve := false;
        END IF;
        IF(_verify_purchase = true) THEN
            IF(_posted_amount > _purchase_verification_limit AND _purchase_verification_limit > 0::money_strict2) THEN
                _can_approve := false;
            END IF;
        END IF;         
    END IF;


    IF(lower(_book) LIKE 'journal%') THEN
        IF(_verify_gl = false) THEN
            _can_approve := false;
        END IF;
        IF(_verify_gl = true) THEN
            IF(_posted_amount > _gl_verification_limit AND _gl_verification_limit > 0::money_strict2) THEN
                _can_approve := false;
            END IF;
        END IF;         
    END IF;

    IF(_has_policy=true) THEN
        IF(_can_approve = true) THEN
            UPDATE transactions.transaction_master
            SET 
                last_verified_on = now(),
                verified_by_user_id=_user_id,
                verification_status_id=_verification_status_id,
                verification_reason=_reason
            WHERE
                transactions.transaction_master.transaction_master_id=_transaction_master_id;
            RAISE NOTICE 'Done.';
        END IF;
    ELSE
        RAISE EXCEPTION 'No verification policy found for this user.'
        USING ERRCODE='P4030';
    END IF;
    RETURN;
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.verify_transaction(65::bigint, 2, 2, 51::bigint, -3::smallint, '');

/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/triggers/policy.check_menu_policy_trigger.sql --<--<--
DROP FUNCTION IF EXISTS policy.check_menu_policy_trigger() CASCADE;


CREATE FUNCTION policy.check_menu_policy_trigger()
RETURNS trigger
AS
$$
    DECLARE count integer=0;
BEGIN
    IF NEW.office_id IS NOT NULL THEN
        count := count + 1;
    END IF;

    IF NEW.role_id IS NOT NULL THEN
        count := count + 1;
    END IF;
    
    IF NEW.user_id IS NOT NULL THEN
        count := count + 1;
    END IF;

    IF count <> 1 THEN
        RAISE EXCEPTION 'Only one of the following columns is required : %', 'office_id, role_id, user_id.'
        USING ERRCODE='P8501';
    END IF;

    RETURN NEW;
END
$$
LANGUAGE plpgsql;


CREATE TRIGGER check_menu_policy_trigger BEFORE INSERT
ON policy.menu_policy
FOR EACH ROW EXECUTE PROCEDURE policy.check_menu_policy_trigger();


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/logic/triggers/transactions.verification_trigger.sql --<--<--
DROP FUNCTION IF EXISTS transactions.verification_trigger() CASCADE;
CREATE FUNCTION transactions.verification_trigger()
RETURNS TRIGGER
AS
$$
    DECLARE _transaction_master_id bigint;
    DECLARE _transaction_posted_by integer;
    DECLARE _old_verifier integer;
    DECLARE _old_status integer;
    DECLARE _old_reason national character varying(128);
    DECLARE _verifier integer;
    DECLARE _status integer;
    DECLARE _reason national character varying(128);
    DECLARE _has_policy boolean;
    DECLARE _is_sys boolean;
    DECLARE _rejected smallint=-3;
    DECLARE _closed smallint=-2;
    DECLARE _withdrawn smallint=-1;
    DECLARE _unapproved smallint = 0;
    DECLARE _auto_approved smallint = 1;
    DECLARE _approved smallint=2;
    DECLARE _book text;
    DECLARE _can_verify_sales_transactions boolean;
    DECLARE _sales_verification_limit money_strict2;
    DECLARE _can_verify_purchase_transactions boolean;
    DECLARE _purchase_verification_limit money_strict2;
    DECLARE _can_verify_gl_transactions boolean;
    DECLARE _gl_verification_limit money_strict2;
    DECLARE _can_verify_self boolean;
    DECLARE _self_verification_limit money_strict2;
    DECLARE _posted_amount money_strict2;
BEGIN
    IF TG_OP='DELETE' THEN
        RAISE EXCEPTION 'Deleting a transaction is not allowed. Mark the transaction as rejected instead.'
        USING ERRCODE='P5800';
    END IF;

    IF TG_OP='UPDATE' THEN
        RAISE NOTICE 'Columns except the following will be ignored for this update: %', 'verified_by_user_id, verification_status_id, verification_reason.';

        IF(OLD.transaction_master_id IS DISTINCT FROM NEW.transaction_master_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_master_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.transaction_counter IS DISTINCT FROM NEW.transaction_counter) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_counter".'
            USING ERRCODE='P8502';            
        END IF;

        IF(OLD.transaction_code IS DISTINCT FROM NEW.transaction_code) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_code".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.book IS DISTINCT FROM NEW.book) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"book".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.value_date IS DISTINCT FROM NEW.value_date) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"value_date".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.transaction_ts IS DISTINCT FROM NEW.transaction_ts) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_ts".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.login_id IS DISTINCT FROM NEW.login_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"login_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.user_id IS DISTINCT FROM NEW.user_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"user_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.sys_user_id IS DISTINCT FROM NEW.sys_user_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"sys_user_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.office_id IS DISTINCT FROM NEW.office_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"office_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.cost_center_id IS DISTINCT FROM NEW.cost_center_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"cost_center_id".'
            USING ERRCODE='P8502';
        END IF;

        _transaction_master_id := OLD.transaction_master_id;
        _book := OLD.book;
        _old_verifier := OLD.verified_by_user_id;
        _old_status := OLD.verification_status_id;
        _old_reason := OLD.verification_reason;
        _transaction_posted_by := OLD.user_id;      
        _verifier := NEW.verified_by_user_id;
        _status := NEW.verification_status_id;
        _reason := NEW.verification_reason;
        _is_sys := office.is_sys(_verifier);


        SELECT
            SUM(amount_in_local_currency)
        INTO
            _posted_amount
        FROM
            transactions.transaction_details
        WHERE transactions.transaction_details.transaction_master_id = _transaction_master_id
        AND transactions.transaction_details.tran_type='Cr';


        SELECT
            true,
            can_verify_sales_transactions,
            sales_verification_limit,
            can_verify_purchase_transactions,
            purchase_verification_limit,
            can_verify_gl_transactions,
            gl_verification_limit,
            can_self_verify,
            self_verification_limit
        INTO
            _has_policy,
            _can_verify_sales_transactions,
            _sales_verification_limit,
            _can_verify_purchase_transactions,
            _purchase_verification_limit,
            _can_verify_gl_transactions,
            _gl_verification_limit,
            _can_verify_self,
            _self_verification_limit
        FROM
        policy.voucher_verification_policy
        WHERE user_id=_verifier
        AND is_active=true
        AND now() >= effective_from
        AND now() <= ends_on;

        IF(_verifier IS NULL) THEN
            RAISE EXCEPTION 'Access is denied.'
            USING ERRCODE='P9001';
        END IF;     
        
        IF(_status != _withdrawn AND _has_policy = false) THEN
            RAISE EXCEPTION 'Access is denied. You don''t have the right to verify the transaction.'
            USING ERRCODE='P9016';
        END IF;

        IF(_status = _withdrawn AND _has_policy = false) THEN
            IF(_transaction_posted_by != _verifier) THEN
                RAISE EXCEPTION 'Access is denied. You don''t have the right to withdraw the transaction.'
                USING ERRCODE='P9017';
            END IF;
        END IF;

        IF(_status = _auto_approved AND _is_sys = false) THEN
            RAISE EXCEPTION 'Access is denied.'
            USING ERRCODE='P9001';
        END IF;


        IF(_has_policy = false) THEN
            RAISE EXCEPTION 'Access is denied.'
            USING ERRCODE='P9001';
        END IF;


        --Is trying verify self transaction.
        IF(NEW.verified_by_user_id = NEW.user_id) THEN
            IF(_can_verify_self = false) THEN
                RAISE EXCEPTION 'Please ask someone else to verify the transaction you posted.'
                USING ERRCODE='P5901';                
            END IF;
            IF(_can_verify_self = true) THEN
                IF(_posted_amount > _self_verification_limit AND _self_verification_limit > 0::money_strict2) THEN
                    RAISE EXCEPTION 'Self verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5910';
                END IF;
            END IF;
        END IF;

        IF(lower(_book) LIKE '%sales%') THEN
            IF(_can_verify_sales_transactions = false) THEN
                RAISE EXCEPTION 'Access is denied.'
                USING ERRCODE='P9001';
            END IF;
            IF(_can_verify_sales_transactions = true) THEN
                IF(_posted_amount > _sales_verification_limit AND _sales_verification_limit > 0::money_strict2) THEN
                    RAISE EXCEPTION 'Sales verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5911';
                END IF;
            END IF;         
        END IF;


        IF(lower(_book) LIKE '%purchase%') THEN
            IF(_can_verify_purchase_transactions = false) THEN
                RAISE EXCEPTION 'Access is denied.'
                USING ERRCODE='P9001';
            END IF;
            IF(_can_verify_purchase_transactions = true) THEN
                IF(_posted_amount > _purchase_verification_limit AND _purchase_verification_limit > 0::money_strict2) THEN
                    RAISE EXCEPTION 'Purchase verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5912';
                END IF;
            END IF;         
        END IF;


        IF(lower(_book) LIKE 'journal%') THEN
            IF(_can_verify_gl_transactions = false) THEN
                RAISE EXCEPTION 'Access is denied.'
                USING ERRCODE='P9001';
            END IF;
            IF(_can_verify_gl_transactions = true) THEN
                IF(_posted_amount > _gl_verification_limit AND _gl_verification_limit > 0::money_strict2) THEN
                    RAISE EXCEPTION 'GL verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5913';
                END IF;
            END IF;         
        END IF;

        NEW.last_verified_on := now();

    END IF; 
    RETURN NEW;
END
$$
LANGUAGE plpgsql;


CREATE TRIGGER verification_update_trigger
AFTER UPDATE
ON transactions.transaction_master
FOR EACH ROW 
EXECUTE PROCEDURE transactions.verification_trigger();

CREATE TRIGGER verification_delete_trigger
BEFORE DELETE
ON transactions.transaction_master
FOR EACH ROW 
EXECUTE PROCEDURE transactions.verification_trigger();


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.count_item_in_stock.sql --<--<--
CREATE FUNCTION office.count_item_in_stock(item_id_ integer, unit_id_ integer, office_id_ integer)
RETURNS decimal
AS
$$
    DECLARE _base_unit_id integer;
    DECLARE _debit decimal;
    DECLARE _credit decimal;
    DECLARE _balance decimal;
    DECLARE _factor decimal;
BEGIN

    --Get the base item unit
    SELECT 
        core.get_root_unit_id(core.items.unit_id) 
    INTO _base_unit_id
    FROM core.items
    WHERE core.items.item_id=$1;

    --Get the sum of debit stock quantity from approved transactions
    SELECT 
        COALESCE(SUM(base_quantity), 0)
    INTO _debit
    FROM transactions.stock_details
    INNER JOIN transactions.stock_master
    ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
    INNER JOIN transactions.transaction_master
    ON transactions.stock_master.transaction_master_id = transactions.transaction_master.transaction_master_id
    WHERE transactions.transaction_master.verification_status_id > 0
    AND transactions.stock_details.item_id=$1
    AND transactions.stock_details.store_id IN (SELECT store_id FROM office.stores WHERE office.stores.office_id = $3)
    AND transactions.stock_details.tran_type='Dr';
    
    --Get the sum of credit stock quantity from approved transactions
    SELECT 
        COALESCE(SUM(base_quantity), 0)
    INTO _credit
    FROM transactions.stock_details
    INNER JOIN transactions.stock_master
    ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
    INNER JOIN transactions.transaction_master
    ON transactions.stock_master.transaction_master_id = transactions.transaction_master.transaction_master_id
    WHERE transactions.transaction_master.verification_status_id > 0
    AND transactions.stock_details.item_id=$1
    AND transactions.stock_details.store_id IN (SELECT store_id FROM office.stores WHERE office.stores.office_id = $3)
    AND transactions.stock_details.tran_type='Cr';
    
    _balance:= _debit - _credit;

    
    _factor = core.convert_unit($2, _base_unit_id);

    return _balance / _factor;  
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.create_user.sql --<--<--
CREATE FUNCTION office.create_user
(
    _role_id		integer,
    _department_id	integer,
    _office_id		integer,
    _user_name 		text,
    _password 		text,
    _full_name 		text,
    _elevated 		boolean = false
)
RETURNS VOID
AS
$$
BEGIN
    INSERT INTO office.users(role_id, department_id, office_id, user_name, password, full_name, elevated)
    SELECT _role_id, _department_id, _office_id, _user_name, _password, _full_name, _elevated;
    RETURN;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_cash_repository_id_by_cash_repository_code.sql --<--<--
CREATE FUNCTION office.get_cash_repository_id_by_cash_repository_code(text)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT cash_repository_id
        FROM office.cash_repositories
        WHERE cash_repository_code=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_cash_repository_id_by_cash_repository_name.sql --<--<--
CREATE FUNCTION office.get_cash_repository_id_by_cash_repository_name(text)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT cash_repository_id
        FROM office.cash_repositories
        WHERE cash_repository_name=$1
    );
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_cost_center_id_by_cost_center_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_cost_center_id_by_cost_center_code(text);

CREATE FUNCTION office.get_cost_center_id_by_cost_center_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN cost_center_id
    FROM office.cost_centers
    WHERE cost_center_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_cost_of_good_method.sql --<--<--
DROP FUNCTION IF EXISTS office.get_cost_of_good_method(_office_id integer);

CREATE FUNCTION office.get_cost_of_good_method(_office_id integer)
RETURNS text
AS
$$
BEGIN
        RETURN value
        FROM office.configuration
        WHERE office_id=$1
        AND config_id=2;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_department_id_by_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_department_id_by_code(text);

CREATE FUNCTION office.get_department_id_by_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN department_id
    FROM office.departments
    WHERE department_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_logged_in_culture.sql --<--<--
CREATE FUNCTION office.get_logged_in_culture(_user_id integer)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT culture
        FROM audit.logins
        WHERE user_id=$1
        AND login_date_time = 
        (
            SELECT MAX(login_date_time)
            FROM audit.logins
            WHERE user_id=$1
        )
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_logged_in_office_id.sql --<--<--
CREATE FUNCTION office.get_logged_in_office_id(_user_id integer)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT office_id
        FROM audit.logins
        WHERE user_id=$1
        AND login_date_time = 
        (
            SELECT MAX(login_date_time)
            FROM audit.logins
            WHERE user_id=$1
        )
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_login_id.sql --<--<--
DROP FUNCTION IF EXISTS office.get_login_id(_user_id integer);

CREATE FUNCTION office.get_login_id(_user_id integer)
RETURNS bigint
AS
$$
BEGIN
    RETURN
    (
        SELECT login_id
        FROM audit.logins
        WHERE user_id=$1
        AND login_date_time = 
        (
            SELECT MAX(login_date_time)
            FROM audit.logins
            WHERE user_id=$1
        )
        LIMIT 1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_office_code_by_id.sql --<--<--
CREATE FUNCTION office.get_office_code_by_id(office_id integer_strict)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT office.offices.office_code FROM office.offices
        WHERE office.offices.office_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_office_id_by_cash_repository_id.sql --<--<--
DROP FUNCTION IF EXISTS office.get_office_id_by_cash_repository_id(integer);

CREATE FUNCTION office.get_office_id_by_cash_repository_id(integer)
RETURNS integer
AS
$$
BEGIN
        RETURN office_id
        FROM office.cash_repositories
        WHERE cash_repository_id=$1;
END
$$
LANGUAGE plpgsql;


ALTER TABLE office.stores
ADD CONSTRAINT store_default_cash_repository_chk
CHECK(office.get_office_id_by_cash_repository_id(default_cash_repository_id) = office_id);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_office_id_by_office_code.sql --<--<--
CREATE FUNCTION office.get_office_id_by_office_code(office_code text)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT office.offices.office_id FROM office.offices
        WHERE office.offices.office_code=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_office_id_by_store_id.sql --<--<--
DROP FUNCTION IF EXISTS office.get_office_id_by_store_id(integer);

CREATE FUNCTION office.get_office_id_by_store_id(integer)
RETURNS integer
AS
$$
BEGIN
        RETURN office_id
        FROM office.stores
        WHERE store_id=$1;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_office_id_by_user_id.sql --<--<--
CREATE FUNCTION office.get_office_id_by_user_id(user_id integer_strict)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT office.users.office_id FROM office.users
        WHERE office.users.user_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_office_ids.sql --<--<--
DROP FUNCTION IF EXISTS office.get_office_ids(root_office_id integer);

CREATE FUNCTION office.get_office_ids(root_office_id integer)
RETURNS SETOF integer
AS
$$
BEGIN
    RETURN QUERY 
    (
        WITH RECURSIVE office_cte(office_id, path) AS (
         SELECT
            tn.office_id,  tn.office_id::TEXT AS path
            FROM office.offices AS tn WHERE tn.office_id =$1
        UNION ALL
         SELECT
            c.office_id, (p.path || '->' || c.office_id::TEXT)
            FROM office_cte AS p, office.offices AS c WHERE parent_office_id = p.office_id
        )

        SELECT office_id FROM office_cte
    );
END
$$LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_office_name_by_id.sql --<--<--
CREATE FUNCTION office.get_office_name_by_id(office_id integer_strict)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT office.offices.office_name FROM office.offices
        WHERE office.offices.office_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_offices.sql --<--<--
CREATE TYPE office.office_type AS
(
    office_id                   integer,
    office_code                 national character varying(12),
    office_name                 national character varying(150),
    address text
);

DROP FUNCTION IF EXISTS office.get_offices();

CREATE FUNCTION office.get_offices()
RETURNS setof office.office_type
STABLE
AS
$$
BEGIN
    RETURN QUERY
    SELECT office_id, office_code,office_name,street || ' ' || city AS Address FROM office.offices
    ORDER BY parent_office_id NULLS LAST;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_role_code_by_user_name.sql --<--<--
CREATE FUNCTION office.get_role_code_by_user_name(user_name text)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT office.roles.role_code FROM office.roles, office.users
        WHERE office.roles.role_id=office.users.role_id
        AND office.users.user_name=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_role_id_by_role_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_role_id_by_role_code(text);

CREATE FUNCTION office.get_role_id_by_role_code(text)
RETURNS integer
AS
$$
BEGIN
        RETURN
        role_id
        FROM office.roles
        WHERE role_code=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_role_id_by_role_name.sql --<--<--
DROP FUNCTION IF EXISTS office.get_role_id_by_role_name(text);

CREATE FUNCTION office.get_role_id_by_role_name(text)
RETURNS integer
AS
$$
BEGIN
        RETURN
        role_id
        FROM office.roles
        WHERE role_name=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_role_id_by_use_id.sql --<--<--
CREATE FUNCTION office.get_role_id_by_use_id(user_id integer_strict)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT office.users.role_id FROM office.users
        WHERE office.users.user_id=$1
    );
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_store_id_by_store_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_store_id_by_store_code(text);

CREATE FUNCTION office.get_store_id_by_store_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN
    (
        SELECT store_id
        FROM office.stores
        WHERE store_code=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_store_id_by_store_name.sql --<--<--
CREATE FUNCTION office.get_store_id_by_store_name(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN
    (
        SELECT store_id
        FROM office.stores
        WHERE store_name=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_store_name_by_store_id.sql --<--<--
CREATE FUNCTION office.get_store_name_by_store_id(integer)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT store_name
        FROM office.stores
        WHERE store_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_store_type_id_by_store_type_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_store_type_id_by_store_type_code(text);

CREATE FUNCTION office.get_store_type_id_by_store_type_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN store_type_id
    FROM office.store_types
    WHERE store_type_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_sys_user_id.sql --<--<--
CREATE FUNCTION office.get_sys_user_id()
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT office.users.user_id 
        FROM office.roles, office.users
        WHERE office.roles.role_id = office.users.role_id
        AND office.roles.is_system=true LIMIT 1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_user_id_by_user_name.sql --<--<--
CREATE FUNCTION office.get_user_id_by_user_name(user_name text)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT office.users.user_id FROM office.users
        WHERE office.users.user_name=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.get_user_name_by_user_id.sql --<--<--
CREATE FUNCTION office.get_user_name_by_user_id(user_id integer)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT office.users.user_name FROM office.users
        WHERE office.users.user_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.is_admin.sql --<--<--
CREATE FUNCTION office.is_admin(integer)
RETURNS boolean
AS
$$
BEGIN
    RETURN
    (
        SELECT office.roles.is_admin FROM office.users
        INNER JOIN office.roles
        ON office.users.role_id = office.roles.role_id
        WHERE office.users.user_id=$1
    );
END
$$
LANGUAGE PLPGSQL;

ALTER TABLE office.users
ADD CONSTRAINT users_elevated_chk
CHECK
(
    (NOT office.is_admin(user_id) AND NOT elevated)
    OR
    (office.is_admin(user_id))
);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.is_parent_office.sql --<--<--

CREATE FUNCTION office.is_parent_office(parent integer_strict, child integer_strict)
RETURNS boolean
AS
$$      
BEGIN
    IF $1!=$2 THEN
        IF EXISTS
        (
            WITH RECURSIVE office_cte(office_id, path) AS (
             SELECT
                tn.office_id,  tn.office_id::TEXT AS path
                FROM office.offices AS tn WHERE tn.parent_office_id IS NULL
            UNION ALL
             SELECT
                c.office_id, (p.path || '->' || c.office_id::TEXT)
                FROM office_cte AS p, office.offices AS c WHERE parent_office_id = p.office_id
            )
            SELECT * FROM
            (
                SELECT regexp_split_to_table(path, '->')
                FROM office_cte AS n WHERE n.office_id = $2
            ) AS items
            WHERE regexp_split_to_table=$1::text
        ) THEN
            RETURN TRUE;
        END IF;
    END IF;
    RETURN false;
END
$$
LANGUAGE plpgsql;


ALTER TABLE office.offices
ADD CONSTRAINT offices_check_if_parent_chk
        CHECK
        (
            office.is_parent_office(office_id, parent_office_id) = FALSE
            AND
            parent_office_id != office_id
        );


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.is_periodic_inventory.sql --<--<--
DROP FUNCTION IF EXISTS office.is_periodic_inventory(_office_id integer);

CREATE FUNCTION office.is_periodic_inventory(_office_id integer)
RETURNS boolean
AS
$$
    DECLARE config boolean;
BEGIN
    SELECT value = 'Periodic' INTO config
    FROM office.configuration
    WHERE config_id=1
    AND office_id=$1;

    IF(config IS NULL) THEN
        RETURN false;
    END IF;

    RETURN config;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.is_sys.sql --<--<--
CREATE FUNCTION office.is_sys(integer)
RETURNS boolean
AS
$$
BEGIN
    RETURN
    (
        SELECT office.roles.is_system FROM office.users
        INNER JOIN office.roles
        ON office.users.role_id = office.roles.role_id
        WHERE office.users.user_id=$1
    );
END
$$
LANGUAGE PLPGSQL;





-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.is_sys_user.sql --<--<--
CREATE FUNCTION office.is_sys_user(integer)
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT * FROM office.users
        WHERE user_id=$1
        AND role_id IN
        (
            SELECT office.roles.role_id FROM office.roles WHERE office.roles.role_code='SYST'
        )
    ) THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.is_valid_office_id.sql --<--<--
DROP FUNCTION IF EXISTS office.is_valid_office_id(integer);

CREATE FUNCTION office.is_valid_office_id(integer)
RETURNS boolean
AS
$$
BEGIN
        IF EXISTS(SELECT 1 FROM office.offices WHERE office_id=$1) THEN
                RETURN true;
        END IF;

        RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/office/office.validate_login.sql --<--<--
DROP FUNCTION IF EXISTS office.validate_login
(
    user_name       text,
    password        text,
    challenge       text
);

CREATE FUNCTION office.validate_login
(
    user_name       text,
    password        text,
    challenge       text
)
RETURNS boolean
AS
$$
BEGIN

    IF EXISTS
    (
        SELECT 1 FROM office.users 
        WHERE office.users.user_name=$1 
        AND encode(digest(office.users.password || challenge, 'sha512'), 'hex')=$2
        --The system user must never login.
        AND office.users.role_id != 
        (
            SELECT office.roles.role_id 
            FROM office.roles 
            WHERE office.roles.role_code='SYST'
        )
    ) THEN
        RETURN true;
    END IF;
    RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/policy/policy.is_elevated_user.sql --<--<--
DROP FUNCTION IF EXISTS policy.is_elevated_user(_user_id integer);

CREATE FUNCTION policy.is_elevated_user(_user_id integer)
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT 0 FROM office.users
        WHERE user_id = $1
        AND elevated
    ) THEN
        RETURN true;
    END IF;

    RETURN false;
END;
$$
LANGUAGE plpgsql;


/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/policy/policy.is_locked_out_till.sql --<--<--
CREATE FUNCTION policy.is_locked_out_till(user_id integer_strict)
RETURNS TIMESTAMP
AS
$$
BEGIN
    RETURN
    (
        SELECT MAX(policy.lock_outs.lock_out_till)::TIMESTAMP WITHOUT TIME ZONE FROM policy.lock_outs
        WHERE policy.lock_outs.user_id=$1
    );
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/policy/policy.is_restricted_mode.sql --<--<--
DROP FUNCTION IF EXISTS policy.is_restricted_mode();

CREATE FUNCTION policy.is_restricted_mode()
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT 0 FROM transactions.day_operation
        WHERE completed = false
        LIMIT 1
    ) THEN
        RETURN true;
    END IF;

    RETURN false;
END;
$$
LANGUAGE plpgsql;


/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/public/explode_array.sql --<--<--
DROP FUNCTION IF EXISTS explode_array(in_array anyarray);

CREATE FUNCTION explode_array(in_array anyarray) 
RETURNS SETOF anyelement as
$$
    SELECT ($1)[s] FROM generate_series(1,array_upper($1, 1)) AS s;
$$
LANGUAGE sql 
IMMUTABLE;

--select * from explode_array(ARRAY[ROW(1, 1)::FOO_TYPE,ROW(1, 1)::FOO_TYPE])

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.are_sales_orders_already_merged.sql --<--<--
CREATE FUNCTION transactions.are_sales_orders_already_merged(VARIADIC arr bigint[])
RETURNS boolean
AS
$$
BEGIN
    IF
    (
        SELECT 
        COUNT(*) 
        FROM transactions.stock_master_non_gl_relations
        WHERE non_gl_stock_master_id = any($1)
    ) > 0 THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;   



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.are_sales_quotations_already_merged.sql --<--<--
CREATE FUNCTION transactions.are_sales_quotations_already_merged(VARIADIC arr bigint[])
RETURNS boolean
AS
$$
BEGIN
    IF
    (
        SELECT 
        COUNT(*) 
        FROM transactions.non_gl_stock_master_relations 
        WHERE quotation_non_gl_stock_master_id = any($1)
    ) > 0 THEN
        RETURN true;
    END IF;

    IF
    (
        SELECT 
        COUNT(*) 
        FROM transactions.stock_master_non_gl_relations
        WHERE non_gl_stock_master_id = any($1)
    ) > 0 THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;   



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.contains_incompatible_taxes.sql --<--<--
DROP FUNCTION IF EXISTS transactions.contains_incompatible_taxes(VARIADIC arr bigint[]);


CREATE FUNCTION transactions.contains_incompatible_taxes(VARIADIC arr bigint[])
RETURNS boolean
AS
$$
BEGIN
    IF
    (
        SELECT COUNT(DISTINCT non_taxable) FROM transactions.non_gl_stock_master
        WHERE non_gl_stock_master_id = any($1)
    ) > 1 THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;   





-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.get_default_currency_code.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_default_currency_code(cash_repository_id integer);

CREATE FUNCTION transactions.get_default_currency_code(cash_repository_id integer)
RETURNS national character varying(12)
AS
$$
BEGIN
    RETURN
    (
        SELECT office.offices.currency_code 
        FROM office.cash_repositories
        INNER JOIN office.offices
        ON office.offices.office_id = office.cash_repositories.office_id
        WHERE office.cash_repositories.cash_repository_id=$1
        
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.get_default_currency_code_by_office_id.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_default_currency_code_by_office_id(office_id integer);

CREATE FUNCTION transactions.get_default_currency_code_by_office_id(office_id integer)
RETURNS national character varying(12)
AS
$$
BEGIN
    RETURN
    (
        SELECT office.offices.currency_code 
        FROM office.offices
        WHERE office.offices.office_id = $1
        
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.get_exchange_rate.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_exchange_rate(office_id integer, currency_code national character varying(12));

CREATE FUNCTION transactions.get_exchange_rate(office_id integer, currency_code national character varying(12))
RETURNS decimal_strict2
AS
$$
    DECLARE _local_currency_code national character varying(12)= '';
    DECLARE _unit integer_strict2 = 0;
    DECLARE _exchange_rate decimal_strict2=0;
BEGIN
    SELECT office.offices.currency_code
    INTO _local_currency_code
    FROM office.offices
    WHERE office.offices.office_id=$1;

    IF(_local_currency_code = $2) THEN
        RETURN 1;
    END IF;

    SELECT unit, exchange_rate
    INTO _unit, _exchange_rate
    FROM core.exchange_rate_details
    INNER JOIN core.exchange_rates
    ON core.exchange_rate_details.exchange_rate_id = core.exchange_rates.exchange_rate_id
    WHERE core.exchange_rates.office_id=$1
    AND foreign_currency_code=$2;

    IF(_unit = 0) THEN
        RETURN 0;
    END IF;
    
    RETURN _exchange_rate/_unit;    
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS transactions.get_exchange_rate(office_id integer, source_currency_code national character varying(12), destination_currency_code national character varying(12));

CREATE FUNCTION transactions.get_exchange_rate(office_id integer, source_currency_code national character varying(12), destination_currency_code national character varying(12))
RETURNS decimal_strict2
AS
$$
    DECLARE _unit integer_strict2 = 0;
    DECLARE _exchange_rate decimal_strict2=0;
    DECLARE _from_source_currency decimal_strict2=0;
    DECLARE _from_destination_currency decimal_strict2=0;
BEGIN
    IF($2 = $3) THEN
        RETURN 1;
    END IF;


    _from_source_currency := transactions.get_exchange_rate($1, $2);
    _from_destination_currency := transactions.get_exchange_rate($1, $3);
        
    RETURN _from_source_currency / _from_destination_currency ; 
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.get_invoice_amount.sql --<--<--

CREATE FUNCTION transactions.get_invoice_amount(transaction_master_id_ bigint)
RETURNS money_strict2
AS
$$
DECLARE _shipping_charge money_strict2;
DECLARE _stock_total money_strict2;
BEGIN
    SELECT SUM((quantity * price) + tax - discount) INTO _stock_total
    FROM transactions.stock_details
    WHERE transactions.stock_details.stock_master_id =
    (
        SELECT transactions.stock_master.stock_master_id
        FROM transactions.stock_master WHERE transactions.stock_master.transaction_master_id= $1
    );

    SELECT shipping_charge INTO _shipping_charge
    FROM transactions.stock_master
    WHERE transactions.stock_master.transaction_master_id=$1;

    RETURN COALESCE(_stock_total + _shipping_charge, 0::money_strict2); 
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.get_new_transaction_counter.sql --<--<--

/*******************************************************************
    THIS FUNCTION RETURNS A NEW INCREMENTAL COUNTER SUBJECT 
    TO BE USED TO GENERATE TRANSACTION CODES
*******************************************************************/

CREATE FUNCTION transactions.get_new_transaction_counter(date)
RETURNS integer
AS
$$
    DECLARE _ret_val integer;
BEGIN
    SELECT INTO _ret_val
        COALESCE(MAX(transaction_counter),0)
    FROM transactions.transaction_master
    WHERE value_date=$1;

    IF _ret_val IS NULL THEN
        RETURN 1::integer;
    ELSE
        RETURN (_ret_val + 1)::integer;
    END IF;
END;
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.get_stock_master_id_by_transaction_master_id.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_stock_master_id_by_transaction_master_id(_stock_master_id bigint);

CREATE FUNCTION transactions.get_stock_master_id_by_transaction_master_id(_stock_master_id bigint)
RETURNS bigint
AS
$$
BEGIN
        RETURN
        (
                SELECT transactions.stock_master.stock_master_id
                FROM transactions.stock_master
                WHERE transactions.stock_master.transaction_master_id=$1
        );
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.get_transaction_code.sql --<--<--
CREATE FUNCTION transactions.get_transaction_code(value_date date, office_id integer, user_id integer, login_id bigint)
RETURNS text
AS
$$
    DECLARE _office_id bigint:=$2;
    DECLARE _user_id integer:=$3;
    DECLARE _login_id bigint:=$4;
    DECLARE _ret_val text;  
BEGIN
    _ret_val:= transactions.get_new_transaction_counter($1)::text || '-' || TO_CHAR($1, 'YYYY-MM-DD') || '-' || CAST(_office_id as text) || '-' || CAST(_user_id as text) || '-' || CAST(_login_id as text)   || '-' ||  TO_CHAR(now(), 'HH24-MI-SS');
    RETURN _ret_val;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.get_transaction_master_id_by_stock_master_id.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_transaction_master_id_by_stock_master_id(_stock_master_id bigint);

CREATE FUNCTION transactions.get_transaction_master_id_by_stock_master_id(_stock_master_id bigint)
RETURNS bigint
AS
$$
BEGIN
        RETURN
        (
                SELECT transactions.stock_master.transaction_master_id
                FROM transactions.stock_master
                WHERE transactions.stock_master.stock_master_id=$1
        );
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.has_nexus.sql --<--<--
CREATE FUNCTION transactions.has_nexus(_state_id integer)
RETURNS boolean
AS
$$
BEGIN
    RETURN false;--Todo
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.is_normally_debit.sql --<--<--
DROP FUNCTION IF EXISTS transactions.is_normally_debit(_account_id bigint);

CREATE FUNCTION transactions.is_normally_debit(_account_id bigint)
RETURNS boolean
AS
$$
BEGIN
    RETURN
        core.account_masters.normally_debit
    FROM  core.accounts
    INNER JOIN core.account_masters
    ON core.accounts.account_master_id = core.account_masters.account_master_id
    WHERE account_id = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.is_purchase.sql --<--<--
DROP FUNCTION IF EXISTS transactions.is_purchase(_transaction_master_id bigint);

CREATE FUNCTION transactions.is_purchase(_transaction_master_id bigint)
RETURNS boolean
AS
$$
BEGIN
        IF EXISTS
        (
                SELECT * FROM transactions.transaction_master
                WHERE transactions.transaction_master.transaction_master_id = $1
                AND book IN ('Purchase.Direct', 'Purchase.Receipt')
        ) THEN
                RETURN true;
        END IF;

        RETURN false;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.is_valid_party_by_stock_master_id.sql --<--<--
DROP FUNCTION IF EXISTS transactions.is_valid_party_by_stock_master_id(_stock_master_id bigint, _party_id bigint);

CREATE FUNCTION transactions.is_valid_party_by_stock_master_id(_stock_master_id bigint, _party_id bigint)
RETURNS boolean
AS
$$
BEGIN
        IF EXISTS(SELECT * FROM transactions.stock_master WHERE stock_master_id=$1 AND party_id=$2) THEN
                RETURN true;
        END IF;

        RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.is_valid_party_by_transaction_master_id.sql --<--<--
DROP FUNCTION IF EXISTS transactions.is_valid_party_by_transaction_master_id(_transaction_master_id bigint, _party_id bigint);

CREATE FUNCTION transactions.is_valid_party_by_transaction_master_id(_transaction_master_id bigint, _party_id bigint)
RETURNS boolean
AS
$$
BEGIN
        IF EXISTS(SELECT * FROM transactions.stock_master WHERE transaction_master_id=$1 AND party_id=$2) THEN
                RETURN true;
        END IF;

        RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.is_valid_stock_transaction_by_stock_master_id.sql --<--<--
DROP FUNCTION IF EXISTS transactions.is_valid_stock_transaction_by_stock_master_id(_stock_master_id bigint);

CREATE FUNCTION transactions.is_valid_stock_transaction_by_stock_master_id(_stock_master_id bigint)
RETURNS boolean
AS
$$
BEGIN
        IF EXISTS(SELECT * FROM transactions.stock_master WHERE stock_master_id=$1) THEN
                RETURN true;
        END IF;

        RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/02.functions-and-logic/transactions/transactions.is_valid_stock_transaction_by_transaction_master_id.sql --<--<--
DROP FUNCTION IF EXISTS transactions.is_valid_stock_transaction_by_transaction_master_id(_transaction_master_id bigint);

CREATE FUNCTION transactions.is_valid_stock_transaction_by_transaction_master_id(_transaction_master_id bigint)
RETURNS boolean
AS
$$
BEGIN
        IF EXISTS(SELECT * FROM transactions.stock_master WHERE transaction_master_id=$1) THEN
                RETURN true;
        END IF;

        RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/04.default-values/default.sql --<--<--
INSERT INTO core.attachment_lookup(book, resource, resource_key)
SELECT 'transaction',           'transactions.transaction_master',  'transaction_master_id' UNION ALL
SELECT 'non-gl-transaction',    'transactions.non_gl_stock_master', 'non_gl_stock_master_id';


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/04.default-values/policy-config.sql --<--<--
--This table should not be localized
INSERT INTO core.config
SELECT 1, 'Inventory System' UNION ALL
SELECT 2, 'COGS Calculation Method';

--This table should not be localized
INSERT INTO office.configuration(config_id, office_id, value, configuration_details)
SELECT 1, office_id, 'Perpetual', ''
FROM office.offices
WHERE parent_office_id IS NOT NULL;

--This table should not be localized
INSERT INTO office.configuration(config_id, office_id, value, configuration_details)
SELECT 2, office_id, 'LIFO', ''
FROM office.offices
WHERE parent_office_id IS NOT NULL;





-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/04.default-values/widgets.sql --<--<--
--This table should not be localized.
INSERT INTO core.widgets(widget_name, widget_source, row_number, column_number)
SELECT 'SalesByGeographyWidget',                    '/Modules/Sales/Widgets/SalesByGeographyWidget.ascx',                   1, 1 UNION ALL
SELECT 'SalesByOfficeWidget',                       '/Modules/Sales/Widgets/SalesByOfficeWidget.ascx',                      2, 1 UNION ALL
SELECT 'CurrentOfficeSalesByMonthWidget',           '/Modules/Sales/Widgets/CurrentOfficeSalesByMonthWidget.ascx',          2, 2 UNION ALL
SELECT 'OfficeInformationWidget',                   '/Modules/BackOffice/Widgets/OfficeInformationWidget.ascx',             3, 1 UNION ALL
SELECT 'LinksWidget',                               '/Modules/BackOffice/Widgets/LinksWidget.ascx',                         3, 2 UNION ALL
SELECT 'WorkflowWidget',                            '/Modules/Finance/Widgets/WorkflowWidget.ascx',                         3, 4 UNION ALL
SELECT 'TopSellingProductOfAllTimeWidget',          '/Modules/Sales/Widgets/TopSellingProductOfAllTimeWidget.ascx',         4, 1 UNION ALL
SELECT 'TopSellingProductOfAllTimeCurrentWidget',   '/Modules/Sales/Widgets/TopSellingProductOfAllTimeCurrentWidget.ascx',  4, 2;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.account_scrud_view.sql --<--<--
CREATE VIEW core.account_scrud_view
AS
SELECT
    core.accounts.account_id,
    core.account_masters.account_master_code || ' (' || core.account_masters.account_master_name || ')' AS account_master,
    core.accounts.account_number,
    core.accounts.external_code,
	core.currencies.currency_code || ' ('|| core.currencies.currency_name|| ')' currency,
    core.accounts.account_name,
    core.accounts.description,
	core.accounts.confidential,
	core.accounts.is_transaction_node,
    core.accounts.sys_type,
    parent_account.account_number || ' (' || parent_account.account_name || ')' AS parent
    
FROM core.accounts
INNER JOIN core.account_masters
ON core.account_masters.account_master_id=core.accounts.account_master_id
INNER JOIN core.currencies
ON core.accounts.currency_code = core.currencies.currency_code
LEFT JOIN core.accounts parent_account
ON parent_account.account_id=core.accounts.parent_account_id
WHERE NOT core.accounts.sys_type;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.ageing_slab_scrud_view.sql --<--<--
CREATE VIEW core.ageing_slab_scrud_view
AS
SELECT 
  ageing_slabs.ageing_slab_id, 
  ageing_slabs.ageing_slab_name, 
  ageing_slabs.from_days, 
  ageing_slabs.to_days
FROM 
  core.ageing_slabs;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.bank_accounts_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.bank_accounts_scrud_view;
CREATE VIEW core.bank_accounts_scrud_view
AS
SELECT 
    core.bank_accounts.account_id,
    office.users.user_name,
    office.offices.office_code || '(' || office.offices.office_name||')' AS office_name,
	core.bank_accounts.bank_name,
	core.bank_accounts.bank_branch,
	core.bank_accounts.bank_contact_number,
	core.bank_accounts.bank_address,
	core.bank_accounts.bank_account_number,
	core.bank_accounts.bank_account_type,
	core.bank_accounts.relationship_officer_name
FROM
    core.bank_accounts
INNER JOIN office.users
ON core.bank_accounts.maintained_by_user_id = office.users.user_id
INNER JOIN office.offices
ON core.bank_accounts.office_id = office.offices.office_id; 

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.bonus_slab_detail_scrud_view.sql --<--<--
CREATE VIEW core.bonus_slab_detail_scrud_view
AS
SELECT
    bonus_slab_detail_id,
    core.bonus_slab_details.bonus_slab_id,
    core.bonus_slabs.bonus_slab_name AS slab_name,
    amount_from,
    amount_to,
    bonus_rate
FROM
    core.bonus_slab_details,
    core.bonus_slabs
WHERE
    core.bonus_slab_details.bonus_slab_id = core.bonus_slabs.bonus_slab_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.bonus_slab_scrud_view.sql --<--<--
CREATE VIEW core.bonus_slab_scrud_view
AS
SELECT
    core.bonus_slabs.bonus_slab_id,
    core.bonus_slabs.bonus_slab_code,
    core.bonus_slabs.bonus_slab_name,
    core.bonus_slabs.effective_from,
    core.bonus_slabs.ends_on,
    core.frequencies.frequency_code || '('||core.frequencies.frequency_name||')' AS checking_frequency
FROM
core.bonus_slabs
INNER JOIN core.frequencies
ON core.bonus_slabs.checking_frequency_id = core.frequencies.frequency_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.brand_scrud_view.sql --<--<--
CREATE VIEW core.brand_scrud_view
AS
SELECT 
        brand_id,
        brand_code,
        brand_name
FROM core.brands;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.cash_flow_heading_scrud_view.sql --<--<--
CREATE VIEW core.cash_flow_heading_scrud_view
AS
SELECT 
  core.cash_flow_headings.cash_flow_heading_id, 
  core.cash_flow_headings.cash_flow_heading_code, 
  core.cash_flow_headings.cash_flow_heading_name, 
  core.cash_flow_headings.cash_flow_heading_type, 
  core.cash_flow_headings.is_debit, 
  core.cash_flow_headings.is_sales, 
  core.cash_flow_headings.is_purchase
FROM 
  core.cash_flow_headings;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.cash_flow_setup_scrud_view.sql --<--<--
CREATE VIEW core.cash_flow_setup_scrud_view
AS
SELECT 
 core.cash_flow_setup.cash_flow_setup_id, 
 core.cash_flow_headings.cash_flow_heading_code || '('|| core.cash_flow_headings.cash_flow_heading_name||')' AS cash_flow_heading, 
 core.account_masters.account_master_code || '('|| core.account_masters.account_master_name||')' AS account_master
FROM 
core.cash_flow_setup
INNER JOIN core.cash_flow_headings
ON  core.cash_flow_setup.cash_flow_heading_id =core.cash_flow_headings.cash_flow_heading_id
INNER JOIN core.account_masters
ON core.cash_flow_setup.account_master_id = core.account_masters.account_master_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.compound_item_detail_scrud_view.sql --<--<--
CREATE VIEW core.compound_item_detail_scrud_view
AS
SELECT
        compound_item_detail_id,
        core.compound_item_details.compound_item_id,
        core.compound_items.compound_item_code,
        core.compound_items.compound_item_name,
        item_id,
        core.get_item_name_by_item_id(item_id) AS item,
        core.get_unit_name_by_unit_id(unit_id) AS unit,
        quantity
FROM core.compound_item_details
INNER JOIN core.compound_items
ON core.compound_item_details.compound_item_id = core.compound_items.compound_item_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.compound_item_scrud_view.sql --<--<--
CREATE VIEW core.compound_item_scrud_view
AS
SELECT 
        compound_item_id,
        compound_item_code,
        compound_item_name
FROM core.compound_items;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.compound_unit_scrud_view.sql --<--<--
CREATE VIEW core.compound_unit_scrud_view
AS
SELECT
    compound_unit_id,
    base_unit.unit_name base_unit_name,
    value,
    compare_unit.unit_name compare_unit_name
FROM
    core.compound_units,
    core.units base_unit,
    core.units compare_unit
WHERE
    core.compound_units.base_unit_id = base_unit.unit_id
AND
    core.compound_units.compare_unit_id = compare_unit.unit_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.country_scrud_view.sql --<--<--
CREATE VIEW core.country_scrud_view
AS
SELECT 
  core.countries.country_id, 
  core.countries.country_code, 
  core.countries.country_name
FROM 
  core.countries;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.county_sales_tax_scrud_view.sql --<--<--
CREATE VIEW core.county_sales_tax_scrud_view
AS
SELECT 
    core.county_sales_taxes.county_sales_tax_id,   
    core.county_sales_taxes.county_sales_tax_code,
    core.county_sales_taxes.county_sales_tax_name,
    core.counties.county_code ||'('||  core.counties.county_name || ')' AS county,
    core.entities.entity_name,
    core.industries.industry_name,
    core.item_groups.item_group_code ||'(' ||  core.item_groups.item_group_name  || ')' AS item_group,
    core.county_sales_taxes.rate
FROM
    core.county_sales_taxes
LEFT JOIN core.counties
ON core.county_sales_taxes.county_id=core.counties.county_id
LEFT JOIN core.entities
ON core.county_sales_taxes.entity_id=core.entities.entity_id
LEFT JOIN core.industries
ON core.county_sales_taxes.industry_id=core.industries.industry_id
LEFT JOIN core.item_groups
ON core.county_sales_taxes.item_group_id=core.item_groups.item_group_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.county_scrud_view.sql --<--<--
CREATE VIEW core.county_scrud_view
AS
SELECT 
  core.counties.county_id, 
  core.counties.county_code, 
  core.counties.county_name, 
  core.states.state_code || '('|| core.states.state_name||')' AS state
FROM 
  core.counties
INNER JOIN  core.states
ON core.counties.state_id = core.states.state_id;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.currency_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.currency_scrud_view;
CREATE VIEW core.currency_scrud_view
AS
SELECT 
  core.currencies.currency_code, 
  core.currencies.currency_symbol, 
  core.currencies.currency_name, 
  core.currencies.hundredth_name
FROM 
  core.currencies;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.entity_scrud_view.sql --<--<--
CREATE VIEW core.entity_scrud_view
AS
SELECT
core.entities.entity_id,
core.entities.entity_name
FROM
core.entities; 

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.fiscal_year_scrud_view.sql --<--<--
CREATE VIEW core.fiscal_year_scrud_view
AS
SELECT 
  core.fiscal_year.fiscal_year_code, 
  core.fiscal_year.fiscal_year_name, 
  core.fiscal_year.starts_from, 
  core.fiscal_year.ends_on
FROM 
  core.fiscal_year;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.flag_type_scrud_view.sql --<--<--
CREATE VIEW core.flag_type_scrud_view
AS
SELECT 
  flag_types.flag_type_id, 
  flag_types.flag_type_name, 
  flag_types.background_color, 
  flag_types.foreground_color
FROM 
  core.flag_types;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.frequency_setup_scrud_view.sql --<--<--
CREATE VIEW core.frequency_setup_scrud_view
AS
SELECT 
        frequency_setup_id,
        fiscal_year_code,
        value_date,
        core.get_frequency_code_by_frequency_id(frequency_id) AS frequency_code
FROM core.frequency_setups;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.industry_scrud_view.sql --<--<--
CREATE VIEW core.industry_scrud_view
AS          
SELECT 
    core.industries.industry_id, 
    core.industries.industry_name,
    parent_industry.industry_name AS parent_industry_name
FROM core.industries
LEFT JOIN core.industries AS parent_industry
ON core.industries.parent_industry_id = parent_industry.industry_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.item_cost_price_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.item_cost_price_scrud_view;

CREATE VIEW core.item_cost_price_scrud_view
AS
SELECT
    core.item_cost_prices.item_cost_price_id,
    core.items.item_code,
    core.items.item_name,
    core.parties.party_code,
    core.parties.party_name,
    unit_code || ' (' || unit_name || ')' AS unit,
    core.item_cost_prices.price
FROM 
core.item_cost_prices
INNER JOIN core.items
ON core.item_cost_prices.item_id = core.items.item_id
INNER JOIN core.units
ON core.item_cost_prices.unit_id = core.units.unit_id
LEFT JOIN core.parties
ON core.item_cost_prices.party_id = core.parties.party_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.item_group_scrud_view.sql --<--<--
CREATE VIEW core.item_group_scrud_view
AS
SELECT 
        core.item_groups.item_group_id,
        core.item_groups.item_group_code,
        core.item_groups.item_group_name,
        core.item_groups.exclude_from_purchase,
        core.item_groups.exclude_from_sales,
        sales_tax_code || ' (' || sales_tax_name || ')' AS sales_tax,
        parent_item_group.item_group_code || ' (' || parent_item_group.item_group_name || ')' AS parent        
FROM core.item_groups
INNER JOIN core.sales_taxes
ON core.item_groups.sales_tax_id = sales_taxes.sales_tax_id
LEFT JOIN core.item_groups AS parent_item_group
ON core.item_groups.parent_item_group_id = parent_item_group.item_group_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.item_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.item_scrud_view;

CREATE VIEW core.item_scrud_view
AS
SELECT 
        item_id,
        item_code,
        item_name,
        item_group_code || ' (' || item_group_name || ')' AS item_group,
        maintain_stock,
        brand_code || ' (' || brand_name || ')' AS brand,
        party_code || ' (' || party_name || ')' AS preferred_supplier,
        lead_time_in_days,
        weight_in_grams,
        width_in_centimeters,
        height_in_centimeters,
        length_in_centimeters,
        machinable,
        shipping_mail_type_code || ' (' || shipping_mail_type_name || ')' AS preferred_shipping_mail_type,
        shipping_package_shape_code || ' (' || shipping_package_shape_name || ')' AS preferred_shipping_package_shape,
        core.units.unit_code || ' (' || core.units.unit_name || ')' AS unit,
        hot_item,
        cost_price,
        cost_price_includes_tax,
        selling_price,
        selling_price_includes_tax,
        sales_tax_code || ' (' || sales_tax_name || ')' AS sales_tax,
        reorder_unit.unit_code || ' (' || reorder_unit.unit_name || ')' AS reorder_unit,
        reorder_level,
        reorder_quantity
FROM core.items
INNER JOIN core.item_groups
ON core.items.item_group_id = core.item_groups.item_group_id
INNER JOIN core.brands
ON core.items.brand_id = core.brands.brand_id
INNER JOIN core.parties
ON core.items.preferred_supplier_id = core.parties.party_id
INNER JOIN core.units
ON core.items.unit_id = core.units.unit_id
INNER JOIN core.units AS reorder_unit
ON core.items.reorder_unit_id = reorder_unit.unit_id
INNER JOIN core.sales_taxes
ON core.items.sales_tax_id = core.sales_taxes.sales_tax_id
LEFT JOIN core.shipping_mail_types
ON core.items.preferred_shipping_mail_type_id = core.shipping_mail_types.shipping_mail_type_id
LEFT JOIN core.shipping_package_shapes
ON core.items.shipping_package_shape_id = core.shipping_package_shapes.shipping_package_shape_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.item_selling_price_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.item_selling_price_scrud_view;

CREATE VIEW core.item_selling_price_scrud_view
AS
SELECT
    core.item_selling_prices.item_selling_price_id,
    core.items.item_code,
    core.items.item_name,
    core.party_types.party_type_code,
    core.party_types.party_type_name,
    unit_code || ' (' || unit_name || ')' AS unit,
    price
FROM
    core.item_selling_prices
INNER JOIN  core.items
ON core.item_selling_prices.item_id = core.items.item_id
INNER JOIN core.units
ON core.item_selling_prices.unit_id = core.units.unit_id
LEFT JOIN core.price_types
ON core.item_selling_prices.price_type_id = core.price_types.price_type_id
LEFT JOIN core.party_types
ON  core.item_selling_prices.party_type_id = core.party_types.party_type_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.item_type_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.item_type_scrud_view;
CREATE VIEW core.item_type_scrud_view
AS
SELECT 
  core.item_types.item_type_id, 
  core.item_types.item_type_code, 
  core.item_types.item_type_name
FROM 
  core.item_types;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.late_fee_scrud_view.sql --<--<--
CREATE VIEW core.late_fee_scrud_view
AS
SELECT 
  late_fee.late_fee_id, 
  late_fee.late_fee_code, 
  late_fee.late_fee_name, 
  late_fee.is_flat_amount, 
  late_fee.rate
FROM 
  core.late_fee;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.party_scrud_view.sql --<--<--
CREATE VIEW core.party_scrud_view
AS
SELECT
    core.parties.party_id,
    core.party_types.party_type_id,
    core.party_types.is_supplier,
    core.party_types.party_type_code || ' (' || core.party_types.party_type_name || ')' AS party_type,
    core.parties.party_code,
    core.parties.first_name,
    core.parties.middle_name,
    core.parties.last_name,
    core.parties.party_name,
    core.parties.zip_code,
    core.parties.address_line_1,
    core.parties.address_line_2,
    core.parties.street,
    core.parties.city,
    core.get_state_name_by_state_id(core.parties.state_id) AS state,
    core.get_country_name_by_country_id(core.parties.country_id) AS country,
    core.parties.allow_credit,
    core.parties.maximum_credit_period,
    core.parties.maximum_credit_amount,
    core.parties.pan_number,
    core.parties.sst_number,
    core.parties.cst_number,
    core.parties.phone,
    core.parties.fax,
    core.parties.cell,
    core.parties.email,
    core.parties.url,
    core.accounts.account_id,
    core.accounts.account_number,
    core.accounts.account_number || ' (' || core.accounts.account_name || ')' AS gl_head
FROM
core.parties
INNER JOIN
core.party_types
ON core.parties.party_type_id = core.party_types.party_type_id
INNER JOIN core.accounts
ON core.parties.account_id=core.accounts.account_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.party_type_scrud_view.sql --<--<--
CREATE VIEW core.party_type_scrud_view
AS
SELECT 
        party_type_id,
        party_type_code,
        party_type_name,
        is_supplier
FROM core.party_types;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.payment_term_scrud_view.sql --<--<--
CREATE VIEW core.payment_term_scrud_view
AS
SELECT
    core.payment_terms.payment_term_id,
    core.payment_terms.payment_term_code,
    core.payment_terms.payment_term_name,
    core.payment_terms.due_on_date,
    core.payment_terms.due_days,
    due_frequency.frequency_code || ' (' || due_frequency.frequency_name || ')' AS due_frequency,
    core.payment_terms.grace_peiod,
    core.late_fee.late_fee_code || '(' || core.late_fee.late_fee_name || ')' AS late_fee,
    late_fee_posting_frequency.frequency_code || ' (' || late_fee_posting_frequency.frequency_name || ')' AS late_fee_posting_frequency
FROM core.payment_terms
LEFT JOIN core.frequencies AS due_frequency
ON core.payment_terms.due_frequency_id=due_frequency.frequency_id
LEFT JOIN core.frequencies AS late_fee_posting_frequency 
ON core.payment_terms.late_fee_posting_frequency_id=late_fee_posting_frequency.frequency_id
LEFT JOIN core.late_fee
ON core.payment_terms.late_fee_id=core.late_fee.late_fee_id;





-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.recurring_invoice_scrud_view.sql --<--<--
CREATE VIEW core.recurring_invoice_scrud_view
AS
SELECT 
  core.recurring_invoices.recurring_invoice_id, 
  core.recurring_invoices.recurring_invoice_code, 
  core.recurring_invoices.recurring_invoice_name,
  core.items.item_code || '('|| core.items.item_name||')' AS item,
  core.compound_items.compound_item_code || ' (' || core.compound_items.compound_item_name || ')' AS compound_item,
  core.frequencies.frequency_code || '('|| core.frequencies.frequency_name||')' AS recurring_frequency,
  core.recurring_invoices.recurring_amount, 
  core.recurring_invoices.auto_trigger_on_sales
FROM 
  core.recurring_invoices
LEFT JOIN core.items 
ON core.recurring_invoices.item_id = core.items.item_id
INNER JOIN core.frequencies
ON core.recurring_invoices.recurring_frequency_id = core.frequencies.frequency_id
LEFT JOIN core.compound_items
ON core.recurring_invoices.compound_item_id=core.compound_items.compound_item_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.recurring_invoice_setup_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.recurring_invoice_setup_scrud_view;
CREATE VIEW core.recurring_invoice_setup_scrud_view
AS
SELECT 
  core.recurring_invoice_setup.recurring_invoice_setup_id, 
  core.recurring_invoices.recurring_invoice_code || ' (' || core.recurring_invoices.recurring_invoice_name || ')' AS recurring_invoice,
  core.parties.party_code || ' (' || core.parties.party_name || ')' AS party,
  core.recurring_invoice_setup.starts_from, 
  core.recurring_invoice_setup.ends_on, 
  core.recurring_invoice_setup.recurring_amount, 
  core.payment_terms.payment_term_code || ' (' || core.payment_terms.payment_term_name || ')' AS payment_term
FROM 
  core.recurring_invoice_setup
INNER JOIN core.recurring_invoices
ON core.recurring_invoice_setup.recurring_invoice_id = core.recurring_invoices.recurring_invoice_id
INNER JOIN core.parties ON 
core.recurring_invoice_setup.party_id = core.parties.party_id
INNER JOIN core.payment_terms ON 
core.recurring_invoice_setup.payment_term_id = core.payment_terms.payment_term_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.sales_tax_detail_scrud_view.sql --<--<--
CREATE VIEW core.sales_tax_detail_scrud_view
AS
SELECT 
  core.sales_tax_details.sales_tax_detail_id, 
  core.sales_taxes.sales_tax_code || ' ('|| core.sales_taxes.sales_tax_name||')' AS sales_tax,
  core.sales_tax_types.sales_tax_type_code || ' ('|| core.sales_tax_types.sales_tax_type_name||')' AS sales_tax_type, 
  core.sales_tax_details.priority,
  core.sales_tax_details.sales_tax_detail_code, 
  core.sales_tax_details.sales_tax_detail_name, 
  core.sales_tax_details.based_on_shipping_address, 
  core.sales_tax_details.check_nexus, 
  core.sales_tax_details.applied_on_shipping_charge, 
  core.state_sales_taxes.state_sales_tax_code || ' ('|| core.state_sales_taxes.state_sales_tax_name||')' AS state_sales_tax, 
  core.county_sales_taxes.county_sales_tax_code || ' (' || core.county_sales_taxes.county_sales_tax_name||')' AS county_sales_tax, 
  core.tax_rate_types.tax_rate_type_code || '('|| core.tax_rate_types.tax_rate_type_name||')' AS tax_rate_type,  
  core.sales_tax_details.rate,
  reporting_tax_authority.tax_authority_code || ' (' || reporting_tax_authority.tax_authority_name||')' AS reporting_tax_authority, 
  collecting_tax_authority.tax_authority_code || ' (' || collecting_tax_authority.tax_authority_name||')' AS collecting_tax_authority,
  collecting_account.account_number || '  ('|| collecting_account.account_name||')' AS collecting_account,
  use_tax_collecting_account.account_number || '  ('|| use_tax_collecting_account.account_name||')' AS use_tax_collecting_account,
  core.rounding_methods.rounding_method_code || '('|| core.rounding_methods.rounding_method_name||')' AS rounding_method,
  core.sales_tax_details.rounding_decimal_places

FROM 
   core.sales_tax_details
INNER JOIN core.sales_taxes
ON core.sales_tax_details.sales_tax_id = core.sales_taxes.sales_tax_id 
INNER JOIN core.sales_tax_types
ON core.sales_tax_details.sales_tax_type_id = core.sales_tax_types.sales_tax_type_id
LEFT JOIN core.state_sales_taxes
ON core.sales_tax_details.state_sales_tax_id = core.state_sales_taxes.state_sales_tax_id
LEFT JOIN core.county_sales_taxes
ON core.sales_tax_details.county_sales_tax_id = core.county_sales_taxes.county_sales_tax_id
INNER JOIN core.tax_rate_types
ON  core.sales_tax_details.tax_rate_type_code  = core.tax_rate_types.tax_rate_type_code
INNER JOIN core.tax_authorities AS reporting_tax_authority
ON core.sales_tax_details.reporting_tax_authority_id = reporting_tax_authority.tax_authority_id
INNER JOIN core.tax_authorities AS collecting_tax_authority
ON core.sales_tax_details.collecting_tax_authority_id = collecting_tax_authority.tax_authority_id
INNER JOIN core.accounts AS collecting_account
ON core.sales_tax_details.collecting_account_id = collecting_account.account_id
LEFT JOIN core.accounts AS use_tax_collecting_account
ON core.sales_tax_details.use_tax_collecting_account_id = use_tax_collecting_account.account_id
LEFT JOIN core.rounding_methods
ON core.sales_tax_details.rounding_method_code = core.rounding_methods.rounding_method_code;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.sales_tax_exempt_detail_scrud_view.sql --<--<--
CREATE VIEW core.sales_tax_exempt_detail_scrud_view
AS
SELECT 
  core.sales_tax_exempt_details.sales_tax_exempt_detail_id, 
  core.sales_tax_exempts.sales_tax_exempt_code || '('|| core.sales_tax_exempts.sales_tax_exempt_name ||')' AS sales_tax_exempt,  
  core.entities.entity_name, 
  core.industries.industry_name, 
  core.parties.party_code || '(' || core.parties.party_name ||')' AS party, 
  core.party_types.party_type_code || '('|| core.party_types.party_type_name ||')' AS party_type, 
  core.items.item_code || '('|| core.items.item_name ||')' AS item, 
  core.item_groups.item_group_code || '('|| core.item_groups.item_group_name ||')' AS item_group
FROM 
  core.sales_tax_exempt_details
LEFT JOIN core.sales_tax_exempts
ON core.sales_tax_exempt_details.sales_tax_exempt_id = core.sales_tax_exempts.sales_tax_exempt_id
LEFT JOIN core.entities
ON core.sales_tax_exempt_details.entity_id = core.entities.entity_id
LEFT JOIN core.industries
ON core.sales_tax_exempt_details.industry_id = core.industries.industry_id
LEFT JOIN  core.parties
ON core.sales_tax_exempt_details.party_id = core.parties.party_id
LEFT JOIN core.party_types
ON core.sales_tax_exempt_details.party_type_id = core.party_types.party_type_id
LEFT JOIN core.items
ON core.sales_tax_exempt_details.item_id = core.items.item_id
LEFT JOIN core.item_groups
ON core.sales_tax_exempt_details.item_group_id = core.item_groups.item_group_id;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.sales_tax_exempt_scrud_view.sql --<--<--
CREATE VIEW core.sales_tax_exempt_scrud_view
AS 
SELECT 
  core.sales_tax_exempts.sales_tax_exempt_id, 
  core.tax_master.tax_master_code || '('|| core.tax_master.tax_master_name||')' AS tax_master, 
  core.sales_tax_exempts.sales_tax_exempt_code, 
  core.sales_tax_exempts.sales_tax_exempt_name, 
  core.tax_exempt_types.tax_exempt_type_code || '('|| core.tax_exempt_types.tax_exempt_type_name||')' AS tax_exempt_type,
  office.stores.store_code || '('|| office.stores.store_name||')' AS store,
  core.sales_taxes.sales_tax_code || '('|| core.sales_taxes.sales_tax_name||')' AS sales_tax, 
  core.sales_tax_exempts.valid_from, 
  core.sales_tax_exempts.valid_till, 
  core.sales_tax_exempts.price_from, 
  core.sales_tax_exempts.price_to
FROM 
  core.sales_tax_exempts
INNER JOIN core.tax_master
ON core.sales_tax_exempts.tax_master_id = core.tax_master.tax_master_id
INNER JOIN core.tax_exempt_types
ON core.sales_tax_exempts.tax_exempt_type_id = core.tax_exempt_types.tax_exempt_type_id
INNER JOIN office.stores
ON core.sales_tax_exempts.store_id = office.stores.store_id
INNER JOIN core.sales_taxes
ON core.sales_tax_exempts.sales_tax_id = core.sales_taxes.sales_tax_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.sales_tax_scrud_view.sql --<--<--
CREATE VIEW core.sales_tax_scrud_view
AS
SELECT 
  core.sales_taxes.sales_tax_id, 
  core.tax_master.tax_master_code || ' (' || core.tax_master.tax_master_name||')' AS tax_master, 
  office.offices.office_code || ' (' || offices.office_name||')' AS office, 
  core.sales_taxes.sales_tax_code, 
  core.sales_taxes.sales_tax_name, 
  core.sales_taxes.is_exemption, 
  core.tax_base_amount_types.tax_base_amount_type_code || '('|| core.tax_base_amount_types.tax_base_amount_type_name||')' AS tax_base_amount,
  core.sales_taxes.rate
FROM 
  core.sales_taxes 
INNER JOIN core.tax_master
ON sales_taxes.tax_master_id = tax_master.tax_master_id
INNER JOIN office.offices
ON  sales_taxes.office_id = offices.office_id 
INNER JOIN core.tax_base_amount_types 
ON sales_taxes.tax_base_amount_type_code = tax_base_amount_types.tax_base_amount_type_code;





-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.sales_tax_type_scrud_view.sql --<--<--
CREATE VIEW core.sales_tax_type_scrud_view
AS
SELECT 
  core.sales_tax_types.sales_tax_type_id, 
  core.sales_tax_types.sales_tax_type_code, 
  core.sales_tax_types.sales_tax_type_name, 
  core.sales_tax_types.is_vat
FROM 
  core.sales_tax_types;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.sales_team_scrud_view.sql --<--<--
CREATE VIEW core.sales_team_scrud_view
AS
SELECT 
        sales_team_id,
        sales_team_code,
        sales_team_name
FROM core.sales_teams;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.salesperson_bonus_setup_scrud_view.sql --<--<--
CREATE VIEW core.salesperson_bonus_setup_scrud_view
AS
SELECT
    salesperson_bonus_setup_id,
    salesperson_name,
    bonus_slab_name
FROM
    core.salesperson_bonus_setups,
    core.salespersons,
    core.bonus_slabs
WHERE
    core.salesperson_bonus_setups.salesperson_id = core.salespersons.salesperson_id
AND
    core.salesperson_bonus_setups.bonus_slab_id = core.bonus_slabs.bonus_slab_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.salesperson_scrud_view.sql --<--<--
CREATE VIEW core.salesperson_scrud_view
AS
SELECT
    salesperson_id,
    salesperson_code,
    salesperson_name,
    address,
    contact_number,
    commission_rate,
    account_name
FROM
    core.salespersons,
    core.accounts
WHERE
    core.salespersons.account_id = core.accounts.account_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.shipper_scrud_view.sql --<--<--
CREATE VIEW core.shipper_scrud_view
AS
SELECT
        shipper_id,
        shipper_code,
        company_name,
        shipper_name,
        po_box,
        address_line_1,
        address_line_2,
        street,
        city,
        state,
        country,
        phone,
        fax,
        cell,
        email,
        url,
        contact_person,
        contact_po_box,
        contact_address_line_1,
        contact_address_line_2,
        contact_street,
        contact_city,
        contact_state,
        contact_country,
        contact_email,
        contact_phone,
        contact_cell,
        factory_address,
        pan_number,
        sst_number,
        cst_number,
        account_number || ' (' || account_name || ')' AS account
FROM core.shippers
INNER JOIN core.accounts
ON core.shippers.account_id = core.accounts.account_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.shipping_address_scrud_view.sql --<--<--
CREATE VIEW core.shipping_address_scrud_view
AS
SELECT
    core.shipping_addresses.shipping_address_id,
    core.shipping_addresses.shipping_address_code,
    core.parties.party_code || ' (' || core.parties.party_name || ')' AS party,
    core.shipping_addresses.zip_code,
    core.shipping_addresses.address_line_1,
    core.shipping_addresses.address_line_2,
    core.shipping_addresses.street,
    core.shipping_addresses.city,
    core.get_state_name_by_state_id(core.shipping_addresses.state_id) AS state,
    core.get_country_name_by_country_id(core.shipping_addresses.country_id) AS country
FROM core.shipping_addresses
INNER JOIN core.parties
ON core.shipping_addresses.party_id=core.parties.party_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.state_sales_tax_scrud_view.sql --<--<--
CREATE VIEW core.state_sales_tax_scrud_view
AS
SELECT 
    core.state_sales_taxes.state_sales_tax_id,   
    core.state_sales_taxes.state_sales_tax_code,
    core.state_sales_taxes.state_sales_tax_name,
    core.states.state_code || ' (' ||  core.states.state_name || ')' AS state,
    core.entities.entity_name,
    core.industries.industry_name,
    core.item_groups.item_group_code || ' (' ||  core.item_groups.item_group_name || ')' AS item_group,
    core.state_sales_taxes.rate
FROM
    core.state_sales_taxes
INNER JOIN core.states
ON core.state_sales_taxes.state_id=core.states.state_id
LEFT JOIN core.entities
ON core.state_sales_taxes.entity_id=core.entities.entity_id
LEFT JOIN core.industries
ON core.state_sales_taxes.industry_id=core.industries.industry_id
LEFT JOIN core.item_groups
ON core.state_sales_taxes.item_group_id=core.item_groups.item_group_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.state_scrud_view.sql --<--<--
CREATE VIEW core.state_scrud_view
AS
SELECT 
  core.states.state_id, 
  core.countries.country_code || '('|| core.countries.country_name||')' AS country_name, 
  core.states.state_code, 
  core.states.state_name
FROM 
  core.states
INNER JOIN core.countries
ON core.states.country_id = core.countries.country_id; 






-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.tax_authority_scrud_view.sql --<--<--
CREATE VIEW core.tax_authority_scrud_view
AS
SELECT
	core.tax_authorities.tax_authority_id,
	core.tax_master.tax_master_code || '(' || core.tax_master.tax_master_name ||')' AS tax_master,
	core.tax_authorities.tax_authority_code,
	core.tax_authorities.tax_authority_name,
	core.countries.country_code || '(' || core.countries.country_name ||')' AS country,
	core.states.state_code || '(' || core.states.state_name ||')' AS county,
	core.tax_authorities.zip_code,
	core.tax_authorities.address_line_1,
	core.tax_authorities.address_line_2,
	core.tax_authorities.street,
	core.tax_authorities.city,
	core.tax_authorities.phone,
	core.tax_authorities.fax,
	core.tax_authorities.cell,
	core.tax_authorities.email,
	core.tax_authorities.url	
FROM core.tax_authorities
INNER JOIN core.tax_master
ON core.tax_authorities.tax_master_id = core.tax_master.tax_master_id
INNER JOIN core.countries
ON core.tax_authorities.country_id = core.countries.country_id
LEFT JOIN core.states
ON core.tax_authorities.state_id = core.states.state_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.tax_exempt_type_scrud_view.sql --<--<--
CREATE VIEW core.tax_exempt_type_scrud_view
AS
SELECT 
  tax_exempt_types.tax_exempt_type_id, 
  tax_exempt_types.tax_exempt_type_code, 
  tax_exempt_types.tax_exempt_type_name
FROM 
  core.tax_exempt_types;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.tax_master_scrud_view.sql --<--<--
CREATE VIEW core.tax_master_scrud_view
AS
SELECT 
  tax_master.tax_master_id, 
  tax_master.tax_master_code, 
  tax_master.tax_master_name
FROM 
  core.tax_master;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/core/core.unit_scrud_view.sql --<--<--
CREATE VIEW core.unit_scrud_view
AS
SELECT
        unit_id,
        unit_code,
        unit_name
FROM core.units;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/office/office.cash_repository_scrud_view.sql --<--<--
DROP VIEW IF EXISTS office.cash_repository_scrud_view;
CREATE VIEW office.cash_repository_scrud_view
AS
SELECT
office.cash_repositories.cash_repository_id,
office.offices.office_code || ' (' || office.offices.office_name || ') ' AS office,
office.cash_repositories.cash_repository_code,
office.cash_repositories.cash_repository_name,
parent_cash_repository.cash_repository_code || ' (' || parent_cash_repository.cash_repository_name || ') ' AS parent_cash_repository,
office.cash_repositories.description

FROM office.cash_repositories
INNER JOIN office.offices
ON office.cash_repositories.office_id = office.offices.office_id
LEFT JOIN office.cash_repositories AS parent_cash_repository
ON office.cash_repositories.parent_cash_repository_id = parent_cash_repository.parent_cash_repository_id;






-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/office/office.cost_center_scrud_view.sql --<--<--
CREATE VIEW office.cost_center_scrud_view
AS
SELECT
    office.cost_centers.cost_center_id,
    office.cost_centers.cost_center_code,
    office.cost_centers.cost_center_name
FROM
    office.cost_centers;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/office/office.counter_scrud_view.sql --<--<--
DROP VIEW IF EXISTS office.counter_scrud_view;
CREATE VIEW office.counter_scrud_view
AS
SELECT 
  office.counters.counter_id, 
  office.stores.store_code || '('|| office.stores.store_name||')' AS store,
  office.cash_repositories.cash_repository_code || '('|| office.cash_repositories.cash_repository_name||')' AS cash_repository,
  office.counters.counter_code,
  office.counters.counter_name
FROM 
  office.counters
INNER JOIN office.cash_repositories
ON office.counters.cash_repository_id = office.cash_repositories.cash_repository_id 
INNER JOIN office.stores
ON office.counters.store_id = office.stores.store_id;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/office/office.department_scrud_view.sql --<--<--
CREATE VIEW office.department_scrud_view
AS
SELECT 
	departments.department_id,
	departments.department_code,
	departments.department_name
FROM office.departments;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/office/office.office_scrud_view.sql --<--<--
DROP VIEW IF EXISTS office.office_scrud_view;
CREATE VIEW office.office_scrud_view
AS
SELECT 
  office.offices.office_id, 
  office.offices.office_code, 
  office.offices.office_name, 
  office.offices.nick_name, 
  office.offices.registration_date, 
  core.currencies.currency_code || '('|| core.currencies.currency_name||')' AS currency, 
  office.offices.po_box, 
  office.offices.address_line_1, 
  office.offices.address_line_2, 
  office.offices.street, 
  office.offices.city, 
  office.offices.state, 
  office.offices.zip_code, 
  office.offices.country, 
  office.offices.phone, 
  office.offices.fax, 
  office.offices.email, 
  office.offices.url, 
  office.offices.registration_number, 
  parent_office.office_code || '('|| parent_office.office_name||')' AS parent_office
FROM 
  office.offices
INNER JOIN core.currencies
ON office.offices.currency_code = core.currencies.currency_code
LEFT JOIN office.offices AS parent_office
ON  office.offices.office_id = parent_office.office_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/office/office.role_scrud_view.sql --<--<--
CREATE VIEW office.role_scrud_view
AS
SELECT 
  roles.role_id, 
  roles.role_code, 
  roles.role_name, 
  roles.is_admin, 
  roles.is_system
FROM 
  office.roles;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/office/office.store_scrud_view.sql --<--<--
DROP VIEW IF EXISTS office.store_scrud_view;
CREATE VIEW office.store_scrud_view
AS
SELECT 
  office.stores.store_id, 
  office.offices.office_code || '('|| office.offices.office_name||')' AS office, 
  office.stores.store_code, 
  office.stores.store_name, 
  office.stores.address, 
  office.store_types.store_type_code || '('|| office.store_types.store_type_name||')' AS store_type, 
  office.stores.allow_sales, 
  core.sales_taxes.sales_tax_code || '('|| core.sales_taxes.sales_tax_name||')' AS sales_tax,
  core.accounts.account_number || '('|| core.accounts.account_name||')' AS account,
  office.cash_repositories.cash_repository_code || '('|| office.cash_repositories.cash_repository_name||')' AS cash_repository 
FROM 
  office.stores
INNER JOIN office.offices
ON office.stores.office_id = office.offices.office_id
INNER JOIN office.store_types
ON office.stores.store_type_id = office.store_types.store_type_id
INNER JOIN core.sales_taxes
ON office.stores.sales_tax_id = core.sales_taxes.sales_tax_id
INNER JOIN core.accounts
ON office.stores.default_cash_account_id = core.accounts.account_id
INNER JOIN office.cash_repositories
ON office.stores.default_cash_repository_id = office.cash_repositories.cash_repository_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/office/office.store_type_scrud_view.sql --<--<--
CREATE VIEW office.store_type_scrud_view
AS 

SELECT 
  store_types.store_type_id, 
  store_types.store_type_code, 
  store_types.store_type_name
FROM 
  office.store_types;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/policy/policy.auto_verification_policy_scrud_view.sql --<--<--
CREATE VIEW policy.auto_verification_policy_scrud_view
AS
SELECT
    policy.auto_verification_policy.user_id,
    office.users.user_name,
    policy.auto_verification_policy.verify_sales_transactions,
    policy.auto_verification_policy.sales_verification_limit,
    policy.auto_verification_policy.verify_purchase_transactions,
    policy.auto_verification_policy.purchase_verification_limit,
    policy.auto_verification_policy.verify_gl_transactions,
    policy.auto_verification_policy.gl_verification_limit,
    policy.auto_verification_policy.effective_from,
    policy.auto_verification_policy.ends_on,
    policy.auto_verification_policy.is_active
FROM policy.auto_verification_policy
INNER JOIN office.users
ON policy.auto_verification_policy.user_id=office.users.user_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.scrud-views/policy/policy.voucher_verification_policy_scrud_view.sql --<--<--
CREATE VIEW policy.voucher_verification_policy_scrud_view
AS
SELECT
    policy.voucher_verification_policy.user_id,
    office.users.user_name,
    policy.voucher_verification_policy.can_verify_sales_transactions,
    policy.voucher_verification_policy.sales_verification_limit,
    policy.voucher_verification_policy.can_verify_purchase_transactions,
    policy.voucher_verification_policy.purchase_verification_limit,
    policy.voucher_verification_policy.can_verify_gl_transactions,
    policy.voucher_verification_policy.gl_verification_limit,
    policy.voucher_verification_policy.can_self_verify,
    policy.voucher_verification_policy.self_verification_limit,
    policy.voucher_verification_policy.effective_from,
    policy.voucher_verification_policy.ends_on,
    policy.voucher_verification_policy.is_active
FROM policy.voucher_verification_policy
INNER JOIN office.users
ON policy.voucher_verification_policy.user_id=office.users.user_id;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.account_master_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.account_master_selector_view;

CREATE VIEW core.account_master_selector_view
AS
SELECT * FROM core.account_masters;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.account_selector_view;

CREATE VIEW core.account_selector_view
AS
SELECT
    core.accounts.account_id,
    core.accounts.account_number,
    core.accounts.account_name,
    core.accounts.description,
    core.accounts.sys_type,
    core.accounts.parent_account_id,
    parent_accounts.account_number AS parent_account_number,
    parent_accounts.account_name AS parent_account_name,
    core.account_masters.account_master_id,
    core.account_masters.account_master_code,
    core.account_masters.account_master_name
FROM
    core.account_masters
    INNER JOIN core.accounts 
    ON core.account_masters.account_master_id = core.accounts.account_master_id
    LEFT OUTER JOIN core.accounts AS parent_accounts 
    ON core.accounts.parent_account_id = parent_accounts.account_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.bonus_slab_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.bonus_slab_selector_view;

CREATE VIEW core.bonus_slab_selector_view
AS
SELECT * FROM core.bonus_slabs;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.brand_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.brand_selector_view;

CREATE VIEW core.brand_selector_view
AS
SELECT * FROM core.brands;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.compound_item_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.compound_item_selector_view;

CREATE VIEW core.compound_item_selector_view
AS
SELECT * FROM core.compound_items;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.currency_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.currency_selector_view;

CREATE VIEW core.currency_selector_view
AS
SELECT * FROM core.currencies;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.fiscal_year_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.fiscal_year_selector_view;

CREATE VIEW core.fiscal_year_selector_view
AS
SELECT * FROM core.fiscal_year;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.frequency_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.frequency_selector_view;

CREATE VIEW core.frequency_selector_view
AS
SELECT * FROM core.frequencies;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.item_group_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.item_group_selector_view;

CREATE VIEW core.item_group_selector_view
AS
SELECT * FROM core.item_groups;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.item_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.item_selector_view;

CREATE VIEW core.item_selector_view
AS
SELECT * FROM core.items;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.party_selector_view.sql --<--<--
CREATE VIEW core.party_selector_view
AS
SELECT
    core.parties.party_id,
    core.party_types.party_type_id,
    core.party_types.is_supplier,
    core.party_types.party_type_code || ' (' || core.party_types.party_type_name || ')' AS party_type,
    core.parties.party_code,
    core.parties.first_name,
    core.parties.middle_name,
    core.parties.last_name,
    core.parties.party_name,
    core.parties.zip_code,
    core.parties.address_line_1,
    core.parties.address_line_2,
    core.parties.street,
    core.parties.city,
    core.get_state_name_by_state_id(core.parties.state_id) AS state,
    core.get_country_name_by_country_id(core.parties.country_id) AS country,
    core.parties.allow_credit,
    core.parties.maximum_credit_period,
    core.parties.maximum_credit_amount,
    core.parties.pan_number,
    core.parties.sst_number,
    core.parties.cst_number,
    core.parties.phone,
    core.parties.fax,
    core.parties.cell,
    core.parties.email,
    core.parties.url,
    core.accounts.account_id,
    core.accounts.account_number,
    core.accounts.account_number || ' (' || core.accounts.account_name || ')' AS gl_head
FROM
core.parties
INNER JOIN
core.party_types
ON core.parties.party_type_id = core.party_types.party_type_id
INNER JOIN core.accounts
ON core.parties.account_id=core.accounts.account_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.party_type_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.party_type_selector_view;

CREATE VIEW core.party_type_selector_view
AS
SELECT * FROM core.party_types;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.price_type_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.price_type_selector_view;
CREATE VIEW core.price_type_selector_view
AS
SELECT 
  price_types.price_type_id, 
  price_types.price_type_code, 
  price_types.price_type_name
FROM 
  core.price_types;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.rounding_method_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.rounding_method_selector_view;

CREATE VIEW core.rounding_method_selector_view
AS
SELECT * FROM core.rounding_methods;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.sales_tax_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.sales_tax_selector_view;

CREATE VIEW core.sales_tax_selector_view
AS
SELECT * FROM core.sales_taxes;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.sales_team_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.sales_team_selector_view;

CREATE VIEW core.sales_team_selector_view
AS
SELECT * FROM core.sales_teams;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.salesperson_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.salesperson_selector_view;

CREATE VIEW core.salesperson_selector_view
AS
SELECT
    salesperson_id,
    salesperson_code,
    salesperson_name,
    address,
    contact_number,
    commission_rate,
    account_name
FROM
    core.salespersons,
    core.accounts
WHERE
    core.salespersons.account_id = core.accounts.account_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.shipping_mail_type_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.shipping_mail_type_selector_view;

CREATE VIEW core.shipping_mail_type_selector_view
AS
SELECT 
  shipping_mail_types.shipping_mail_type_id, 
  shipping_mail_types.shipping_mail_type_code, 
  shipping_mail_types.shipping_mail_type_name
FROM 
  core.shipping_mail_types;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.shipping_package_shape_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.shipping_package_shape_selector_view;

CREATE VIEW core.shipping_package_shape_selector_view
AS
SELECT 
  shipping_package_shapes.shipping_package_shape_id, 
  shipping_package_shapes.shipping_package_shape_code, 
  shipping_package_shapes.shipping_package_shape_name, 
  shipping_package_shapes.is_rectangular
FROM 
  core.shipping_package_shapes;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.supplier_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.supplier_selector_view;
CREATE VIEW core.supplier_selector_view
AS
SELECT
    core.parties.party_id,
    core.party_types.party_type_id,
    core.party_types.is_supplier,
    core.party_types.party_type_code || ' (' || core.party_types.party_type_name || ')' AS party_type,
    core.parties.party_code,
    core.parties.first_name,
    core.parties.middle_name,
    core.parties.last_name,
    core.parties.party_name,
    core.parties.zip_code,
    core.parties.address_line_1,
    core.parties.address_line_2,
    core.parties.street,
    core.parties.city,
    core.get_state_name_by_state_id(core.parties.state_id) AS state,
    core.get_country_name_by_country_id(core.parties.country_id) AS country,
    core.parties.allow_credit,
    core.parties.maximum_credit_period,
    core.parties.maximum_credit_amount,
    core.parties.pan_number,
    core.parties.sst_number,
    core.parties.cst_number,
    core.parties.phone,
    core.parties.fax,
    core.parties.cell,
    core.parties.email,
    core.parties.url,
    core.accounts.account_id,
    core.accounts.account_number,
    core.accounts.account_number || ' (' || core.accounts.account_name || ')' AS gl_head
FROM
core.parties
INNER JOIN
core.party_types
ON core.parties.party_type_id = core.party_types.party_type_id
INNER JOIN core.accounts
ON core.parties.account_id=core.accounts.account_id
WHERE is_supplier=true;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.tax_base_amount_type_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.tax_base_amount_type_selector_view;

CREATE VIEW core.tax_base_amount_type_selector_view
AS
SELECT * FROM core.tax_base_amount_types;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.tax_rate_type_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.tax_rate_type_selector_view;

CREATE VIEW core.tax_rate_type_selector_view
AS
SELECT * FROM core.tax_rate_types;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/core/core.unit_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.unit_selector_view;

CREATE VIEW core.unit_selector_view
AS
SELECT * FROM core.units;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/office/office.cash_repository_selector_view.sql --<--<--
DROP VIEW IF EXISTS office.cash_repository_selector_view;

CREATE VIEW office.cash_repository_selector_view
AS
SELECT
    office.cash_repositories.cash_repository_id,
    office.cash_repositories.cash_repository_code,
    office.cash_repositories.cash_repository_name,
    parent_cash_repositories.cash_repository_code parent_cr_code,
    parent_cash_repositories.cash_repository_name parent_cr_name,
    office.cash_repositories.description
FROM
    office.cash_repositories
LEFT OUTER JOIN
    office.cash_repositories AS parent_cash_repositories
ON
    office.cash_repositories.parent_cash_repository_id=parent_cash_repositories.cash_repository_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/office/office.office_selector_view.sql --<--<--
DROP VIEW IF EXISTS office.office_selector_view;

CREATE VIEW office.office_selector_view
AS
SELECT * FROM office.offices;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/office/office.store_selector_view.sql --<--<--
DROP VIEW IF EXISTS office.store_selector_view;

CREATE VIEW office.store_selector_view
AS
SELECT * FROM office.stores;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/office/office.store_type_selector_view.sql --<--<--
DROP VIEW IF EXISTS office.store_type_selector_view;

CREATE VIEW office.store_type_selector_view
AS
SELECT * FROM office.store_types;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.selector-views/office/office.user_selector_view.sql --<--<--
DROP VIEW IF EXISTS office.user_selector_view;

CREATE VIEW office.user_selector_view
AS
SELECT
    office.users.user_id,
    office.users.user_name,
    office.users.full_name,
    office.roles.role_name,
    office.offices.office_name
FROM
    office.users
INNER JOIN office.roles
ON office.users.role_id = office.roles.role_id
INNER JOIN office.offices
ON office.users.office_id = office.offices.office_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/core/core.account_view.sql --<--<--
CREATE VIEW core.account_view
AS
SELECT
    core.accounts.account_id,
    core.accounts.account_number || ' (' || core.accounts.account_name || ')' AS account,
    core.accounts.account_number,
    core.accounts.account_name,
    core.accounts.description,
    core.accounts.external_code,
    core.accounts.currency_code,
    core.accounts.confidential,
    core.account_masters.normally_debit,
    core.accounts.is_transaction_node,
    core.accounts.sys_type,
    core.accounts.parent_account_id,
    parent_accounts.account_number AS parent_account_number,
    parent_accounts.account_name AS parent_account_name,
    parent_accounts.account_number || ' (' || parent_accounts.account_name || ')' AS parent_account,
    core.account_masters.account_master_id,
    core.account_masters.account_master_code,
    core.account_masters.account_master_name,
    core.has_child_accounts(core.accounts.account_id) AS has_child
FROM core.account_masters
INNER JOIN core.accounts 
ON core.account_masters.account_master_id = core.accounts.account_master_id
LEFT OUTER JOIN core.accounts AS parent_accounts 
ON core.accounts.parent_account_id = parent_accounts.account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/core/core.bank_account_view.sql --<--<--
CREATE VIEW core.bank_account_view
AS
SELECT
    core.accounts.account_id,
    core.accounts.account_number,
    core.accounts.account_name,
    office.users.user_name AS maintained_by,
    core.bank_accounts.bank_name,
    core.bank_accounts.bank_branch,
    core.bank_accounts.bank_contact_number,
    core.bank_accounts.bank_address,
    core.bank_accounts.bank_account_number,
    core.bank_accounts.bank_account_type,
    core.bank_accounts.relationship_officer_name AS relation_officer
FROM
    core.bank_accounts
INNER JOIN core.accounts ON core.accounts.account_id = core.bank_accounts.account_id
INNER JOIN office.users ON core.bank_accounts.maintained_by_user_id = office.users.user_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/core/core.item_view.sql --<--<--
DROP VIEW IF EXISTS core.item_view;

CREATE VIEW core.item_view
AS
SELECT 
        item_id,
        item_code,
        item_name,
        item_group_code || ' (' || item_group_name || ')' AS item_group,
        item_type_code || ' (' || item_type_name || ')' AS item_type,
        maintain_stock,
        brand_code || ' (' || brand_name || ')' AS brand,
        party_code || ' (' || party_name || ')' AS preferred_supplier,
        lead_time_in_days,
        weight_in_grams,
        width_in_centimeters,
        height_in_centimeters,
        length_in_centimeters,
        machinable,
        shipping_mail_type_code || ' (' || shipping_mail_type_name || ')' AS preferred_shipping_mail_type,
        shipping_package_shape_code || ' (' || shipping_package_shape_name || ')' AS preferred_shipping_package_shape,
        core.units.unit_code || ' (' || core.units.unit_name || ')' AS unit,
        base_unit.unit_code || ' (' || base_unit.unit_name || ')' AS base_unit,
        hot_item,
        cost_price,
        cost_price_includes_tax,
        selling_price,
        selling_price_includes_tax,
        sales_tax_code || ' (' || sales_tax_name || ')' AS sales_tax,
        reorder_unit.unit_code || ' (' || reorder_unit.unit_name || ')' AS reorder_unit,
        reorder_level,
        reorder_quantity
FROM core.items
INNER JOIN core.item_groups
ON core.items.item_group_id = core.item_groups.item_group_id
INNER JOIN core.item_types
ON core.items.item_type_id = core.item_types.item_type_id
INNER JOIN core.brands
ON core.items.brand_id = core.brands.brand_id
INNER JOIN core.parties
ON core.items.preferred_supplier_id = core.parties.party_id
INNER JOIN core.units
ON core.items.unit_id = core.units.unit_id
INNER JOIN core.units AS base_unit
ON core.get_root_unit_id(core.items.unit_id) = core.units.unit_id
INNER JOIN core.units AS reorder_unit
ON core.items.reorder_unit_id = reorder_unit.unit_id
INNER JOIN core.sales_taxes
ON core.items.sales_tax_id = core.sales_taxes.sales_tax_id
LEFT JOIN core.shipping_mail_types
ON core.items.preferred_shipping_mail_type_id = core.shipping_mail_types.shipping_mail_type_id
LEFT JOIN core.shipping_package_shapes
ON core.items.shipping_package_shape_id = core.shipping_package_shapes.shipping_package_shape_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/core/core.party_user_control_view.sql --<--<--
CREATE VIEW core.party_user_control_view
AS
SELECT
    core.party_types.party_type_code,
    core.party_types.party_type_name,
    core.parties.email,
    core.parties.url,
    core.parties.pan_number,
    core.parties.sst_number,
    core.parties.cst_number,
    core.parties.allow_credit,
    core.parties.maximum_credit_period,
    core.parties.maximum_credit_amount,
    core.accounts.account_number,
    core.accounts.account_name,
    core.parties.zip_code,
    core.parties.address_line_1,
    core.parties.address_line_2,
    core.parties.street,
    core.get_state_name_by_state_id(core.parties.state_id) AS state,
    core.get_country_name_by_country_id(core.parties.country_id) AS country
FROM core.parties
INNER JOIN core.party_types
ON core.parties.party_type_id = core.party_types.party_type_id
INNER JOIN core.accounts
ON core.parties.account_id = core.accounts.account_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/core/core.party_view.sql --<--<--
CREATE VIEW core.party_view
AS
SELECT
    core.parties.party_id,
    core.party_types.party_type_id,
    core.party_types.is_supplier,
    core.party_types.party_type_code || ' (' || core.party_types.party_type_name || ')' AS party_type,
    core.parties.party_code,
    core.parties.first_name,
    core.parties.middle_name,
    core.parties.last_name,
    core.parties.party_name,
    core.parties.zip_code,
    core.parties.address_line_1,
    core.parties.address_line_2,
    core.parties.street,
    core.parties.city,
    core.get_state_name_by_state_id(core.parties.state_id) AS state,
    core.get_country_name_by_country_id(core.parties.country_id) AS country,
    core.parties.allow_credit,
    core.parties.maximum_credit_period,
    core.parties.maximum_credit_amount,
    core.parties.pan_number,
    core.parties.sst_number,
    core.parties.cst_number,
    core.parties.phone,
    core.parties.fax,
    core.parties.cell,
    core.parties.email,
    core.parties.url,
    core.accounts.account_id,
    core.accounts.account_number,
    core.accounts.account_number || ' (' || core.accounts.account_name || ')' AS gl_head
FROM
core.parties
INNER JOIN
core.party_types
ON core.parties.party_type_id = core.party_types.party_type_id
INNER JOIN core.accounts
ON core.parties.account_id=core.accounts.account_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/core/core.shipping_address_view.sql --<--<--
CREATE VIEW core.shipping_address_view
AS
SELECT
    core.shipping_addresses.shipping_address_id,
    core.shipping_addresses.shipping_address_code,
    core.shipping_addresses.party_id,
    core.parties.party_code || ' (' || core.parties.party_name || ')' AS party,
    core.shipping_addresses.zip_code,
    core.shipping_addresses.address_line_1,
    core.shipping_addresses.address_line_2,
    core.shipping_addresses.street,
    core.shipping_addresses.city,
    core.get_state_name_by_state_id(core.shipping_addresses.state_id) AS state,
    core.get_country_name_by_country_id(core.shipping_addresses.country_id) AS country
FROM core.shipping_addresses
INNER JOIN core.parties
ON core.shipping_addresses.party_id=core.parties.party_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/core/core.supplier_view.sql --<--<--
CREATE VIEW core.supplier_view
AS
SELECT * FROM core.parties
WHERE party_type_id IN
(
        SELECT party_type_id FROM core.party_types
        WHERE is_supplier=true
);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/core/core.unit_view.sql --<--<--
--TODO
CREATE VIEW core.unit_view
AS
SELECT * FROM core.units;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/office/office.office_view.sql --<--<--
--TODO
CREATE VIEW office.office_view
AS
SELECT * FROM office.offices;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/office/office.role_view.sql --<--<--
CREATE OR REPLACE VIEW office.role_view
AS
SELECT 
  roles.role_id, 
  roles.role_code, 
  roles.role_name
FROM 
  office.roles;
   

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/office/office.sign_in_view.sql --<--<--
CREATE VIEW office.sign_in_view
AS
SELECT 
  logins.login_id, 
  logins.user_id, 
  users.role_id, 
  roles.role_code || ' (' || roles.role_name || ')' AS role, 
  roles.role_code, 
  roles.role_name, 
  roles.is_admin, 
  roles.is_system, 
  logins.browser, 
  logins.ip_address, 
  logins.login_date_time, 
  logins.remote_user, 
  logins.culture, 
  users.user_name, 
  users.full_name, 
  users.elevated, 
  offices.office_code || ' (' || offices.office_name || ')' AS office,
  offices.office_id, 
  offices.office_code, 
  offices.office_name, 
  offices.nick_name, 
  offices.registration_date, 
  offices.currency_code, 
  offices.po_box, 
  offices.address_line_1, 
  offices.address_line_2, 
  offices.street, 
  offices.city, 
  offices.state, 
  offices.zip_code, 
  offices.country, 
  offices.phone, 
  offices.fax, 
  offices.email, 
  offices.url, 
  offices.registration_number, 
  offices.pan_number,
  offices.allow_transaction_posting
FROM 
  audit.logins, 
  office.users, 
  office.offices, 
  office.roles
WHERE 
  logins.user_id = users.user_id AND
  logins.office_id = offices.office_id AND
  users.role_id = roles.role_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/office/office.store_view.sql --<--<--
--TODO
CREATE VIEW office.store_view
AS
SELECT * FROM office.stores;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/office/office.user_view.sql --<--<--
CREATE VIEW office.user_view
AS
SELECT
    office.users.user_id,
    office.users.user_name,
    office.users.full_name,
    office.roles.role_name,
    office.offices.office_name
FROM
    office.users
INNER JOIN office.roles
ON office.users.role_id = office.roles.role_id
INNER JOIN office.offices
ON office.users.office_id = office.offices.office_id;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/office/office.work_center_view.sql --<--<--
CREATE VIEW office.work_center_view
AS
SELECT
    office.work_centers.work_center_id,
    office.offices.office_code || ' (' || office.offices.office_name || ')' AS office,
    office.work_centers.work_center_code,
    office.work_centers.work_center_name
FROM office.work_centers
INNER JOIN office.offices
ON office.work_centers.office_id = office.offices.office_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/public.dbstat.sql --<--<--
DROP VIEW IF EXISTS db_stat;

CREATE VIEW db_stat
AS
SELECT
    relname,
    last_vacuum,
    last_autovacuum,
    last_analyze,
    last_autoanalyze,
    vacuum_count,
    autovacuum_count,
    analyze_count,
    autoanalyze_count
FROM
   pg_stat_user_tables;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/transactions/1. transactions.transaction_view.sql --<--<--
DROP VIEW IF EXISTS transactions.transaction_view;
CREATE VIEW transactions.transaction_view
AS
SELECT
    transactions.transaction_master.transaction_master_id,
    transactions.transaction_master.transaction_counter,
    transactions.transaction_master.transaction_code,
    transactions.transaction_master.book,
    transactions.transaction_master.value_date,
    transactions.transaction_master.transaction_ts,
    transactions.transaction_master.login_id,
    transactions.transaction_master.user_id,
    transactions.transaction_master.sys_user_id,
    transactions.transaction_master.office_id,
    transactions.transaction_master.cost_center_id,
    transactions.transaction_master.reference_number,
    transactions.transaction_master.statement_reference AS master_statement_reference,
    transactions.transaction_master.last_verified_on,
    transactions.transaction_master.verified_by_user_id,
    transactions.transaction_master.verification_status_id,
    transactions.transaction_master.verification_reason,
    transactions.transaction_details.transaction_detail_id,
    transactions.transaction_details.tran_type,
    transactions.transaction_details.account_id,
    core.accounts.account_number,
    core.accounts.account_name,
    core.account_masters.normally_debit,
    core.account_masters.account_master_code,
    core.account_masters.account_master_name,
    core.accounts.account_master_id,
    core.accounts.confidential,
    transactions.transaction_details.statement_reference,
    transactions.transaction_details.cash_repository_id,
    transactions.transaction_details.currency_code,
    transactions.transaction_details.amount_in_currency,
    transactions.transaction_details.local_currency_code,
    transactions.transaction_details.amount_in_local_currency
FROM
transactions.transaction_master
INNER JOIN transactions.transaction_details
ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
INNER JOIN core.accounts
ON transactions.transaction_details.account_id = core.accounts.account_id
INNER JOIN core.account_masters
ON core.accounts.account_master_id = core.account_masters.account_master_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/transactions/2. transactions.verified_transaction_view.sql --<--<--
DROP VIEW IF EXISTS transactions.verified_transaction_view CASCADE;

CREATE VIEW transactions.verified_transaction_view
AS
SELECT * FROM transactions.transaction_view
WHERE verification_status_id > 0;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/transactions/3. transactions.trial_balance_view.sql --<--<--
DROP MATERIALIZED VIEW IF EXISTS transactions.trial_balance_view;
CREATE MATERIALIZED VIEW transactions.trial_balance_view
AS
SELECT core.get_account_name(account_id), 
    SUM(CASE transactions.verified_transaction_view.tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE NULL END) AS debit,
    SUM(CASE transactions.verified_transaction_view.tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE NULL END) AS Credit
FROM transactions.verified_transaction_view
GROUP BY account_id;

ALTER MATERIALIZED VIEW transactions.trial_balance_view
OWNER TO mix_erp;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/transactions/3. transactions.verified_transaction_mat_view.sql --<--<--
DROP MATERIALIZED VIEW IF EXISTS transactions.verified_transaction_mat_view CASCADE;

CREATE MATERIALIZED VIEW transactions.verified_transaction_mat_view
AS
SELECT * FROM transactions.verified_transaction_view;

ALTER MATERIALIZED VIEW transactions.verified_transaction_mat_view
OWNER TO mix_erp;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/transactions/4. transactions.stock_transaction_view.sql --<--<--
DROP VIEW IF EXISTS transactions.stock_transaction_view CASCADE;

CREATE VIEW transactions.stock_transaction_view
AS
SELECT
        transactions.transaction_master.transaction_master_id,
        transactions.stock_master.stock_master_id,
        transactions.stock_details.stock_detail_id,
        transactions.transaction_master.book,
        transactions.transaction_master.transaction_counter,
        transactions.transaction_master.transaction_code,
        transactions.transaction_master.value_date,
        transactions.transaction_master.transaction_ts,
        transactions.transaction_master.login_id,
        transactions.transaction_master.user_id,
        transactions.transaction_master.sys_user_id,
        transactions.transaction_master.office_id,
        transactions.transaction_master.cost_center_id,
        transactions.transaction_master.reference_number,
        transactions.transaction_master.statement_reference,
        transactions.transaction_master.last_verified_on,
        transactions.transaction_master.verified_by_user_id,
        transactions.transaction_master.verification_status_id,
        transactions.transaction_master.verification_reason,
        transactions.stock_master.party_id,
        core.parties.country_id,
        core.parties.state_id,
        transactions.stock_master.salesperson_id,
        transactions.stock_master.price_type_id,
        transactions.stock_master.is_credit,
        transactions.stock_master.shipper_id,
        transactions.stock_master.shipping_address_id,
        transactions.stock_master.shipping_charge,
        transactions.stock_master.store_id AS stock_master_store_id,
        transactions.stock_master.cash_repository_id,
        transactions.stock_details.tran_type,
        transactions.stock_details.store_id,
        transactions.stock_details.item_id,
        transactions.stock_details.quantity,
        transactions.stock_details.unit_id,
        transactions.stock_details.base_quantity,
        transactions.stock_details.base_unit_id,
        transactions.stock_details.price,
        transactions.stock_details.discount,
        transactions.stock_details.sales_tax_id,
        transactions.stock_details.tax
FROM transactions.stock_details
INNER JOIN transactions.stock_master
ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
INNER JOIN transactions.transaction_master
ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_id
INNER JOIN core.parties
ON transactions.stock_master.party_id = core.parties.party_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/transactions/5. transactions.verified_stock_transaction_view.sql --<--<--
DROP MATERIALIZED VIEW IF EXISTS transactions.verified_stock_transaction_view;

CREATE MATERIALIZED VIEW transactions.verified_stock_transaction_view
AS
SELECT * FROM transactions.stock_transaction_view
WHERE verification_status_id > 0;

ALTER MATERIALIZED VIEW transactions.verified_stock_transaction_view
OWNER TO mix_erp;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/transactions/6. transactions.verified_cash_transaction_mat_view.sql --<--<--
CREATE MATERIALIZED VIEW transactions.verified_cash_transaction_mat_view
AS
SELECT * FROM transactions.verified_transaction_mat_view
WHERE transactions.verified_transaction_mat_view.transaction_master_id
IN
(
    SELECT transactions.verified_transaction_mat_view.transaction_master_id 
    FROM transactions.verified_transaction_mat_view
    WHERE account_master_id IN(10101, 10102) --Cash and Bank A/C
);

ALTER MATERIALIZED VIEW transactions.verified_cash_transaction_mat_view
OWNER TO mix_erp;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/transactions/transactions.sales_by_country_view.sql --<--<--
CREATE VIEW transactions.sales_by_country_view
AS
WITH country_data
AS
(
SELECT country_id, SUM((price * quantity) - discount + tax + shipping_charge) AS sales
FROM transactions.verified_stock_transaction_view
WHERE book = ANY(ARRAY['Sales.Delivery', 'Sales.Direct'])
GROUP BY country_id
)

SELECT country_code, sales 
FROM country_data
INNER JOIN core.countries
ON country_data.country_id = core.countries.country_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/05.views/transactions/transactions.verified_stock_details_view.sql --<--<--
DROP VIEW IF EXISTS transactions.verified_stock_details_view;

CREATE VIEW transactions.verified_stock_details_view
AS
SELECT transactions.stock_details.* 
FROM transactions.stock_details
INNER JOIN transactions.stock_master
ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
INNER JOIN transactions.transaction_master
ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_id
AND transactions.transaction_master.verification_status_id > 0;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/06.sample-data/0.menus.sql --<--<--
--This table should not be localized.
INSERT INTO core.menus(menu_text, url, menu_code, level)
SELECT 'Sales', '~/Modules/Sales/Index.mix', 'SA', 0 UNION ALL
SELECT 'Purchase', '~/Modules/Purchase/Index.mix', 'PU', 0 UNION ALL
SELECT 'Products & Items', '~/Modules/Inventory/Index.mix', 'ITM', 0 UNION ALL
SELECT 'Finance', '~/Modules/Finance/Index.mix', 'FI', 0 UNION ALL
SELECT 'Back Office', '~/Modules/BackOffice/Index.mix', 'BO', 0;


INSERT INTO core.menus(menu_text, url, menu_code, level, parent_menu_id)
          SELECT 'Sales & Quotation', NULL, 'SAQ', 1, core.get_menu_id('SA')
UNION ALL SELECT 'Direct Sales', '~/Modules/Sales/DirectSales.mix', 'DRS', 2, core.get_menu_id('SAQ')
UNION ALL SELECT 'Sales Quotation', '~/Modules/Sales/Quotation.mix', 'SQ', 2, core.get_menu_id('SAQ')
UNION ALL SELECT 'Sales Order', '~/Modules/Sales/Order.mix', 'SO', 2, core.get_menu_id('SAQ')
UNION ALL SELECT 'Sales Delivery', '~/Modules/Sales/Delivery.mix', 'SD', 2, core.get_menu_id('SAQ')
UNION ALL SELECT 'Receipt from Customer', '~/Modules/Sales/Receipt.mix', 'RFC', 2, core.get_menu_id('SAQ')
UNION ALL SELECT 'Sales Return', '~/Modules/Sales/Return.mix', 'SR', 2, core.get_menu_id('SAQ')
UNION ALL SELECT 'Setup & Maintenance', NULL, 'SSM', 1, core.get_menu_id('SA')
UNION ALL SELECT 'Bonus Slab for Salespersons', '~/Modules/Sales/Setup/BonusSlabs.mix', 'ABS', 2, core.get_menu_id('SSM')
UNION ALL SELECT 'Bonus Slab Details', '~/Modules/Sales/Setup/BonusSlabDetails.mix', 'BSD', 2, core.get_menu_id('SSM')
UNION ALL SELECT 'Sales Teams', '~/Modules/Sales/Setup/Teams.mix', 'SST', 2, core.get_menu_id('SSM')
UNION ALL SELECT 'Salespersons', '~/Modules/Sales/Setup/Salespersons.mix', 'SSA', 2, core.get_menu_id('SSM')
UNION ALL SELECT 'Bonus Slab Assignment', '~/Modules/Sales/Setup/BonusSlabAssignment.mix', 'BSA', 2, core.get_menu_id('SSM')
UNION ALL SELECT 'Late Fees', '~/Modules/Sales/Setup/LateFees.mix', 'LF', 2, core.get_menu_id('SSM')
UNION ALL SELECT 'Payment Terms', '~/Modules/Sales/Setup/PaymentTerms.mix', 'PAT', 2, core.get_menu_id('SSM')
UNION ALL SELECT 'Recurring Invoices', '~/Modules/Sales/Setup/RecurringInvoices.mix', 'RI', 2, core.get_menu_id('SSM')
UNION ALL SELECT 'Recurring Invoice Setup', '~/Modules/Sales/Setup/RecurringInvoiceSetup.mix', 'RIS', 2, core.get_menu_id('SSM')
UNION ALL SELECT 'Sales Reports', NULL, 'SAR', 1, core.get_menu_id('SA')
UNION ALL SELECT 'Top Selling Items', '~/Modules/Sales/Reports/TopSellingItems.mix', 'SAR-TSI', 2, core.get_menu_id('SAR')
UNION ALL SELECT 'Purchase & Quotation', NULL, 'PUQ', 1, core.get_menu_id('PU')
UNION ALL SELECT 'Direct Purchase', '~/Modules/Purchase/DirectPurchase.mix', 'DRP', 2, core.get_menu_id('PUQ')
UNION ALL SELECT 'Purchase Order', '~/Modules/Purchase/Order.mix', 'PO', 2, core.get_menu_id('PUQ')
UNION ALL SELECT 'Purchase Reorder', '~/Modules/Purchase/Reorder.mix', 'PRO', 2, core.get_menu_id('PUQ')
UNION ALL SELECT 'GRN Entry', '~/Modules/Purchase/GRN.mix', 'GRN', 2, core.get_menu_id('PUQ')
UNION ALL SELECT 'Purchase Return', '~/Modules/Purchase/Return.mix', 'PR', 2, core.get_menu_id('PUQ')
UNION ALL SELECT 'Purchase Reports', NULL, 'PUR', 1, core.get_menu_id('PU')
UNION ALL SELECT 'Inventory Movements', NULL, 'IIM', 1, core.get_menu_id('ITM')
UNION ALL SELECT 'Stock Transfer Journal', '~/Modules/Inventory/Transfer.mix', 'STJ', 2, core.get_menu_id('IIM')
UNION ALL SELECT 'Stock Adjustments', '~/Modules/Inventory/Adjustment.mix', 'STA', 2, core.get_menu_id('IIM')
UNION ALL SELECT 'Setup & Maintenance', NULL, 'ISM', 1, core.get_menu_id('ITM')
UNION ALL SELECT 'Store Types', '~/Modules/Inventory/Setup/StoreTypes.mix', 'STT', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Stores', '~/Modules/Inventory/Setup/Stores.mix', 'STO', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Counter Setup', '~/Modules/BackOffice/Counters.mix', 'SCS', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Party Types', '~/Modules/Inventory/Setup/PartyTypes.mix', 'PT', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Party Accounts', '~/Modules/Inventory/Setup/Parties.mix', 'PA', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Shipping Addresses', '~/Modules/Inventory/Setup/ShippingAddresses.mix', 'PSA', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Item Maintenance', '~/Modules/Inventory/Setup/Items.mix', 'SSI', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Compound Items', '~/Modules/Inventory/Setup/CompoundItems.mix', 'SSC', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Compound Item Details', '~/Modules/Inventory/Setup/CompoundItemDetails.mix', 'SSCD', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Cost Prices', '~/Modules/Inventory/Setup/CostPrices.mix', 'ICP', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Selling Prices', '~/Modules/Inventory/Setup/SellingPrices.mix', 'ISP', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Item Groups', '~/Modules/Inventory/Setup/ItemGroups.mix', 'SIG', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Item Types', '~/Modules/Inventory/Setup/ItemTypes.mix', 'SIT', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Brands', '~/Modules/Inventory/Setup/Brands.mix', 'SSB', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Units of Measure', '~/Modules/Inventory/Setup/UOM.mix', 'UOM', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Compound Units of Measure', '~/Modules/Inventory/Setup/CUOM.mix', 'CUOM', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Shipper Information', '~/Modules/Inventory/Setup/Shippers.mix', 'SHI', 2, core.get_menu_id('ISM')
UNION ALL SELECT 'Reports', NULL, 'IR', 1, core.get_menu_id('ITM')
UNION ALL SELECT 'Inventory Account Statement', '~/Modules/Inventory/Reports/AccountStatement.mix', 'IAS', 2, core.get_menu_id('IR')
UNION ALL SELECT 'Transactions & Templates', NULL, 'FTT', 1, core.get_menu_id('FI')
UNION ALL SELECT 'Journal Voucher Entry', '~/Modules/Finance/JournalVoucher.mix', 'JVN', 2, core.get_menu_id('FTT')
UNION ALL SELECT 'Update Exchange Rates', '~/Modules/Finance/UpdateExchangeRates.mix', 'UER', 2, core.get_menu_id('FTT')
UNION ALL SELECT 'Voucher Verification', '~/Modules/Finance/VoucherVerification.mix', 'FVV', 2, core.get_menu_id('FTT')
UNION ALL SELECT 'End of Day Operation', '~/Modules/Finance/EODOperation.mix', 'EOD', 2, core.get_menu_id('FTT')
UNION ALL SELECT 'Setup & Maintenance', NULL, 'FSM', 1, core.get_menu_id('FI')
UNION ALL SELECT 'Chart of Accounts', '~/Modules/Finance/Setup/COA.mix', 'COA', 2, core.get_menu_id('FSM')
UNION ALL SELECT 'Currency Management', '~/Modules/Finance/Setup/Currencies.mix', 'CUR', 2, core.get_menu_id('FSM')
UNION ALL SELECT 'Bank Accounts', '~/Modules/Finance/Setup/BankAccounts.mix', 'CBA', 2, core.get_menu_id('FSM')
UNION ALL SELECT 'Ageing Slabs', '~/Modules/Finance/Setup/AgeingSlabs.mix', 'AGS', 2, core.get_menu_id('FSM')
UNION ALL SELECT 'Cash Flow Headings', '~/Modules/Finance/Setup/CashFlowHeadings.mix', 'CFH', 2, core.get_menu_id('FSM')
UNION ALL SELECT 'Cash Flow Setup', '~/Modules/Finance/Setup/CashFlowSetup.mix', 'CFS', 2, core.get_menu_id('FSM')
UNION ALL SELECT 'Cost Centers', '~/Modules/Finance/Setup/CostCenters.mix', 'CC', 2, core.get_menu_id('FSM')
UNION ALL SELECT 'Reports', NULL, 'FIR', 1, core.get_menu_id('FI')
UNION ALL SELECT 'Account Statement', '~/Modules/Finance/Reports/AccountStatement.mix', 'AS', 2, core.get_menu_id('FIR')
UNION ALL SELECT 'Trial Balance', '~/Modules/Finance/Reports/TrialBalance.mix', 'TB', 2, core.get_menu_id('FIR')
UNION ALL SELECT 'Profit & Loss Account', '~/Modules/Finance/Reports/ProfitAndLossAccount.mix', 'PLA', 2, core.get_menu_id('FIR')
UNION ALL SELECT 'Retained Earnings Statement', '~/Modules/Finance/Reports/RetainedEarnings.mix', 'RET', 2, core.get_menu_id('FIR')
UNION ALL SELECT 'Balance Sheet', '~/Modules/Finance/Reports/BalanceSheet.mix', 'BS', 2, core.get_menu_id('FIR')
UNION ALL SELECT 'Cash Flow', '~/Modules/Finance/Reports/CashFlow.mix', 'CF', 2, core.get_menu_id('FIR')
UNION ALL SELECT 'Tax Configuration', NULL, 'BOTC', 1, core.get_menu_id('BO')
UNION ALL SELECT 'Tax Master', '~/Modules/BackOffice/Tax/TaxMaster.mix', 'TXM', 2, core.get_menu_id('BOTC')
UNION ALL SELECT 'Tax Authorities', '~/Modules/BackOffice/Tax/TaxAuthorities.mix', 'TXA', 2, core.get_menu_id('BOTC')
UNION ALL SELECT 'Sales Tax Types', '~/Modules/BackOffice/Tax/SalesTaxTypes.mix', 'STXT', 2, core.get_menu_id('BOTC')
UNION ALL SELECT 'State Sales Taxes', '~/Modules/BackOffice/Tax/StateSalesTaxes.mix', 'STST', 2, core.get_menu_id('BOTC')
UNION ALL SELECT 'Counties Sales Taxes', '~/Modules/BackOffice/Tax/CountySalesTaxes.mix', 'CTST', 2, core.get_menu_id('BOTC')
UNION ALL SELECT 'Sales Taxes', '~/Modules/BackOffice/Tax/SalesTaxes.mix', 'STX', 2, core.get_menu_id('BOTC')
UNION ALL SELECT 'Sales Tax Details', '~/Modules/BackOffice/Tax/SalesTaxDetails.mix', 'STXD', 2, core.get_menu_id('BOTC')
UNION ALL SELECT 'Tax Exempt Types', '~/Modules/BackOffice/Tax/TaxExemptTypes.mix', 'TXEXT', 2, core.get_menu_id('BOTC')
UNION ALL SELECT 'Sales Tax Exempts', '~/Modules/BackOffice/Tax/SalesTaxExempts.mix', 'STXEX', 2, core.get_menu_id('BOTC')
UNION ALL SELECT 'Sales Tax Exempt Details', '~/Modules/BackOffice/Tax/SalesTaxExemptDetails.mix', 'STXEXD', 2, core.get_menu_id('BOTC')
UNION ALL SELECT 'Miscellaneous Parameters', NULL, 'SMP', 1, core.get_menu_id('BO')
UNION ALL SELECT 'Flags', '~/Modules/BackOffice/Flags.mix', 'TRF', 2, core.get_menu_id('SMP')
UNION ALL SELECT 'Audit Reports', NULL, 'SEAR', 1, core.get_menu_id('BO')
UNION ALL SELECT 'Login View', '~/Reports/Office.Login.xml', 'SEAR-LV', 2, core.get_menu_id('SEAR')
UNION ALL SELECT 'Office Setup', NULL, 'SOS', 1, core.get_menu_id('BO')
UNION ALL SELECT 'Office & Branch Setup', '~/Modules/BackOffice/Offices.mix', 'SOB', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'Cash Repository Setup', '~/Modules/BackOffice/CashRepositories.mix', 'SCR', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'Department Setup', '~/Modules/BackOffice/Departments.mix', 'SDS', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'Role Management', '~/Modules/BackOffice/Roles.mix', 'SRM', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'User Management', '~/Modules/BackOffice/Users.mix', 'SUM', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'Entity Setup', '~/Modules/BackOffice/Entities.mix', 'SES', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'Industry Setup', '~/Modules/BackOffice/Industries.mix', 'SIS', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'Country Setup', '~/Modules/BackOffice/Countries.mix', 'SCRS', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'State Setup', '~/Modules/BackOffice/States.mix', 'SSS', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'County Setup', '~/Modules/BackOffice/Counties.mix', 'SCTS', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'Fiscal Year Information', '~/Modules/BackOffice/FiscalYear.mix', 'SFY', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'Frequency & Fiscal Year Management', '~/Modules/BackOffice/Frequency.mix', 'SFR', 2, core.get_menu_id('SOS')
UNION ALL SELECT 'Policy Management', NULL, 'SPM', 1, core.get_menu_id('BO')
UNION ALL SELECT 'Voucher Verification Policy', '~/Modules/BackOffice/Policy/VoucherVerification.mix', 'SVV', 2, core.get_menu_id('SPM')
UNION ALL SELECT 'Automatic Verification Policy', '~/Modules/BackOffice/Policy/AutoVerification.mix', 'SAV', 2, core.get_menu_id('SPM')
UNION ALL SELECT 'Menu Access Policy', '~/Modules/BackOffice/Policy/MenuAccess.mix', 'SMA', 2, core.get_menu_id('SPM')
UNION ALL SELECT 'GL Access Policy', '~/Modules/BackOffice/Policy/GLAccess.mix', 'SAP', 2, core.get_menu_id('SPM')
UNION ALL SELECT 'Store Policy', '~/Modules/BackOffice/Policy/Store.mix', 'SSP', 2, core.get_menu_id('SPM')
UNION ALL SELECT 'Admin Tools', NULL, 'SAT', 1, core.get_menu_id('BO')
UNION ALL SELECT 'Database Statistics', '~/Modules/BackOffice/Admin/DatabaseStatistics.mix', 'DBSTAT', 2, core.get_menu_id('SAT')
UNION ALL SELECT 'Backup Database', '~/Modules/BackOffice/Admin/DatabaseBackup.mix', 'BAK', 2, core.get_menu_id('SAT')
UNION ALL SELECT 'Change User Password', '~/Modules/BackOffice/Admin/ChangePassword.mix', 'PWD', 2, core.get_menu_id('SAT')
UNION ALL SELECT 'Check Updates', '~/Modules/BackOffice/Admin/CheckUpdates.mix', 'UPD', 2, core.get_menu_id('SAT')
UNION ALL SELECT 'Translate MixERP', '~/Modules/BackOffice/Admin/LocalizeMixERP.mix', 'TRA', 2, core.get_menu_id('SAT')
UNION ALL SELECT 'One Time Setup', NULL, 'OTS', 1, core.get_menu_id('BO')
UNION ALL SELECT 'Opening Inventory', '~/Modules/BackOffice/OTS/OpeningInventory.mix', 'OTSI', 2, core.get_menu_id('OTS');


/********************************************************************************
Copyright (C) Binod Nepal, Mix Open Foundation (http://mixof.org).

This file is part of MixERP.

MixERP is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MixERP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MixERP.  If not, see <http://www.gnu.org/licenses/>.
***********************************************************************************/
--FRENCH
INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('SA'), 'fr', 'ventes' UNION ALL
SELECT core.get_menu_id('PU'), 'fr', 'achat' UNION ALL
SELECT core.get_menu_id('ITM'), 'fr', 'Produits et Articles' UNION ALL
SELECT core.get_menu_id('FI'), 'fr', 'financement' UNION ALL
SELECT core.get_menu_id('BO'), 'fr', 'Back-Office' UNION ALL
SELECT core.get_menu_id('SAQ'), 'fr', 'Sales & Devis' UNION ALL
SELECT core.get_menu_id('DRS'), 'fr', 'Ventes directes' UNION ALL
SELECT core.get_menu_id('SQ'), 'fr', 'Devis de vente' UNION ALL
SELECT core.get_menu_id('SO'), 'fr', 'Commande client' UNION ALL
SELECT core.get_menu_id('SD'), 'fr', 'Vente livraison' UNION ALL
SELECT core.get_menu_id('RFC'), 'fr', 'Réception du client' UNION ALL
SELECT core.get_menu_id('SR'), 'fr', 'Retour sur les ventes' UNION ALL
SELECT core.get_menu_id('SSM'), 'fr', 'Le programme d''installation & entretien' UNION ALL
SELECT core.get_menu_id('ABS'), 'fr', 'Dalle de bonus pour les vendeurs' UNION ALL
SELECT core.get_menu_id('BSD'), 'fr', 'Détails du bonus dalle' UNION ALL
SELECT core.get_menu_id('SST'), 'fr', 'Équipes de vente' UNION ALL
SELECT core.get_menu_id('SSA'), 'fr', 'Vendeurs/vendeuses' UNION ALL
SELECT core.get_menu_id('BSA'), 'fr', 'Affectation de dalle de bonus' UNION ALL
SELECT core.get_menu_id('LF'), 'fr', 'Frais de retard' UNION ALL
SELECT core.get_menu_id('PAT'), 'fr', 'Conditions de paiement' UNION ALL
SELECT core.get_menu_id('RI'), 'fr', 'Factures récurrentes' UNION ALL
SELECT core.get_menu_id('RIS'), 'fr', 'Paramètres des factures récurrentes' UNION ALL
SELECT core.get_menu_id('SAR'), 'fr', 'Rapports sur les ventes' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'fr', 'Haut de la page points de vente' UNION ALL
SELECT core.get_menu_id('PUQ'), 'fr', 'Achat & citation' UNION ALL
SELECT core.get_menu_id('DRP'), 'fr', 'Achat direct' UNION ALL
SELECT core.get_menu_id('PO'), 'fr', 'Bon de commande' UNION ALL
SELECT core.get_menu_id('PRO'), 'fr', 'Achat Reorder' UNION ALL
SELECT core.get_menu_id('GRN'), 'fr', 'Entrée GRN' UNION ALL
SELECT core.get_menu_id('PR'), 'fr', 'Achat de retour' UNION ALL
SELECT core.get_menu_id('PUR'), 'fr', 'Rapports d''achat' UNION ALL
SELECT core.get_menu_id('IIM'), 'fr', 'Mouvements de stock' UNION ALL
SELECT core.get_menu_id('STJ'), 'fr', 'Feuille de transfert de stock' UNION ALL
SELECT core.get_menu_id('STA'), 'fr', 'Ajustements de stocks' UNION ALL
SELECT core.get_menu_id('ISM'), 'fr', 'Le programme d''installation & entretien' UNION ALL
SELECT core.get_menu_id('STT'), 'fr', 'Types de magasins' UNION ALL
SELECT core.get_menu_id('STO'), 'fr', 'Magasins' UNION ALL
SELECT core.get_menu_id('SCS'), 'fr', 'Installation de compteur' UNION ALL
SELECT core.get_menu_id('PT'), 'fr', 'Types de partie' UNION ALL
SELECT core.get_menu_id('PA'), 'fr', 'Comptes de tiers' UNION ALL
SELECT core.get_menu_id('PSA'), 'fr', 'Adresses d''expédition' UNION ALL
SELECT core.get_menu_id('SSI'), 'fr', 'Gestion des Articles' UNION ALL
SELECT core.get_menu_id('SSC'), 'fr', 'Composé d''éléments' UNION ALL
SELECT core.get_menu_id('SSCD'), 'fr', 'Détails de l''élément composé' UNION ALL
SELECT core.get_menu_id('ICP'), 'fr', 'Prix de revient' UNION ALL
SELECT core.get_menu_id('ISP'), 'fr', 'Prix de vente' UNION ALL
SELECT core.get_menu_id('SIG'), 'fr', 'Groupes d''articles' UNION ALL
SELECT core.get_menu_id('SIT'), 'fr', 'Types d''éléments' UNION ALL
SELECT core.get_menu_id('SSB'), 'fr', 'Marques' UNION ALL
SELECT core.get_menu_id('UOM'), 'fr', 'Unités de mesure' UNION ALL
SELECT core.get_menu_id('CUOM'), 'fr', 'Composé d''unités de mesure' UNION ALL
SELECT core.get_menu_id('SHI'), 'fr', 'Informations de l''expéditeur' UNION ALL
SELECT core.get_menu_id('IR'), 'fr', 'Rapports' UNION ALL
SELECT core.get_menu_id('IAS'), 'fr', 'Relevé de compte de l''inventaire' UNION ALL
SELECT core.get_menu_id('FTT'), 'fr', 'Modèles de & de transactions' UNION ALL
SELECT core.get_menu_id('JVN'), 'fr', 'Bon écriture' UNION ALL
SELECT core.get_menu_id('UER'), 'fr', 'Mise à jour des taux de change' UNION ALL
SELECT core.get_menu_id('FVV'), 'fr', 'Vérification du bon' UNION ALL
SELECT core.get_menu_id('EOD'), 'fr', 'Fin de l''opération de la journée' UNION ALL
SELECT core.get_menu_id('FSM'), 'fr', 'Le programme d''installation & entretien' UNION ALL
SELECT core.get_menu_id('COA'), 'fr', 'Plan comptable' UNION ALL
SELECT core.get_menu_id('CUR'), 'fr', 'Gestion de la devise' UNION ALL
SELECT core.get_menu_id('CBA'), 'fr', 'Comptes bancaires' UNION ALL
SELECT core.get_menu_id('AGS'), 'fr', 'Vieillissement des dalles' UNION ALL
SELECT core.get_menu_id('CFH'), 'fr', 'Positions de trésorerie' UNION ALL
SELECT core.get_menu_id('CFS'), 'fr', 'Configuration des flux de trésorerie' UNION ALL
SELECT core.get_menu_id('CC'), 'fr', 'Centres de coûts' UNION ALL
SELECT core.get_menu_id('FIR'), 'fr', 'Rapports' UNION ALL
SELECT core.get_menu_id('AS'), 'fr', 'Relevé de compte' UNION ALL
SELECT core.get_menu_id('TB'), 'fr', 'Balance de vérification' UNION ALL
SELECT core.get_menu_id('PLA'), 'fr', 'Profit & compte de la perte' UNION ALL
SELECT core.get_menu_id('BS'), 'fr', 'Bilan' UNION ALL
SELECT core.get_menu_id('RET'), 'fr', 'Des Bénéfices Non Répartis' UNION ALL
SELECT core.get_menu_id('CF'), 'fr', 'Flux de trésorerie' UNION ALL
SELECT core.get_menu_id('BOTC'), 'fr', 'Configuration de l''impôt' UNION ALL
SELECT core.get_menu_id('TXM'), 'fr', 'Maître de l''impôt' UNION ALL
SELECT core.get_menu_id('TXA'), 'fr', 'Administration fiscale' UNION ALL
SELECT core.get_menu_id('STXT'), 'fr', 'Types de taxe de vente' UNION ALL
SELECT core.get_menu_id('STST'), 'fr', 'État des Taxes de vente' UNION ALL
SELECT core.get_menu_id('CTST'), 'fr', 'Taxes de vente de comtés' UNION ALL
SELECT core.get_menu_id('STX'), 'fr', 'Taxes de vente' UNION ALL
SELECT core.get_menu_id('STXD'), 'fr', 'Détails de la taxe de vente' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'fr', 'Types exonérés de taxe' UNION ALL
SELECT core.get_menu_id('STXEX'), 'fr', 'Exempte de la taxe de vente' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'fr', 'Détails exonéré de taxe de vente' UNION ALL
SELECT core.get_menu_id('SMP'), 'fr', 'Divers paramètres' UNION ALL
SELECT core.get_menu_id('TRF'), 'fr', 'Drapeaux' UNION ALL
SELECT core.get_menu_id('SEAR'), 'fr', 'Rapports d''audit' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'fr', 'Vue de l''ouverture de session' UNION ALL
SELECT core.get_menu_id('SOS'), 'fr', 'Installation de Office' UNION ALL
SELECT core.get_menu_id('SOB'), 'fr', 'Bureau & de la direction générale de la configuration' UNION ALL
SELECT core.get_menu_id('SCR'), 'fr', 'Installation de dépôt comptant' UNION ALL
SELECT core.get_menu_id('SDS'), 'fr', 'Département installation' UNION ALL
SELECT core.get_menu_id('SRM'), 'fr', 'Gestion des rôles' UNION ALL
SELECT core.get_menu_id('SUM'), 'fr', 'Gestion des utilisateurs' UNION ALL
SELECT core.get_menu_id('SES'), 'fr', 'Configuration de l''entité' UNION ALL
SELECT core.get_menu_id('SIS'), 'fr', 'Installation de l''industrie' UNION ALL
SELECT core.get_menu_id('SCRS'), 'fr', 'Programme d''installation de pays' UNION ALL
SELECT core.get_menu_id('SSS'), 'fr', 'Installation de l''État' UNION ALL
SELECT core.get_menu_id('SCTS'), 'fr', 'Comté de Setup' UNION ALL
SELECT core.get_menu_id('SFY'), 'fr', 'Informations de l''exercice' UNION ALL
SELECT core.get_menu_id('SFR'), 'fr', 'Fréquence & la gestion de l''exercice' UNION ALL
SELECT core.get_menu_id('SPM'), 'fr', 'Gestion des stratégies de' UNION ALL
SELECT core.get_menu_id('SVV'), 'fr', 'Politique sur la vérification bon' UNION ALL
SELECT core.get_menu_id('SAV'), 'fr', 'Politique sur la vérification automatique' UNION ALL
SELECT core.get_menu_id('SMA'), 'fr', 'Stratégie d''accès menu' UNION ALL
SELECT core.get_menu_id('SAP'), 'fr', 'Stratégie d''accès GL' UNION ALL
SELECT core.get_menu_id('SSP'), 'fr', 'Politique de boutique' UNION ALL
SELECT core.get_menu_id('SAT'), 'fr', 'Outils d''administration' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'fr', 'Outil de requête SQL' UNION ALL
SELECT core.get_menu_id('BAK'), 'fr', 'Sauvegarde base de données' UNION ALL
SELECT core.get_menu_id('PWD'), 'fr', 'Changer mot de passe utilisateur' UNION ALL
SELECT core.get_menu_id('UPD'), 'fr', 'Vérifiez Mise à jour' UNION ALL
SELECT core.get_menu_id('TRA'), 'fr', 'Traduire MixERP' UNION ALL
SELECT core.get_menu_id('OTS'), 'fr', 'Un réglage de l''heure' UNION ALL
SELECT core.get_menu_id('OTSI'), 'fr', 'Stock d''ouverture';

--GERMAN
INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('STA'), 'de', 'Auf Anpassungen' UNION ALL
SELECT core.get_menu_id('PWD'), 'de', 'Benutzerpasswort ändern' UNION ALL
SELECT core.get_menu_id('UER'), 'de', 'Update Wechselkurse' UNION ALL
SELECT core.get_menu_id('BO'), 'de', 'Back Office' UNION ALL
SELECT core.get_menu_id('BAK'), 'de', 'Datenbank sichern' UNION ALL
SELECT core.get_menu_id('TB'), 'de', 'Rohbilanz' UNION ALL
SELECT core.get_menu_id('BS'), 'de', 'Bilanz' UNION ALL
SELECT core.get_menu_id('TRF'), 'de', 'Flaggen' UNION ALL
SELECT core.get_menu_id('BSA'), 'de', 'Bonus Slab Zuordnung' UNION ALL
SELECT core.get_menu_id('BSD'), 'de', 'Bonus Slab-Details' UNION ALL
SELECT core.get_menu_id('CC'), 'de', 'Kostenstellen' UNION ALL
SELECT core.get_menu_id('PU'), 'de', 'Kauf' UNION ALL
SELECT core.get_menu_id('PUQ'), 'de', 'Einkauf & Quotation' UNION ALL
SELECT core.get_menu_id('DRP'), 'de', 'Direktkauf' UNION ALL
SELECT core.get_menu_id('PRO'), 'de', 'Kauf Reorder' UNION ALL
SELECT core.get_menu_id('PR'), 'de', 'Kauf Return' UNION ALL
SELECT core.get_menu_id('SVV'), 'de', 'Gutschein Verification Politik' UNION ALL
SELECT core.get_menu_id('PAT'), 'de', 'Zahlungsbedingungen' UNION ALL
SELECT core.get_menu_id('BOTC'), 'de', 'Steuerkonfiguration' UNION ALL
SELECT core.get_menu_id('SSM'), 'de', 'Einrichtung und Wartung' UNION ALL
SELECT core.get_menu_id('ISM'), 'de', 'Einrichtung und Wartung' UNION ALL
SELECT core.get_menu_id('FSM'), 'de', 'Einrichtung und Wartung' UNION ALL
SELECT core.get_menu_id('CBA'), 'de', 'Bankkonten' UNION ALL
SELECT core.get_menu_id('PA'), 'de', 'Party-Accounts' UNION ALL
SELECT core.get_menu_id('SQ'), 'de', 'Vertrieb Quotation' UNION ALL
SELECT core.get_menu_id('SA'), 'de', 'Vertrieb' UNION ALL
SELECT core.get_menu_id('PLA'), 'de', 'Gewinn- und Verlustrechnung' UNION ALL
SELECT core.get_menu_id('SSCD'), 'de', 'Verbindung Einzelteil-Details' UNION ALL
SELECT core.get_menu_id('STXD'), 'de', 'Umsatzsteuer-Details' UNION ALL
SELECT core.get_menu_id('PSA'), 'de', 'Lieferadressen' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'de', 'Login Zeige' UNION ALL
SELECT core.get_menu_id('SD'), 'de', 'Vertrieb Lieferung' UNION ALL
SELECT core.get_menu_id('SST'), 'de', 'Vertriebsteams' UNION ALL
SELECT core.get_menu_id('SOB'), 'de', 'Büro & Filiale einrichten' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'de', 'Datenbankstatistik' UNION ALL
SELECT core.get_menu_id('IAS'), 'de', 'Bestandskontoauszug' UNION ALL
SELECT core.get_menu_id('AS'), 'de', 'Kontoauszug' UNION ALL
SELECT core.get_menu_id('RI'), 'de', 'Wiederkehrende Rechnungen' UNION ALL
SELECT core.get_menu_id('SAT'), 'de', 'Admin Tools' UNION ALL
SELECT core.get_menu_id('EOD'), 'de', 'End of Day Betrieb' UNION ALL
SELECT core.get_menu_id('FI'), 'de', 'Finanzen' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'de', 'Steuerbefreiung Typen' UNION ALL
SELECT core.get_menu_id('SFY'), 'de', 'Geschäftsjahresinformationen' UNION ALL
SELECT core.get_menu_id('TXA'), 'de', 'Steuerbehörden' UNION ALL
SELECT core.get_menu_id('CF'), 'de', 'Cashflow' UNION ALL
SELECT core.get_menu_id('CFH'), 'de', 'Kapitalflussüberschriften' UNION ALL
SELECT core.get_menu_id('SRM'), 'de', 'Rollenverwaltung' UNION ALL
SELECT core.get_menu_id('SUM'), 'de', 'Benutzerverwaltung' UNION ALL
SELECT core.get_menu_id('SFR'), 'de', 'Frequenz & Geschäftsjahr Verwaltung' UNION ALL
SELECT core.get_menu_id('CUR'), 'de', 'Währungsmanagement' UNION ALL
SELECT core.get_menu_id('SPM'), 'de', 'Policy Management' UNION ALL
SELECT core.get_menu_id('SAP'), 'de', 'Hauptbuch-Richtlinien' UNION ALL
SELECT core.get_menu_id('SIG'), 'de', 'Artikelgruppen' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'de', 'Sales Tax Exempt Einzelheiten' UNION ALL
SELECT core.get_menu_id('CTST'), 'de', 'Grafschaft Umsatzsteuer' UNION ALL
SELECT core.get_menu_id('STST'), 'de', 'State Sales Taxes' UNION ALL
SELECT core.get_menu_id('STX'), 'de', 'Umsatzsteuer' UNION ALL
SELECT core.get_menu_id('SHI'), 'de', 'Shipper Informationen' UNION ALL
SELECT core.get_menu_id('SOS'), 'de', 'Office Setup' UNION ALL
SELECT core.get_menu_id('OTSI'), 'de', 'Öffnungs Inventar' UNION ALL
SELECT core.get_menu_id('STXEX'), 'de', 'Umsatzsteuer befreit' UNION ALL
SELECT core.get_menu_id('SSI'), 'de', 'Artikelpflege' UNION ALL
SELECT core.get_menu_id('SSC'), 'de', 'Compound Artikel' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'de', 'Meistverkaufte Artikel' UNION ALL
SELECT core.get_menu_id('STJ'), 'de', 'Umlagerung Blatt' UNION ALL
SELECT core.get_menu_id('JVN'), 'de', 'Journal Gutschein Eintrag' UNION ALL
SELECT core.get_menu_id('AGS'), 'de', 'Ageing Brammen' UNION ALL
SELECT core.get_menu_id('SSB'), 'de', 'Brands' UNION ALL
SELECT core.get_menu_id('GRN'), 'de', 'Wareneingang Hinweis Eintrag' UNION ALL
SELECT core.get_menu_id('TXM'), 'de', 'Steuern Meister' UNION ALL
SELECT core.get_menu_id('IIM'), 'de', 'Lagerbewegungen' UNION ALL
SELECT core.get_menu_id('OTS'), 'de', 'Eine Zeiteinstellung' UNION ALL
SELECT core.get_menu_id('PO'), 'de', 'Auftragsbestätigung' UNION ALL
SELECT core.get_menu_id('ISP'), 'de', 'Verkaufs Preise' UNION ALL
SELECT core.get_menu_id('SMP'), 'de', 'Verschiedene Parameter' UNION ALL
SELECT core.get_menu_id('SO'), 'de', 'Sales Order' UNION ALL
SELECT core.get_menu_id('COA'), 'de', 'Kontenplan' UNION ALL
SELECT core.get_menu_id('SSP'), 'de', 'Speicher-Politik' UNION ALL
SELECT core.get_menu_id('SMA'), 'de', 'Menü-Richtlinien' UNION ALL
SELECT core.get_menu_id('SAV'), 'de', 'Automatische Verifikation Politik' UNION ALL
SELECT core.get_menu_id('ICP'), 'de', 'Kosten Preise' UNION ALL
SELECT core.get_menu_id('ITM'), 'de', 'Produkte & Angebote' UNION ALL
SELECT core.get_menu_id('RFC'), 'de', 'Empfang vom Kunden' UNION ALL
SELECT core.get_menu_id('IR'), 'de', 'Berichte' UNION ALL
SELECT core.get_menu_id('FIR'), 'de', 'Berichte' UNION ALL
SELECT core.get_menu_id('SEAR'), 'de', 'Prüfungsberichte' UNION ALL
SELECT core.get_menu_id('PUR'), 'de', 'Kauf Berichte' UNION ALL
SELECT core.get_menu_id('SAR'), 'de', 'Verkaufsberichte' UNION ALL
SELECT core.get_menu_id('SR'), 'de', 'Absatzertrag' UNION ALL
SELECT core.get_menu_id('SCS'), 'de', 'Zähler-Setup' UNION ALL
SELECT core.get_menu_id('SCTS'), 'de', 'Grafschaft-Setup' UNION ALL
SELECT core.get_menu_id('SDS'), 'de', 'Abteilung einrichten' UNION ALL
SELECT core.get_menu_id('SCR'), 'de', 'Barzahlung Repository einrichten' UNION ALL
SELECT core.get_menu_id('SES'), 'de', 'Entity-Setup' UNION ALL
SELECT core.get_menu_id('SSS'), 'de', 'staatliche Einrichtung' UNION ALL
SELECT core.get_menu_id('SIS'), 'de', 'Industrie-Setup' UNION ALL
SELECT core.get_menu_id('RIS'), 'de', 'Wiederkehrende Rechnung einrichten' UNION ALL
SELECT core.get_menu_id('SCRS'), 'de', 'Land-Setup' UNION ALL
SELECT core.get_menu_id('ABS'), 'de', 'Bonus Bramme für Aussendienst' UNION ALL
SELECT core.get_menu_id('STO'), 'de', 'Shops' UNION ALL
SELECT core.get_menu_id('LF'), 'de', 'Späte Gebühren' UNION ALL
SELECT core.get_menu_id('STT'), 'de', 'Shop Typen' UNION ALL
SELECT core.get_menu_id('STXT'), 'de', 'Umsatzsteuerarten' UNION ALL
SELECT core.get_menu_id('PT'), 'de', 'Party-Typen' UNION ALL
SELECT core.get_menu_id('FTT'), 'de', 'Transaktionen und Vorlagen' UNION ALL
SELECT core.get_menu_id('UOM'), 'de', 'Maßeinheiten' UNION ALL
SELECT core.get_menu_id('CUOM'), 'de', 'Verbindung Maßeinheiten' UNION ALL
SELECT core.get_menu_id('DRS'), 'de', 'Direct Sales' UNION ALL
SELECT core.get_menu_id('SAQ'), 'de', 'Vertrieb Quotation' UNION ALL
SELECT core.get_menu_id('SSA'), 'de', 'Aussendienst' UNION ALL
SELECT core.get_menu_id('FVV'), 'de', 'Gutschein Verification';

--RUSSIAN
INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('ABS'), 'ru', 'Бонус Плиты для продавцов' UNION ALL
SELECT core.get_menu_id('AGS'), 'ru', 'Старение плиты' UNION ALL
SELECT core.get_menu_id('AS'), 'ru', 'Выписка по счету' UNION ALL
SELECT core.get_menu_id('BAK'), 'ru', 'Резервное копирование базы данных' UNION ALL
SELECT core.get_menu_id('BO'), 'ru', 'бэк-офис' UNION ALL
SELECT core.get_menu_id('BOTC'), 'ru', 'Налоговый конфигурации' UNION ALL
SELECT core.get_menu_id('BS'), 'ru', 'баланс' UNION ALL
SELECT core.get_menu_id('BSA'), 'ru', 'Бонус Плиты Назначение' UNION ALL
SELECT core.get_menu_id('BSD'), 'ru', 'Бонус Плиты Подробности' UNION ALL
SELECT core.get_menu_id('CBA'), 'ru', 'Банковские счета' UNION ALL
SELECT core.get_menu_id('CC'), 'ru', 'МВЗ' UNION ALL
SELECT core.get_menu_id('CF'), 'ru', 'Денежный Поток' UNION ALL
SELECT core.get_menu_id('CFH'), 'ru', 'Денежные средства Заголовки потока' UNION ALL
SELECT core.get_menu_id('COA'), 'ru', 'План счетов' UNION ALL
SELECT core.get_menu_id('CTST'), 'ru', 'Графство налог с продаж' UNION ALL
SELECT core.get_menu_id('CUOM'), 'ru', 'Составные единицы измерения' UNION ALL
SELECT core.get_menu_id('CUR'), 'ru', 'Валюта управления' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'ru', 'Статистика базы данных' UNION ALL
SELECT core.get_menu_id('DRP'), 'ru', 'Прямая Покупка' UNION ALL
SELECT core.get_menu_id('DRS'), 'ru', 'Прямые продажи' UNION ALL
SELECT core.get_menu_id('EOD'), 'ru', 'Конец операционного дня' UNION ALL
SELECT core.get_menu_id('FI'), 'ru', 'финансы' UNION ALL
SELECT core.get_menu_id('FIR'), 'ru', 'Отчеты' UNION ALL
SELECT core.get_menu_id('FSM'), 'ru', 'Настройка и обслуживание' UNION ALL
SELECT core.get_menu_id('FTT'), 'ru', 'Операции и шаблоны' UNION ALL
SELECT core.get_menu_id('FVV'), 'ru', 'Ваучер Проверка' UNION ALL
SELECT core.get_menu_id('GRN'), 'ru', 'Товары Поступило Примечание Вступление' UNION ALL
SELECT core.get_menu_id('IAS'), 'ru', 'Выписка по счету Инвентарь' UNION ALL
SELECT core.get_menu_id('ICP'), 'ru', 'Стоимость Цены' UNION ALL
SELECT core.get_menu_id('IIM'), 'ru', 'Инвентаризация движения' UNION ALL
SELECT core.get_menu_id('IR'), 'ru', 'Отчеты' UNION ALL
SELECT core.get_menu_id('ISM'), 'ru', 'Настройка и обслуживание' UNION ALL
SELECT core.get_menu_id('ISP'), 'ru', 'Отпускные цены' UNION ALL
SELECT core.get_menu_id('ITM'), 'ru', 'Продукты и товары' UNION ALL
SELECT core.get_menu_id('JVN'), 'ru', 'Журнал Ваучер запись' UNION ALL
SELECT core.get_menu_id('LF'), 'ru', 'Штраф за просрочку платежей' UNION ALL
SELECT core.get_menu_id('OTS'), 'ru', 'Один Время установки' UNION ALL
SELECT core.get_menu_id('OTSI'), 'ru', 'Открытие Инвентарь' UNION ALL
SELECT core.get_menu_id('PA'), 'ru', 'Вечеринка счета' UNION ALL
SELECT core.get_menu_id('PAT'), 'ru', 'условия платежа' UNION ALL
SELECT core.get_menu_id('PLA'), 'ru', 'Прибыль и убытках' UNION ALL
SELECT core.get_menu_id('PO'), 'ru', 'Заказ На Покупку' UNION ALL
SELECT core.get_menu_id('PR'), 'ru', 'Покупка Возврат' UNION ALL
SELECT core.get_menu_id('PRO'), 'ru', 'Покупка Reorder' UNION ALL
SELECT core.get_menu_id('PSA'), 'ru', 'Доставка Адреса' UNION ALL
SELECT core.get_menu_id('PT'), 'ru', 'Вечеринка Типы' UNION ALL
SELECT core.get_menu_id('PU'), 'ru', 'покупка' UNION ALL
SELECT core.get_menu_id('PUQ'), 'ru', 'Покупка и цитаты' UNION ALL
SELECT core.get_menu_id('PUR'), 'ru', 'Покупка Отчеты' UNION ALL
SELECT core.get_menu_id('PWD'), 'ru', 'Изменить пользователя Пароль' UNION ALL
SELECT core.get_menu_id('RFC'), 'ru', 'Получении от клиента' UNION ALL
SELECT core.get_menu_id('RI'), 'ru', 'Повторяющиеся Счета' UNION ALL
SELECT core.get_menu_id('RIS'), 'ru', 'Повторяющиеся установки Счет' UNION ALL
SELECT core.get_menu_id('SA'), 'ru', 'продажа' UNION ALL
SELECT core.get_menu_id('SAP'), 'ru', 'Политика доступа GL' UNION ALL
SELECT core.get_menu_id('SAQ'), 'ru', 'Цитата продаж' UNION ALL
SELECT core.get_menu_id('SAR'), 'ru', 'Отчеты по продажам' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'ru', 'Самые продаваемые товары' UNION ALL
SELECT core.get_menu_id('SAT'), 'ru', 'Действия администратора Инструменты' UNION ALL
SELECT core.get_menu_id('SAV'), 'ru', 'Политика Автоматическая проверка' UNION ALL
SELECT core.get_menu_id('SCR'), 'ru', 'Настройка наличными Repository' UNION ALL
SELECT core.get_menu_id('SCRS'), 'ru', 'Страна Setup' UNION ALL
SELECT core.get_menu_id('SCS'), 'ru', 'Счетчик установки' UNION ALL
SELECT core.get_menu_id('SCTS'), 'ru', 'Настройка County' UNION ALL
SELECT core.get_menu_id('SD'), 'ru', 'продажи Доставка' UNION ALL
SELECT core.get_menu_id('SDS'), 'ru', 'Настройка Департамент' UNION ALL
SELECT core.get_menu_id('SEAR'), 'ru', 'Финансовые отчеты' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'ru', 'Войти Посмотреть' UNION ALL
SELECT core.get_menu_id('SES'), 'ru', 'Entity Setup' UNION ALL
SELECT core.get_menu_id('SFR'), 'ru', 'Управление частотой и финансовый год' UNION ALL
SELECT core.get_menu_id('SFY'), 'ru', 'Финансовый год Информация' UNION ALL
SELECT core.get_menu_id('SHI'), 'ru', 'Грузовладелец информация' UNION ALL
SELECT core.get_menu_id('SIG'), 'ru', 'Группы товаров' UNION ALL
SELECT core.get_menu_id('SIS'), 'ru', 'Настройка Промышленность' UNION ALL
SELECT core.get_menu_id('SMA'), 'ru', 'Меню политика доступа' UNION ALL
SELECT core.get_menu_id('SMP'), 'ru', 'Разное параметры' UNION ALL
SELECT core.get_menu_id('SO'), 'ru', 'продажи Заказать' UNION ALL
SELECT core.get_menu_id('SOB'), 'ru', 'Управление и отделения установки' UNION ALL
SELECT core.get_menu_id('SOS'), 'ru', 'Программа установки Office' UNION ALL
SELECT core.get_menu_id('SPM'), 'ru', 'Управление политиками' UNION ALL
SELECT core.get_menu_id('SQ'), 'ru', 'Цитата продаж' UNION ALL
SELECT core.get_menu_id('SR'), 'ru', 'продажи Вернуться' UNION ALL
SELECT core.get_menu_id('SRM'), 'ru', 'Роль управления' UNION ALL
SELECT core.get_menu_id('SSA'), 'ru', 'Продавцы' UNION ALL
SELECT core.get_menu_id('SSB'), 'ru', 'Бренды' UNION ALL
SELECT core.get_menu_id('SSC'), 'ru', 'Составные товары' UNION ALL
SELECT core.get_menu_id('SSCD'), 'ru', 'Соединение Пункт подробности' UNION ALL
SELECT core.get_menu_id('SSI'), 'ru', 'Пункт технического обслуживания' UNION ALL
SELECT core.get_menu_id('SSM'), 'ru', 'Настройка и обслуживание' UNION ALL
SELECT core.get_menu_id('SSP'), 'ru', 'Политика магазина' UNION ALL
SELECT core.get_menu_id('SSS'), 'ru', 'Государственный Setup' UNION ALL
SELECT core.get_menu_id('SST'), 'ru', 'Продажи команды' UNION ALL
SELECT core.get_menu_id('STA'), 'ru', 'Сток Корректировки' UNION ALL
SELECT core.get_menu_id('STJ'), 'ru', 'Перемещение запаса журнал' UNION ALL
SELECT core.get_menu_id('STO'), 'ru', 'магазины' UNION ALL
SELECT core.get_menu_id('STST'), 'ru', 'Государственные налогов с продаж' UNION ALL
SELECT core.get_menu_id('STT'), 'ru', 'Типы магазин' UNION ALL
SELECT core.get_menu_id('STX'), 'ru', 'налог с продаж' UNION ALL
SELECT core.get_menu_id('STXD'), 'ru', 'Налог на продажу Подробнее' UNION ALL
SELECT core.get_menu_id('STXEX'), 'ru', 'Налог на продажу льготников' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'ru', 'Налог на продажу Освобожденные Подробнее' UNION ALL
SELECT core.get_menu_id('STXT'), 'ru', 'Типы Налог на продажу' UNION ALL
SELECT core.get_menu_id('SUM'), 'ru', 'Управление пользователями' UNION ALL
SELECT core.get_menu_id('SVV'), 'ru', 'Политика Ваучер Проверка' UNION ALL
SELECT core.get_menu_id('TB'), 'ru', 'пробный баланс' UNION ALL
SELECT core.get_menu_id('TRF'), 'ru', 'Флаги' UNION ALL
SELECT core.get_menu_id('TXA'), 'ru', 'Налоговые органы' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'ru', 'Освобождаются от налогообложения Типы' UNION ALL
SELECT core.get_menu_id('TXM'), 'ru', 'Налоговый Мастер' UNION ALL
SELECT core.get_menu_id('UER'), 'ru', 'Update Wechselkurse' UNION ALL
SELECT core.get_menu_id('UOM'), 'ru', 'Единицы измерения';

--JAPANESE

INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('ABS'), 'ja', '販売員のためのボーナススラブ' UNION ALL
SELECT core.get_menu_id('AGS'), 'ja', '高齢スラブ' UNION ALL
SELECT core.get_menu_id('AS'), 'ja', '取引明細書' UNION ALL
SELECT core.get_menu_id('BAK'), 'ja', 'バックアップ·データベース' UNION ALL
SELECT core.get_menu_id('BO'), 'ja', 'バックオフィス' UNION ALL
SELECT core.get_menu_id('BOTC'), 'ja', '税の設定' UNION ALL
SELECT core.get_menu_id('BS'), 'ja', 'バランスシート' UNION ALL
SELECT core.get_menu_id('BSA'), 'ja', 'ボーナススラブの割り当て' UNION ALL
SELECT core.get_menu_id('BSD'), 'ja', 'ボーナススラブ詳細' UNION ALL
SELECT core.get_menu_id('CBA'), 'ja', '銀行口座' UNION ALL
SELECT core.get_menu_id('CC'), 'ja', '原価センタ' UNION ALL
SELECT core.get_menu_id('CF'), 'ja', '現金流量' UNION ALL
SELECT core.get_menu_id('CFH'), 'ja', 'キャッシュフロー見出し' UNION ALL
SELECT core.get_menu_id('COA'), 'ja', '勘定科目一覧表' UNION ALL
SELECT core.get_menu_id('CTST'), 'ja', '郡の売上税' UNION ALL
SELECT core.get_menu_id('CUOM'), 'ja', 'メジャーの化合物単位' UNION ALL
SELECT core.get_menu_id('CUR'), 'ja', '通貨管理' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'ja', 'データベース統計' UNION ALL
SELECT core.get_menu_id('DRP'), 'ja', '直接購入' UNION ALL
SELECT core.get_menu_id('DRS'), 'ja', '直販' UNION ALL
SELECT core.get_menu_id('EOD'), 'ja', 'デイ操作の終了' UNION ALL
SELECT core.get_menu_id('FI'), 'ja', '金融' UNION ALL
SELECT core.get_menu_id('FIR'), 'ja', 'レポート' UNION ALL
SELECT core.get_menu_id('FSM'), 'ja', 'セットアップとメンテナンス' UNION ALL
SELECT core.get_menu_id('FTT'), 'ja', '取引＆テンプレート' UNION ALL
SELECT core.get_menu_id('FVV'), 'ja', 'バウチャーの検証' UNION ALL
SELECT core.get_menu_id('GRN'), 'ja', 'GRNエントリー' UNION ALL
SELECT core.get_menu_id('IAS'), 'ja', '在庫勘定書' UNION ALL
SELECT core.get_menu_id('ICP'), 'ja', 'コスト価格' UNION ALL
SELECT core.get_menu_id('IIM'), 'ja', '在庫変動' UNION ALL
SELECT core.get_menu_id('IR'), 'ja', 'レポート' UNION ALL
SELECT core.get_menu_id('ISM'), 'ja', 'セットアップとメンテナンス' UNION ALL
SELECT core.get_menu_id('ISP'), 'ja', '販売価格' UNION ALL
SELECT core.get_menu_id('ITM'), 'ja', '製品＆アイテム' UNION ALL
SELECT core.get_menu_id('JVN'), 'ja', 'ジャーナルバウチャーエントリー' UNION ALL
SELECT core.get_menu_id('LF'), 'ja', '延滞料' UNION ALL
SELECT core.get_menu_id('OTS'), 'ja', 'ワンタイムの設定' UNION ALL
SELECT core.get_menu_id('OTSI'), 'ja', 'オープニングインベントリ' UNION ALL
SELECT core.get_menu_id('PA'), 'ja', 'パーティーのアカウント' UNION ALL
SELECT core.get_menu_id('PAT'), 'ja', '支払条件' UNION ALL
SELECT core.get_menu_id('PLA'), 'ja', '損益勘定' UNION ALL
SELECT core.get_menu_id('PO'), 'ja', '注文書' UNION ALL
SELECT core.get_menu_id('PR'), 'ja', '購入戻る' UNION ALL
SELECT core.get_menu_id('PRO'), 'ja', '購入並べ替え' UNION ALL
SELECT core.get_menu_id('PSA'), 'ja', '配送先住所' UNION ALL
SELECT core.get_menu_id('PT'), 'ja', 'パーティーの種類' UNION ALL
SELECT core.get_menu_id('PU'), 'ja', '購入' UNION ALL
SELECT core.get_menu_id('PUQ'), 'ja', '購入＆見積' UNION ALL
SELECT core.get_menu_id('PUR'), 'ja', '購入レポート' UNION ALL
SELECT core.get_menu_id('PWD'), 'ja', 'ユーザーパスワードの変更' UNION ALL
SELECT core.get_menu_id('RFC'), 'ja', 'お客様からの領収書' UNION ALL
SELECT core.get_menu_id('RI'), 'ja', '定期的な請求書' UNION ALL
SELECT core.get_menu_id('RIS'), 'ja', '経常請求書のセットアップ' UNION ALL
SELECT core.get_menu_id('SA'), 'ja', 'セールス' UNION ALL
SELECT core.get_menu_id('SAP'), 'ja', 'GLアクセスポリシー' UNION ALL
SELECT core.get_menu_id('SAQ'), 'ja', 'セールス＆見積' UNION ALL
SELECT core.get_menu_id('SAR'), 'ja', '営業レポート' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'ja', '人気商品ランキング' UNION ALL
SELECT core.get_menu_id('SAT'), 'ja', '管理ツール' UNION ALL
SELECT core.get_menu_id('SAV'), 'ja', '自動検証ポリシー' UNION ALL
SELECT core.get_menu_id('SCR'), 'ja', '現金リポジトリのセットアップ' UNION ALL
SELECT core.get_menu_id('SCRS'), 'ja', '国のセットアップ' UNION ALL
SELECT core.get_menu_id('SCS'), 'ja', 'カウンターのセットアップ' UNION ALL
SELECT core.get_menu_id('SCTS'), 'ja', '郡のセットアップ' UNION ALL
SELECT core.get_menu_id('SD'), 'ja', '販売配達' UNION ALL
SELECT core.get_menu_id('SDS'), 'ja', '部署のセットアップ' UNION ALL
SELECT core.get_menu_id('SEAR'), 'ja', '監査レポート' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'ja', 'ログインを見る' UNION ALL
SELECT core.get_menu_id('SES'), 'ja', 'エンティティのセットアップ' UNION ALL
SELECT core.get_menu_id('SFR'), 'ja', '周波数＆会計年度の経営' UNION ALL
SELECT core.get_menu_id('SFY'), 'ja', '年度情報' UNION ALL
SELECT core.get_menu_id('SHI'), 'ja', '荷送人情報' UNION ALL
SELECT core.get_menu_id('SIG'), 'ja', 'アイテムのグループ' UNION ALL
SELECT core.get_menu_id('SIS'), 'ja', '業界のセットアップ' UNION ALL
SELECT core.get_menu_id('SMA'), 'ja', 'メニューアクセスポリシー' UNION ALL
SELECT core.get_menu_id('SMP'), 'ja', 'その他のパラメータ' UNION ALL
SELECT core.get_menu_id('SO'), 'ja', '販売注文' UNION ALL
SELECT core.get_menu_id('SOB'), 'ja', 'オフィス＆支店セットアップ' UNION ALL
SELECT core.get_menu_id('SOS'), 'ja', 'Officeセットアップ' UNION ALL
SELECT core.get_menu_id('SPM'), 'ja', '政策管理' UNION ALL
SELECT core.get_menu_id('SQ'), 'ja', '販売見積' UNION ALL
SELECT core.get_menu_id('SR'), 'ja', '販売戻る' UNION ALL
SELECT core.get_menu_id('SRM'), 'ja', 'ロール管理' UNION ALL
SELECT core.get_menu_id('SSA'), 'ja', '販売員' UNION ALL
SELECT core.get_menu_id('SSB'), 'ja', 'ブランド' UNION ALL
SELECT core.get_menu_id('SSC'), 'ja', '複合アイテム' UNION ALL
SELECT core.get_menu_id('SSCD'), 'ja', '複合商品詳細' UNION ALL
SELECT core.get_menu_id('SSI'), 'ja', 'アイテムのメンテナンス' UNION ALL
SELECT core.get_menu_id('SSM'), 'ja', 'セットアップとメンテナンス' UNION ALL
SELECT core.get_menu_id('SSP'), 'ja', 'ストアポリシー' UNION ALL
SELECT core.get_menu_id('SSS'), 'ja', '国家のセットアップ' UNION ALL
SELECT core.get_menu_id('SST'), 'ja', 'セールスチーム' UNION ALL
SELECT core.get_menu_id('STA'), 'ja', 'ストック調整' UNION ALL
SELECT core.get_menu_id('STJ'), 'ja', '株式移転ジャーナル' UNION ALL
SELECT core.get_menu_id('STO'), 'ja', 'ストア' UNION ALL
SELECT core.get_menu_id('STST'), 'ja', '状態の売上税' UNION ALL
SELECT core.get_menu_id('STT'), 'ja', 'ストア型' UNION ALL
SELECT core.get_menu_id('STX'), 'ja', '売上税' UNION ALL
SELECT core.get_menu_id('STXD'), 'ja', '消費税の詳細' UNION ALL
SELECT core.get_menu_id('STXEX'), 'ja', '売上税免除' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'ja', '売上税免除詳細' UNION ALL
SELECT core.get_menu_id('STXT'), 'ja', '売上税タイプ' UNION ALL
SELECT core.get_menu_id('SUM'), 'ja', 'ユーザー管理' UNION ALL
SELECT core.get_menu_id('SVV'), 'ja', 'バウチャーの検証方針' UNION ALL
SELECT core.get_menu_id('TB'), 'ja', '試算表' UNION ALL
SELECT core.get_menu_id('TRF'), 'ja', 'フラグ' UNION ALL
SELECT core.get_menu_id('TXA'), 'ja', '税務当局' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'ja', '税免除の種類' UNION ALL
SELECT core.get_menu_id('TXM'), 'ja', '税マスター' UNION ALL
SELECT core.get_menu_id('UER'), 'ja', '更新の為替レート' UNION ALL
SELECT core.get_menu_id('UOM'), 'ja', '測定の単位';


--SPANISH

INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('ABS'), 'es', 'Losa bonificación sobre los Vendedores' UNION ALL
SELECT core.get_menu_id('AGS'), 'es', 'Losas Envejecimiento' UNION ALL
SELECT core.get_menu_id('AS'), 'es', 'Estado de Cuenta' UNION ALL
SELECT core.get_menu_id('BAK'), 'es', 'Base de datos de copia de seguridad' UNION ALL
SELECT core.get_menu_id('BO'), 'es', 'Back Office' UNION ALL
SELECT core.get_menu_id('BOTC'), 'es', 'Configuración de Impuestos' UNION ALL
SELECT core.get_menu_id('BS'), 'es', 'el balance' UNION ALL
SELECT core.get_menu_id('BSA'), 'es', 'Bono Slab Asignación' UNION ALL
SELECT core.get_menu_id('BSD'), 'es', 'Bono Slab Detalles' UNION ALL
SELECT core.get_menu_id('CBA'), 'es', 'Cuentas bancarias' UNION ALL
SELECT core.get_menu_id('CC'), 'es', 'Centros de costes' UNION ALL
SELECT core.get_menu_id('CF'), 'es', 'Flujo De Fondos' UNION ALL
SELECT core.get_menu_id('CFH'), 'es', 'Cash Flow encabezamientos' UNION ALL
SELECT core.get_menu_id('COA'), 'es', 'Plan General de Contabilidad' UNION ALL
SELECT core.get_menu_id('CTST'), 'es', 'Impuestos Condados de venta' UNION ALL
SELECT core.get_menu_id('CUOM'), 'es', 'Unidades compuestas de Medida' UNION ALL
SELECT core.get_menu_id('CUR'), 'es', 'Gestión de moneda' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'es', 'Base de Estadísticas' UNION ALL
SELECT core.get_menu_id('DRP'), 'es', 'Compra Directa' UNION ALL
SELECT core.get_menu_id('DRS'), 'es', 'Venta Directa' UNION ALL
SELECT core.get_menu_id('EOD'), 'es', 'Al final del día de operación' UNION ALL
SELECT core.get_menu_id('FI'), 'es', 'Finanzas' UNION ALL
SELECT core.get_menu_id('FIR'), 'es', 'Informes' UNION ALL
SELECT core.get_menu_id('FSM'), 'es', 'Creación y Mantenimiento' UNION ALL
SELECT core.get_menu_id('FTT'), 'es', 'Transacciones y plantillas' UNION ALL
SELECT core.get_menu_id('FVV'), 'es', 'Verificación Voucher' UNION ALL
SELECT core.get_menu_id('GRN'), 'es', 'Productos de Entrada Nota Recibido' UNION ALL
SELECT core.get_menu_id('IAS'), 'es', 'Estado de Cuenta de Inventario' UNION ALL
SELECT core.get_menu_id('ICP'), 'es', 'Los precios de coste' UNION ALL
SELECT core.get_menu_id('IIM'), 'es', 'Movimientos de Inventario' UNION ALL
SELECT core.get_menu_id('IR'), 'es', 'Informes' UNION ALL
SELECT core.get_menu_id('ISM'), 'es', 'Creación y Mantenimiento' UNION ALL
SELECT core.get_menu_id('ISP'), 'es', 'los precios de venta' UNION ALL
SELECT core.get_menu_id('ITM'), 'es', 'Productos y Artículos' UNION ALL
SELECT core.get_menu_id('JVN'), 'es', 'Entrada Comprobante de Diario' UNION ALL
SELECT core.get_menu_id('LF'), 'es', 'Recargos' UNION ALL
SELECT core.get_menu_id('OTS'), 'es', 'Una configuración de la hora' UNION ALL
SELECT core.get_menu_id('OTSI'), 'es', 'Inventario de apertura' UNION ALL
SELECT core.get_menu_id('PA'), 'es', 'Cuentas del Partido' UNION ALL
SELECT core.get_menu_id('PAT'), 'es', 'Condiciones de pago' UNION ALL
SELECT core.get_menu_id('PLA'), 'es', 'Winst- en verliesrekening...' UNION ALL
SELECT core.get_menu_id('PO'), 'es', 'Orden De Compra' UNION ALL
SELECT core.get_menu_id('PR'), 'es', 'Compra de Retorno' UNION ALL
SELECT core.get_menu_id('PRO'), 'es', 'Compra de reorden' UNION ALL
SELECT core.get_menu_id('PSA'), 'es', 'Direcciones de Envío' UNION ALL
SELECT core.get_menu_id('PT'), 'es', 'Tipos Party' UNION ALL
SELECT core.get_menu_id('PU'), 'es', 'Compra' UNION ALL
SELECT core.get_menu_id('PUQ'), 'es', 'Compra y Cotización' UNION ALL
SELECT core.get_menu_id('PUR'), 'es', 'Informes de Compra' UNION ALL
SELECT core.get_menu_id('PWD'), 'es', 'Cambiar contraseña de usuario' UNION ALL
SELECT core.get_menu_id('RFC'), 'es', 'Recibo del Cliente' UNION ALL
SELECT core.get_menu_id('RI'), 'es', 'facturas recurrentes' UNION ALL
SELECT core.get_menu_id('RIS'), 'es', 'Configuración Factura Recurrente' UNION ALL
SELECT core.get_menu_id('SA'), 'es', 'venta' UNION ALL
SELECT core.get_menu_id('SAP'), 'es', 'Política de Acceso General Ledger' UNION ALL
SELECT core.get_menu_id('SAQ'), 'es', 'Ventas y Cotización' UNION ALL
SELECT core.get_menu_id('SAR'), 'es', 'Informes de ventas' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'es', 'Top artículos más vendidos' UNION ALL
SELECT core.get_menu_id('SAT'), 'es', 'Herramientas de administración' UNION ALL
SELECT core.get_menu_id('SAV'), 'es', 'Política Automático de Verificación' UNION ALL
SELECT core.get_menu_id('SCR'), 'es', 'Configuración del depósito de efectivo' UNION ALL
SELECT core.get_menu_id('SCRS'), 'es', 'Configuración de país' UNION ALL
SELECT core.get_menu_id('SCS'), 'es', 'Configuración Contador' UNION ALL
SELECT core.get_menu_id('SCTS'), 'es', 'Configuración del Condado' UNION ALL
SELECT core.get_menu_id('SD'), 'es', 'Entrega Ventas' UNION ALL
SELECT core.get_menu_id('SDS'), 'es', 'afdeling Setup' UNION ALL
SELECT core.get_menu_id('SEAR'), 'es', 'Informes de Auditoría' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'es', 'Entrar Ver' UNION ALL
SELECT core.get_menu_id('SES'), 'es', 'Configuración entidad' UNION ALL
SELECT core.get_menu_id('SFR'), 'es', 'Gestión de Frecuencias y el año fiscal' UNION ALL
SELECT core.get_menu_id('SFY'), 'es', 'Información Fiscal Año' UNION ALL
SELECT core.get_menu_id('SHI'), 'es', 'Información Shipper' UNION ALL
SELECT core.get_menu_id('SIG'), 'es', 'los grupos de artículos' UNION ALL
SELECT core.get_menu_id('SIS'), 'es', 'Configuración de la Industria' UNION ALL
SELECT core.get_menu_id('SMA'), 'es', 'Menú política de acceso' UNION ALL
SELECT core.get_menu_id('SMP'), 'es', 'Parámetros Varios' UNION ALL
SELECT core.get_menu_id('SO'), 'es', 'Orden de Venta' UNION ALL
SELECT core.get_menu_id('SOB'), 'es', 'Instalación de Office y Poder' UNION ALL
SELECT core.get_menu_id('SOS'), 'es', 'instalación de Office' UNION ALL
SELECT core.get_menu_id('SPM'), 'es', 'Gestión de Políticas' UNION ALL
SELECT core.get_menu_id('SQ'), 'es', 'Cita Ventas' UNION ALL
SELECT core.get_menu_id('SR'), 'es', 'Volver Ventas' UNION ALL
SELECT core.get_menu_id('SRM'), 'es', 'Administración de funciones' UNION ALL
SELECT core.get_menu_id('SSA'), 'es', 'vendedores' UNION ALL
SELECT core.get_menu_id('SSB'), 'es', 'Marcas' UNION ALL
SELECT core.get_menu_id('SSC'), 'es', 'compuesto Artículos' UNION ALL
SELECT core.get_menu_id('SSCD'), 'es', 'Compuesto Detalles del artículo' UNION ALL
SELECT core.get_menu_id('SSI'), 'es', 'Mantenimiento de artículos' UNION ALL
SELECT core.get_menu_id('SSM'), 'es', 'Creación y Mantenimiento' UNION ALL
SELECT core.get_menu_id('SSP'), 'es', 'política de la tienda' UNION ALL
SELECT core.get_menu_id('SSS'), 'es', 'Configuración Estado' UNION ALL
SELECT core.get_menu_id('SST'), 'es', 'equipo de ventas' UNION ALL
SELECT core.get_menu_id('STA'), 'es', 'Ajustes de archivo' UNION ALL
SELECT core.get_menu_id('STJ'), 'es', 'Diario Stock Transfer' UNION ALL
SELECT core.get_menu_id('STO'), 'es', 'Tiendas' UNION ALL
SELECT core.get_menu_id('STST'), 'es', 'Impuestos estatales' UNION ALL
SELECT core.get_menu_id('STT'), 'es', 'Tipo de tienda' UNION ALL
SELECT core.get_menu_id('STX'), 'es', 'impuestos a las Ventas' UNION ALL
SELECT core.get_menu_id('STXD'), 'es', 'Detalles de impuesto sobre las ventas' UNION ALL
SELECT core.get_menu_id('STXEX'), 'es', 'Exime de impuestos de ventas' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'es', 'SalesTax Detalles Exentos' UNION ALL
SELECT core.get_menu_id('STXT'), 'es', 'Tipos de Impuestos de Ventas' UNION ALL
SELECT core.get_menu_id('SUM'), 'es', 'Gestión de usuarios' UNION ALL
SELECT core.get_menu_id('SVV'), 'es', 'Vale Política de Verificación' UNION ALL
SELECT core.get_menu_id('TB'), 'es', 'balance' UNION ALL
SELECT core.get_menu_id('TRF'), 'es', 'Banderas' UNION ALL
SELECT core.get_menu_id('TXA'), 'es', 'Agencia Tributaria' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'es', 'Impuestos Tipos Exentos' UNION ALL
SELECT core.get_menu_id('TXM'), 'es', 'Maestro de Impuestos' UNION ALL
SELECT core.get_menu_id('UER'), 'es', 'Actualización Cotizaciones' UNION ALL
SELECT core.get_menu_id('UOM'), 'es', 'Unidades de Medida';

--DUTCH
INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('ABS'), 'nl', 'Bonus Slab voor Verkopers' UNION ALL
SELECT core.get_menu_id('AGS'), 'nl', 'Vergrijzing Platen' UNION ALL
SELECT core.get_menu_id('AS'), 'nl', 'rekeningafschrift' UNION ALL
SELECT core.get_menu_id('BAK'), 'nl', 'backup Database' UNION ALL
SELECT core.get_menu_id('BO'), 'nl', 'Back Office' UNION ALL
SELECT core.get_menu_id('BOTC'), 'nl', 'belasting Configuratie' UNION ALL
SELECT core.get_menu_id('BS'), 'nl', 'balans' UNION ALL
SELECT core.get_menu_id('BSA'), 'nl', 'Bonus Slab Opdracht' UNION ALL
SELECT core.get_menu_id('BSD'), 'nl', 'Bonus Slab Details' UNION ALL
SELECT core.get_menu_id('CBA'), 'nl', 'bankrekeningen' UNION ALL
SELECT core.get_menu_id('CC'), 'nl', 'Kostenplaatsen' UNION ALL
SELECT core.get_menu_id('CF'), 'nl', 'Geldstroom' UNION ALL
SELECT core.get_menu_id('CFH'), 'nl', 'Cash Flow Koppen' UNION ALL
SELECT core.get_menu_id('COA'), 'nl', 'Rekeningschema' UNION ALL
SELECT core.get_menu_id('CTST'), 'nl', 'Provincies Sales Belastingen' UNION ALL
SELECT core.get_menu_id('CUOM'), 'nl', 'Verbinding meeteenheden' UNION ALL
SELECT core.get_menu_id('CUR'), 'nl', 'valuta management' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'nl', 'Database statistieken' UNION ALL
SELECT core.get_menu_id('DRP'), 'nl', 'direct Aankoop' UNION ALL
SELECT core.get_menu_id('DRS'), 'nl', 'Direct Sales' UNION ALL
SELECT core.get_menu_id('EOD'), 'nl', 'Einde van de dag Operatie' UNION ALL
SELECT core.get_menu_id('FI'), 'nl', 'Financiën' UNION ALL
SELECT core.get_menu_id('FIR'), 'nl', 'rapporten' UNION ALL
SELECT core.get_menu_id('FSM'), 'nl', 'Installatie & Onderhoud' UNION ALL
SELECT core.get_menu_id('FTT'), 'nl', 'Transactions & Templates' UNION ALL
SELECT core.get_menu_id('FVV'), 'nl', 'voucher Verificatie' UNION ALL
SELECT core.get_menu_id('GRN'), 'nl', 'Goederen Ontvangen Opmerking Entry' UNION ALL
SELECT core.get_menu_id('IAS'), 'nl', 'Inventaris rekeningafschrift' UNION ALL
SELECT core.get_menu_id('ICP'), 'nl', 'kostprijzen' UNION ALL
SELECT core.get_menu_id('IIM'), 'nl', 'inventaris Movements' UNION ALL
SELECT core.get_menu_id('IR'), 'nl', 'rapporten' UNION ALL
SELECT core.get_menu_id('ISM'), 'nl', 'Installatie & Onderhoud' UNION ALL
SELECT core.get_menu_id('ISP'), 'nl', 'verkoopprijs' UNION ALL
SELECT core.get_menu_id('ITM'), 'nl', 'Producten en Artikelen' UNION ALL
SELECT core.get_menu_id('JVN'), 'nl', 'Journal Voucher Entry' UNION ALL
SELECT core.get_menu_id('LF'), 'nl', 'late Vergoedingen' UNION ALL
SELECT core.get_menu_id('OTS'), 'nl', 'One Time Setup' UNION ALL
SELECT core.get_menu_id('OTSI'), 'nl', 'Het openen van Inventory' UNION ALL
SELECT core.get_menu_id('PA'), 'nl', 'partij Accounts' UNION ALL
SELECT core.get_menu_id('PAT'), 'nl', 'Betaalvoorwaarden' UNION ALL
SELECT core.get_menu_id('PLA'), 'nl', 'Winst- en verliesrekening' UNION ALL
SELECT core.get_menu_id('PO'), 'nl', 'direct Aankoop' UNION ALL
SELECT core.get_menu_id('PR'), 'nl', 'aankoop Return' UNION ALL
SELECT core.get_menu_id('PRO'), 'nl', 'aankoop opnieuw ordenen' UNION ALL
SELECT core.get_menu_id('PSA'), 'nl', 'afleveradres' UNION ALL
SELECT core.get_menu_id('PT'), 'nl', 'partij Types' UNION ALL
SELECT core.get_menu_id('PU'), 'nl', 'aankoop' UNION ALL
SELECT core.get_menu_id('PUQ'), 'nl', 'Inkoop & Offerte' UNION ALL
SELECT core.get_menu_id('PUR'), 'nl', 'aankoop Rapporten' UNION ALL
SELECT core.get_menu_id('PWD'), 'nl', 'Change User Password' UNION ALL
SELECT core.get_menu_id('RFC'), 'nl', 'Ontvangst van de klant' UNION ALL
SELECT core.get_menu_id('RI'), 'nl', 'terugkerende facturen' UNION ALL
SELECT core.get_menu_id('RIS'), 'nl', 'Terugkerende Invoice Setup' UNION ALL
SELECT core.get_menu_id('SA'), 'nl', 'Sales' UNION ALL
SELECT core.get_menu_id('SAP'), 'nl', 'GL Access Policy' UNION ALL
SELECT core.get_menu_id('SAQ'), 'nl', 'Sales & Quotation' UNION ALL
SELECT core.get_menu_id('SAR'), 'nl', 'Sales Reports' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'nl', 'Top Selling Items' UNION ALL
SELECT core.get_menu_id('SAT'), 'nl', 'Admin Tools' UNION ALL
SELECT core.get_menu_id('SAV'), 'nl', 'Automatisch Verificatie Beleid' UNION ALL
SELECT core.get_menu_id('SCR'), 'nl', 'Cash Repository Setup' UNION ALL
SELECT core.get_menu_id('SCRS'), 'nl', 'land Setup' UNION ALL
SELECT core.get_menu_id('SCS'), 'nl', 'Counter Setup' UNION ALL
SELECT core.get_menu_id('SCTS'), 'nl', 'County Setup' UNION ALL
SELECT core.get_menu_id('SD'), 'nl', 'Sales Delivery' UNION ALL
SELECT core.get_menu_id('SDS'), 'nl', 'afdeling Setup' UNION ALL
SELECT core.get_menu_id('SEAR'), 'nl', 'auditrapporten' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'nl', 'Inloggen View' UNION ALL
SELECT core.get_menu_id('SES'), 'nl', 'entiteit Setup' UNION ALL
SELECT core.get_menu_id('SFR'), 'nl', 'Frequentie & boekjaar management' UNION ALL
SELECT core.get_menu_id('SFY'), 'nl', 'Fiscale Jaar Informatie' UNION ALL
SELECT core.get_menu_id('SHI'), 'nl', 'verlader Informatie' UNION ALL
SELECT core.get_menu_id('SIG'), 'nl', 'Item Groepen' UNION ALL
SELECT core.get_menu_id('SIS'), 'nl', 'industrie Setup' UNION ALL
SELECT core.get_menu_id('SMA'), 'nl', 'Menu Access Policy' UNION ALL
SELECT core.get_menu_id('SMP'), 'nl', 'Diverse parameters' UNION ALL
SELECT core.get_menu_id('SO'), 'nl', 'Sales Order' UNION ALL
SELECT core.get_menu_id('SOB'), 'nl', 'Office & Branch Setup' UNION ALL
SELECT core.get_menu_id('SOS'), 'nl', 'Office Setup' UNION ALL
SELECT core.get_menu_id('SPM'), 'nl', 'Policy Management' UNION ALL
SELECT core.get_menu_id('SQ'), 'nl', 'Sales Offerte' UNION ALL
SELECT core.get_menu_id('SR'), 'nl', 'Sales Return' UNION ALL
SELECT core.get_menu_id('SRM'), 'nl', 'rol management' UNION ALL
SELECT core.get_menu_id('SSA'), 'nl', 'verkopers' UNION ALL
SELECT core.get_menu_id('SSB'), 'nl', 'merk' UNION ALL
SELECT core.get_menu_id('SSC'), 'nl', 'verbinding items' UNION ALL
SELECT core.get_menu_id('SSCD'), 'nl', 'Verbinding Item Details' UNION ALL
SELECT core.get_menu_id('SSI'), 'nl', 'Item Onderhoud' UNION ALL
SELECT core.get_menu_id('SSM'), 'nl', 'Installatie & Onderhoud' UNION ALL
SELECT core.get_menu_id('SSP'), 'nl', 'Store-beleid' UNION ALL
SELECT core.get_menu_id('SSS'), 'nl', 'Staat Setup' UNION ALL
SELECT core.get_menu_id('SST'), 'nl', 'Sales Teams' UNION ALL
SELECT core.get_menu_id('STA'), 'nl', 'Stock Aanpassingen' UNION ALL
SELECT core.get_menu_id('STJ'), 'nl', 'Stock Transfer Journal' UNION ALL
SELECT core.get_menu_id('STO'), 'nl', 'winkel' UNION ALL
SELECT core.get_menu_id('STST'), 'nl', 'Staat Sales Belastingen' UNION ALL
SELECT core.get_menu_id('STT'), 'nl', 'Store Type' UNION ALL
SELECT core.get_menu_id('STX'), 'nl', 'verkoop Belastingen' UNION ALL
SELECT core.get_menu_id('STXD'), 'nl', 'verkoop Belastingen Detail' UNION ALL
SELECT core.get_menu_id('STXEX'), 'nl', 'Verkoop Tax vrijstelt' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'nl', 'Verkoop vrijgesteld van belasting Details' UNION ALL
SELECT core.get_menu_id('STXT'), 'nl', 'Verkoop Belasting Types' UNION ALL
SELECT core.get_menu_id('SUM'), 'nl', 'user Management' UNION ALL
SELECT core.get_menu_id('SVV'), 'nl', 'Voucher Verificatie Beleid' UNION ALL
SELECT core.get_menu_id('TB'), 'nl', 'Trial Balance' UNION ALL
SELECT core.get_menu_id('TRF'), 'nl', 'vlaggen' UNION ALL
SELECT core.get_menu_id('TXA'), 'nl', 'Belastingdienst' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'nl', 'Vrijgesteld van belasting Types' UNION ALL
SELECT core.get_menu_id('TXM'), 'nl', 'belasting Master' UNION ALL
SELECT core.get_menu_id('UER'), 'nl', 'Bijwerken Wisselkoersen' UNION ALL
SELECT core.get_menu_id('UOM'), 'nl', 'Maateenheden';

--SIMPLIFIED CHINESE
INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('ABS'), 'zh', '奖金为平板销售人员' UNION ALL
SELECT core.get_menu_id('AGS'), 'zh', '老龄板坯' UNION ALL
SELECT core.get_menu_id('AS'), 'zh', '帐户对帐单' UNION ALL
SELECT core.get_menu_id('BAK'), 'zh', '备份数据库' UNION ALL
SELECT core.get_menu_id('BO'), 'zh', '后台' UNION ALL
SELECT core.get_menu_id('BOTC'), 'zh', '税务配置' UNION ALL
SELECT core.get_menu_id('BS'), 'zh', '资产负债表' UNION ALL
SELECT core.get_menu_id('BSA'), 'zh', '奖金分配板' UNION ALL
SELECT core.get_menu_id('BSD'), 'zh', '奖励板详细' UNION ALL
SELECT core.get_menu_id('CBA'), 'zh', '银行账户' UNION ALL
SELECT core.get_menu_id('CC'), 'zh', '成本中心' UNION ALL
SELECT core.get_menu_id('CF'), 'zh', '现金周转' UNION ALL
SELECT core.get_menu_id('CFH'), 'zh', '现金流标题' UNION ALL
SELECT core.get_menu_id('COA'), 'zh', '科目表' UNION ALL
SELECT core.get_menu_id('CTST'), 'zh', '县销售税' UNION ALL
SELECT core.get_menu_id('CUOM'), 'zh', '计量单位复合' UNION ALL
SELECT core.get_menu_id('CUR'), 'zh', '货币管理' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'zh', '数据库统计' UNION ALL
SELECT core.get_menu_id('DRP'), 'zh', '直接购买' UNION ALL
SELECT core.get_menu_id('DRS'), 'zh', '直销' UNION ALL
SELECT core.get_menu_id('EOD'), 'zh', '天运结束' UNION ALL
SELECT core.get_menu_id('FI'), 'zh', '金融' UNION ALL
SELECT core.get_menu_id('FIR'), 'zh', '报告' UNION ALL
SELECT core.get_menu_id('FSM'), 'zh', '安装与维护' UNION ALL
SELECT core.get_menu_id('FTT'), 'zh', '交易和模板' UNION ALL
SELECT core.get_menu_id('FVV'), 'zh', '优惠券验证' UNION ALL
SELECT core.get_menu_id('GRN'), 'zh', '收货票据' UNION ALL
SELECT core.get_menu_id('IAS'), 'zh', '库存帐户对帐单' UNION ALL
SELECT core.get_menu_id('ICP'), 'zh', '成本价格' UNION ALL
SELECT core.get_menu_id('IIM'), 'zh', '库存变动' UNION ALL
SELECT core.get_menu_id('IR'), 'zh', '报告' UNION ALL
SELECT core.get_menu_id('ISM'), 'zh', '安装与维护' UNION ALL
SELECT core.get_menu_id('ISP'), 'zh', '销售价格' UNION ALL
SELECT core.get_menu_id('ITM'), 'zh', '产品与项目' UNION ALL
SELECT core.get_menu_id('JVN'), 'zh', '杂志凭证录入' UNION ALL
SELECT core.get_menu_id('LF'), 'zh', '滞纳金' UNION ALL
SELECT core.get_menu_id('OTS'), 'zh', '一时间设置' UNION ALL
SELECT core.get_menu_id('OTSI'), 'zh', '期初库存' UNION ALL
SELECT core.get_menu_id('PA'), 'zh', '党的账户' UNION ALL
SELECT core.get_menu_id('PAT'), 'zh', '付款条款' UNION ALL
SELECT core.get_menu_id('PLA'), 'zh', '损益表' UNION ALL
SELECT core.get_menu_id('PO'), 'zh', '采购订单' UNION ALL
SELECT core.get_menu_id('PR'), 'zh', '购买返回' UNION ALL
SELECT core.get_menu_id('PRO'), 'zh', '购买重新排序' UNION ALL
SELECT core.get_menu_id('PSA'), 'zh', '送货地址' UNION ALL
SELECT core.get_menu_id('PT'), 'zh', '党的类型' UNION ALL
SELECT core.get_menu_id('PU'), 'zh', '购买' UNION ALL
SELECT core.get_menu_id('PUQ'), 'zh', '购买＆报价' UNION ALL
SELECT core.get_menu_id('PUR'), 'zh', '购买报告' UNION ALL
SELECT core.get_menu_id('PWD'), 'zh', '更改用户密码' UNION ALL
SELECT core.get_menu_id('RFC'), 'zh', '单据' UNION ALL
SELECT core.get_menu_id('RI'), 'zh', '经常性发票' UNION ALL
SELECT core.get_menu_id('RIS'), 'zh', '经常性发票设置' UNION ALL
SELECT core.get_menu_id('SA'), 'zh', '销售' UNION ALL
SELECT core.get_menu_id('SAP'), 'zh', '总帐访问策略' UNION ALL
SELECT core.get_menu_id('SAQ'), 'zh', '销售报价' UNION ALL
SELECT core.get_menu_id('SAR'), 'zh', '销售报告' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'zh', '最畅销的项目' UNION ALL
SELECT core.get_menu_id('SAT'), 'zh', '管理工具' UNION ALL
SELECT core.get_menu_id('SAV'), 'zh', '自动验证策略' UNION ALL
SELECT core.get_menu_id('SCR'), 'zh', '现金库安装' UNION ALL
SELECT core.get_menu_id('SCRS'), 'zh', '国家设置' UNION ALL
SELECT core.get_menu_id('SCS'), 'zh', '计数器设置' UNION ALL
SELECT core.get_menu_id('SCTS'), 'zh', '县设置' UNION ALL
SELECT core.get_menu_id('SD'), 'zh', '销售出库单' UNION ALL
SELECT core.get_menu_id('SDS'), 'zh', '部门设置' UNION ALL
SELECT core.get_menu_id('SEAR'), 'zh', '审计报告' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'zh', '登录查看' UNION ALL
SELECT core.get_menu_id('SES'), 'zh', '实体设置' UNION ALL
SELECT core.get_menu_id('SFR'), 'zh', '频率和会计年度管理' UNION ALL
SELECT core.get_menu_id('SFY'), 'zh', '财年资料' UNION ALL
SELECT core.get_menu_id('SHI'), 'zh', '发货人信息' UNION ALL
SELECT core.get_menu_id('SIG'), 'zh', '项目组' UNION ALL
SELECT core.get_menu_id('SIS'), 'zh', '行业设置' UNION ALL
SELECT core.get_menu_id('SMA'), 'zh', '菜单访问策略' UNION ALL
SELECT core.get_menu_id('SMP'), 'zh', '其他参数' UNION ALL
SELECT core.get_menu_id('SO'), 'zh', '销售订单' UNION ALL
SELECT core.get_menu_id('SOB'), 'zh', '办公室及分公司安装' UNION ALL
SELECT core.get_menu_id('SOS'), 'zh', '办公室 格局' UNION ALL
SELECT core.get_menu_id('SPM'), 'zh', '策略管理' UNION ALL
SELECT core.get_menu_id('SQ'), 'zh', '销售报价' UNION ALL
SELECT core.get_menu_id('SR'), 'zh', '销售退货' UNION ALL
SELECT core.get_menu_id('SRM'), 'zh', '角色管理' UNION ALL
SELECT core.get_menu_id('SSA'), 'zh', '营业员' UNION ALL
SELECT core.get_menu_id('SSB'), 'zh', '品牌' UNION ALL
SELECT core.get_menu_id('SSC'), 'zh', '复合项目' UNION ALL
SELECT core.get_menu_id('SSCD'), 'zh', '复合项目详情' UNION ALL
SELECT core.get_menu_id('SSI'), 'zh', '项目维护' UNION ALL
SELECT core.get_menu_id('SSM'), 'zh', '安装与维护' UNION ALL
SELECT core.get_menu_id('SSP'), 'zh', '存储策略' UNION ALL
SELECT core.get_menu_id('SSS'), 'zh', '国家设置' UNION ALL
SELECT core.get_menu_id('SST'), 'zh', '销售团队' UNION ALL
SELECT core.get_menu_id('STA'), 'zh', '库存调整' UNION ALL
SELECT core.get_menu_id('STJ'), 'zh', '股权转让杂志' UNION ALL
SELECT core.get_menu_id('STO'), 'zh', '店' UNION ALL
SELECT core.get_menu_id('STST'), 'zh', '州销售税' UNION ALL
SELECT core.get_menu_id('STT'), 'zh', '商铺类型' UNION ALL
SELECT core.get_menu_id('STX'), 'zh', '销售税' UNION ALL
SELECT core.get_menu_id('STXD'), 'zh', '销售税细节' UNION ALL
SELECT core.get_menu_id('STXEX'), 'zh', '销售税豁免' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'zh', '销售税豁免详细' UNION ALL
SELECT core.get_menu_id('STXT'), 'zh', '销售税类型' UNION ALL
SELECT core.get_menu_id('SUM'), 'zh', '用户管理' UNION ALL
SELECT core.get_menu_id('SVV'), 'zh', '券验证策略' UNION ALL
SELECT core.get_menu_id('TB'), 'zh', 'Trial Balance' UNION ALL
SELECT core.get_menu_id('TRF'), 'zh', '旗' UNION ALL
SELECT core.get_menu_id('TXA'), 'zh', '税务机关' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'zh', '免税类型' UNION ALL
SELECT core.get_menu_id('TXM'), 'zh', '税务硕士' UNION ALL
SELECT core.get_menu_id('UER'), 'zh', '更新汇率' UNION ALL
SELECT core.get_menu_id('UOM'), 'zh', '计量单位';

--PORTUGUESE

INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('ABS'), 'pt', 'Slab Bonus para vendedores' UNION ALL
SELECT core.get_menu_id('AGS'), 'pt', 'Lajes Envelhecimento' UNION ALL
SELECT core.get_menu_id('AS'), 'pt', 'Extrato de Conta' UNION ALL
SELECT core.get_menu_id('BAK'), 'pt', 'backup Database' UNION ALL
SELECT core.get_menu_id('BO'), 'pt', 'Back Office' UNION ALL
SELECT core.get_menu_id('BOTC'), 'pt', 'Configuração do Imposto' UNION ALL
SELECT core.get_menu_id('BS'), 'pt', 'Balanço' UNION ALL
SELECT core.get_menu_id('BSA'), 'pt', 'Bonus Slab Assignment' UNION ALL
SELECT core.get_menu_id('BSD'), 'pt', 'Bonus Slab Detalhes' UNION ALL
SELECT core.get_menu_id('CBA'), 'pt', 'Contas Bancárias' UNION ALL
SELECT core.get_menu_id('CC'), 'pt', 'Centros de custo' UNION ALL
SELECT core.get_menu_id('CF'), 'pt', 'Fluxo De Caixa' UNION ALL
SELECT core.get_menu_id('CFH'), 'pt', 'Fluxo de Caixa Headings' UNION ALL
SELECT core.get_menu_id('COA'), 'pt', 'Plano de Contas' UNION ALL
SELECT core.get_menu_id('CTST'), 'pt', 'Impostos Concelhos de vendas' UNION ALL
SELECT core.get_menu_id('CUOM'), 'pt', 'Units compostas de medida' UNION ALL
SELECT core.get_menu_id('CUR'), 'pt', 'Gestão de moeda' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'pt', 'Estatísticas do Banco de Dados' UNION ALL
SELECT core.get_menu_id('DRP'), 'pt', 'Compra Direta' UNION ALL
SELECT core.get_menu_id('DRS'), 'pt', 'Vendas Diretas' UNION ALL
SELECT core.get_menu_id('EOD'), 'pt', 'Fim da Operação Dia' UNION ALL
SELECT core.get_menu_id('FI'), 'pt', 'finanças' UNION ALL
SELECT core.get_menu_id('FIR'), 'pt', 'relatórios' UNION ALL
SELECT core.get_menu_id('FSM'), 'pt', 'Configuração e Manutenção' UNION ALL
SELECT core.get_menu_id('FTT'), 'pt', 'Transactions & Templates' UNION ALL
SELECT core.get_menu_id('FVV'), 'pt', 'Verificação de Vouchers' UNION ALL
SELECT core.get_menu_id('GRN'), 'pt', 'Mercadorias entrada de nota recebida' UNION ALL
SELECT core.get_menu_id('IAS'), 'pt', 'Extrato da conta de estoques' UNION ALL
SELECT core.get_menu_id('ICP'), 'pt', 'preços de custo' UNION ALL
SELECT core.get_menu_id('IIM'), 'pt', 'Movimentos de inventário' UNION ALL
SELECT core.get_menu_id('IR'), 'pt', 'relatórios' UNION ALL
SELECT core.get_menu_id('ISM'), 'pt', 'Configuração e Manutenção' UNION ALL
SELECT core.get_menu_id('ISP'), 'pt', 'Os preços de venda' UNION ALL
SELECT core.get_menu_id('ITM'), 'pt', 'Produtos e Itens' UNION ALL
SELECT core.get_menu_id('JVN'), 'pt', 'Jornal Vale Entry' UNION ALL
SELECT core.get_menu_id('LF'), 'pt', 'taxas atrasadas' UNION ALL
SELECT core.get_menu_id('OTS'), 'pt', 'One Time Setup' UNION ALL
SELECT core.get_menu_id('OTSI'), 'pt', 'Inventário de abertura' UNION ALL
SELECT core.get_menu_id('PA'), 'pt', 'Contas do partido' UNION ALL
SELECT core.get_menu_id('PAT'), 'pt', 'Condições de pagamento' UNION ALL
SELECT core.get_menu_id('PLA'), 'pt', 'Demonstração de Resultados' UNION ALL
SELECT core.get_menu_id('PO'), 'pt', 'Ordem De Compra' UNION ALL
SELECT core.get_menu_id('PR'), 'pt', 'compra Retorno' UNION ALL
SELECT core.get_menu_id('PRO'), 'pt', 'compra Reordenar' UNION ALL
SELECT core.get_menu_id('PSA'), 'pt', 'Endereços para envio' UNION ALL
SELECT core.get_menu_id('PT'), 'pt', 'Tipos partido' UNION ALL
SELECT core.get_menu_id('PU'), 'pt', 'compra' UNION ALL
SELECT core.get_menu_id('PUQ'), 'pt', 'Compra & Cotação' UNION ALL
SELECT core.get_menu_id('PUR'), 'pt', 'Relatórios de compra' UNION ALL
SELECT core.get_menu_id('PWD'), 'pt', 'Alterar senha do usuário' UNION ALL
SELECT core.get_menu_id('RFC'), 'pt', 'Recibo do Cliente' UNION ALL
SELECT core.get_menu_id('RI'), 'pt', 'facturas recorrentes' UNION ALL
SELECT core.get_menu_id('RIS'), 'pt', 'Setup Invoice Recorrente' UNION ALL
SELECT core.get_menu_id('SA'), 'pt', 'de vendas' UNION ALL
SELECT core.get_menu_id('SAP'), 'pt', 'GL Política de Acesso' UNION ALL
SELECT core.get_menu_id('SAQ'), 'pt', 'Vendas e cotação' UNION ALL
SELECT core.get_menu_id('SAR'), 'pt', 'Relatórios de vendas' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'pt', 'Itens mais vendidos' UNION ALL
SELECT core.get_menu_id('SAT'), 'pt', 'Ferramentas de Administração' UNION ALL
SELECT core.get_menu_id('SAV'), 'pt', 'Política de verificação automática' UNION ALL
SELECT core.get_menu_id('SCR'), 'pt', 'Setup Dinheiro Repository' UNION ALL
SELECT core.get_menu_id('SCRS'), 'pt', 'Setup país' UNION ALL
SELECT core.get_menu_id('SCS'), 'pt', 'Setup contador' UNION ALL
SELECT core.get_menu_id('SCTS'), 'pt', 'Setup County' UNION ALL
SELECT core.get_menu_id('SD'), 'pt', 'Entrega de Vendas' UNION ALL
SELECT core.get_menu_id('SDS'), 'pt', 'Setup Departamento' UNION ALL
SELECT core.get_menu_id('SEAR'), 'pt', 'Relatórios de Auditoria' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'pt', 'Entrada Vista' UNION ALL
SELECT core.get_menu_id('SES'), 'pt', 'Setup Entity' UNION ALL
SELECT core.get_menu_id('SFR'), 'pt', 'Gestão de frequência e de Ano Fiscal' UNION ALL
SELECT core.get_menu_id('SFY'), 'pt', 'Fiscal Informações Ano' UNION ALL
SELECT core.get_menu_id('SHI'), 'pt', 'Informações shipper' UNION ALL
SELECT core.get_menu_id('SIG'), 'pt', 'Grupos de itens' UNION ALL
SELECT core.get_menu_id('SIS'), 'pt', 'Setup indústria' UNION ALL
SELECT core.get_menu_id('SMA'), 'pt', 'Política de acesso ao menu' UNION ALL
SELECT core.get_menu_id('SMP'), 'pt', 'Parâmetros Diversos' UNION ALL
SELECT core.get_menu_id('SO'), 'pt', 'pedido de Vendas' UNION ALL
SELECT core.get_menu_id('SOB'), 'pt', 'Escritório & Filial Setup' UNION ALL
SELECT core.get_menu_id('SOS'), 'pt', 'Instalação do Office' UNION ALL
SELECT core.get_menu_id('SPM'), 'pt', 'Gestão de Políticas' UNION ALL
SELECT core.get_menu_id('SQ'), 'pt', 'cotação de vendas' UNION ALL
SELECT core.get_menu_id('SR'), 'pt', 'Retorno de Vendas' UNION ALL
SELECT core.get_menu_id('SRM'), 'pt', 'Gerenciamento de funções' UNION ALL
SELECT core.get_menu_id('SSA'), 'pt', 'vendedores' UNION ALL
SELECT core.get_menu_id('SSB'), 'pt', 'marcas' UNION ALL
SELECT core.get_menu_id('SSC'), 'pt', 'Itens Composto' UNION ALL
SELECT core.get_menu_id('SSCD'), 'pt', 'Detalhes Composto item' UNION ALL
SELECT core.get_menu_id('SSI'), 'pt', 'item de manutenção' UNION ALL
SELECT core.get_menu_id('SSM'), 'pt', 'Configuração e Manutenção' UNION ALL
SELECT core.get_menu_id('SSP'), 'pt', 'Política da loja' UNION ALL
SELECT core.get_menu_id('SSS'), 'pt', 'Setup Estado' UNION ALL
SELECT core.get_menu_id('SST'), 'pt', 'equipes de Vendas' UNION ALL
SELECT core.get_menu_id('STA'), 'pt', 'ajuste de estoques' UNION ALL
SELECT core.get_menu_id('STJ'), 'pt', 'Jornal da Transferência' UNION ALL
SELECT core.get_menu_id('STO'), 'pt', 'Stores' UNION ALL
SELECT core.get_menu_id('STST'), 'pt', 'Impostos estaduais sobre vendas' UNION ALL
SELECT core.get_menu_id('STT'), 'pt', 'tipos de armazenamento' UNION ALL
SELECT core.get_menu_id('STX'), 'pt', 'Impostos sobre Vendas' UNION ALL
SELECT core.get_menu_id('STXD'), 'pt', 'Detalhes de imposto sobre vendas' UNION ALL
SELECT core.get_menu_id('STXEX'), 'pt', 'Isenta de imposto sobre vendas' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'pt', 'Imposto sobre vendas Detalhes Isentos' UNION ALL
SELECT core.get_menu_id('STXT'), 'pt', 'Tipos de imposto sobre vendas' UNION ALL
SELECT core.get_menu_id('SUM'), 'pt', 'Gerenciamento de usuários' UNION ALL
SELECT core.get_menu_id('SVV'), 'pt', 'Comprovante Política de Verificação' UNION ALL
SELECT core.get_menu_id('TB'), 'pt', 'Balancete' UNION ALL
SELECT core.get_menu_id('TRF'), 'pt', 'bandeiras' UNION ALL
SELECT core.get_menu_id('TXA'), 'pt', 'Fisco' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'pt', 'Fiscais Tipos Isentos' UNION ALL
SELECT core.get_menu_id('TXM'), 'pt', 'Mestre Tax' UNION ALL
SELECT core.get_menu_id('UER'), 'pt', 'Atualização de Taxas de Câmbio' UNION ALL
SELECT core.get_menu_id('UOM'), 'pt', 'Unidades de Medida';

--SWEDISH

INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('ABS'), 'sv', 'Bonus Slab för Försäljare' UNION ALL
SELECT core.get_menu_id('AGS'), 'sv', 'åldrande Plattor' UNION ALL
SELECT core.get_menu_id('AS'), 'sv', 'Kontoutdrag' UNION ALL
SELECT core.get_menu_id('BAK'), 'sv', 'backup Database' UNION ALL
SELECT core.get_menu_id('BO'), 'sv', 'Tillbaka Office' UNION ALL
SELECT core.get_menu_id('BOTC'), 'sv', 'Skatte Konfiguration' UNION ALL
SELECT core.get_menu_id('BS'), 'sv', 'bALANSRÄKNING' UNION ALL
SELECT core.get_menu_id('BSA'), 'sv', 'Bonus Slab Assignment' UNION ALL
SELECT core.get_menu_id('BSD'), 'sv', 'Bonus Slab Detaljer' UNION ALL
SELECT core.get_menu_id('CBA'), 'sv', 'Bankkonton' UNION ALL
SELECT core.get_menu_id('CC'), 'sv', 'Kostnadsställen' UNION ALL
SELECT core.get_menu_id('CF'), 'sv', 'Cash Flow' UNION ALL
SELECT core.get_menu_id('CFH'), 'sv', 'Cash Flow Rubriker' UNION ALL
SELECT core.get_menu_id('COA'), 'sv', 'Kontoplan' UNION ALL
SELECT core.get_menu_id('CTST'), 'sv', 'Län Försäljnings Skatter' UNION ALL
SELECT core.get_menu_id('CUOM'), 'sv', 'Sammansatta måttenheter' UNION ALL
SELECT core.get_menu_id('CUR'), 'sv', 'Valutahantering' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'sv', 'databas Statistik' UNION ALL
SELECT core.get_menu_id('DRP'), 'sv', 'Direkt Inköp' UNION ALL
SELECT core.get_menu_id('DRS'), 'sv', 'direktförsäljning' UNION ALL
SELECT core.get_menu_id('EOD'), 'sv', 'Slut på Dag Operation' UNION ALL
SELECT core.get_menu_id('FI'), 'sv', 'Finans' UNION ALL
SELECT core.get_menu_id('FIR'), 'sv', 'Rapporter' UNION ALL
SELECT core.get_menu_id('FSM'), 'sv', 'Uppställning & Underhåll' UNION ALL
SELECT core.get_menu_id('FTT'), 'sv', 'Transaktioner & Mallar' UNION ALL
SELECT core.get_menu_id('FVV'), 'sv', 'Voucher Verifiering' UNION ALL
SELECT core.get_menu_id('GRN'), 'sv', 'Varor mottagna anteckning' UNION ALL
SELECT core.get_menu_id('IAS'), 'sv', 'Kontoutdrag Inventory' UNION ALL
SELECT core.get_menu_id('ICP'), 'sv', 'Kostnads Priser' UNION ALL
SELECT core.get_menu_id('IIM'), 'sv', 'Inventering Rörelser' UNION ALL
SELECT core.get_menu_id('IR'), 'sv', 'Rapporter' UNION ALL
SELECT core.get_menu_id('ISM'), 'sv', 'Uppställning & Underhåll' UNION ALL
SELECT core.get_menu_id('ISP'), 'sv', 'försäljningspriser' UNION ALL
SELECT core.get_menu_id('ITM'), 'sv', 'Produkter & Artiklar' UNION ALL
SELECT core.get_menu_id('JVN'), 'sv', 'Journal Voucher Entry' UNION ALL
SELECT core.get_menu_id('LF'), 'sv', 'förseningsavgifter' UNION ALL
SELECT core.get_menu_id('OTS'), 'sv', 'One Time Setup' UNION ALL
SELECT core.get_menu_id('OTSI'), 'sv', 'Öppning Inventory' UNION ALL
SELECT core.get_menu_id('PA'), 'sv', 'Party-konton' UNION ALL
SELECT core.get_menu_id('PAT'), 'sv', 'Betalningsvillkor' UNION ALL
SELECT core.get_menu_id('PLA'), 'sv', 'Resultaträkning' UNION ALL
SELECT core.get_menu_id('PO'), 'sv', 'Inköpsorder' UNION ALL
SELECT core.get_menu_id('PR'), 'sv', 'Inköps Return' UNION ALL
SELECT core.get_menu_id('PRO'), 'sv', 'Inköps Omsortera' UNION ALL
SELECT core.get_menu_id('PSA'), 'sv', 'Frakt Adresser' UNION ALL
SELECT core.get_menu_id('PT'), 'sv', 'Parti Typer' UNION ALL
SELECT core.get_menu_id('PU'), 'sv', 'Inköp' UNION ALL
SELECT core.get_menu_id('PUQ'), 'sv', 'Inköp & Offert' UNION ALL
SELECT core.get_menu_id('PUR'), 'sv', 'Inköps Rapporter' UNION ALL
SELECT core.get_menu_id('PWD'), 'sv', 'Ändra användarlösenord' UNION ALL
SELECT core.get_menu_id('RFC'), 'sv', 'Kvitto från kund' UNION ALL
SELECT core.get_menu_id('RI'), 'sv', 'Återkommande fakturor' UNION ALL
SELECT core.get_menu_id('RIS'), 'sv', 'Återkommande Faktura Setup' UNION ALL
SELECT core.get_menu_id('SA'), 'sv', 'Försäljning' UNION ALL
SELECT core.get_menu_id('SAP'), 'sv', 'GL Access Policy' UNION ALL
SELECT core.get_menu_id('SAQ'), 'sv', 'Försäljning & Offert' UNION ALL
SELECT core.get_menu_id('SAR'), 'sv', 'Försäljningsrapporter' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'sv', 'Top köpta' UNION ALL
SELECT core.get_menu_id('SAT'), 'sv', 'admin Tools' UNION ALL
SELECT core.get_menu_id('SAV'), 'sv', 'Automatisk Verifiering Policy' UNION ALL
SELECT core.get_menu_id('SCR'), 'sv', 'Cash Repository Setup' UNION ALL
SELECT core.get_menu_id('SCRS'), 'sv', 'Land Setup' UNION ALL
SELECT core.get_menu_id('SCS'), 'sv', 'Counter Setup' UNION ALL
SELECT core.get_menu_id('SCTS'), 'sv', 'län Setup' UNION ALL
SELECT core.get_menu_id('SD'), 'sv', 'Försäljnings Leverans' UNION ALL
SELECT core.get_menu_id('SDS'), 'sv', 'Department Setup' UNION ALL
SELECT core.get_menu_id('SEAR'), 'sv', 'revisionsrapporter' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'sv', 'Inloggning View' UNION ALL
SELECT core.get_menu_id('SES'), 'sv', 'Entity Setup' UNION ALL
SELECT core.get_menu_id('SFR'), 'sv', 'Frekvens & Räkenskapsårets Hantering' UNION ALL
SELECT core.get_menu_id('SFY'), 'sv', 'Räkenskapsårets Information' UNION ALL
SELECT core.get_menu_id('SHI'), 'sv', 'avsändaren Information' UNION ALL
SELECT core.get_menu_id('SIG'), 'sv', 'artikelgrupper' UNION ALL
SELECT core.get_menu_id('SIS'), 'sv', 'Bransch Setup' UNION ALL
SELECT core.get_menu_id('SMA'), 'sv', 'Meny Access Policy' UNION ALL
SELECT core.get_menu_id('SMP'), 'sv', 'Diverse parametrar' UNION ALL
SELECT core.get_menu_id('SO'), 'sv', 'kundorder' UNION ALL
SELECT core.get_menu_id('SOB'), 'sv', 'Kontor & Branch Setup' UNION ALL
SELECT core.get_menu_id('SOS'), 'sv', 'Office Setup' UNION ALL
SELECT core.get_menu_id('SPM'), 'sv', 'Principhantering' UNION ALL
SELECT core.get_menu_id('SQ'), 'sv', 'Försäljnings Offert' UNION ALL
SELECT core.get_menu_id('SR'), 'sv', 'Sales Return' UNION ALL
SELECT core.get_menu_id('SRM'), 'sv', 'Roll hantering' UNION ALL
SELECT core.get_menu_id('SSA'), 'sv', 'försäljare' UNION ALL
SELECT core.get_menu_id('SSB'), 'sv', 'varumärken' UNION ALL
SELECT core.get_menu_id('SSC'), 'sv', 'Sammansatta artiklar' UNION ALL
SELECT core.get_menu_id('SSCD'), 'sv', 'Förening Objekt Information' UNION ALL
SELECT core.get_menu_id('SSI'), 'sv', 'Punkt Underhåll' UNION ALL
SELECT core.get_menu_id('SSM'), 'sv', 'Uppställning & Underhåll' UNION ALL
SELECT core.get_menu_id('SSP'), 'sv', 'Affär Policy' UNION ALL
SELECT core.get_menu_id('SSS'), 'sv', 'State Setup' UNION ALL
SELECT core.get_menu_id('SST'), 'sv', 'Sälj Teams' UNION ALL
SELECT core.get_menu_id('STA'), 'sv', 'Aktie Justeringar' UNION ALL
SELECT core.get_menu_id('STJ'), 'sv', 'Omlagring Journal' UNION ALL
SELECT core.get_menu_id('STO'), 'sv', 'butiker' UNION ALL
SELECT core.get_menu_id('STST'), 'sv', 'Statliga Försäljnings Skatter' UNION ALL
SELECT core.get_menu_id('STT'), 'sv', 'Förvara Typer' UNION ALL
SELECT core.get_menu_id('STX'), 'sv', 'Försäljnings Skatter' UNION ALL
SELECT core.get_menu_id('STXD'), 'sv', 'Försäljningsskatte Detaljer' UNION ALL
SELECT core.get_menu_id('STXEX'), 'sv', 'Försäljningsskatte undantar' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'sv', 'Försäljnings skattefri Detaljer' UNION ALL
SELECT core.get_menu_id('STXT'), 'sv', 'Försäljningsskattetyper' UNION ALL
SELECT core.get_menu_id('SUM'), 'sv', 'Användarhantering' UNION ALL
SELECT core.get_menu_id('SVV'), 'sv', 'Voucher Verifiering Policy' UNION ALL
SELECT core.get_menu_id('TB'), 'sv', 'Trial Balance' UNION ALL
SELECT core.get_menu_id('TRF'), 'sv', 'Flaggor' UNION ALL
SELECT core.get_menu_id('TXA'), 'sv', 'Skatteverket' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'sv', 'Skatteundantagna Typer' UNION ALL
SELECT core.get_menu_id('TXM'), 'sv', 'Skatte ledar-' UNION ALL
SELECT core.get_menu_id('UER'), 'sv', 'Uppdatera valutakurser' UNION ALL
SELECT core.get_menu_id('UOM'), 'sv', 'Måttenheter';

--MALAYASIAN
INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('ABS'), 'ms', 'Slab Bonus untuk jurujual' UNION ALL
SELECT core.get_menu_id('AGS'), 'ms', 'papak Penuaan' UNION ALL
SELECT core.get_menu_id('AS'), 'ms', 'Penyata Akaun' UNION ALL
SELECT core.get_menu_id('BAK'), 'ms', 'sandaran Pangkalan Data' UNION ALL
SELECT core.get_menu_id('BO'), 'ms', 'Pejabat Kembali' UNION ALL
SELECT core.get_menu_id('BOTC'), 'ms', 'Konfigurasi cukai' UNION ALL
SELECT core.get_menu_id('BS'), 'ms', 'Kunci Kira-kira' UNION ALL
SELECT core.get_menu_id('BSA'), 'ms', 'Bonus Tugasan Slab' UNION ALL
SELECT core.get_menu_id('BSD'), 'ms', 'Bonus Slab Butiran' UNION ALL
SELECT core.get_menu_id('CBA'), 'ms', 'Akaun Bank' UNION ALL
SELECT core.get_menu_id('CC'), 'ms', 'Pusat kos' UNION ALL
SELECT core.get_menu_id('CF'), 'ms', 'Aliran tunai' UNION ALL
SELECT core.get_menu_id('CFH'), 'ms', 'Aliran Tunai Tajuk' UNION ALL
SELECT core.get_menu_id('COA'), 'ms', 'Carta Akaun' UNION ALL
SELECT core.get_menu_id('CTST'), 'ms', 'Daerah-daerah Jualan Cukai' UNION ALL
SELECT core.get_menu_id('CUOM'), 'ms', 'Unit perkarangan Langkah' UNION ALL
SELECT core.get_menu_id('CUR'), 'ms', 'Pengurusan mata Wang' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'ms', 'Statistik Pangkalan Data' UNION ALL
SELECT core.get_menu_id('DRP'), 'ms', 'Pembelian Terus' UNION ALL
SELECT core.get_menu_id('DRS'), 'ms', 'Jualan Langsung' UNION ALL
SELECT core.get_menu_id('EOD'), 'ms', 'Akhir Operasi Hari' UNION ALL
SELECT core.get_menu_id('FI'), 'ms', 'Kewangan' UNION ALL
SELECT core.get_menu_id('FIR'), 'ms', 'laporan' UNION ALL
SELECT core.get_menu_id('FSM'), 'ms', 'Persediaan & Penyelenggaraan' UNION ALL
SELECT core.get_menu_id('FTT'), 'ms', 'Urusniaga & Templates' UNION ALL
SELECT core.get_menu_id('FVV'), 'ms', 'baucer Pengesahan' UNION ALL
SELECT core.get_menu_id('GRN'), 'ms', 'Barang Diterima Nota Entry' UNION ALL
SELECT core.get_menu_id('IAS'), 'ms', 'Penyata Akaun Inventori' UNION ALL
SELECT core.get_menu_id('ICP'), 'ms', 'Harga kos' UNION ALL
SELECT core.get_menu_id('IIM'), 'ms', 'Pergerakan inventori' UNION ALL
SELECT core.get_menu_id('IR'), 'ms', 'laporan' UNION ALL
SELECT core.get_menu_id('ISM'), 'ms', 'Persediaan & Penyelenggaraan' UNION ALL
SELECT core.get_menu_id('ISP'), 'ms', 'Menjual Harga' UNION ALL
SELECT core.get_menu_id('ITM'), 'ms', 'Produk & Barangan' UNION ALL
SELECT core.get_menu_id('JVN'), 'ms', 'Journal Voucher Entry' UNION ALL
SELECT core.get_menu_id('LF'), 'ms', 'Bayaran Lewat' UNION ALL
SELECT core.get_menu_id('OTS'), 'ms', 'Satu Persediaan Masa' UNION ALL
SELECT core.get_menu_id('OTSI'), 'ms', 'Inventori membuka' UNION ALL
SELECT core.get_menu_id('PA'), 'ms', 'Akaun Pihak' UNION ALL
SELECT core.get_menu_id('PAT'), 'ms', 'Terma pembayaran' UNION ALL
SELECT core.get_menu_id('PLA'), 'ms', 'Untung & Rugi' UNION ALL
SELECT core.get_menu_id('PO'), 'ms', 'Pesanan Pembelian' UNION ALL
SELECT core.get_menu_id('PR'), 'ms', 'pembelian Pulangan' UNION ALL
SELECT core.get_menu_id('PRO'), 'ms', 'pembelian Pesanan Semula' UNION ALL
SELECT core.get_menu_id('PSA'), 'ms', 'Alamat Penghantaran' UNION ALL
SELECT core.get_menu_id('PT'), 'ms', 'Jenis parti' UNION ALL
SELECT core.get_menu_id('PU'), 'ms', 'pembelian' UNION ALL
SELECT core.get_menu_id('PUQ'), 'ms', 'Pembelian & Sebut Harga' UNION ALL
SELECT core.get_menu_id('PUR'), 'ms', 'Laporan pembelian' UNION ALL
SELECT core.get_menu_id('PWD'), 'ms', 'Tukar Pengguna Kata Laluan' UNION ALL
SELECT core.get_menu_id('RFC'), 'ms', 'Penerimaan daripada Pelanggan' UNION ALL
SELECT core.get_menu_id('RI'), 'ms', 'Invois berulang' UNION ALL
SELECT core.get_menu_id('RIS'), 'ms', 'Berulang Persediaan Invois' UNION ALL
SELECT core.get_menu_id('SA'), 'ms', 'jualan' UNION ALL
SELECT core.get_menu_id('SAP'), 'ms', 'Dasar Akses GL' UNION ALL
SELECT core.get_menu_id('SAQ'), 'ms', 'Jualan & Sebut Harga' UNION ALL
SELECT core.get_menu_id('SAR'), 'ms', 'jualan Laporan' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'ms', 'Item Jualan Top' UNION ALL
SELECT core.get_menu_id('SAT'), 'ms', 'Alat admin' UNION ALL
SELECT core.get_menu_id('SAV'), 'ms', 'Dasar Pengesahan automatik' UNION ALL
SELECT core.get_menu_id('SCR'), 'ms', 'Repository Tunai Persediaan' UNION ALL
SELECT core.get_menu_id('SCRS'), 'ms', 'negara Persediaan' UNION ALL
SELECT core.get_menu_id('SCS'), 'ms', 'Persediaan kaunter' UNION ALL
SELECT core.get_menu_id('SCTS'), 'ms', 'County Persediaan' UNION ALL
SELECT core.get_menu_id('SD'), 'ms', 'Penghantaran jualan' UNION ALL
SELECT core.get_menu_id('SDS'), 'ms', 'Jabatan Persediaan' UNION ALL
SELECT core.get_menu_id('SEAR'), 'ms', 'Laporan Audit' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'ms', 'Log masuk View' UNION ALL
SELECT core.get_menu_id('SES'), 'ms', 'entiti Persediaan' UNION ALL
SELECT core.get_menu_id('SFR'), 'ms', 'Pengurusan Frekuensi & Tahun Anggaran' UNION ALL
SELECT core.get_menu_id('SFY'), 'ms', 'Tahun fiskal Maklumat' UNION ALL
SELECT core.get_menu_id('SHI'), 'ms', 'penghantar Maklumat' UNION ALL
SELECT core.get_menu_id('SIG'), 'ms', 'Kumpulan Perkara' UNION ALL
SELECT core.get_menu_id('SIS'), 'ms', 'industri Persediaan' UNION ALL
SELECT core.get_menu_id('SMA'), 'ms', 'Dasar Akses Menu' UNION ALL
SELECT core.get_menu_id('SMP'), 'ms', 'Parameter Pelbagai' UNION ALL
SELECT core.get_menu_id('SO'), 'ms', 'Perintah jualan' UNION ALL
SELECT core.get_menu_id('SOB'), 'ms', 'Pejabat & Cawangan Persediaan' UNION ALL
SELECT core.get_menu_id('SOS'), 'ms', 'Pejabat Persediaan' UNION ALL
SELECT core.get_menu_id('SPM'), 'ms', 'Pengurusan Polisi' UNION ALL
SELECT core.get_menu_id('SQ'), 'ms', 'Sebut Harga jualan' UNION ALL
SELECT core.get_menu_id('SR'), 'ms', 'jualan Pulangan' UNION ALL
SELECT core.get_menu_id('SRM'), 'ms', 'Pengurusan peranan' UNION ALL
SELECT core.get_menu_id('SSA'), 'ms', 'jurujual' UNION ALL
SELECT core.get_menu_id('SSB'), 'ms', 'jenama' UNION ALL
SELECT core.get_menu_id('SSC'), 'ms', 'Item kompaun' UNION ALL
SELECT core.get_menu_id('SSCD'), 'ms', 'Butiran Kompaun Perkara' UNION ALL
SELECT core.get_menu_id('SSI'), 'ms', 'Penyelenggaraan Perkara' UNION ALL
SELECT core.get_menu_id('SSM'), 'ms', 'Persediaan & Penyelenggaraan' UNION ALL
SELECT core.get_menu_id('SSP'), 'ms', 'Dasar Store' UNION ALL
SELECT core.get_menu_id('SSS'), 'ms', 'Persediaan Negeri' UNION ALL
SELECT core.get_menu_id('SST'), 'ms', 'Pasukan jualan' UNION ALL
SELECT core.get_menu_id('STA'), 'ms', 'Pelarasan saham' UNION ALL
SELECT core.get_menu_id('STJ'), 'ms', 'Pemindahan Saham Journal' UNION ALL
SELECT core.get_menu_id('STO'), 'ms', 'kedai' UNION ALL
SELECT core.get_menu_id('STST'), 'ms', 'Negeri Cukai Jualan' UNION ALL
SELECT core.get_menu_id('STT'), 'ms', 'Jenis kedai' UNION ALL
SELECT core.get_menu_id('STX'), 'ms', 'Cukai jualan' UNION ALL
SELECT core.get_menu_id('STXD'), 'ms', 'Butiran Cukai Jualan' UNION ALL
SELECT core.get_menu_id('STXEX'), 'ms', 'Mengecualikan Cukai Jualan' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'ms', 'Cukai Jualan Butiran Dikecualikan' UNION ALL
SELECT core.get_menu_id('STXT'), 'ms', 'Jenis Cukai Jualan' UNION ALL
SELECT core.get_menu_id('SUM'), 'ms', 'Pengurusan Pengguna' UNION ALL
SELECT core.get_menu_id('SVV'), 'ms', 'Dasar Pengesahan baucar' UNION ALL
SELECT core.get_menu_id('TB'), 'ms', 'Imbangan Duga' UNION ALL
SELECT core.get_menu_id('TRF'), 'ms', 'bendera' UNION ALL
SELECT core.get_menu_id('TXA'), 'ms', 'Pihak Berkuasa cukai' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'ms', 'Cukai Jenis Dikecualikan' UNION ALL
SELECT core.get_menu_id('TXM'), 'ms', 'Master cukai' UNION ALL
SELECT core.get_menu_id('UER'), 'ms', 'Kadar Pertukaran Update' UNION ALL
SELECT core.get_menu_id('UOM'), 'ms', 'Unit Tindakan';

--INDONESIAN
INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('ABS'), 'id', 'Slab bonus untuk Staf Penjualan' UNION ALL
SELECT core.get_menu_id('AGS'), 'id', 'Lempengan Penuaan' UNION ALL
SELECT core.get_menu_id('AS'), 'id', 'rekening' UNION ALL
SELECT core.get_menu_id('BAK'), 'id', 'backup database' UNION ALL
SELECT core.get_menu_id('BO'), 'id', 'Back Office' UNION ALL
SELECT core.get_menu_id('BOTC'), 'id', 'Konfigurasi pajak' UNION ALL
SELECT core.get_menu_id('BS'), 'id', 'neraca Keuangan' UNION ALL
SELECT core.get_menu_id('BSA'), 'id', 'Bonus Slab Tugas' UNION ALL
SELECT core.get_menu_id('BSD'), 'id', 'Bonus Slab Detail' UNION ALL
SELECT core.get_menu_id('CBA'), 'id', 'Rekening Bank' UNION ALL
SELECT core.get_menu_id('CC'), 'id', 'Pusat biaya' UNION ALL
SELECT core.get_menu_id('CF'), 'id', 'Arus Kas' UNION ALL
SELECT core.get_menu_id('CFH'), 'id', 'Arus Kas Pos' UNION ALL
SELECT core.get_menu_id('COA'), 'id', 'Bagan Akun' UNION ALL
SELECT core.get_menu_id('CTST'), 'id', 'Kabupaten Penjualan Pajak' UNION ALL
SELECT core.get_menu_id('CUOM'), 'id', 'Unit senyawa Ukur' UNION ALL
SELECT core.get_menu_id('CUR'), 'id', 'Manajemen Mata Uang' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'id', 'Statistik database' UNION ALL
SELECT core.get_menu_id('DRP'), 'id', 'Pembelian langsung' UNION ALL
SELECT core.get_menu_id('DRS'), 'id', 'Penjualan Langsung' UNION ALL
SELECT core.get_menu_id('EOD'), 'id', 'Akhir Hari Operasi' UNION ALL
SELECT core.get_menu_id('FI'), 'id', 'keuangan' UNION ALL
SELECT core.get_menu_id('FIR'), 'id', 'laporan' UNION ALL
SELECT core.get_menu_id('FSM'), 'id', 'Pengaturan & Maintenance' UNION ALL
SELECT core.get_menu_id('FTT'), 'id', 'Transaksi & Template' UNION ALL
SELECT core.get_menu_id('FVV'), 'id', 'Verifikasi voucher' UNION ALL
SELECT core.get_menu_id('GRN'), 'id', 'GRN masuk' UNION ALL
SELECT core.get_menu_id('IAS'), 'id', 'Rekening persediaan' UNION ALL
SELECT core.get_menu_id('ICP'), 'id', 'Harga biaya' UNION ALL
SELECT core.get_menu_id('IIM'), 'id', 'Mutasi persediaan' UNION ALL
SELECT core.get_menu_id('IR'), 'id', 'laporan' UNION ALL
SELECT core.get_menu_id('ISM'), 'id', 'Pengaturan & Maintenance' UNION ALL
SELECT core.get_menu_id('ISP'), 'id', 'Jual Harga' UNION ALL
SELECT core.get_menu_id('ITM'), 'id', 'Produk & Produk' UNION ALL
SELECT core.get_menu_id('JVN'), 'id', 'Jurnal Voucher Masuk' UNION ALL
SELECT core.get_menu_id('LF'), 'id', 'akhir Biaya' UNION ALL
SELECT core.get_menu_id('OTS'), 'id', 'One Time Pengaturan' UNION ALL
SELECT core.get_menu_id('OTSI'), 'id', 'membuka Persediaan' UNION ALL
SELECT core.get_menu_id('PA'), 'id', 'Akun Partai' UNION ALL
SELECT core.get_menu_id('PAT'), 'id', 'Syarat Pembayaran' UNION ALL
SELECT core.get_menu_id('PLA'), 'id', 'Laba & Rugi' UNION ALL
SELECT core.get_menu_id('PO'), 'id', 'Purchase Order' UNION ALL
SELECT core.get_menu_id('PR'), 'id', 'pembelian Kembali' UNION ALL
SELECT core.get_menu_id('PRO'), 'id', 'pembelian perekam' UNION ALL
SELECT core.get_menu_id('PSA'), 'id', 'Alamat pengiriman' UNION ALL
SELECT core.get_menu_id('PT'), 'id', 'Jenis Partai' UNION ALL
SELECT core.get_menu_id('PU'), 'id', 'pembelian' UNION ALL
SELECT core.get_menu_id('PUQ'), 'id', 'Pembelian & Quotation' UNION ALL
SELECT core.get_menu_id('PUR'), 'id', 'Laporan pembelian' UNION ALL
SELECT core.get_menu_id('PWD'), 'id', 'Ubah Password Pengguna' UNION ALL
SELECT core.get_menu_id('RFC'), 'id', 'Penerimaan dari Pelanggan' UNION ALL
SELECT core.get_menu_id('RI'), 'id', 'Faktur berulang' UNION ALL
SELECT core.get_menu_id('RIS'), 'id', 'Berulang Faktur Pengaturan' UNION ALL
SELECT core.get_menu_id('SA'), 'id', 'penjualan' UNION ALL
SELECT core.get_menu_id('SAP'), 'id', 'GL Kebijakan Access' UNION ALL
SELECT core.get_menu_id('SAQ'), 'id', 'Penjualan & Quotation' UNION ALL
SELECT core.get_menu_id('SAR'), 'id', 'Laporan penjualan' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'id', 'Top Selling Produk' UNION ALL
SELECT core.get_menu_id('SAT'), 'id', 'Alat admin' UNION ALL
SELECT core.get_menu_id('SAV'), 'id', 'Kebijakan Verifikasi Otomatis' UNION ALL
SELECT core.get_menu_id('SCR'), 'id', 'Repository kas Pengaturan' UNION ALL
SELECT core.get_menu_id('SCRS'), 'id', 'negara Pengaturan' UNION ALL
SELECT core.get_menu_id('SCS'), 'id', 'kontra Pengaturan' UNION ALL
SELECT core.get_menu_id('SCTS'), 'id', 'county Pengaturan' UNION ALL
SELECT core.get_menu_id('SD'), 'id', 'penjualan Pengiriman' UNION ALL
SELECT core.get_menu_id('SDS'), 'id', 'Departemen Pengaturan' UNION ALL
SELECT core.get_menu_id('SEAR'), 'id', 'Laporan Audit' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'id', 'Login View' UNION ALL
SELECT core.get_menu_id('SES'), 'id', 'entitas Pengaturan' UNION ALL
SELECT core.get_menu_id('SFR'), 'id', 'Manajemen Frekuensi & Fiskal Tahun' UNION ALL
SELECT core.get_menu_id('SFY'), 'id', 'Fiskal Informasi Tahun' UNION ALL
SELECT core.get_menu_id('SHI'), 'id', 'pengirim Informasi' UNION ALL
SELECT core.get_menu_id('SIG'), 'id', 'Item Grup' UNION ALL
SELECT core.get_menu_id('SIS'), 'id', 'Pengaturan industri' UNION ALL
SELECT core.get_menu_id('SMA'), 'id', 'Menu Akses Kebijakan' UNION ALL
SELECT core.get_menu_id('SMP'), 'id', 'Parameter lain-lain' UNION ALL
SELECT core.get_menu_id('SO'), 'id', 'Pesanan penjualan' UNION ALL
SELECT core.get_menu_id('SOB'), 'id', 'Kantor Cabang & Pengaturan' UNION ALL
SELECT core.get_menu_id('SOS'), 'id', 'kantor Pengaturan' UNION ALL
SELECT core.get_menu_id('SPM'), 'id', 'Kebijakan Manajemen' UNION ALL
SELECT core.get_menu_id('SQ'), 'id', 'sales Quotation' UNION ALL
SELECT core.get_menu_id('SR'), 'id', 'penjualan Kembali' UNION ALL
SELECT core.get_menu_id('SRM'), 'id', 'Manajemen peran' UNION ALL
SELECT core.get_menu_id('SSA'), 'id', 'penjual' UNION ALL
SELECT core.get_menu_id('SSB'), 'id', 'merek' UNION ALL
SELECT core.get_menu_id('SSC'), 'id', 'senyawa Item' UNION ALL
SELECT core.get_menu_id('SSCD'), 'id', 'Senyawa Item detail' UNION ALL
SELECT core.get_menu_id('SSI'), 'id', 'Item Maintenance' UNION ALL
SELECT core.get_menu_id('SSM'), 'id', 'Pengaturan & Maintenance' UNION ALL
SELECT core.get_menu_id('SSP'), 'id', 'Kebijakan toko' UNION ALL
SELECT core.get_menu_id('SSS'), 'id', 'Pengaturan negara' UNION ALL
SELECT core.get_menu_id('SST'), 'id', 'penjualan Tim' UNION ALL
SELECT core.get_menu_id('STA'), 'id', 'Penyesuaian saham' UNION ALL
SELECT core.get_menu_id('STJ'), 'id', 'Jurnal transfer saham' UNION ALL
SELECT core.get_menu_id('STO'), 'id', 'toko' UNION ALL
SELECT core.get_menu_id('STST'), 'id', 'Penjualan negara Pajak' UNION ALL
SELECT core.get_menu_id('STT'), 'id', 'Jenis toko' UNION ALL
SELECT core.get_menu_id('STX'), 'id', 'penjualan Pajak' UNION ALL
SELECT core.get_menu_id('STXD'), 'id', 'Rincian Pajak Penjualan' UNION ALL
SELECT core.get_menu_id('STXEX'), 'id', 'Membebaskan Pajak Penjualan' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'id', 'Pajak Penjualan Detail Bebaskan' UNION ALL
SELECT core.get_menu_id('STXT'), 'id', 'Jenis Pajak Penjualan' UNION ALL
SELECT core.get_menu_id('SUM'), 'id', 'Manajemen pengguna' UNION ALL
SELECT core.get_menu_id('SVV'), 'id', 'Kebijakan Verifikasi Voucher' UNION ALL
SELECT core.get_menu_id('TB'), 'id', 'Neraca Saldo' UNION ALL
SELECT core.get_menu_id('TRF'), 'id', 'Flags' UNION ALL
SELECT core.get_menu_id('TXA'), 'id', 'Kantor Pajak' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'id', 'Jenis Bebaskan Pajak' UNION ALL
SELECT core.get_menu_id('TXM'), 'id', 'Guru pajak' UNION ALL
SELECT core.get_menu_id('UER'), 'id', 'Perbarui Tukar' UNION ALL
SELECT core.get_menu_id('UOM'), 'id', 'Satuan Ukur';

--FILIPINO

INSERT INTO core.menu_locale(menu_id, culture, menu_text)
SELECT core.get_menu_id('ABS'), 'fil', 'Bonus laha para sa Salesperson' UNION ALL
SELECT core.get_menu_id('AGS'), 'fil', 'Pagtanda Slabs' UNION ALL
SELECT core.get_menu_id('AS'), 'fil', 'Statement ng Account' UNION ALL
SELECT core.get_menu_id('BAK'), 'fil', 'backup Database' UNION ALL
SELECT core.get_menu_id('BO'), 'fil', 'Bumalik Office' UNION ALL
SELECT core.get_menu_id('BOTC'), 'fil', 'Configuration ng Buwis' UNION ALL
SELECT core.get_menu_id('BS'), 'fil', 'balanse Sheet' UNION ALL
SELECT core.get_menu_id('BSA'), 'fil', 'Bonus tilad Pagtatalaga' UNION ALL
SELECT core.get_menu_id('BSD'), 'fil', 'Mga Detalye ng Bonus na tilad' UNION ALL
SELECT core.get_menu_id('CBA'), 'fil', 'bank Account' UNION ALL
SELECT core.get_menu_id('CC'), 'fil', 'Sentro ng Gastos' UNION ALL
SELECT core.get_menu_id('CF'), 'fil', 'Daloy ng cash' UNION ALL
SELECT core.get_menu_id('CFH'), 'fil', 'Mga Heading Daloy ng Cash' UNION ALL
SELECT core.get_menu_id('COA'), 'fil', 'Tsart ng Account' UNION ALL
SELECT core.get_menu_id('CTST'), 'fil', 'Mga county Sales Buwis' UNION ALL
SELECT core.get_menu_id('CUOM'), 'fil', 'Compound Unit ng Pagsukat' UNION ALL
SELECT core.get_menu_id('CUR'), 'fil', 'Pamamahala ng Salapi' UNION ALL
SELECT core.get_menu_id('DBSTAT'), 'fil', 'Istatistika ng Database' UNION ALL
SELECT core.get_menu_id('DRP'), 'fil', 'Direktang Pagbili' UNION ALL
SELECT core.get_menu_id('DRS'), 'fil', 'Direktang Benta' UNION ALL
SELECT core.get_menu_id('EOD'), 'fil', 'Katapusan ng Araw ng operasyon' UNION ALL
SELECT core.get_menu_id('FI'), 'fil', 'pananalapi' UNION ALL
SELECT core.get_menu_id('FIR'), 'fil', 'Mga Ulat' UNION ALL
SELECT core.get_menu_id('FSM'), 'fil', 'Pag-setup at Pagpapanatili' UNION ALL
SELECT core.get_menu_id('FTT'), 'fil', 'Mga transaksyon at Template' UNION ALL
SELECT core.get_menu_id('FVV'), 'fil', 'voucher Pag-verify' UNION ALL
SELECT core.get_menu_id('GRN'), 'fil', 'GRN Entry' UNION ALL
SELECT core.get_menu_id('IAS'), 'fil', 'Pahayag Imbentaryo Account' UNION ALL
SELECT core.get_menu_id('ICP'), 'fil', 'Ang mga presyo ng Gastos' UNION ALL
SELECT core.get_menu_id('IIM'), 'fil', 'mga paggalaw ng Imbentaryo' UNION ALL
SELECT core.get_menu_id('IR'), 'fil', 'Mga Ulat' UNION ALL
SELECT core.get_menu_id('ISM'), 'fil', 'Pag-setup at Pagpapanatili' UNION ALL
SELECT core.get_menu_id('ISP'), 'fil', 'Pagbebenta ng Mga Presyo' UNION ALL
SELECT core.get_menu_id('ITM'), 'fil', 'Mga Produkto at Mga Item' UNION ALL
SELECT core.get_menu_id('JVN'), 'fil', 'Journal Entry Voucher' UNION ALL
SELECT core.get_menu_id('LF'), 'fil', 'Mga huling Bayarin' UNION ALL
SELECT core.get_menu_id('OTS'), 'fil', 'Isang Oras sa Pag-setup' UNION ALL
SELECT core.get_menu_id('OTSI'), 'fil', 'Pagbubukas ng Imbentaryo' UNION ALL
SELECT core.get_menu_id('PA'), 'fil', 'Party Account' UNION ALL
SELECT core.get_menu_id('PAT'), 'fil', 'Mga Tuntunin sa Pagbabayad' UNION ALL
SELECT core.get_menu_id('PLA'), 'fil', 'Profit & Pagkawala ng Account' UNION ALL
SELECT core.get_menu_id('PO'), 'fil', 'Purchase Order' UNION ALL
SELECT core.get_menu_id('PR'), 'fil', 'Bumili ng Return' UNION ALL
SELECT core.get_menu_id('PRO'), 'fil', 'Bumili ng Muling mag-order' UNION ALL
SELECT core.get_menu_id('PSA'), 'fil', 'Address ng Pagpapadala' UNION ALL
SELECT core.get_menu_id('PT'), 'fil', 'Mga Uri ng Party' UNION ALL
SELECT core.get_menu_id('PU'), 'fil', 'pagbili' UNION ALL
SELECT core.get_menu_id('PUQ'), 'fil', 'Pagbili at panipi' UNION ALL
SELECT core.get_menu_id('PUR'), 'fil', 'Ulat ng Pagbili' UNION ALL
SELECT core.get_menu_id('PWD'), 'fil', 'Baguhin ang User Password' UNION ALL
SELECT core.get_menu_id('RFC'), 'fil', 'Resibo mula sa Customer' UNION ALL
SELECT core.get_menu_id('RI'), 'fil', 'umuulit na mga Invoice' UNION ALL
SELECT core.get_menu_id('RIS'), 'fil', 'Umuulit na Pag-setup ng Invoice' UNION ALL
SELECT core.get_menu_id('SA'), 'fil', 'Sales' UNION ALL
SELECT core.get_menu_id('SAP'), 'fil', 'GL Patakaran sa Pag-access' UNION ALL
SELECT core.get_menu_id('SAQ'), 'fil', 'Benta at panipi' UNION ALL
SELECT core.get_menu_id('SAR'), 'fil', 'Mga Ulat sa Benta' UNION ALL
SELECT core.get_menu_id('SAR-TSI'), 'fil', 'Pinakamabentang Item' UNION ALL
SELECT core.get_menu_id('SAT'), 'fil', 'Mga Tool ng Admin' UNION ALL
SELECT core.get_menu_id('SAV'), 'fil', 'Patakaran sa Awtomatikong Pag-verify' UNION ALL
SELECT core.get_menu_id('SCR'), 'fil', 'Cash imbakan Setup' UNION ALL
SELECT core.get_menu_id('SCRS'), 'fil', 'Setup bansa' UNION ALL
SELECT core.get_menu_id('SCS'), 'fil', 'counter-setup' UNION ALL
SELECT core.get_menu_id('SCTS'), 'fil', 'Setup ng county' UNION ALL
SELECT core.get_menu_id('SD'), 'fil', 'Paghahatid ng Sales' UNION ALL
SELECT core.get_menu_id('SDS'), 'fil', 'Kagawaran Setup' UNION ALL
SELECT core.get_menu_id('SEAR'), 'fil', 'Ulat ng pag-audit' UNION ALL
SELECT core.get_menu_id('SEAR-LV'), 'fil', 'Tingnan ang Pag-login' UNION ALL
SELECT core.get_menu_id('SES'), 'fil', 'entity Setup' UNION ALL
SELECT core.get_menu_id('SFR'), 'fil', 'Pamamahala Taon Dalas & Pananalapi' UNION ALL
SELECT core.get_menu_id('SFY'), 'fil', 'Tama sa Pananalapi Impormasyon Taon' UNION ALL
SELECT core.get_menu_id('SHI'), 'fil', 'embarkador Impormasyon' UNION ALL
SELECT core.get_menu_id('SIG'), 'fil', 'Mga Pangkat item' UNION ALL
SELECT core.get_menu_id('SIS'), 'fil', 'Setup ng industriya' UNION ALL
SELECT core.get_menu_id('SMA'), 'fil', 'Menu Patakaran sa Pag-access' UNION ALL
SELECT core.get_menu_id('SMP'), 'fil', 'Sari-saring Parameter' UNION ALL
SELECT core.get_menu_id('SO'), 'fil', 'Pagkakasunod-sunod ng Sales' UNION ALL
SELECT core.get_menu_id('SOB'), 'fil', 'Setup ng Opisina at Sangay' UNION ALL
SELECT core.get_menu_id('SOS'), 'fil', 'Setup ng Office' UNION ALL
SELECT core.get_menu_id('SPM'), 'fil', 'Pamamahala ng patakaran' UNION ALL
SELECT core.get_menu_id('SQ'), 'fil', 'Sales panipi' UNION ALL
SELECT core.get_menu_id('SR'), 'fil', 'Sales Return' UNION ALL
SELECT core.get_menu_id('SRM'), 'fil', 'Pamamahala ng Tungkulin' UNION ALL
SELECT core.get_menu_id('SSA'), 'fil', 'Mga Salesperson' UNION ALL
SELECT core.get_menu_id('SSB'), 'fil', 'Mga Tatak' UNION ALL
SELECT core.get_menu_id('SSC'), 'fil', 'Compound Item' UNION ALL
SELECT core.get_menu_id('SSCD'), 'fil', 'Mga Detalye Compound Item' UNION ALL
SELECT core.get_menu_id('SSI'), 'fil', 'Pagpapanatili item' UNION ALL
SELECT core.get_menu_id('SSM'), 'fil', 'Pag-setup at Pagpapanatili' UNION ALL
SELECT core.get_menu_id('SSP'), 'fil', 'Patakaran sa Store' UNION ALL
SELECT core.get_menu_id('SSS'), 'fil', 'Setup ng estado' UNION ALL
SELECT core.get_menu_id('SST'), 'fil', 'Sales Mga Koponan' UNION ALL
SELECT core.get_menu_id('STA'), 'fil', 'stock Adjustments' UNION ALL
SELECT core.get_menu_id('STJ'), 'fil', 'Stock Transfer Journal' UNION ALL
SELECT core.get_menu_id('STO'), 'fil', 'Tindahan' UNION ALL
SELECT core.get_menu_id('STST'), 'fil', 'Benta ng estado ang mga buwis' UNION ALL
SELECT core.get_menu_id('STT'), 'fil', 'Mga Uri ng Store' UNION ALL
SELECT core.get_menu_id('STX'), 'fil', 'Sales Buwis' UNION ALL
SELECT core.get_menu_id('STXD'), 'fil', 'Mga Detalye ng Buwis sa Pagbebenta' UNION ALL
SELECT core.get_menu_id('STXEX'), 'fil', 'Hindi isinasama ang mga Buwis sa Pagbebenta' UNION ALL
SELECT core.get_menu_id('STXEXD'), 'fil', 'Mga Detalye Exempt Buwis sa Pagbebenta' UNION ALL
SELECT core.get_menu_id('STXT'), 'fil', 'Mga Uri ng Buwis sa Pagbebenta' UNION ALL
SELECT core.get_menu_id('SUM'), 'fil', 'Pamamahala ng Gumagamit' UNION ALL
SELECT core.get_menu_id('SVV'), 'fil', 'Patakaran sa Pag-verify ng Voucher' UNION ALL
SELECT core.get_menu_id('TB'), 'fil', 'Pagsubok Balanse' UNION ALL
SELECT core.get_menu_id('TRF'), 'fil', 'Ang Flag' UNION ALL
SELECT core.get_menu_id('TXA'), 'fil', 'Awtoridad ng Buwis' UNION ALL
SELECT core.get_menu_id('TXEXT'), 'fil', 'Tax Exempt Mga Uri' UNION ALL
SELECT core.get_menu_id('TXM'), 'fil', 'Buwis Master' UNION ALL
SELECT core.get_menu_id('UER'), 'fil', 'I-update ang mga rate Exchange' UNION ALL
SELECT core.get_menu_id('UOM'), 'fil', 'Unit ng Pagsukat';


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/core/core.disable_editing_sys_type.sql --<--<--
CREATE OR REPLACE FUNCTION core.disable_editing_sys_type()
RETURNS TRIGGER
AS
$$
BEGIN
    IF TG_OP='UPDATE' OR TG_OP='DELETE' THEN
        IF EXISTS
        (
            SELECT *
            FROM core.accounts
            WHERE (sys_type=true)
            AND account_id=OLD.account_id
        ) THEN
            RAISE EXCEPTION 'You are not allowed to change system accounts.'
            USING ERRCODE='P8990';
        END IF;
    END IF;
    
    IF TG_OP='INSERT' THEN
        IF (NEW.sys_type=true) THEN
            RAISE EXCEPTION 'You are not allowed to add system accounts.'
            USING ERRCODE='P8991';
        END IF;
    END IF;

    IF TG_OP='DELETE' THEN
        RETURN OLD;
    END IF;

    RETURN NEW; 
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/core/core.items_unit_check_trigger.sql --<--<--
DROP FUNCTION IF EXISTS core.items_unit_check_trigger() CASCADE;

CREATE FUNCTION core.items_unit_check_trigger()
RETURNS TRIGGER
AS
$$        
BEGIN
        IF(core.get_root_unit_id(NEW.unit_id) != core.get_root_unit_id(NEW.reorder_unit_id)) THEN
            RAISE EXCEPTION 'The reorder unit is incompatible with the base unit.'
            USING ERRCODE='P3054';
        END IF;
        RETURN NEW;
END
$$
LANGUAGE plpgsql;

CREATE TRIGGER items_unit_check_trigger
AFTER INSERT OR UPDATE
ON core.items
FOR EACH ROW EXECUTE PROCEDURE core.items_unit_check_trigger();

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/core/core.party_after_insert_trigger.sql --<--<--
CREATE FUNCTION core.party_after_insert_trigger()
RETURNS TRIGGER
AS
$$
    DECLARE _parent_account_id bigint;
    DECLARE _party_code text;
    DECLARE _account_id bigint;
BEGIN
    _party_code             := core.get_party_code(NEW.first_name, NEW.middle_name, NEW.last_name);
    _parent_account_id      := core.get_account_id_by_party_type_id(NEW.party_type_id);

    IF(COALESCE(NEW.party_name, '') = '') THEN
        NEW.party_name := REPLACE(TRIM(COALESCE(NEW.last_name, '') || ', ' || NEW.first_name || ' ' || COALESCE(NEW.middle_name, '')), ' ', '');
    END IF;

    --Create a new account
    IF(NEW.account_id IS NULL) THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name, parent_account_id)
        SELECT core.get_account_master_id_by_account_id(_parent_account_id), _party_code, NEW.currency_code, _party_code || ' (' || NEW.party_name || ')', _parent_account_id
        RETURNING account_id INTO _account_id;
    
        UPDATE core.parties
        SET 
            account_id=_account_id, 
            party_code=_party_code
        WHERE core.parties.party_id=NEW.party_id;

        RETURN NEW;
    END IF;

    UPDATE core.parties
    SET 
        party_code=_party_code
    WHERE core.parties.party_id=NEW.party_id;

    RETURN NEW;
END
$$
LANGUAGE plpgsql;

CREATE TRIGGER party_after_insert_trigger
AFTER INSERT
ON core.parties
FOR EACH ROW EXECUTE PROCEDURE core.party_after_insert_trigger();

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/core/core.party_before_update_trigger.sql --<--<--
CREATE FUNCTION core.party_before_update_trigger()
RETURNS TRIGGER
AS
$$
    DECLARE _parent_currency_code text;
BEGIN
    
    --Get currency code of associated GL head.
    _parent_currency_code := core.get_currency_code_by_party_id(NEW.party_id);


    IF(NEW.currency_code != _parent_currency_code) THEN
        RAISE EXCEPTION 'You cannot have a different currency on the mapped GL account.'
        USING ERRCODE='P8003';
    END IF;

    IF(NEW.account_id IS NULL) THEN
        RAISE EXCEPTION 'The column account_id cannot be null.'
        USING ERRCODE='P3501';
    END IF;
    
    RETURN NEW;
END
$$
LANGUAGE plpgsql;

CREATE TRIGGER party_before_update_trigger
BEFORE UPDATE
ON core.parties
FOR EACH ROW EXECUTE PROCEDURE core.party_before_update_trigger();



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/core/core.shippers_after_insert_trigger.sql --<--<--
CREATE FUNCTION core.shippers_after_insert_trigger()
RETURNS trigger
AS
$$
BEGIN
    UPDATE core.shippers
    SET 
        shipper_code=core.get_shipper_code(NEW.company_name)
    WHERE core.shippers.shipper_id=NEW.shipper_id;
    
    RETURN NEW;
END
$$
LANGUAGE plpgsql;

CREATE TRIGGER shippers_after_insert_trigger
AFTER INSERT
ON core.shippers
FOR EACH ROW EXECUTE PROCEDURE core.shippers_after_insert_trigger();


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/core/core.update_shipping_address_code_trigger.sql --<--<--
CREATE FUNCTION core.update_shipping_address_code_trigger()
RETURNS TRIGGER
AS
$$
DECLARE _counter integer;
BEGIN
    IF TG_OP='INSERT' THEN

        SELECT COALESCE(MAX(shipping_address_code::integer), 0) + 1
        INTO _counter
        FROM core.shipping_addresses
        WHERE party_id=NEW.party_id;

        NEW.shipping_address_code := trim(to_char(_counter, '000'));
        
        RETURN NEW;
    END IF;
END
$$
LANGUAGE plpgsql;


CREATE TRIGGER update_shipping_address_code_trigger
BEFORE INSERT
ON core.shipping_addresses
FOR EACH ROW EXECUTE PROCEDURE core.update_shipping_address_code_trigger();



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/office/office.hash_password.sql --<--<--
DROP FUNCTION IF EXISTS office.hash_password() CASCADE;

CREATE FUNCTION office.hash_password()
RETURNS trigger
AS
$$
    DECLARE _password   text;
    DECLARE _is_sys     boolean;
BEGIN
    _is_sys     := office.is_sys_user(NEW.user_id);
    _password   := encode(digest(NEW.user_name || NEW.password, 'sha512'), 'hex');

    IF(NOT _is_sys) THEN
        UPDATE office.users
        SET password = _password
        WHERE office.users.user_name=NEW.user_name;
    END IF;
    
    RETURN new;
END
$$
LANGUAGE plpgsql;

CREATE TRIGGER hash_password
AFTER INSERT ON office.users
FOR EACH ROW
EXECUTE PROCEDURE office.hash_password();

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/office/office.user_trigger.sql --<--<--
DROP FUNCTION IF EXISTS office.user_trigger() CASCADE;

CREATE FUNCTION office.user_trigger()
RETURNS trigger
AS
$$
BEGIN
    IF(office.is_sys(NEW.user_id) AND NEW.password != '') THEN
        RAISE EXCEPTION 'A sys user cannot have a password.'
        USING ERRCODE='P8992';
    END IF; 

    RETURN new;
END
$$
LANGUAGE plpgsql;

CREATE TRIGGER user_trigger
AFTER INSERT OR UPDATE ON office.users
FOR EACH ROW
EXECUTE PROCEDURE office.user_trigger();



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/policy/policy.perform_lock_out.sql --<--<--
--TODO: Create a lockout policy.
CREATE FUNCTION policy.perform_lock_out()
RETURNS TRIGGER
AS
$$
BEGIN
    IF(
        SELECT COUNT(*) FROM audit.failed_logins
        WHERE audit.failed_logins.user_id=NEW.user_id
        AND audit.failed_logins.failed_date_time 
        BETWEEN NOW()-'5minutes'::interval 
        AND NOW()
    )::integer>5 THEN

    INSERT INTO policy.lock_outs(user_id)SELECT NEW.user_id;
END IF;
RETURN NEW;
END
$$
LANGUAGE plpgsql;

CREATE TRIGGER lockout_user
AFTER INSERT
ON audit.failed_logins
FOR EACH ROW EXECUTE PROCEDURE policy.perform_lock_out();



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/transactions/transactions.restrict_delete_trigger.sql --<--<--
DROP FUNCTION IF EXISTS transactions.restrict_delete_trigger() CASCADE;
CREATE FUNCTION transactions.restrict_delete_trigger()
RETURNS TRIGGER
AS
$$
BEGIN
    IF TG_OP='DELETE' THEN
        RAISE EXCEPTION 'Deleting a transaction is not allowed. Mark the transaction as rejected instead.'
        USING ERRCODE='P5800';
    END IF;
END
$$
LANGUAGE 'plpgsql';


CREATE TRIGGER restrict_delete_trigger
BEFORE DELETE
ON transactions.transaction_details
FOR EACH ROW 
EXECUTE PROCEDURE transactions.restrict_delete_trigger();


CREATE TRIGGER restrict_delete_trigger
BEFORE DELETE
ON transactions.stock_master
FOR EACH ROW 
EXECUTE PROCEDURE transactions.restrict_delete_trigger();


CREATE TRIGGER restrict_delete_trigger
BEFORE DELETE
ON transactions.stock_details
FOR EACH ROW 
EXECUTE PROCEDURE transactions.restrict_delete_trigger();



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/10.triggers/transactions/transactions.verify_stock_master_integrity_trigger.sql --<--<--
DROP FUNCTION IF EXISTS transactions.verify_stock_master_integrity_trigger() CASCADE;

CREATE FUNCTION transactions.verify_stock_master_integrity_trigger()
RETURNS TRIGGER
AS
$$
        DECLARE _office_id integer=0;
BEGIN
        SELECT office_id INTO _office_id
        FROM transactions.transaction_master
        WHERE transactions.transaction_master.transaction_master_id = NEW.transaction_master_id;
        
        IF(office.get_office_id_by_store_id(NEW.store_id) != _office_id) THEN
                RAISE EXCEPTION 'Invalid store.'
                USING ERRCODE='P3012';
        END IF;

        IF(office.get_office_id_by_cash_repository_id(NEW.cash_repository_id)  != _office_id) THEN
                RAISE EXCEPTION 'Invalid cash repository.'
                USING ERRCODE='P3013';
        END IF;
                
        RETURN NEW;
END
$$
LANGUAGE plpgsql;


CREATE TRIGGER verify_stock_master_integrity_trigger_after_insert
AFTER INSERT
ON transactions.stock_master
FOR EACH ROW 
EXECUTE PROCEDURE transactions.verify_stock_master_integrity_trigger();


CREATE TRIGGER verify_stock_master_integrity_trigger_after_update
AFTER UPDATE
ON transactions.stock_master
FOR EACH ROW 
EXECUTE PROCEDURE transactions.verify_stock_master_integrity_trigger();






-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests/core/parties/unit_tests.check_party_currency_code_mismatch.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.check_party_currency_code_mismatch();

CREATE FUNCTION unit_tests.check_party_currency_code_mismatch()
RETURNS public.test_result
AS
$$
    DECLARE message test_result;
BEGIN
    IF EXISTS
    (
        SELECT party_code FROM core.parties
        INNER JOIN core.accounts
        ON core.parties.account_id = core.accounts.account_id
        WHERE core.parties.currency_code != core.accounts.currency_code
        LIMIT 1
    ) THEN
        SELECT assert.fail('Some party accounts have different currency setup on their mapped GL heads.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests/core/parties/unit_tests.check_party_null_account_id.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.check_party_null_account_id();

CREATE FUNCTION unit_tests.check_party_null_account_id()
RETURNS public.test_result
AS
$$
    DECLARE message test_result;
BEGIN
    IF EXISTS
    (
        SELECT party_code FROM core.parties
        WHERE core.parties.account_id IS NULL
        LIMIT 1
    ) THEN
        SELECT assert.fail('Some party accounts don''t have mapped GL heads.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests/core/parties/unit_tests.test_transactions_post_receipt_function.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.test_transactions_post_receipt_function();

CREATE FUNCTION unit_tests.test_transactions_post_receipt_function()
RETURNS public.test_result
AS
$$
    DECLARE message                 test_result;
    DECLARE _user_id                integer;
    DECLARE _office_id              integer; 
    DECLARE _login_id               bigint;
    DECLARE _party_code             national character varying(12); 
    DECLARE _currency_code          national character varying(12); 
    DECLARE _amount                 money_strict; 
    DECLARE _exchange_rate_debit    decimal_strict; 
    DECLARE _exchange_rate_credit   decimal_strict;
    DECLARE _reference_number       national character varying(24); 
    DECLARE _statement_reference    national character varying(128); 
    DECLARE _cost_center_id         integer;
    DECLARE _cash_repository_id     integer;
    DECLARE _posted_date            date;
    DECLARE _bank_account_id        integer;
    DECLARE _bank_instrument_code   national character varying(128);
    DECLARE _bank_tran_code         national character varying(128);
    DECLARE _result                 bigint;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id                      := office.get_office_id_by_office_code('dummy-off01');
    _user_id                        := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id                       := office.get_login_id(_user_id);
    _party_code                     := 'dummy-pr01';
    _currency_code                  := 'USD';
    _amount                         := 1000.00;
    _exchange_rate_debit            := 100.00;
    _exchange_rate_credit           := 100.00;
    _reference_number               := 'PL-PG-UNIT-TEST';
    _statement_reference            := 'This transaction should have been rollbacked already.';
    _cost_center_id                 := office.get_cost_center_id_by_cost_center_code('dummy-cs01');
    _cash_repository_id             := office.get_cash_repository_id_by_cash_repository_code('dummy-cr01');
    _posted_date                    := NULL;
    _bank_account_id                := NULL;
    _bank_instrument_code           := NULL;
    _bank_tran_code                 := NULL;
                                                        
    _result                         := transactions.post_receipt_function
                                    (
                                        _user_id, 
                                        _office_id, 
                                        _login_id,
                                        _party_code, 
                                        _currency_code, 
                                        _amount, 
                                        _exchange_rate_debit, 
                                        _exchange_rate_credit,
                                        _reference_number, 
                                        _statement_reference, 
                                        _cost_center_id,
                                        _cash_repository_id,
                                        _posted_date,
                                        _bank_account_id,
                                        _bank_instrument_code,
                                        _bank_tran_code 
                                    );

    IF(_result <= 0) THEN
        SELECT assert.fail('Cannot compile transactions.post_receipt_function.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests/office/unit_tests.sign_in_test.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.sign_in_test();

CREATE FUNCTION unit_tests.sign_in_test()
RETURNS public.test_result
AS
$$
    DECLARE _office_id          integer;
    DECLARE _user_name          text='plpgunit-test-user-000001';
    DECLARE _password           text = encode(digest(encode(digest('plpgunit-test-user-000001thoushaltnotlogin', 'sha512'), 'hex') || 'common', 'sha512'), 'hex');
    DECLARE _culture            text='en-US';
    DECLARE _login_id           bigint;
    DECLARE _sing_in_message    text;
    DECLARE message             test_result;
BEGIN
    PERFORM unit_tests.create_dummy_offices();
    PERFORM unit_tests.create_dummy_users();

    _office_id := office.get_office_id_by_office_code('dummy-off01');
    
    SELECT * FROM office.sign_in(_office_id, _user_name, _password, 'Plpgunit', '127.0.0.1', 'Plpgunit/plpgunit-test-user-000001', _culture, 'common')    
    INTO _login_id, _sing_in_message;
    
    IF(COALESCE(_login_id, 0) = 0) THEN
        SELECT assert.fail(_sing_in_message) INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests/others/unit_tests.if_functions_compile.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.if_functions_compile();

CREATE FUNCTION unit_tests.if_functions_compile()
RETURNS test_result
AS
$$
    DECLARE schemas text[];
    DECLARE message test_result;
    DECLARE result  boolean;
BEGIN

    schemas := ARRAY(
                SELECT nspname::text
                FROM pg_namespace
                WHERE nspname NOT LIKE 'pg%'
                AND nspname NOT IN('assert', 'unit_tests', 'information_schema')
                ORDER BY nspname
                );


    SELECT * FROM assert.if_functions_compile(VARIADIC schemas) INTO message, result;
    
    IF(result=false) THEN
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message; 
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests/others/unit_tests.if_views_compile.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.if_views_compile();

CREATE FUNCTION unit_tests.if_views_compile()
RETURNS test_result
AS
$$
    DECLARE schemas text[];
    DECLARE message test_result;
    DECLARE result  boolean;
BEGIN

    schemas := ARRAY(
                SELECT nspname::text
                FROM pg_namespace
                WHERE nspname NOT LIKE 'pg%'
                AND nspname NOT IN('assert', 'unit_tests', 'information_schema')
                ORDER BY nspname
                );


    SELECT * FROM assert.if_views_compile(VARIADIC schemas) INTO message, result;
    
    IF(result=false) THEN
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message; 
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests/unit_tests.create_mock.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_mock();

CREATE FUNCTION unit_tests.create_mock()
RETURNS void
AS
$$
BEGIN
    PERFORM unit_tests.create_dummy_offices();
    PERFORM unit_tests.create_dummy_users();
    PERFORM unit_tests.create_dummy_accounts();
    PERFORM unit_tests.create_dummy_sales_taxes();
    PERFORM unit_tests.create_dummy_countries();
    PERFORM unit_tests.create_dummy_states();
    PERFORM unit_tests.create_dummy_party_types();
    PERFORM unit_tests.create_dummy_item_groups();
    PERFORM unit_tests.create_dummy_item_types();
    PERFORM unit_tests.create_dummy_units();
    PERFORM unit_tests.create_dummy_brands();
    PERFORM unit_tests.create_dummy_parties();
    PERFORM unit_tests.create_dummy_items();
    PERFORM unit_tests.create_dummy_cost_centers();
    PERFORM unit_tests.create_dummy_late_fees();
    PERFORM unit_tests.create_dummy_sales_teams();
    PERFORM unit_tests.create_dummy_salespersons();
    PERFORM unit_tests.create_dummy_shippers();
    PERFORM unit_tests.create_dummy_cash_repositories();
    PERFORM unit_tests.create_dummy_store_types();
    PERFORM unit_tests.create_dummy_stores();
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_accounts.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_accounts();

CREATE FUNCTION unit_tests.create_dummy_accounts()
RETURNS void 
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc01') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('BSA'), 'dummy-acc01', 'NPR', 'Test Mock Account 1';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc02') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('BSA'), 'dummy-acc02', 'NPR', 'Test Mock Account 2';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc03') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('BSA'), 'dummy-acc03', 'NPR', 'Test Mock Account 3';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc04') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('BSA'), 'dummy-acc04', 'NPR', 'Test Mock Account 4';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc05') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('BSA'), 'dummy-acc05', 'NPR', 'Test Mock Account 5';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc06') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('CAS'), 'dummy-acc06', 'NPR', 'Test Mock Account 6';
    END IF;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_auto_verification_policy.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_auto_verification_policy
(
        _user_id integer, 
        _verify_sales_transactions boolean, 
        _sales_verification_limit money_strict2, 
        _verify_purchase_transactions boolean, 
        _purchase_verification_limit money_strict2, 
        _verify_gl_transactions boolean,
        _gl_verification_limit money_strict2,
        _effective_from date,
        _ends_on date,
        _is_active boolean
);

CREATE FUNCTION unit_tests.create_dummy_auto_verification_policy
(
        _user_id integer, 
        _verify_sales_transactions boolean, 
        _sales_verification_limit money_strict2, 
        _verify_purchase_transactions boolean, 
        _purchase_verification_limit money_strict2, 
        _verify_gl_transactions boolean,
        _gl_verification_limit money_strict2,
        _effective_from date,
        _ends_on date,
        _is_active boolean
)
RETURNS void 
AS
$$
BEGIN
        IF NOT EXISTS(SELECT 1 FROM policy.auto_verification_policy WHERE user_id=_user_id) THEN
                INSERT INTO policy.auto_verification_policy(user_id, verify_sales_transactions, sales_verification_limit, verify_purchase_transactions, purchase_verification_limit, verify_gl_transactions, gl_verification_limit, effective_from, ends_on, is_active)
                SELECT _user_id, _verify_sales_transactions, _sales_verification_limit, _verify_purchase_transactions, _purchase_verification_limit, _verify_gl_transactions, _gl_verification_limit, _effective_from, _ends_on, _is_active;
                RETURN;
        END IF;

        UPDATE policy.auto_verification_policy
        SET 
                verify_sales_transactions = _verify_sales_transactions,
                sales_verification_limit = _sales_verification_limit,
                verify_purchase_transactions = _verify_purchase_transactions,
                purchase_verification_limit = _purchase_verification_limit,
                verify_gl_transactions = _verify_gl_transactions, 
                gl_verification_limit = _gl_verification_limit, 
                effective_from = _effective_from, 
                ends_on = _ends_on, 
                is_active = _is_active                
        WHERE user_id=_user_id;
        
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_brands.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_brands();

CREATE FUNCTION unit_tests.create_dummy_brands()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.brands WHERE brand_code='dummy-br01') THEN        
        INSERT INTO core.brands(brand_code, brand_name)
        SELECT 'dummy-br01', 'Test Mock Brand';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_cash_repositories.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_cash_repositories();

CREATE FUNCTION unit_tests.create_dummy_cash_repositories()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.cash_repositories WHERE cash_repository_code='dummy-cr01') THEN        
        INSERT INTO office.cash_repositories(cash_repository_code, cash_repository_name, office_id)
        SELECT 'dummy-cr01', 'Test Mock Cash Repository', office.get_office_id_by_office_code('dummy-off01');
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_cost_centers.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_cost_centers();

CREATE FUNCTION unit_tests.create_dummy_cost_centers()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.cost_centers WHERE cost_center_code='dummy-cs01') THEN        
        INSERT INTO office.cost_centers(cost_center_code, cost_center_name)
        SELECT 'dummy-cs01', 'Test Mock Cost Center';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_countries.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_countries();

CREATE FUNCTION unit_tests.create_dummy_countries()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.countries WHERE country_code='dummy-co01') THEN        
        INSERT INTO core.countries(country_code, country_name)
        SELECT 'dummy-co01', 'Test Mock Country';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_item_groups.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_item_groups();

CREATE FUNCTION unit_tests.create_dummy_item_groups()
RETURNS void
AS
$$
    DECLARE _dummy_account_id bigint;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.item_groups WHERE item_group_code='dummy-ig01') THEN

        _dummy_account_id := core.get_account_id_by_account_number('dummy-acc01');
        
        INSERT INTO core.item_groups(item_group_code, item_group_name, sales_tax_id, sales_account_id, sales_discount_account_id, sales_return_account_id, purchase_account_id, purchase_discount_account_id, inventory_account_id, cost_of_goods_sold_account_id)
        SELECT 'dummy-ig01', 'Test Mock Item Group', core.get_sales_tax_id_by_sales_tax_code('dummy-stx01'), _dummy_account_id, _dummy_account_id, _dummy_account_id, _dummy_account_id, _dummy_account_id, _dummy_account_id, _dummy_account_id;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_item_types.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_item_types();

CREATE FUNCTION unit_tests.create_dummy_item_types()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.item_types WHERE item_type_code='dummy-it01') THEN
        INSERT INTO core.item_types(item_type_code, item_type_name)
        SELECT 'dummy-it01', 'Test Mock Item Type';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_items.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_items();

CREATE FUNCTION unit_tests.create_dummy_items()
RETURNS void
AS
$$
    DECLARE _dummy_unit_id integer;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.items WHERE item_code='dummy-it01') THEN

        _dummy_unit_id := core.get_unit_id_by_unit_code('dummy-uni01');
    
        INSERT INTO core.items
        (
            item_code, 
            item_name, 
            item_group_id,
            item_type_id,
            brand_id,
            preferred_supplier_id,
            lead_time_in_days,
            unit_id,
            hot_item,
            cost_price,
            selling_price,
            sales_tax_id,
            reorder_unit_id,
            reorder_level,
            reorder_quantity,
            maintain_stock
        )
        SELECT 
            'dummy-it01'                                            AS item_code, 
            'Test Mock Item'                                        AS item_name,
            core.get_item_group_id_by_item_group_code('dummy-ig01') AS item_group_id,
            core.get_item_type_id_by_item_type_code('dummy-it01')   AS item_type_id,
            core.get_brand_id_by_brand_code('dummy-br01')           AS brand_id, 
            core.get_party_id_by_party_code('dummy-pr01')           AS preferred_supplier_id,
            10                                                      AS lead_time,
            _dummy_unit_id                                          AS unit_id,
            false                                                   AS hot_item,
            3000                                                    AS cost_price,
            4000                                                    AS selling_price,
            core.get_sales_tax_id_by_sales_tax_code('dummy-stx01')  AS sales_tax_id,
            _dummy_unit_id                                          AS reorder_unit_id,
            10                                                      AS reorder_level,
            100                                                     AS reorder_quantity,
            false                                                   AS maintain_stock
        UNION ALL
        SELECT 
            'dummy-it02'                                            AS item_code, 
            'Test Mock Item2'                                       AS item_name,
            core.get_item_group_id_by_item_group_code('dummy-ig01') AS item_group_id,
            core.get_item_type_id_by_item_type_code('dummy-it01')   AS item_type_id,
            core.get_brand_id_by_brand_code('dummy-br01')           AS brand_id, 
            core.get_party_id_by_party_code('dummy-pr01')           AS preferred_supplier_id,
            17                                                      AS lead_time,
            _dummy_unit_id                                          AS unit_id,
            false                                                   AS hot_item,
            1400                                                    AS cost_price,
            1800                                                    AS selling_price,
            core.get_sales_tax_id_by_sales_tax_code('dummy-stx01')  AS sales_tax_id,
            _dummy_unit_id                                          AS reorder_unit_id,
            10                                                      AS reorder_level,
            50                                                      AS reorder_quantity,
            false                                                   AS maintain_stock;        
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_late_fees.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_late_fees();

CREATE FUNCTION unit_tests.create_dummy_late_fees()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.late_fee WHERE late_fee_code='dummy-lf01') THEN        
        INSERT INTO core.late_fee(late_fee_code, late_fee_name, is_flat_amount, rate)
        SELECT 'dummy-lf01', 'Test Mock Late Fee', false, 22;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_offices.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_offices();

CREATE FUNCTION unit_tests.create_dummy_offices()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.offices WHERE office_code='dummy-off01') THEN
        INSERT INTO office.offices(office_code, office_name, nick_name, registration_date, currency_code, allow_transaction_posting)
        SELECT 'dummy-off01', 'PLPGUnit Test Office', 'PTO-DUMMY-0001', NOW()::date, 'NPR', true;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_parties.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_parties();

CREATE FUNCTION unit_tests.create_dummy_parties()
RETURNS void
AS
$$
    DECLARE _dummy_account_id   bigint;
    DECLARE _party_id           bigint;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.parties WHERE party_code='dummy-pr01') THEN        
        _dummy_account_id := core.get_account_id_by_account_number('dummy-acc01');

        INSERT INTO core.parties(party_type_id, first_name, last_name, country_id, state_id, currency_code, account_id)
        SELECT            
            core.get_party_type_id_by_party_type_code('dummy-pt01'), 
            'Test Mock party', 
            'Test', 
            core.get_country_id_by_country_code('dummy-co01'),
            core.get_state_id_by_state_code('dummy-st01'),
            'NPR',
            _dummy_account_id
       RETURNING party_id INTO _party_id;

    UPDATE core.parties
    SET party_code = 'dummy-pr01'
    WHERE party_id = _party_id;
       
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_party_types.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_party_types();

CREATE FUNCTION unit_tests.create_dummy_party_types()
RETURNS void
AS
$$
    DECLARE _dummy_account_id bigint;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.party_types WHERE party_type_code='dummy-pt01') THEN        
        _dummy_account_id := core.get_account_id_by_account_number('dummy-acc01');

        INSERT INTO core.party_types(party_type_code, party_type_name, is_supplier, account_id)
        SELECT 'dummy-pt01', 'Test Mock Party Type', false, _dummy_account_id;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_payment_terms.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_payment_terms();

CREATE FUNCTION unit_tests.create_dummy_payment_terms()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.payment_terms WHERE payment_term_code='dummy-pt01') THEN        
        INSERT INTO core.payment_terms(payment_term_code, payment_term_name, due_on_date, due_days, grace_peiod, late_fee_id, late_fee_posting_frequency_id)
        SELECT 'dummy-pt01', 'Test Mock Payment Term', false, 10, 5, core.get_late_fee_id_by_late_fee_code('dummy-lf01'), core.get_frequency_id_by_frequency_code('EOM');
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_sales_taxes.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_sales_taxes();

CREATE FUNCTION unit_tests.create_dummy_sales_taxes()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.tax_master WHERE tax_master_code='dummy-tm01') THEN
        INSERT INTO core.tax_master(tax_master_code, tax_master_name)
        SELECT 'dummy-tm01', 'Dummy Tax Master';
    END IF;
    
    IF NOT EXISTS(SELECT 1 FROM core.sales_taxes WHERE sales_tax_code='dummy-stx01') THEN
        INSERT INTO core.sales_taxes(tax_master_id, office_id, sales_tax_code, sales_tax_name, is_exemption, tax_base_amount_type_code, rate)
        SELECT 
            core.get_tax_master_id_by_tax_master_code('dummy-tm01'), 
            office.get_office_id_by_office_code('dummy-off01'),
            'dummy-stx01',
            'Dummy Sales Tax',
            false,
            'P',
            12.4;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM unit_tests.create_dummy_sales_tax()

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_sales_teams.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_sales_teams();

CREATE FUNCTION unit_tests.create_dummy_sales_teams()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.sales_teams WHERE sales_team_code='dummy-st01') THEN        
        INSERT INTO core.sales_teams(sales_team_code, sales_team_name)
        SELECT 'dummy-st01', 'Test Mock Sales Team';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_salespersons.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_salespersons();

CREATE FUNCTION unit_tests.create_dummy_salespersons()
RETURNS void
AS
$$
    DECLARE _dummy_account_id bigint;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.salespersons WHERE salesperson_code='dummy-sp01') THEN        
        _dummy_account_id := core.get_account_id_by_account_number('dummy-acc01');

        INSERT INTO core.salespersons(salesperson_code, salesperson_name, sales_team_id, address, contact_number, account_id)
        SELECT 'dummy-sp01', 'Test Mock Salesperson', core.get_sales_team_id_by_sales_team_code('dummy-st01'), '', '', _dummy_account_id;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_shippers.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_shippers();

CREATE FUNCTION unit_tests.create_dummy_shippers()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.shippers WHERE shipper_code='dummy-sh01') THEN        
        INSERT INTO core.shippers(shipper_code, shipper_name, company_name, account_id)
        SELECT 'dummy-sh01', 'Test Mock Shipper', 'Test Mock Shipper', core.get_account_id_by_account_number('dummy-acc01');
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_states.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_states();

CREATE FUNCTION unit_tests.create_dummy_states()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.states WHERE state_code='dummy-st01') THEN        
        INSERT INTO core.states(state_code, state_name, country_id)
        SELECT 'dummy-st01', 'Test Mock State', core.get_country_id_by_country_code('dummy-co01');
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_store_types.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_store_types();

CREATE FUNCTION unit_tests.create_dummy_store_types()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.store_types WHERE store_type_code='dummy-st01') THEN
        INSERT INTO office.store_types(store_type_code, store_type_name)
        SELECT 'dummy-st01', 'Test Mock Store Type';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_stores.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_stores();

CREATE FUNCTION unit_tests.create_dummy_stores()
RETURNS void
AS
$$
    DECLARE _cash_account_id bigint;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.stores WHERE store_code='dummy-st01') THEN
        INSERT INTO office.stores(store_code, store_name, office_id, store_type_id, allow_sales, sales_tax_id, default_cash_account_id, default_cash_repository_id)
        SELECT 
            'dummy-st01', 
            'Test Mock Store',
            office.get_office_id_by_office_code('dummy-off01'),
            office.get_store_type_id_by_store_type_code('dummy-st01'),
            true,
            core.get_sales_tax_id_by_sales_tax_code('dummy-stx01'),
            core.get_account_id_by_account_number('dummy-acc06'),
            office.get_cash_repository_id_by_cash_repository_code('dummy-cr01');
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_units.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_units();

CREATE FUNCTION unit_tests.create_dummy_units()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.units WHERE unit_code='dummy-uni01') THEN        
        INSERT INTO core.units(unit_code, unit_name)
        SELECT 'dummy-uni01', 'Test Mock Unit';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/12.plpgunit-tests-mock/unit_tests.create_dummy_users.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_users();

CREATE FUNCTION unit_tests.create_dummy_users()
RETURNS void 
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.users WHERE user_name='plpgunit-test-user-000001') THEN
        INSERT INTO office.users(role_id, user_name, full_name, password, office_id)
        SELECT office.get_role_id_by_role_code('USER'), 'plpgunit-test-user-000001', 'PLPGUnit Test User', 'thoushaltnotlogin', office.get_office_id_by_office_code('dummy-off01');
    END IF;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/13.triggers/transactions/transactions.check_cash_balance_trigger.sql --<--<--
DROP FUNCTION IF EXISTS transactions.check_cash_balance_trigger() CASCADE;
CREATE FUNCTION transactions.check_cash_balance_trigger()
RETURNS TRIGGER
AS
$$
    DECLARE cash_balance DECIMAL(24, 4);
BEGIN
    IF(NEW.cash_repository_id IS NOT NULL) THEN
        IF(TG_OP='UPDATE') THEN
            IF (OLD.amount_in_currency != NEW.amount_in_currency) OR (OLD.amount_in_local_currency != NEW.amount_in_local_currency) THEN
                RAISE EXCEPTION 'Acess is denied. You cannot update the "transaction_details" table.'
                USING ERRCODE='P9201';
            END IF;
        END IF;

        IF(TG_OP='INSERT') THEN
            IF(NEW.tran_type = 'Cr' AND NEW.cash_repository_id IS NOT NULL) THEN
                cash_balance := transactions.get_cash_repository_balance(NEW.cash_repository_id, NEW.currency_code);

                IF(cash_balance < NEW.amount_in_currency) THEN
                    RAISE EXCEPTION 'Posting this transaction would produce a negative cash balance.'
                    USING ERRCODE='P5002';
                END IF;
            END IF;
        END IF;
    END IF;

    RETURN NEW;
END
$$
LANGUAGE 'plpgsql';


CREATE TRIGGER check_cash_balance_trigger
BEFORE INSERT OR UPDATE
ON transactions.transaction_details
FOR EACH ROW 
EXECUTE PROCEDURE transactions.check_cash_balance_trigger();




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/14.constraints/core.sql --<--<--
ALTER TABLE core.compound_item_details
DROP CONSTRAINT IF EXISTS compound_item_details_unit_chk;

ALTER TABLE core.compound_item_details
ADD CONSTRAINT compound_item_details_unit_chk
CHECK(core.is_valid_unit(item_id, unit_id));

ALTER TABLE core.item_cost_prices
DROP CONSTRAINT IF EXISTS item_cost_prices_unit_chk;

ALTER TABLE core.item_cost_prices
ADD CONSTRAINT item_cost_prices_unit_chk
CHECK(core.is_valid_unit(item_id, unit_id));


ALTER TABLE core.item_selling_prices
DROP CONSTRAINT IF EXISTS item_selling_prices_unit_chk;

ALTER TABLE core.item_selling_prices
ADD CONSTRAINT item_selling_prices_unit_chk
CHECK(core.is_valid_unit(item_id, unit_id));

ALTER TABLE core.items
DROP CONSTRAINT IF EXISTS items_reorder_quantity_chk;

ALTER TABLE core.items
ADD CONSTRAINT items_reorder_quantity_chk
CHECK
(
core.convert_unit(reorder_unit_id, unit_id) * reorder_quantity >= reorder_level
);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/14.constraints/transactions.sql --<--<--

ALTER TABLE transactions.stock_details
DROP CONSTRAINT IF EXISTS stock_details_unit_chk;

ALTER TABLE transactions.stock_details
ADD CONSTRAINT stock_details_unit_chk
CHECK(core.is_valid_unit(item_id, unit_id));


ALTER TABLE transactions.non_gl_stock_details
DROP CONSTRAINT IF EXISTS non_gl_stock_details_unit_chk;

ALTER TABLE transactions.non_gl_stock_details
ADD CONSTRAINT non_gl_stock_details_unit_chk
CHECK(core.is_valid_unit(item_id, unit_id));

ALTER TABLE transactions.transaction_master
DROP CONSTRAINT IF EXISTS transaction_master_sys_user_id_chk ;

ALTER TABLE transactions.transaction_master
ADD CONSTRAINT transaction_master_sys_user_id_chk 
CHECK(sys_user_id IS NULL OR office.is_sys_user(sys_user_id)=true);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/80.2nd-quadrant-audit-trigger.sql --<--<--
-- An audit history is important on most tables. Provide an audit trigger that logs to
-- a dedicated audit table for the major relations.
--
-- This file should be generic and not depend on application roles or structures,
-- as it's being listed here:
--
--    https://wiki.postgresql.org/wiki/Audit_trigger_91plus    
--
-- This trigger was originally based on
--   http://wiki.postgresql.org/wiki/Audit_trigger
-- but has been completely rewritten.
--
-- Should really be converted into a relocatable EXTENSION, with control and upgrade files.

CREATE EXTENSION IF NOT EXISTS hstore;

-- CREATE SCHEMA audit; --Removed
-- REVOKE ALL ON SCHEMA audit FROM public; --Removed

COMMENT ON SCHEMA audit IS 'Out-of-table audit/history logging tables and trigger functions';

--
-- Audited data. Lots of information is available, it's just a matter of how much
-- you really want to record. See:
--
--   http://www.postgresql.org/docs/9.1/static/functions-info.html
--
-- Remember, every column you add takes up more audit table space and slows audit
-- inserts.
--
-- Every index you add has a big impact too, so avoid adding indexes to the
-- audit table unless you REALLY need them. The hstore GIST indexes are
-- particularly expensive.
--
-- It is sometimes worth copying the audit table, or a coarse subset of it that
-- you're interested in, into a temporary table where you CREATE any useful
-- indexes and do your analysis.
--
DROP TABLE IF EXISTS audit.logged_actions; --Added

CREATE TABLE audit.logged_actions (
    event_id bigserial primary key,
    schema_name text not null,
    table_name text not null,
    relid oid not null,
    session_user_name text,
    application_user_name text, --Added
    action_tstamp_tx TIMESTAMP WITH TIME ZONE NOT NULL,
    action_tstamp_stm TIMESTAMP WITH TIME ZONE NOT NULL,
    action_tstamp_clk TIMESTAMP WITH TIME ZONE NOT NULL,
    transaction_id bigint,
    application_name text,
    client_addr inet,
    client_port integer,
    client_query text,
    action TEXT NOT NULL CHECK (action IN ('I','D','U', 'T')),
    row_data hstore,
    changed_fields hstore,
    statement_only boolean not null
);

REVOKE ALL ON audit.logged_actions FROM public;

COMMENT ON TABLE audit.logged_actions IS 'History of auditable actions on audited tables, from audit.if_modified_func()';
COMMENT ON COLUMN audit.logged_actions.event_id IS 'Unique identifier for each auditable event';
COMMENT ON COLUMN audit.logged_actions.schema_name IS 'Database schema audited table for this event is in';
COMMENT ON COLUMN audit.logged_actions.table_name IS 'Non-schema-qualified table name of table event occured in';
COMMENT ON COLUMN audit.logged_actions.relid IS 'Table OID. Changes with drop/create. Get with ''tablename''::regclass';
COMMENT ON COLUMN audit.logged_actions.session_user_name IS 'Login / session user whose statement caused the audited event';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_tx IS 'Transaction start timestamp for tx in which audited event occurred';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_stm IS 'Statement start timestamp for tx in which audited event occurred';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_clk IS 'Wall clock time at which audited event''s trigger call occurred';
COMMENT ON COLUMN audit.logged_actions.transaction_id IS 'Identifier of transaction that made the change. May wrap, but unique paired with action_tstamp_tx.';
COMMENT ON COLUMN audit.logged_actions.client_addr IS 'IP address of client that issued query. Null for unix domain socket.';
COMMENT ON COLUMN audit.logged_actions.client_port IS 'Remote peer IP port address of client that issued query. Undefined for unix socket.';
COMMENT ON COLUMN audit.logged_actions.client_query IS 'Top-level query that caused this auditable event. May be more than one statement.';
COMMENT ON COLUMN audit.logged_actions.application_name IS 'Application name set when this audit event occurred. Can be changed in-session by client.';
COMMENT ON COLUMN audit.logged_actions.action IS 'Action type; I = insert, D = delete, U = update, T = truncate';
COMMENT ON COLUMN audit.logged_actions.row_data IS 'Record value. Null for statement-level trigger. For INSERT this is the new tuple. For DELETE and UPDATE it is the old tuple.';
COMMENT ON COLUMN audit.logged_actions.changed_fields IS 'New values of fields changed by UPDATE. Null except for row-level UPDATE events.';
COMMENT ON COLUMN audit.logged_actions.statement_only IS '''t'' if audit event is from an FOR EACH STATEMENT trigger, ''f'' for FOR EACH ROW';

CREATE INDEX logged_actions_relid_idx ON audit.logged_actions(relid);
CREATE INDEX logged_actions_action_tstamp_tx_stm_idx ON audit.logged_actions(action_tstamp_stm);
CREATE INDEX logged_actions_action_idx ON audit.logged_actions(action);


CREATE OR REPLACE FUNCTION audit.if_modified_func() RETURNS TRIGGER AS $body$
DECLARE
    application_user_name text = 'N/A'; --Added
    audit_row audit.logged_actions;
    include_values boolean;
    log_diffs boolean;
    h_old hstore;
    h_new hstore;
    excluded_cols text[] = ARRAY[]::text[];
BEGIN
    IF TG_WHEN <> 'AFTER' THEN
        RAISE EXCEPTION 'audit.if_modified_func() may only run as an AFTER trigger';
    END IF;
    

        IF (TG_OP != 'DELETE') THEN --Added
                IF(hstore(NEW) ? 'audit_user_id' = true) THEN --Added
                        application_user_name:= office.get_user_name_by_user_id((hstore(NEW.*) -> 'audit_user_id')::int); --Added
                END IF; --Added
        END IF; --Added

    audit_row = ROW(
        nextval('audit.logged_actions_event_id_seq'), -- event_id
        TG_TABLE_SCHEMA::text,                        -- schema_name
        TG_TABLE_NAME::text,                          -- table_name
        TG_RELID,                                     -- relation OID for much quicker searches
        session_user::text,                           -- session_user_name
        application_user_name::text,                  -- application_user_name  --Added
        current_timestamp,                            -- action_tstamp_tx
        statement_timestamp(),                        -- action_tstamp_stm
        clock_timestamp(),                            -- action_tstamp_clk
        txid_current(),                               -- transaction ID
        current_setting('application_name'),          -- client application
        inet_client_addr(),                           -- client_addr
        inet_client_port(),                           -- client_port
        current_query(),                              -- top-level query or queries (if multistatement) from client
        substring(TG_OP,1,1),                         -- action
        NULL, NULL,                                   -- row_data, changed_fields
        'f'                                           -- statement_only
        );

    IF NOT TG_ARGV[0]::boolean IS DISTINCT FROM 'f'::boolean THEN
        audit_row.client_query = NULL;
    END IF;

    IF TG_ARGV[1] IS NOT NULL THEN
        excluded_cols = TG_ARGV[1]::text[];
    END IF;
    
    IF (TG_OP = 'UPDATE' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(OLD.*);
        audit_row.changed_fields =  (hstore(NEW.*) - audit_row.row_data) - excluded_cols;
        IF audit_row.changed_fields = hstore('') THEN
            -- All changed fields are ignored. Skip this update.
            RETURN NULL;
        END IF;
    ELSIF (TG_OP = 'DELETE' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(OLD.*) - excluded_cols;
    ELSIF (TG_OP = 'INSERT' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(NEW.*) - excluded_cols;
    ELSIF (TG_LEVEL = 'STATEMENT' AND TG_OP IN ('INSERT','UPDATE','DELETE','TRUNCATE')) THEN
        audit_row.statement_only = 't';
    ELSE
        RAISE EXCEPTION '[audit.if_modified_func] - Trigger func added as trigger for unhandled case: %, %',TG_OP, TG_LEVEL;
        RETURN NULL;
    END IF;
    INSERT INTO audit.logged_actions VALUES (audit_row.*);
    RETURN NULL;
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public;



COMMENT ON FUNCTION audit.if_modified_func() IS $body$
Track changes to a table at the statement and/or row level.

Optional parameters to trigger in CREATE TRIGGER call:

param 0: boolean, whether to log the query text. Default 't'.

param 1: text[], columns to ignore in updates. Default [].

         Updates to ignored cols are omitted from changed_fields.

         Updates with only ignored cols changed are not inserted
         into the audit log.

         Almost all the processing work is still done for updates
         that ignored. If you need to save the load, you need to use
         WHEN clause on the trigger instead.

         No warning or error is issued if ignored_cols contains columns
         that do not exist in the target table. This lets you specify
         a standard set of ignored columns.

There is no parameter to disable logging of values. Add this trigger as
a 'FOR EACH STATEMENT' rather than 'FOR EACH ROW' trigger if you do not
want to log row values.

Note that the user name logged is the login role for the session. The audit trigger
cannot obtain the active role because it is reset by the SECURITY DEFINER invocation
of the audit trigger its self.
$body$;



CREATE OR REPLACE FUNCTION audit.audit_table(target_table regclass, audit_rows boolean, audit_query_text boolean, ignored_cols text[]) RETURNS void AS $body$
DECLARE
  stm_targets text = 'INSERT OR UPDATE OR DELETE OR TRUNCATE';
  _q_txt text;
  _ignored_cols_snip text = '';
BEGIN
    EXECUTE 'DROP TRIGGER IF EXISTS audit_trigger_row ON ' || target_table;
    EXECUTE 'DROP TRIGGER IF EXISTS audit_trigger_stm ON ' || target_table;

    IF audit_rows THEN
        IF array_length(ignored_cols,1) > 0 THEN
            _ignored_cols_snip = ', ' || quote_literal(ignored_cols);
        END IF;
        _q_txt = 'CREATE TRIGGER audit_trigger_row AFTER INSERT OR UPDATE OR DELETE ON ' || 
                 target_table || 
                 ' FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func(' ||
                 quote_literal(audit_query_text) || _ignored_cols_snip || ');';
        RAISE NOTICE '%',_q_txt;
        EXECUTE _q_txt;
        stm_targets = 'TRUNCATE';
    ELSE
    END IF;

    _q_txt = 'CREATE TRIGGER audit_trigger_stm AFTER ' || stm_targets || ' ON ' ||
             target_table ||
             ' FOR EACH STATEMENT EXECUTE PROCEDURE audit.if_modified_func('||
             quote_literal(audit_query_text) || ');';
    RAISE NOTICE '%',_q_txt;
    EXECUTE _q_txt;

END;
$body$
language 'plpgsql';

COMMENT ON FUNCTION audit.audit_table(regclass, boolean, boolean, text[]) IS $body$
Add auditing support to a table.

Arguments:
   target_table:     Table name, schema qualified if not on search_path
   audit_rows:       Record each row change, or only audit at a statement level
   audit_query_text: Record the text of the client query that triggered the audit event?
   ignored_cols:     Columns to exclude from update diffs, ignore updates that change only ignored cols.
$body$;

-- Pg doesn't allow variadic calls with 0 params, so provide a wrapper
CREATE OR REPLACE FUNCTION audit.audit_table(target_table regclass, audit_rows boolean, audit_query_text boolean) RETURNS void AS $body$
SELECT audit.audit_table($1, $2, $3, ARRAY[]::text[]);
$body$ LANGUAGE SQL;

-- And provide a convenience call wrapper for the simplest case
-- of row-level logging with no excluded cols and query logging enabled.
--
CREATE OR REPLACE FUNCTION audit.audit_table(target_table regclass) RETURNS void AS $$
SELECT audit.audit_table($1, BOOLEAN 't', BOOLEAN 't');
$$ LANGUAGE 'sql';

COMMENT ON FUNCTION audit.audit_table(regclass) IS $body$
Add auditing support to the given table. Row-level changes will be logged with full client query text. No cols are ignored.
$body$;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/81.audit-all-tables.sql --<--<--
-- DO
-- $$
        -- DECLARE sql text;
-- BEGIN
        -- SELECT array_to_string(
        -- ARRAY(
        -- SELECT 
        -- 'SELECT audit.audit_table(''' || table_schema || '.' || table_name || '''::regclass, true, true, null);'
        -- FROM information_schema.tables
        -- WHERE table_schema NOT IN('pg_catalog', 'information_schema', 'unit_tests')
        -- AND table_name NOT IN('logged_actions')
        -- AND table_type='BASE TABLE'
        -- ORDER BY table_schema), '')
        -- INTO sql;

        -- EXECUTE sql;
        
-- END
-- $$
-- LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/99.sample-data/05.config.sql --<--<--
DO
$$
BEGIN
    IF(core.get_locale() = 'en-US') THEN
        INSERT INTO office.configuration(config_id, office_id, value, configuration_details)
        SELECT 1, office_id, 'Perpetual', ''
        FROM office.offices
        WHERE parent_office_id IS NOT NULL;


        INSERT INTO office.configuration(config_id, office_id, value, configuration_details)
        SELECT 2, office_id, 'LIFO', ''
        FROM office.offices
        WHERE parent_office_id IS NOT NULL;
    END IF;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/db-documentation.sql --<--<--
COMMENT ON TABLE core.account_masters IS 
'This table contains categories in which General Ledger (G.L) Account belongs to & collectively they form the Chart of Accounts.
The category in this table cannot be edited by users. Thus, a user-interface for this table is not available.
This table facilitates creating useful reports such as Profit & Loss A/c. and Balance Sheet.';
COMMENT ON COLUMN core.account_masters.account_master_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.account_masters.account_master_code IS 'The unique alphanumeric code that generally abbreviates the value of account master name.';
COMMENT ON COLUMN core.account_masters.account_master_name IS 'The name of account master, which is also a unique field.';
COMMENT ON COLUMN core.account_masters.parent_account_master_id IS 'The name of account master, which is also a unique field.';
COMMENT ON COLUMN core.account_masters.normally_debit IS 'Select "Yes" if the account has nature of Debit balance or vice-versa.';



COMMENT ON TABLE core.accounts IS 'This table stores information on General Ledger (G.L) Account.';
COMMENT ON COLUMN core.accounts.account_id IS 'The primary key of this table, which is also a bigserial field.';
COMMENT ON COLUMN core.accounts.account_master_id IS 'The foreign key to table core.account_masters.';
COMMENT ON COLUMN core.accounts.account_number IS 'The unique numeric value assigned to the account name which is similar to account id.';
COMMENT ON COLUMN core.accounts.external_code IS '';
COMMENT ON COLUMN core.accounts.confidential IS 'Limits the access to the particular account among various uesers.';
COMMENT ON COLUMN core.accounts.currency_code IS 'Foreign key to the table core.currencies.';
COMMENT ON COLUMN core.accounts.account_name IS 'The name of account master, which is also a unique field.';
COMMENT ON COLUMN core.accounts.description IS 'Description about the account.';
COMMENT ON COLUMN core.accounts.sys_type IS '';
COMMENT ON COLUMN core.accounts.parent_account_id IS 'Foreign key to the table core.accounts.';
COMMENT ON COLUMN core.accounts.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.accounts.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.ageing_slabs IS '';
COMMENT ON COLUMN core.ageing_slabs.ageing_slab_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.ageing_slabs.ageing_slab_name IS '';
COMMENT ON COLUMN core.ageing_slabs.from_days IS '';
COMMENT ON COLUMN core.ageing_slabs.to_days IS '';


COMMENT ON TABLE core.attachment_lookup IS '';
COMMENT ON COLUMN core.attachment_lookup.attachment_lookup_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.attachment_lookup.book IS '';
COMMENT ON COLUMN core.attachment_lookup.resource IS '';
COMMENT ON COLUMN core.attachment_lookup.resource_key IS '';


COMMENT ON TABLE core.attachments IS '';
COMMENT ON COLUMN core.attachments.attachment_id IS 'The primary key of this table, which is also a bigserial field.';
COMMENT ON COLUMN core.attachments.user_id IS 'Foreign key to the table office.users.';
COMMENT ON COLUMN core.attachments.resource IS '';
COMMENT ON COLUMN core.attachments.resource_key IS '';
COMMENT ON COLUMN core.attachments.resource_id IS '';
COMMENT ON COLUMN core.attachments.original_file_name IS 'The name given to the attached file, which is also a unique field ';
COMMENT ON COLUMN core.attachments.file_extension IS 'The extension of the attached file.';
COMMENT ON COLUMN core.attachments.file_path IS 'The location of the file.';
COMMENT ON COLUMN core.attachments.comment IS 'Comment on the attachment.';
COMMENT ON COLUMN core.attachments.added_on IS 'Time & date when the attachment was added.';


COMMENT ON TABLE policy.auto_verification_policy IS '';
COMMENT ON COLUMN policy.auto_verification_policy.user_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN policy.auto_verification_policy.verify_sales_transactions IS '';
COMMENT ON COLUMN policy.auto_verification_policy.sales_verification_limit IS '';
COMMENT ON COLUMN policy.auto_verification_policy.verify_purchase_transactions IS '';
COMMENT ON COLUMN policy.auto_verification_policy.purchase_verification_limit IS '';
COMMENT ON COLUMN policy.auto_verification_policy.verify_gl_transactions IS '';
COMMENT ON COLUMN policy.auto_verification_policy.gl_verification_limit IS '';
COMMENT ON COLUMN policy.auto_verification_policy.effective_from IS '';
COMMENT ON COLUMN policy.auto_verification_policy.ends_on IS '';
COMMENT ON COLUMN policy.auto_verification_policy.is_active IS '';
COMMENT ON COLUMN policy.auto_verification_policy.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN policy.auto_verification_policy.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';

 
COMMENT ON TABLE core.bank_accounts IS 'This table stores information on various Bank A/cs and other associated information.';
COMMENT ON COLUMN core.bank_accounts.account_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.bank_accounts.maintained_by_user_id IS 'Foreign key to the table office.users.';
COMMENT ON COLUMN core.bank_accounts.bank_name IS 'The name of the bank.';
COMMENT ON COLUMN core.bank_accounts.bank_branch IS 'The name of the branch.';
COMMENT ON COLUMN core.bank_accounts.bank_contact_number IS 'The contact number of the bank.';
COMMENT ON COLUMN core.bank_accounts.bank_address IS 'The address of the bank.';
COMMENT ON COLUMN core.bank_accounts.bank_account_number IS 'The bank account number.';
COMMENT ON COLUMN core.bank_accounts.bank_account_type IS 'The type of bank account.';
COMMENT ON COLUMN core.bank_accounts.relationship_officer_name IS 'The name of  the relationship officer.';
COMMENT ON COLUMN core.bank_accounts.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.bank_accounts.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.bonus_slab_details IS 'This table stores information on various rate of bonus.';
COMMENT ON COLUMN core.bonus_slab_details.bonus_slab_detail_id IS 'The primary key of the table, which is also a serial field.';
COMMENT ON COLUMN core.bonus_slab_details.bonus_slab_id IS 'Foreign key to this table.';
COMMENT ON COLUMN core.bonus_slab_details.amount_from IS 'The minimum amount of sales to qualify for the bonus slab.';
COMMENT ON COLUMN core.bonus_slab_details.amount_to IS 'The maximum amount in the bonus slab.';
COMMENT ON COLUMN core.bonus_slab_details.bonus_rate IS 'The rate of bonus assigned to the bonus slab.';
COMMENT ON COLUMN core.bonus_slab_details.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.bonus_slab_details.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.bonus_slabs IS 'This table stores information on bonus slabs.';
COMMENT ON COLUMN core.bonus_slabs.bonus_slab_id IS 'The primary key of the table, which is also a serial field';
COMMENT ON COLUMN core.bonus_slabs.bonus_slab_code IS 'Code given to the column.';
COMMENT ON COLUMN core.bonus_slabs.bonus_slab_name IS 'Name of the colum, which is a also unique field.';
COMMENT ON COLUMN core.bonus_slabs.effective_from IS 'The effective date of the bonus slab.';
COMMENT ON COLUMN core.bonus_slabs.ends_on IS 'The ending date of the bonus slab.';
COMMENT ON COLUMN core.bonus_slabs.checking_frequency_id IS 'Time-interval for calculation of bonus';
COMMENT ON COLUMN core.bonus_slabs.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.bonus_slabs.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.brands IS 'This table stores information on various brands the entity is dealing.';
COMMENT ON COLUMN core.brands.brand_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.brands.brand_code IS 'The code of the brand, which is also a unique field.';
COMMENT ON COLUMN core.brands.brand_name IS 'The name of the brand.';
COMMENT ON COLUMN core.brands.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.brands.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.cash_flow_headings IS 'This table stores information on various categories in the Cash Flow Statement.';
COMMENT ON COLUMN core.cash_flow_headings.cash_flow_heading_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.cash_flow_headings.cash_flow_heading_code IS 'The code given to the Cash Flow heading.';
COMMENT ON COLUMN core.cash_flow_headings.cash_flow_heading_name IS 'The name of the Cash Flow heading, which is also a unique field,';
COMMENT ON COLUMN core.cash_flow_headings.cash_flow_heading_type IS 'A single character assigned to Cash Flow heading, which define its type.';


COMMENT ON TABLE office.cash_repositories IS 'This table stores information related to cash repositories.';
COMMENT ON COLUMN office.cash_repositories.cash_repository_id IS 'The primary key of this table, which is also a bigserial field.';
COMMENT ON COLUMN office.cash_repositories.office_id IS 'Foreign key to the table office.offices.';
COMMENT ON COLUMN office.cash_repositories.cash_repository_code IS 'The code given to cash repository.';
COMMENT ON COLUMN office.cash_repositories.cash_repository_name IS 'The  name given to cash repository,which is also a unique field.';
COMMENT ON COLUMN office.cash_repositories.parent_cash_repository_id IS 'Foreign key to the table office.cash_repositories.';
COMMENT ON COLUMN office.cash_repositories.description IS 'Description on cash repository.';
COMMENT ON COLUMN office.cash_repositories.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.cash_repositories.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE office.cashiers IS 'This table stores information related to cashier.';
COMMENT ON COLUMN office.cashiers.cashier_id IS 'The primary key of this table, which is also a bigserial field.';
COMMENT ON COLUMN office.cashiers.counter_id IS 'Foreign key to the table office.counters.';
COMMENT ON COLUMN office.cashiers.user_id IS 'Foreign key to the table office.users.';
COMMENT ON COLUMN office.cashiers.assigned_by_user_id IS 'Foreign key to the table office.users.';
COMMENT ON COLUMN office.cashiers.transaction_date IS 'The date on which the transaction occured.';
COMMENT ON COLUMN office.cashiers.closed IS '';


COMMENT ON TABLE core.compound_item_details IS 'This table stores information on compound item and combination of items which composites compound item.';
COMMENT ON COLUMN core.compound_item_details.compound_item_detail_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.compound_item_details.compound_item_id IS 'Foreign key to the table core.comound_items';
COMMENT ON COLUMN core.compound_item_details.item_id IS 'Foreign key to the table core.items';
COMMENT ON COLUMN core.compound_item_details.unit_id IS 'Foreign key to the table core.units.';
COMMENT ON COLUMN core.compound_item_details.quantity IS 'The quantity composition of compound items.';
COMMENT ON COLUMN core.compound_item_details.price IS 'The price detail of compound items.';
COMMENT ON COLUMN core.compound_item_details.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.compound_item_details.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.compound_items IS 'This table stores information on combination on compund items and other associated information to it.';
COMMENT ON COLUMN core.compound_items.compound_item_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.compound_items.compound_item_code IS 'Code given to the compound item.';
COMMENT ON COLUMN core.compound_items.compound_item_name IS 'The name given to compound item, which is a unique field';
COMMENT ON COLUMN core.compound_items.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.compound_items.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.compound_units IS 'This table stores information on the units, value of the items that forms the compound items.';
COMMENT ON COLUMN core.compound_units.compound_unit_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.compound_units.base_unit_id IS 'Foreign key to the table core.units.';
COMMENT ON COLUMN core.compound_units.value IS '';
COMMENT ON COLUMN core.compound_units.compare_unit_id IS '';
COMMENT ON COLUMN core.compound_units.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.compound_units.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';

/* THIS TABLE*/
COMMENT ON TABLE core.config IS '';
COMMENT ON COLUMN core.config.config_id IS 'The primary key of this table.';
COMMENT ON COLUMN core.config.config_name IS 'The name given to the , which is also a unique field.';


COMMENT ON TABLE office.configuration IS '';
COMMENT ON COLUMN office.configuration.configuration_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN office.configuration.config_id IS 'Foreign key to the table core.config.';
COMMENT ON COLUMN office.configuration.office_id IS '';
COMMENT ON COLUMN office.configuration.value IS '';
COMMENT ON COLUMN office.configuration.configuration_details IS 'Details on configuration.';
COMMENT ON COLUMN office.configuration.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.configuration.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE office.cost_centers IS '';
COMMENT ON COLUMN office.cost_centers.cost_center_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN office.cost_centers.cost_center_code IS '';
COMMENT ON COLUMN office.cost_centers.cost_center_name IS '';
COMMENT ON COLUMN office.cost_centers.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.cost_centers.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE office.counters IS '';
COMMENT ON COLUMN office.counters.counter_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN office.counters.store_id IS '';
COMMENT ON COLUMN office.counters.cash_repository_id IS '';
COMMENT ON COLUMN office.counters.counter_code IS '';
COMMENT ON COLUMN office.counters.counter_name IS '';
COMMENT ON COLUMN office.counters.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.counters.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.counties IS 'This table stores information on counties, their code, the state they belong etc.';
COMMENT ON COLUMN core.counties.county_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.counties.county_code IS 'The code given to the county,which is a unique field.';
COMMENT ON COLUMN core.counties.county_name IS 'The name of the county, which is a unique field.';
COMMENT ON COLUMN core.counties.state_id IS 'State code of the county.';
COMMENT ON COLUMN core.counties.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.counties.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.countries IS 'This table stores information on list of countries and their their code.';
COMMENT ON COLUMN core.countries.country_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.countries.country_code IS 'The code of the country.';
COMMENT ON COLUMN core.countries.country_name IS 'The name of the country.';
COMMENT ON COLUMN core.countries.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.countries.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.county_sales_taxes IS 'This table stores information on sales tax of the county.';
COMMENT ON COLUMN core.county_sales_taxes.county_sales_tax_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.county_sales_taxes.county_sales_tax_code IS 'The code given to county sale tax.';
COMMENT ON COLUMN core.county_sales_taxes.county_sales_tax_name IS 'The name given to county sales tax, which is a unique field';
COMMENT ON COLUMN core.county_sales_taxes.county_id IS 'Foreign key to the table core.counties.';
COMMENT ON COLUMN core.county_sales_taxes.entity_id IS 'Foreign key to the table core.entities.';
COMMENT ON COLUMN core.county_sales_taxes.industry_id IS 'Foreign key to the table core.industries.';
COMMENT ON COLUMN core.county_sales_taxes.item_group_id IS 'Foreign key to the table core.item_groups.';
COMMENT ON COLUMN core.county_sales_taxes.rate IS 'Rate of sales tax of the county.';
COMMENT ON COLUMN core.county_sales_taxes.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.county_sales_taxes.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.currencies IS 'This table stores information on currency.';
COMMENT ON COLUMN core.currencies.currency_code IS 'The primary key of this table, code of the currency.';
COMMENT ON COLUMN core.currencies.currency_symbol IS 'Symbol of the currency.';
COMMENT ON COLUMN core.currencies.currency_name IS 'Name of the currency.';
COMMENT ON COLUMN core.currencies.hundredth_name IS 'Name given to hundredth part of the currency.';
COMMENT ON COLUMN core.currencies.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.currencies.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE transactions.customer_receipts IS 'This table stores information on receipts from customers.';
COMMENT ON COLUMN transactions.customer_receipts.receipt_id IS 'The primary key of this table, which is also a bigserial field.';
COMMENT ON COLUMN transactions.customer_receipts.transaction_master_id IS 'Foreign key to the table transactions.transaction_master.';
COMMENT ON COLUMN transactions.customer_receipts.party_id IS 'Foreign key to the table core.parties.';
COMMENT ON COLUMN transactions.customer_receipts.currency_code IS 'Foreign key to the table core.currencies.';
COMMENT ON COLUMN transactions.customer_receipts.amount IS 'Amount received from the customer.';
COMMENT ON COLUMN transactions.customer_receipts.er_debit IS '';
COMMENT ON COLUMN transactions.customer_receipts.er_credit IS '';
COMMENT ON COLUMN transactions.customer_receipts.cash_repository_id IS 'The id of the cash repository used.';
COMMENT ON COLUMN transactions.customer_receipts.posted_date IS 'The date on which the transaction was posted.';
COMMENT ON COLUMN transactions.customer_receipts.bank_account_id IS 'Foreign key to the table core.bank_accounts.';
COMMENT ON COLUMN transactions.customer_receipts.bank_instrument_code IS 'Code of the cheque received.';
COMMENT ON COLUMN transactions.customer_receipts.bank_tran_code IS 'The transaction code while the cheque is received.';


COMMENT ON TABLE transactions.day_operation IS 'This table stores information on the transaction, date & time of its occurance.';
COMMENT ON COLUMN transactions.day_operation.day_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN transactions.day_operation.office_id IS 'Foreign key to the table office.offices.';
COMMENT ON COLUMN transactions.day_operation.value_date IS '';
COMMENT ON COLUMN transactions.day_operation.started_on IS 'Date & Time when the transaction was started.';
COMMENT ON COLUMN transactions.day_operation.started_by IS 'Foreign key to the table office.users.';
COMMENT ON COLUMN transactions.day_operation.completed_on IS 'Date & Time when the tranaction was completed.';
COMMENT ON COLUMN transactions.day_operation.completed_by IS 'Foreign key to the table office.users.';
COMMENT ON COLUMN transactions.day_operation.completed IS 'Select "Yes" if the opration is completed or vice-versa.';


COMMENT ON TABLE transactions.day_operation_routines IS '';
COMMENT ON COLUMN transactions.day_operation_routines.day_operation_routine_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN transactions.day_operation_routines.day_id IS 'Foreign key to the transactions_routines.';
COMMENT ON COLUMN transactions.day_operation_routines.routine_id IS '';
COMMENT ON COLUMN transactions.day_operation_routines.started_on IS '';
COMMENT ON COLUMN transactions.day_operation_routines.completed_on IS '';


COMMENT ON TABLE office.departments IS 'This table stores information on lists of deparments and other associated information.';
COMMENT ON COLUMN office.departments.department_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN office.departments.department_code IS 'Code given to the department, which is a unique field.';
COMMENT ON COLUMN office.departments.department_name IS 'Name given to the department, which is a unique field.';
COMMENT ON COLUMN office.departments.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.departments.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.entities IS 'List of entities.';
COMMENT ON COLUMN core.entities.entity_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.entities.entity_name IS 'The name of the type of entity, which is a unique field.';
COMMENT ON COLUMN core.entities.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.entities.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.exchange_rate_details IS 'Details on exchange rate.';
COMMENT ON COLUMN core.exchange_rate_details.exchange_rate_detail_id IS 'The primary key of this table, which is also a bigserial field.';
COMMENT ON COLUMN core.exchange_rate_details.exchange_rate_id IS 'Foreign key to the table core.exchange_rates.';
COMMENT ON COLUMN core.exchange_rate_details.local_currency_code IS 'Foreign key to the table core.currencies';
COMMENT ON COLUMN core.exchange_rate_details.foreign_currency_code IS 'Foreign key to the table core.currencies';/* there is no cloumn foreign currency code in core.currencies */
COMMENT ON COLUMN core.exchange_rate_details.unit IS '';
COMMENT ON COLUMN core.exchange_rate_details.exchange_rate IS '';


COMMENT ON TABLE core.exchange_rates IS 'Update exchange rates.';
COMMENT ON COLUMN core.exchange_rates.exchange_rate_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.exchange_rates.updated_on IS 'Date & time of the last update of exchange rate.';
COMMENT ON COLUMN core.exchange_rates.office_id IS 'Foreign key to the table office.offices.';
COMMENT ON COLUMN core.exchange_rates.status IS '';


COMMENT ON TABLE audit.failed_logins IS '';
COMMENT ON COLUMN audit.failed_logins.failed_login_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN audit.failed_logins.user_id IS '';
COMMENT ON COLUMN audit.failed_logins.user_name IS '';
COMMENT ON COLUMN audit.failed_logins.office_id IS '';
COMMENT ON COLUMN audit.failed_logins.browser IS '';
COMMENT ON COLUMN audit.failed_logins.ip_address IS '';
COMMENT ON COLUMN audit.failed_logins.failed_date_time IS '';
COMMENT ON COLUMN audit.failed_logins.remote_user IS '';
COMMENT ON COLUMN audit.failed_logins.details IS '';


COMMENT ON TABLE core.fiscal_year IS 'Information on fiscal year.';
COMMENT ON COLUMN core.fiscal_year.fiscal_year_code IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.fiscal_year.fiscal_year_name IS 'Current fiscal year, which is a unique field.';
COMMENT ON COLUMN core.fiscal_year.starts_from IS 'The date fiscal year begins.';
COMMENT ON COLUMN core.fiscal_year.ends_on IS 'The date fiscal year ends.';
COMMENT ON COLUMN core.fiscal_year.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.fiscal_year.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.flag_types IS 'Mark rows of a table with difernt color, so that viewing is easier.';
COMMENT ON COLUMN core.flag_types.flag_type_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.flag_types.flag_type_name IS 'Name of the flag.';
COMMENT ON COLUMN core.flag_types.background_color IS 'Back-ground color of the flagged transaction.';
COMMENT ON COLUMN core.flag_types.foreground_color IS 'The foreground color of the flagged transaction.';
COMMENT ON COLUMN core.flag_types.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.flag_types.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.flags IS 'Flags are used by users to mark transactions. The flags created by a user is not visible to others.';
COMMENT ON COLUMN core.flags.flag_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.flags.user_id IS 'Foreign key to the table office.users.';
COMMENT ON COLUMN core.flags.flag_type_id IS 'Foreign key to the table core.flag_types.';
COMMENT ON COLUMN core.flags.resource IS '';
COMMENT ON COLUMN core.flags.resource_key IS '';
COMMENT ON COLUMN core.flags.resource_id IS '';
COMMENT ON COLUMN core.flags.flagged_on IS '';


COMMENT ON TABLE core.frequencies IS 'Interval of time for posting a transaction.';
COMMENT ON COLUMN core.frequencies.frequency_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.frequencies.frequency_code IS 'The code given to the interval of time.';
COMMENT ON COLUMN core.frequencies.frequency_name IS 'The name given to the interval of time, which is unique field.';


COMMENT ON TABLE core.frequency_setups IS 'Setup time interval of posting a transaction automatically.';
COMMENT ON COLUMN core.frequency_setups.frequency_setup_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.frequency_setups.fiscal_year_code IS 'Foreign key to the table core.fiscal_year.';
COMMENT ON COLUMN core.frequency_setups.frequency_setup_code IS ''; /*Does the time interval has to be only 1 month.*/
COMMENT ON COLUMN core.frequency_setups.value_date IS '';
COMMENT ON COLUMN core.frequency_setups.frequency_id IS 'Foreign key to the table core.frequencies.';
COMMENT ON COLUMN core.frequency_setups.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.frequency_setups.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.income_tax_setup IS 'Tax setup.';
COMMENT ON COLUMN core.income_tax_setup.income_tax_setup_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.income_tax_setup.office_id IS '';
COMMENT ON COLUMN core.income_tax_setup.effective_from IS 'The effective date of the tax rate.';
COMMENT ON COLUMN core.income_tax_setup.tax_rate IS 'The tax rate applicable.';
COMMENT ON COLUMN core.income_tax_setup.tax_authority_id IS '';
COMMENT ON COLUMN core.income_tax_setup.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.income_tax_setup.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.industries IS 'Details on industry the firm belongs.';
COMMENT ON COLUMN core.industries.industry_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.industries.industry_name IS 'The name of the industry, which is a unique field.';
COMMENT ON COLUMN core.industries.parent_industry_id IS '';
COMMENT ON COLUMN core.industries.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.industries.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.item_cost_prices IS 'This table stores information on cost price of a item and other associated informations.';
COMMENT ON COLUMN core.item_cost_prices.item_cost_price_id IS 'The primary key of this table, which is also a bigserial field.';
COMMENT ON COLUMN core.item_cost_prices.item_id IS 'Foreign key to the table core.items.';
COMMENT ON COLUMN core.item_cost_prices.entry_ts IS '';
COMMENT ON COLUMN core.item_cost_prices.unit_id IS 'Foreign key to the table core.units.';
COMMENT ON COLUMN core.item_cost_prices.party_id IS 'Foreign key to the table core.parties';
COMMENT ON COLUMN core.item_cost_prices.lead_time_in_days IS 'Time taken by the good to arrive in stock after it is ordered.';
COMMENT ON COLUMN core.item_cost_prices.includes_tax IS 'Tick if tax is to be included on the price of the item.';
COMMENT ON COLUMN core.item_cost_prices.price IS 'Cost price of the item.';
COMMENT ON COLUMN core.item_cost_prices.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.item_cost_prices.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.item_groups IS '';
COMMENT ON COLUMN core.item_groups.item_group_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.item_groups.item_group_code IS '';
COMMENT ON COLUMN core.item_groups.item_group_name IS '';
COMMENT ON COLUMN core.item_groups.exclude_from_purchase IS '';
COMMENT ON COLUMN core.item_groups.exclude_from_sales IS '';
COMMENT ON COLUMN core.item_groups.sales_tax_id IS '';
COMMENT ON COLUMN core.item_groups.sales_account_id IS '';
COMMENT ON COLUMN core.item_groups.sales_discount_account_id IS '';
COMMENT ON COLUMN core.item_groups.sales_return_account_id IS '';
COMMENT ON COLUMN core.item_groups.purchase_account_id IS '';
COMMENT ON COLUMN core.item_groups.purchase_discount_account_id IS '';
COMMENT ON COLUMN core.item_groups.inventory_account_id IS '';
COMMENT ON COLUMN core.item_groups.cost_of_goods_sold_account_id IS '';
COMMENT ON COLUMN core.item_groups.parent_item_group_id IS '';
COMMENT ON COLUMN core.item_groups.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.item_groups.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.item_selling_prices IS 'This table stores information on selling price of an item and other information.
 PLEASE NOTE :

    THESE ARE THE MOST EFFECTIVE STOCK ITEM PRICES.
    THE PRICE IN THIS CATALOG IS ACTUALLY PICKED UP AT THE TIME OF PURCHASE AND SALES.

    A STOCK ITEM PRICE MAY BE DIFFERENT FOR DIFFERENT UNITS.
    FURTHER, A STOCK ITEM WOULD BE SOLD AT A HIGHER PRICE WHEN SOLD LOOSE THAN WHAT IT WOULD ACTUALLY COST IN A
    COMPOUND UNIT.

    EXAMPLE, ONE CARTOON (20 BOTTLES) OF BEER BOUGHT AS A UNIT
    WOULD COST 25% LESS FROM THE SAME STORE.';
COMMENT ON COLUMN core.item_selling_prices.item_selling_price_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.item_selling_prices.item_id IS 'Foreign key to the table core.items.';
COMMENT ON COLUMN core.item_selling_prices.unit_id IS 'Foreign key to the table core.items.';
COMMENT ON COLUMN core.item_selling_prices.party_type_id IS '';
COMMENT ON COLUMN core.item_selling_prices.price_type_id IS '';
COMMENT ON COLUMN core.item_selling_prices.includes_tax IS '';
COMMENT ON COLUMN core.item_selling_prices.price IS '';
COMMENT ON COLUMN core.item_selling_prices.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.item_selling_prices.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.item_types IS '';
COMMENT ON COLUMN core.item_types.item_type_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.item_types.item_type_code IS '';
COMMENT ON COLUMN core.item_types.item_type_name IS '';
COMMENT ON COLUMN core.item_types.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.item_types.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.items IS 'This table stores information on items and other associated information.';
COMMENT ON COLUMN core.items.item_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.items.item_code IS 'Code given to the item.';
COMMENT ON COLUMN core.items.item_name IS 'Name given to the item.';
COMMENT ON COLUMN core.items.item_group_id IS '';
COMMENT ON COLUMN core.items.item_type_id IS 'Foreign key to the table core.item_groups.';
COMMENT ON COLUMN core.items.brand_id IS 'Foreign key to the table core.brands.';
COMMENT ON COLUMN core.items.preferred_supplier_id IS 'Foreign key to the table core.parties.';
COMMENT ON COLUMN core.items.lead_time_in_days IS 'Days taken for the shipment of the ordered goods.';
COMMENT ON COLUMN core.items.weight_in_grams IS 'Weight of an individual item in the unit of measure gram.';
COMMENT ON COLUMN core.items.width_in_centimeters IS 'Width of an individual item in centimeter.';
COMMENT ON COLUMN core.items.height_in_centimeters IS 'Height of an individual item in centimeter.';
COMMENT ON COLUMN core.items.length_in_centimeters IS 'Length of an individual item in centimeter.';
COMMENT ON COLUMN core.items.machinable IS 'Select "Yes" if the particular item can be handled by machine while shipping.';
COMMENT ON COLUMN core.items.preferred_shipping_mail_type_id IS 'Foreign key to the table core.shipping_mail_types.';
COMMENT ON COLUMN core.items.shipping_package_shape_id IS 'Foreign key to the table core.shipping_package_shapes.';
COMMENT ON COLUMN core.items.unit_id IS 'Foreign key to the table core.items.';
COMMENT ON COLUMN core.items.hot_item IS 'Hot item will be featured on e-commerce website. Select "Yes" if the item is hot item or vice-versa.';
COMMENT ON COLUMN core.items.cost_price IS 'Cost price of the item.';
COMMENT ON COLUMN core.items.cost_price_includes_tax IS 'Select "Yes" if the cost price includes tax or vice-versa.';
COMMENT ON COLUMN core.items.selling_price IS 'Selling price of the item.';
COMMENT ON COLUMN core.items.selling_price_includes_tax IS 'Select "Yes" if the selling price includes tax or vice-versa.';
COMMENT ON COLUMN core.items.sales_tax_id IS 'Foreign key to the table core.sales_taxes.';
COMMENT ON COLUMN core.items.reorder_unit_id IS 'Foreign key to the table core.units.';
COMMENT ON COLUMN core.items.reorder_level IS 'The level of stock on which re-order needs to be placed.';
COMMENT ON COLUMN core.items.reorder_quantity IS 'The quantity of good that needs to be ordered as the stock reaches re-order level.';
COMMENT ON COLUMN core.items.maintain_stock IS 'Select "Yes" if you want to maintain the record of transfer (in & out) of stock items.Selecting "Yes" prohibits the user from maintaining negative stock level.';
COMMENT ON COLUMN core.items.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.items.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.late_fee IS 'This table stores information on late fees and other associated information.';
COMMENT ON COLUMN core.late_fee.late_fee_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.late_fee.late_fee_code IS 'Late fee code.';
COMMENT ON COLUMN core.late_fee.late_fee_name IS 'The name given to the late fee code, which is a unique field.';
COMMENT ON COLUMN core.late_fee.is_flat_amount IS 'Select "Yes" if the late fee amount is fixed or vice-versa.';
COMMENT ON COLUMN core.late_fee.rate IS 'The rate on which late fee will be charged.';
COMMENT ON COLUMN core.late_fee.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.late_fee.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE crm.lead_sources IS '';
COMMENT ON COLUMN crm.lead_sources.lead_source_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN crm.lead_sources.lead_source_code IS '';
COMMENT ON COLUMN crm.lead_sources.lead_source_name IS '';
COMMENT ON COLUMN crm.lead_sources.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN crm.lead_sources.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE crm.lead_statuses IS '';
COMMENT ON COLUMN crm.lead_statuses.lead_status_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN crm.lead_statuses.lead_status_code IS '';
COMMENT ON COLUMN crm.lead_statuses.lead_status_name IS '';
COMMENT ON COLUMN crm.lead_statuses.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN crm.lead_statuses.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE policy.lock_outs IS '';
COMMENT ON COLUMN policy.lock_outs.lock_out_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN policy.lock_outs.user_id IS '';
COMMENT ON COLUMN policy.lock_outs.lock_out_time IS '';
COMMENT ON COLUMN policy.lock_outs.lock_out_till IS '';


COMMENT ON TABLE audit.logged_actions IS '';
COMMENT ON COLUMN audit.logged_actions.event_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN audit.logged_actions.schema_name IS '';
COMMENT ON COLUMN audit.logged_actions.table_name IS '';
COMMENT ON COLUMN audit.logged_actions.relid IS '';
COMMENT ON COLUMN audit.logged_actions.session_user_name IS '';
COMMENT ON COLUMN audit.logged_actions.application_user_name IS '';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_tx IS '';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_stm IS '';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_clk IS '';
COMMENT ON COLUMN audit.logged_actions.transaction_id IS '';
COMMENT ON COLUMN audit.logged_actions.application_name IS '';
COMMENT ON COLUMN audit.logged_actions.client_addr IS '';
COMMENT ON COLUMN audit.logged_actions.client_port IS '';
COMMENT ON COLUMN audit.logged_actions.client_query IS '';
COMMENT ON COLUMN audit.logged_actions.action IS '';
COMMENT ON COLUMN audit.logged_actions.row_data IS '';
COMMENT ON COLUMN audit.logged_actions.changed_fields IS '';
COMMENT ON COLUMN audit.logged_actions.statement_only IS '';


COMMENT ON TABLE audit.logins IS '';
COMMENT ON COLUMN audit.logins.login_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN audit.logins.user_id IS 'Foreign key to the table office.users.';
COMMENT ON COLUMN audit.logins.office_id IS 'Foreign key to the table office.offices.';
COMMENT ON COLUMN audit.logins.browser IS 'The name of the broser used to run the application.';
COMMENT ON COLUMN audit.logins.ip_address IS 'The IP address of the of the computer network used.';
COMMENT ON COLUMN audit.logins.login_date_time IS '';
COMMENT ON COLUMN audit.logins.remote_user IS '';
COMMENT ON COLUMN audit.logins.culture IS '';


COMMENT ON TABLE policy.menu_access IS '';
COMMENT ON COLUMN policy.menu_access.access_id IS 'The primary key of this table.';
COMMENT ON COLUMN policy.menu_access.office_id IS 'Foreign key to the table office.offices.';
COMMENT ON COLUMN policy.menu_access.menu_id IS 'Foreign key to the table core.menus.';
COMMENT ON COLUMN policy.menu_access.user_id IS 'Foreign key to the table office.users';


COMMENT ON TABLE core.menu_locale IS '';
COMMENT ON COLUMN core.menu_locale.menu_locale_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.menu_locale.menu_id IS '';
COMMENT ON COLUMN core.menu_locale.culture IS '';
COMMENT ON COLUMN core.menu_locale.menu_text IS '';


COMMENT ON TABLE policy.menu_policy IS '';
COMMENT ON COLUMN policy.menu_policy.policy_id IS 'The primary key of this table, which is also a bigserial field.';
COMMENT ON COLUMN policy.menu_policy.menu_id IS 'Foreign key to the table core.menus.';
COMMENT ON COLUMN policy.menu_policy.office_id IS 'Foreign key to the table office.offices.';
COMMENT ON COLUMN policy.menu_policy.inherit_in_child_offices IS '';
COMMENT ON COLUMN policy.menu_policy.role_id IS '';
COMMENT ON COLUMN policy.menu_policy.user_id IS '';
COMMENT ON COLUMN policy.menu_policy.scope IS '';


COMMENT ON TABLE core.menus IS 'This table stores information on the easy to use menu of MixERP.';
COMMENT ON COLUMN core.menus.menu_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.menus.menu_text IS 'The name of the menu.';
COMMENT ON COLUMN core.menus.url IS 'The  location of the menu.';
COMMENT ON COLUMN core.menus.menu_code IS 'The code of the menu, which is also a unique field.';
/*COMMENT ON COLUMN core.menus.level IS '';*/
COMMENT ON COLUMN core.menus.parent_menu_id IS 'Foreign key to the table core.menus.';
COMMENT ON COLUMN core.menus.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.menus.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE transactions.non_gl_stock_details IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.non_gl_stock_detail_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN transactions.non_gl_stock_details.non_gl_stock_master_id IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.value_date IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.item_id IS 'Foreign key to the table core.items.';
COMMENT ON COLUMN transactions.non_gl_stock_details.quantity IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.unit_id IS 'Foreign key to the table core.items.';
COMMENT ON COLUMN transactions.non_gl_stock_details.base_quantity IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.base_unit_id IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.price IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.discount IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.shipping_charge IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.sales_tax_id IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.tax IS '';
COMMENT ON COLUMN transactions.non_gl_stock_details.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN transactions.non_gl_stock_details.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE transactions.non_gl_stock_master IS 'This table stores information of quotations which were upgraded to order(s).';
COMMENT ON COLUMN transactions.non_gl_stock_master.non_gl_stock_master_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN transactions.non_gl_stock_master.value_date IS '';
COMMENT ON COLUMN transactions.non_gl_stock_master.book IS '';
COMMENT ON COLUMN transactions.non_gl_stock_master.party_id IS '';
COMMENT ON COLUMN transactions.non_gl_stock_master.price_type_id IS '';
COMMENT ON COLUMN transactions.non_gl_stock_master.transaction_ts IS '';
COMMENT ON COLUMN transactions.non_gl_stock_master.login_id IS 'Foreign key to the table audit.logins.';
COMMENT ON COLUMN transactions.non_gl_stock_master.user_id IS 'Foreign key to the table office.users.';
COMMENT ON COLUMN transactions.non_gl_stock_master.office_id IS 'Foreign key to the table office.offices.';
COMMENT ON COLUMN transactions.non_gl_stock_master.reference_number IS '';
COMMENT ON COLUMN transactions.non_gl_stock_master.statement_reference IS '';
COMMENT ON COLUMN transactions.non_gl_stock_master.non_taxable IS '';
COMMENT ON COLUMN transactions.non_gl_stock_master.salesperson_id IS 'Foreign key to the table core.salespersons.';
COMMENT ON COLUMN transactions.non_gl_stock_master.shipper_id IS 'Foreign key to the table core.shippers.';
COMMENT ON COLUMN transactions.non_gl_stock_master.shipping_address_id IS 'Foreign key to the table core.shipping_addresses.';
COMMENT ON COLUMN transactions.non_gl_stock_master.shipping_charge IS '';
COMMENT ON COLUMN transactions.non_gl_stock_master.store_id IS 'Foreign key to the table office.stores.';
COMMENT ON COLUMN transactions.non_gl_stock_master.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN transactions.non_gl_stock_master.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE transactions.non_gl_stock_master_relations IS '';
COMMENT ON COLUMN transactions.non_gl_stock_master_relations.non_gl_stock_master_relation_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN transactions.non_gl_stock_master_relations.order_non_gl_stock_master_id IS 'Foreign key to the table transactions.non_gl_stock_master.';
COMMENT ON COLUMN transactions.non_gl_stock_master_relations.quotation_non_gl_stock_master_id IS 'Foreign key to the table transactions.non_gl_stock_master.';


COMMENT ON TABLE transactions.non_gl_stock_tax_details IS '';
COMMENT ON COLUMN transactions.non_gl_stock_tax_details.non_gl_stock_detail_id IS 'The primary key of this table.';
COMMENT ON COLUMN transactions.non_gl_stock_tax_details.sales_tax_detail_id IS 'Foreign key to the table core.state_sales_taxes';
COMMENT ON COLUMN transactions.non_gl_stock_tax_details.state_sales_tax_id IS 'Foreign key to the table core.county_sales_taxes.';
COMMENT ON COLUMN transactions.non_gl_stock_tax_details.county_sales_tax_id IS 'Foreign key to the table core.county_sales_taxes';
COMMENT ON COLUMN transactions.non_gl_stock_tax_details.principal IS '';
COMMENT ON COLUMN transactions.non_gl_stock_tax_details.rate IS '';
COMMENT ON COLUMN transactions.non_gl_stock_tax_details.tax IS '';


COMMENT ON TABLE office.offices IS 'This table stores information on various braches of the entity.';
COMMENT ON COLUMN office.offices.office_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN office.offices.office_code IS 'The code given to the office.';
COMMENT ON COLUMN office.offices.office_name IS 'The name given to the office which is also a unique field.';
COMMENT ON COLUMN office.offices.nick_name IS 'Another name of the office.';
COMMENT ON COLUMN office.offices.registration_date IS 'The date of registration of the office.';
COMMENT ON COLUMN office.offices.currency_code IS 'Foreign key to the table core.currencies.';
COMMENT ON COLUMN office.offices.po_box IS 'The Post Box number of the office.';
COMMENT ON COLUMN office.offices.address_line_1 IS 'The address of the office.';
COMMENT ON COLUMN office.offices.address_line_2 IS 'The address of the office.';
COMMENT ON COLUMN office.offices.street IS 'The name of the street where the office is located.';
COMMENT ON COLUMN office.offices.city IS 'The name of the city where the office is located.';
COMMENT ON COLUMN office.offices.state IS 'The name of the state where the office is located.';
COMMENT ON COLUMN office.offices.zip_code IS 'ZIP code of the office.';
COMMENT ON COLUMN office.offices.country IS 'The name of the county where the office is located.';
COMMENT ON COLUMN office.offices.phone IS 'Phone number of the office.';
COMMENT ON COLUMN office.offices.fax IS 'Fax number of the office.';
COMMENT ON COLUMN office.offices.email IS 'E-mail address of the office.';
COMMENT ON COLUMN office.offices.url IS 'Web address of the office.';
COMMENT ON COLUMN office.offices.registration_number IS 'The registration number of the enntity..';
COMMENT ON COLUMN office.offices.pan_number IS 'Permanent Office Number of the entity.';
COMMENT ON COLUMN office.offices.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.offices.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';
COMMENT ON COLUMN office.offices.parent_office_id IS 'Foreign key to the table office.offices.';


COMMENT ON TABLE crm.opportunity_stages IS '';
COMMENT ON COLUMN crm.opportunity_stages.opportunity_stage_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN crm.opportunity_stages.opportunity_stage_code IS '';
COMMENT ON COLUMN crm.opportunity_stages.opportunity_stage_name IS '';
COMMENT ON COLUMN crm.opportunity_stages.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN crm.opportunity_stages.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.parties IS 'This table stores information on parties and information associated with them.';
COMMENT ON COLUMN core.parties.party_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.parties.party_type_id IS 'Foreign key to the table core.party_types.';
COMMENT ON COLUMN core.parties.party_code IS 'Code given to the party.';
COMMENT ON COLUMN core.parties.first_name IS 'First name of the party.';
COMMENT ON COLUMN core.parties.middle_name IS 'Middle name of the party.';
COMMENT ON COLUMN core.parties.last_name IS 'Family name of the party.';
COMMENT ON COLUMN core.parties.party_name IS 'Full-name of the party.';
COMMENT ON COLUMN core.parties.date_of_birth IS 'Date of birth of the party.';
COMMENT ON COLUMN core.parties.entity_id IS 'Foreign key to the table core.entities.';
COMMENT ON COLUMN core.parties.industry_id IS 'Foreign key to the table core.industries.';
COMMENT ON COLUMN core.parties.country_id IS 'Foreign key to the table core.countries.';
COMMENT ON COLUMN core.parties.state_id IS 'Foreign key to the table core.states.';
COMMENT ON COLUMN core.parties.zip_code IS 'Zip code of the party.';
COMMENT ON COLUMN core.parties.address_line_1 IS 'The address of the party.';
COMMENT ON COLUMN core.parties.address_line_2 IS 'The address of the party.';
COMMENT ON COLUMN core.parties.street IS 'The street name where the party is located.';
COMMENT ON COLUMN core.parties.city IS 'The city name where the party is located.';
COMMENT ON COLUMN core.parties.phone IS 'The phone number of the party.';
COMMENT ON COLUMN core.parties.fax IS 'The fax number of the party.';
COMMENT ON COLUMN core.parties.cell IS 'Cell-phone number of the party.';
COMMENT ON COLUMN core.parties.email IS 'E-mail address of the party.';
COMMENT ON COLUMN core.parties.url IS 'Web address of the party. ';
COMMENT ON COLUMN core.parties.pan_number IS 'Permanent Address Number of the party.';
COMMENT ON COLUMN core.parties.sst_number IS '';
COMMENT ON COLUMN core.parties.cst_number IS '';
COMMENT ON COLUMN core.parties.currency_code IS 'Foreign key to the table core.currencies.';
COMMENT ON COLUMN core.parties.allow_credit IS 'Select "Yes" if you want to allow credit to the party.';
COMMENT ON COLUMN core.parties.maximum_credit_period IS 'Maximum credit period ';
COMMENT ON COLUMN core.parties.maximum_credit_amount IS '';
COMMENT ON COLUMN core.parties.account_id IS 'Foreign key to the table core.accounts.';
COMMENT ON COLUMN core.parties.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.parties.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.party_types IS 'This table stores information on types of parties and other infornation associated with it like weather a party is Agent/Customer/Dealer/Supplier..';
COMMENT ON COLUMN core.party_types.party_type_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.party_types.party_type_code IS 'Code given to the party';
COMMENT ON COLUMN core.party_types.party_type_name IS 'Name of the party which is a unique field.';
COMMENT ON COLUMN core.party_types.is_supplier IS 'Selct "Yes" if the party is supplier or vice-versa.';
COMMENT ON COLUMN core.party_types.account_id IS 'Foreign key to the table core.accounts.When a new party is added, this becomes the parent account.';
COMMENT ON COLUMN core.party_types.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.party_types.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.payment_terms IS 'This table stores information on terms of payment like due date, grace period and information associated with it.';
COMMENT ON COLUMN core.payment_terms.payment_term_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.payment_terms.payment_term_code IS 'Code given to the terms of payment.';
COMMENT ON COLUMN core.payment_terms.payment_term_name IS 'The name given to the term of payment, which is also a unique field.';
COMMENT ON COLUMN core.payment_terms.due_on_date IS '';
COMMENT ON COLUMN core.payment_terms.due_days IS '';
COMMENT ON COLUMN core.payment_terms.due_frequency_id IS '';
COMMENT ON COLUMN core.payment_terms.grace_peiod IS '';
COMMENT ON COLUMN core.payment_terms.late_fee_id IS '';
COMMENT ON COLUMN core.payment_terms.late_fee_posting_frequency_id IS '';
COMMENT ON COLUMN core.payment_terms.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.payment_terms.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.price_types IS '';
COMMENT ON COLUMN core.price_types.price_type_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.price_types.price_type_code IS '';
COMMENT ON COLUMN core.price_types.price_type_name IS '';
COMMENT ON COLUMN core.price_types.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.price_types.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.recurring_invoice_setup IS '';
COMMENT ON COLUMN core.recurring_invoice_setup.recurring_invoice_setup_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.recurring_invoice_setup.recurring_invoice_id IS '';
COMMENT ON COLUMN core.recurring_invoice_setup.party_id IS '';
COMMENT ON COLUMN core.recurring_invoice_setup.starts_from IS '';
COMMENT ON COLUMN core.recurring_invoice_setup.ends_on IS '';
COMMENT ON COLUMN core.recurring_invoice_setup.recurring_amount IS '';
COMMENT ON COLUMN core.recurring_invoice_setup.payment_term_id IS '';
COMMENT ON COLUMN core.recurring_invoice_setup.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.recurring_invoice_setup.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.recurring_invoices IS '';
COMMENT ON COLUMN core.recurring_invoices.recurring_invoice_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.recurring_invoices.recurring_invoice_code IS '';
COMMENT ON COLUMN core.recurring_invoices.recurring_invoice_name IS '';
COMMENT ON COLUMN core.recurring_invoices.item_id IS 'Foreign key to the table core.items.';
COMMENT ON COLUMN core.recurring_invoices.compound_item_id IS '';
COMMENT ON COLUMN core.recurring_invoices.recurring_frequency_id IS '';
COMMENT ON COLUMN core.recurring_invoices.recurring_amount IS '';
COMMENT ON COLUMN core.recurring_invoices.auto_trigger_on_sales IS '';
COMMENT ON COLUMN core.recurring_invoices.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.recurring_invoices.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE office.roles IS '';
COMMENT ON COLUMN office.roles.role_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN office.roles.role_code IS '';
COMMENT ON COLUMN office.roles.role_name IS '';
COMMENT ON COLUMN office.roles.is_admin IS '';
COMMENT ON COLUMN office.roles.is_system IS '';
COMMENT ON COLUMN office.roles.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.roles.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.rounding_methods IS 'This table stores information on rounding off the amount. ';
COMMENT ON COLUMN core.rounding_methods.rounding_method_code IS 'The primary key of this table.';
COMMENT ON COLUMN core.rounding_methods.rounding_method_name IS 'The column that describes this table.';


COMMENT ON TABLE transactions.routines IS '';
COMMENT ON COLUMN transactions.routines.routine_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN transactions.routines.order IS '';
COMMENT ON COLUMN transactions.routines.routine_code IS '';
COMMENT ON COLUMN transactions.routines.routine_name IS '';
COMMENT ON COLUMN transactions.routines.status IS '';


COMMENT ON TABLE core.sales_tax_details IS 'This table stores information on sales tax and other information associated with it.';
COMMENT ON COLUMN core.sales_tax_details.sales_tax_detail_id IS '';
COMMENT ON COLUMN core.sales_tax_details.sales_tax_id IS '';
COMMENT ON COLUMN core.sales_tax_details.sales_tax_type_id IS '';
COMMENT ON COLUMN core.sales_tax_details.priority IS '';
COMMENT ON COLUMN core.sales_tax_details.sales_tax_detail_code IS '';
COMMENT ON COLUMN core.sales_tax_details.sales_tax_detail_name IS '';
COMMENT ON COLUMN core.sales_tax_details.based_on_shipping_address IS '';
COMMENT ON COLUMN core.sales_tax_details.check_nexus IS '';
COMMENT ON COLUMN core.sales_tax_details.applied_on_shipping_charge IS '';
COMMENT ON COLUMN core.sales_tax_details.state_sales_tax_id IS '';
COMMENT ON COLUMN core.sales_tax_details.county_sales_tax_id IS '';
COMMENT ON COLUMN core.sales_tax_details.tax_rate_type_code IS '';
COMMENT ON COLUMN core.sales_tax_details.rate IS '';
COMMENT ON COLUMN core.sales_tax_details.reporting_tax_authority_id IS '';
COMMENT ON COLUMN core.sales_tax_details.collecting_tax_authority_id IS '';
COMMENT ON COLUMN core.sales_tax_details.collecting_account_id IS '';
COMMENT ON COLUMN core.sales_tax_details.use_tax_collecting_account_id IS '';
COMMENT ON COLUMN core.sales_tax_details.rounding_method_code IS '';
COMMENT ON COLUMN core.sales_tax_details.rounding_decimal_places IS '';
COMMENT ON COLUMN core.sales_tax_details.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.sales_tax_details.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.sales_tax_exempt_details IS 'This table stores information on sales tax exemption and other information associated with it.';
COMMENT ON COLUMN core.sales_tax_exempt_details.sales_tax_exempt_detail_id IS '';
COMMENT ON COLUMN core.sales_tax_exempt_details.sales_tax_exempt_id IS '';
COMMENT ON COLUMN core.sales_tax_exempt_details.entity_id IS '';
COMMENT ON COLUMN core.sales_tax_exempt_details.industry_id IS '';
COMMENT ON COLUMN core.sales_tax_exempt_details.party_id IS '';
COMMENT ON COLUMN core.sales_tax_exempt_details.party_type_id IS '';
COMMENT ON COLUMN core.sales_tax_exempt_details.item_id IS 'Foreign key to the table core.items.';
COMMENT ON COLUMN core.sales_tax_exempt_details.item_group_id IS '';
COMMENT ON COLUMN core.sales_tax_exempt_details.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.sales_tax_exempt_details.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.sales_tax_exempts IS 'This table stores information on sales tax exemption and other information associated with it.';
COMMENT ON COLUMN core.sales_tax_exempts.sales_tax_exempt_id IS 'The primary key of the table, which is also a serial field.';
COMMENT ON COLUMN core.sales_tax_exempts.tax_master_id IS 'Foreign key to the table core.tax_master.';
COMMENT ON COLUMN core.sales_tax_exempts.sales_tax_exempt_code IS 'Sakes tax exemption code.';
COMMENT ON COLUMN core.sales_tax_exempts.sales_tax_exempt_name IS 'The name given to the sales tax exemption.';
COMMENT ON COLUMN core.sales_tax_exempts.tax_exempt_type_id IS 'Foreign key to the table core.tax_exempt_types.';
COMMENT ON COLUMN core.sales_tax_exempts.store_id IS 'Foreign key to the table office.stores.';
COMMENT ON COLUMN core.sales_tax_exempts.sales_tax_id IS 'Foreign key to the table core.sales_taxes.';
COMMENT ON COLUMN core.sales_tax_exempts.valid_from IS 'The effective date of the sales exemption cstegory.';
COMMENT ON COLUMN core.sales_tax_exempts.valid_till IS 'The last date of the sales exemption category.';
COMMENT ON COLUMN core.sales_tax_exempts.price_from IS 'The minimum sales amount required to fall into the sales exemption category.';
COMMENT ON COLUMN core.sales_tax_exempts.price_to IS 'The maximum sales amount that falls into the sales exemption category.';
COMMENT ON COLUMN core.sales_tax_exempts.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.sales_tax_exempts.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.sales_tax_types IS 'Type of sales tax and information associated with it.';
COMMENT ON COLUMN core.sales_tax_types.sales_tax_type_id IS 'The primary key of the table, which is also a serial field.';
COMMENT ON COLUMN core.sales_tax_types.sales_tax_type_code IS 'The code given to the sales tax type.';
COMMENT ON COLUMN core.sales_tax_types.sales_tax_type_name IS 'The name given to the type of a sales tax.';
COMMENT ON COLUMN core.sales_tax_types.is_vat IS 'Select "Yes" if the sales tax is VAT.';
COMMENT ON COLUMN core.sales_tax_types.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.sales_tax_types.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.sales_taxes IS 'Details on sales tax.';
COMMENT ON COLUMN core.sales_taxes.sales_tax_id IS 'Primary key of the table, which is also a serial field.';
COMMENT ON COLUMN core.sales_taxes.tax_master_id IS 'Foreign key to the table core.tax_master.';
COMMENT ON COLUMN core.sales_taxes.office_id IS 'Foreign key to the table office.offices.';
COMMENT ON COLUMN core.sales_taxes.sales_tax_code IS 'The code given to the sales tax.';
COMMENT ON COLUMN core.sales_taxes.sales_tax_name IS 'The name given to the sales tax, which is also a unique field.';
COMMENT ON COLUMN core.sales_taxes.is_exemption IS '';
COMMENT ON COLUMN core.sales_taxes.tax_base_amount_type_code IS 'Foreign key to the table core.tax_base_amount_types.';
COMMENT ON COLUMN core.sales_taxes.rate IS 'Sales tax rate.';
COMMENT ON COLUMN core.sales_taxes.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.sales_taxes.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.sales_teams IS 'Details on sales team.';
COMMENT ON COLUMN core.sales_teams.sales_team_id IS 'The primary key of the table, which is also a serial field.';
COMMENT ON COLUMN core.sales_teams.sales_team_code IS 'The code given to the sales team.';
COMMENT ON COLUMN core.sales_teams.sales_team_name IS 'The name given to the sales team, which is also a unique field.';
COMMENT ON COLUMN core.sales_teams.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.sales_teams.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.salesperson_bonus_setups IS 'Setup bonuses to salespersons.';
COMMENT ON COLUMN core.salesperson_bonus_setups.salesperson_bonus_setup_id IS 'The primary key of the table, which is also a serial field.';
COMMENT ON COLUMN core.salesperson_bonus_setups.salesperson_id IS 'The primary key from the table office.users (foreign key to this table).';
COMMENT ON COLUMN core.salesperson_bonus_setups.bonus_slab_id IS 'A unique numeric value assigned to the bonus slab';
COMMENT ON COLUMN core.salesperson_bonus_setups.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.salesperson_bonus_setups.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.salespersons IS 'Details on sales person and other information associated with it.';
COMMENT ON COLUMN core.salespersons.salesperson_id IS 'The primay key of the table.';
COMMENT ON COLUMN core.salespersons.sales_team_id IS 'The id given to the sales person.';
COMMENT ON COLUMN core.salespersons.salesperson_code IS 'The code given to the sales person.';
COMMENT ON COLUMN core.salespersons.salesperson_name IS 'The name of the sales person, which is also a unique field.';
COMMENT ON COLUMN core.salespersons.address IS 'The address of the sales person.';
COMMENT ON COLUMN core.salespersons.contact_number IS 'The contact number of the sales person.';
COMMENT ON COLUMN core.salespersons.commission_rate IS 'The rate of comission assigned to the sales person.';
COMMENT ON COLUMN core.salespersons.account_id IS 'Foreign key to the table core.accounts.';
COMMENT ON COLUMN core.salespersons.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.salespersons.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.shippers IS 'Details on shippers (shipping company) and other information associated with it.';
COMMENT ON COLUMN core.shippers.shipper_id IS 'The primary key of the table, which is also a bigserial field.';
COMMENT ON COLUMN core.shippers.shipper_code IS 'The code of the shipper.';
COMMENT ON COLUMN core.shippers.company_name IS 'Tha name of the shipping company. ';
COMMENT ON COLUMN core.shippers.shipper_name IS 'The name of the shipper.';
COMMENT ON COLUMN core.shippers.po_box IS 'The P.O Box number of the shipper.';
COMMENT ON COLUMN core.shippers.address_line_1 IS 'Address 1.';
COMMENT ON COLUMN core.shippers.address_line_2 IS 'Address 2.';
COMMENT ON COLUMN core.shippers.street IS 'The street name where the shipper operates.';
COMMENT ON COLUMN core.shippers.city IS 'The city name of the city where the shipper operates.';
COMMENT ON COLUMN core.shippers.state IS 'The name of the state where the shipper operates.';
COMMENT ON COLUMN core.shippers.country IS 'The name of the county where the shipper operates.';
COMMENT ON COLUMN core.shippers.phone IS 'The phone number of the shipper.';
COMMENT ON COLUMN core.shippers.fax IS 'The fax number of the shipper.';
COMMENT ON COLUMN core.shippers.cell IS 'The cell number of the shipper.';
COMMENT ON COLUMN core.shippers.email IS 'The e-mail address of the shipper.';
COMMENT ON COLUMN core.shippers.url IS 'The web address of the shipper.';
COMMENT ON COLUMN core.shippers.contact_person IS 'The contact person or agent of the shipping company.';
COMMENT ON COLUMN core.shippers.contact_po_box IS 'The P.O. Box number of the agent.';
COMMENT ON COLUMN core.shippers.contact_address_line_1 IS 'Address 1 of the shipping agent.';
COMMENT ON COLUMN core.shippers.contact_address_line_2 IS 'Address 2 of the shipping agent.';
COMMENT ON COLUMN core.shippers.contact_street IS 'The street name where the shipping agent resides.';
COMMENT ON COLUMN core.shippers.contact_city IS 'THe city name where the shipping agent resides.';
COMMENT ON COLUMN core.shippers.contact_state IS '';
COMMENT ON COLUMN core.shippers.contact_country IS '';
COMMENT ON COLUMN core.shippers.contact_email IS '';
COMMENT ON COLUMN core.shippers.contact_phone IS '';
COMMENT ON COLUMN core.shippers.contact_cell IS '';
COMMENT ON COLUMN core.shippers.factory_address IS '';
COMMENT ON COLUMN core.shippers.pan_number IS '';
COMMENT ON COLUMN core.shippers.sst_number IS '';
COMMENT ON COLUMN core.shippers.cst_number IS '';
COMMENT ON COLUMN core.shippers.account_id IS 'Foreign key to the table core.accounts.';
COMMENT ON COLUMN core.shippers.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.shippers.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.shipping_addresses IS 'Details on shipping address and other information associated with it.';
COMMENT ON COLUMN core.shipping_addresses.shipping_address_id IS '';
COMMENT ON COLUMN core.shipping_addresses.shipping_address_code IS '';
COMMENT ON COLUMN core.shipping_addresses.party_id IS '';
COMMENT ON COLUMN core.shipping_addresses.country_id IS '';
COMMENT ON COLUMN core.shipping_addresses.state_id IS '';
COMMENT ON COLUMN core.shipping_addresses.zip_code IS '';
COMMENT ON COLUMN core.shipping_addresses.address_line_1 IS '';
COMMENT ON COLUMN core.shipping_addresses.address_line_2 IS '';
COMMENT ON COLUMN core.shipping_addresses.street IS '';
COMMENT ON COLUMN core.shipping_addresses.city IS '';
COMMENT ON COLUMN core.shipping_addresses.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.shipping_addresses.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.shipping_mail_types IS 'Details on shipping mail type (Express, priority mail, parcel post etc.).';
COMMENT ON COLUMN core.shipping_mail_types.shipping_mail_type_id IS 'The primary key of the table.';
COMMENT ON COLUMN core.shipping_mail_types.shipping_mail_type_code IS 'The id of the shipping mail type.';
COMMENT ON COLUMN core.shipping_mail_types.shipping_mail_type_name IS 'The name given to the shipping mail type, which is also a unique field.';
COMMENT ON COLUMN core.shipping_mail_types.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.shipping_mail_types.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.shipping_package_shapes IS 'Details on shipping package and other information assiciated with it.';
COMMENT ON COLUMN core.shipping_package_shapes.shipping_package_shape_id IS 'Primary key of the table.';
COMMENT ON COLUMN core.shipping_package_shapes.shipping_package_shape_code IS 'Code given to the shipping package shape.';
COMMENT ON COLUMN core.shipping_package_shapes.shipping_package_shape_name IS 'Name given to the shipping package shape, which is a unique field.';
COMMENT ON COLUMN core.shipping_package_shapes.is_rectangular IS 'Select "t" if the shape of the package is rectangular or vice-versa.';
COMMENT ON COLUMN core.shipping_package_shapes.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.shipping_package_shapes.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.state_sales_taxes IS 'Details on sales tax of the state in the U.S.A and other information associated with it.';
COMMENT ON COLUMN core.state_sales_taxes.state_sales_tax_id IS 'The primary key of the table.';
COMMENT ON COLUMN core.state_sales_taxes.state_sales_tax_code IS 'The code given to the state sales tax.';
COMMENT ON COLUMN core.state_sales_taxes.state_sales_tax_name IS 'The  name of the sales tax, which is also a unique field.';
COMMENT ON COLUMN core.state_sales_taxes.state_id IS 'Foreign key to the table core.states.';
COMMENT ON COLUMN core.state_sales_taxes.entity_id IS 'Foreign key to the table core.entities.';
COMMENT ON COLUMN core.state_sales_taxes.industry_id IS 'Foreign key to the table core.industries.';
COMMENT ON COLUMN core.state_sales_taxes.item_group_id IS 'Foreign key to the table core.item_groups.';
COMMENT ON COLUMN core.state_sales_taxes.rate IS 'Tax rate of the state.';
COMMENT ON COLUMN core.state_sales_taxes.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.state_sales_taxes.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.states IS 'Information on the states of the U.S.A.';
COMMENT ON COLUMN core.states.state_id IS 'Primary key of the table.';
COMMENT ON COLUMN core.states.country_id IS 'Foreign key to the table core.states.';
COMMENT ON COLUMN core.states.state_code IS 'The code word given to the state name.';
COMMENT ON COLUMN core.states.state_name IS 'Tha name of the states in the U.S.A, which is a unique field.';
COMMENT ON COLUMN core.states.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.states.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE transactions.stock_details IS '';
COMMENT ON COLUMN transactions.stock_details.stock_detail_id IS '';
COMMENT ON COLUMN transactions.stock_details.value_date IS '';
COMMENT ON COLUMN transactions.stock_details.stock_master_id IS '';
COMMENT ON COLUMN transactions.stock_details.tran_type IS '';
COMMENT ON COLUMN transactions.stock_details.store_id IS '';
COMMENT ON COLUMN transactions.stock_details.item_id IS 'Foreign key to the table core.items.';
COMMENT ON COLUMN transactions.stock_details.quantity IS '';
COMMENT ON COLUMN transactions.stock_details.unit_id IS 'Foreign key to the table core.items.';
COMMENT ON COLUMN transactions.stock_details.base_quantity IS '';
COMMENT ON COLUMN transactions.stock_details.base_unit_id IS '';
COMMENT ON COLUMN transactions.stock_details.price IS '';
COMMENT ON COLUMN transactions.stock_details.cost_of_goods_sold IS '';
COMMENT ON COLUMN transactions.stock_details.discount IS '';
COMMENT ON COLUMN transactions.stock_details.shipping_charge IS '';
COMMENT ON COLUMN transactions.stock_details.sales_tax_id IS '';
COMMENT ON COLUMN transactions.stock_details.tax IS '';
COMMENT ON COLUMN transactions.stock_details.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN transactions.stock_details.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE transactions.stock_master IS '';
COMMENT ON COLUMN transactions.stock_master.stock_master_id IS '';
COMMENT ON COLUMN transactions.stock_master.transaction_master_id IS '';
COMMENT ON COLUMN transactions.stock_master.value_date IS '';
COMMENT ON COLUMN transactions.stock_master.party_id IS '';
COMMENT ON COLUMN transactions.stock_master.salesperson_id IS '';
COMMENT ON COLUMN transactions.stock_master.price_type_id IS '';
COMMENT ON COLUMN transactions.stock_master.is_credit IS '';
COMMENT ON COLUMN transactions.stock_master.payment_term_id IS '';
COMMENT ON COLUMN transactions.stock_master.shipper_id IS '';
COMMENT ON COLUMN transactions.stock_master.shipping_address_id IS '';
COMMENT ON COLUMN transactions.stock_master.shipping_charge IS '';
COMMENT ON COLUMN transactions.stock_master.store_id IS '';
COMMENT ON COLUMN transactions.stock_master.non_taxable IS '';
COMMENT ON COLUMN transactions.stock_master.cash_repository_id IS '';
COMMENT ON COLUMN transactions.stock_master.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN transactions.stock_master.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE transactions.stock_master_non_gl_relations IS 'This table stores information of Non GL Stock Transactions such as orders and quotations
which were upgraded to deliveries or invoices.';
COMMENT ON COLUMN transactions.stock_master_non_gl_relations.stock_master_non_gl_relation_id IS '';
COMMENT ON COLUMN transactions.stock_master_non_gl_relations.stock_master_id IS '';
COMMENT ON COLUMN transactions.stock_master_non_gl_relations.non_gl_stock_master_id IS '';


COMMENT ON TABLE transactions.stock_return IS '';
COMMENT ON COLUMN transactions.stock_return.sales_return_id IS '';
COMMENT ON COLUMN transactions.stock_return.transaction_master_id IS '';
COMMENT ON COLUMN transactions.stock_return.return_transaction_master_id IS '';


COMMENT ON TABLE transactions.stock_tax_details IS '';
COMMENT ON COLUMN transactions.stock_tax_details.stock_detail_id IS '';
COMMENT ON COLUMN transactions.stock_tax_details.sales_tax_detail_id IS '';
COMMENT ON COLUMN transactions.stock_tax_details.state_sales_tax_id IS '';
COMMENT ON COLUMN transactions.stock_tax_details.county_sales_tax_id IS '';
COMMENT ON COLUMN transactions.stock_tax_details.principal IS '';
COMMENT ON COLUMN transactions.stock_tax_details.rate IS '';
COMMENT ON COLUMN transactions.stock_tax_details.tax IS '';


COMMENT ON TABLE policy.store_policies IS 'STORE POLICY DEFINES THE RIGHT OF USERS TO ACCESS A STORE.
    AN ADMINISTRATOR CAN ACCESS ALL THE stores, BY DEFAULT.';
COMMENT ON COLUMN policy.store_policies.store_policy_id IS '';
COMMENT ON COLUMN policy.store_policies.written_by_user_id IS '';
COMMENT ON COLUMN policy.store_policies.status IS '';
COMMENT ON COLUMN policy.store_policies.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN policy.store_policies.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE policy.store_policy_details IS '';
COMMENT ON COLUMN policy.store_policy_details.store_policy_detail_id IS '';
COMMENT ON COLUMN policy.store_policy_details.store_policy_id IS '';
COMMENT ON COLUMN policy.store_policy_details.user_id IS '';
COMMENT ON COLUMN policy.store_policy_details.store_id IS '';
COMMENT ON COLUMN policy.store_policy_details.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN policy.store_policy_details.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE office.store_types IS '';
COMMENT ON COLUMN office.store_types.store_type_id IS '';
COMMENT ON COLUMN office.store_types.store_type_code IS '';
COMMENT ON COLUMN office.store_types.store_type_name IS '';
COMMENT ON COLUMN office.store_types.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.store_types.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE office.stores IS '';
COMMENT ON COLUMN office.stores.store_id IS '';
COMMENT ON COLUMN office.stores.office_id IS '';
COMMENT ON COLUMN office.stores.store_code IS '';
COMMENT ON COLUMN office.stores.store_name IS '';
COMMENT ON COLUMN office.stores.address IS '';
COMMENT ON COLUMN office.stores.store_type_id IS '';
COMMENT ON COLUMN office.stores.allow_sales IS '';
COMMENT ON COLUMN office.stores.sales_tax_id IS '';
COMMENT ON COLUMN office.stores.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.stores.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.tax_authorities IS 'Details on tax authorities, its address and other information associated with it.';
COMMENT ON COLUMN core.tax_authorities.tax_authority_id IS 'The primary key of the table.';
COMMENT ON COLUMN core.tax_authorities.tax_master_id IS 'Foreign key to the table core.tax_master.';
COMMENT ON COLUMN core.tax_authorities.tax_authority_code IS 'The code given to the tax authority.';
COMMENT ON COLUMN core.tax_authorities.tax_authority_name IS 'The name of the tax authority, which is a unique field.';
COMMENT ON COLUMN core.tax_authorities.country_id IS 'Foreign key to the table core.countries.';
COMMENT ON COLUMN core.tax_authorities.state_id IS 'Foreign key to the table core.states.';
COMMENT ON COLUMN core.tax_authorities.zip_code IS 'ZIP code of the tax office.';
COMMENT ON COLUMN core.tax_authorities.address_line_1 IS 'Address 1.';
COMMENT ON COLUMN core.tax_authorities.address_line_2 IS 'Address 2.';
COMMENT ON COLUMN core.tax_authorities.street IS 'Street address.';
COMMENT ON COLUMN core.tax_authorities.city IS'Name of the city.';
COMMENT ON COLUMN core.tax_authorities.phone IS 'Phone number of the tax office.';
COMMENT ON COLUMN core.tax_authorities.fax IS 'Fax number of the tax office.';
COMMENT ON COLUMN core.tax_authorities.cell IS 'Cell phone number of the tax office.';
COMMENT ON COLUMN core.tax_authorities.email IS 'E-mail address of the tax office.';
COMMENT ON COLUMN core.tax_authorities.url IS 'Web address of the tax office.';
COMMENT ON COLUMN core.tax_authorities.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.tax_authorities.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.tax_base_amount_types IS 'Information on various tax base that are applicable.';
COMMENT ON COLUMN core.tax_base_amount_types.tax_base_amount_type_code IS 'The code of the tax base.';
COMMENT ON COLUMN core.tax_base_amount_types.tax_base_amount_type_name IS 'The name given to the tax base, which is also a unique field.';


COMMENT ON TABLE core.tax_exempt_types IS 'Various kinds of tax exemptions that are applicable.';
COMMENT ON COLUMN core.tax_exempt_types.tax_exempt_type_id IS 'The primary key of the table, which is also a serial field.';
COMMENT ON COLUMN core.tax_exempt_types.tax_exempt_type_code IS 'The code given to the tax exemption type.';
COMMENT ON COLUMN core.tax_exempt_types.tax_exempt_type_name IS 'The name given to the tax exemption type, which is also a unique field.';
COMMENT ON COLUMN core.tax_exempt_types.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.tax_exempt_types.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.tax_master IS 'Information on the applicable tax rates of various countries (tax master)supported by the software. ';
COMMENT ON COLUMN core.tax_master.tax_master_id IS 'The primary key of the table, which is also a serial field.';
COMMENT ON COLUMN core.tax_master.tax_master_code IS 'The code of the code master.';
COMMENT ON COLUMN core.tax_master.tax_master_name IS 'The name of the tax master.';
COMMENT ON COLUMN core.tax_master.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.tax_master.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.tax_rate_types IS 'The code and the name given to various types tax rates (flat rate or percentage basis).';
COMMENT ON COLUMN core.tax_rate_types.tax_rate_type_code IS 'The primary key of the table.';
COMMENT ON COLUMN core.tax_rate_types.tax_rate_type_name IS 'The name given to the tax-rate type, which is also a unique field.';


COMMENT ON TABLE transactions.transaction_details IS '';
COMMENT ON COLUMN transactions.transaction_details.transaction_detail_id IS '';
COMMENT ON COLUMN transactions.transaction_details.transaction_master_id IS '';
COMMENT ON COLUMN transactions.transaction_details.value_date IS '';
COMMENT ON COLUMN transactions.transaction_details.tran_type IS '';
COMMENT ON COLUMN transactions.transaction_details.account_id IS 'Foreign key to the table core.accounts.';
COMMENT ON COLUMN transactions.transaction_details.statement_reference IS '';
COMMENT ON COLUMN transactions.transaction_details.cash_repository_id IS '';
COMMENT ON COLUMN transactions.transaction_details.currency_code IS 'Foreign key to the table core.currencies.';
COMMENT ON COLUMN transactions.transaction_details.amount_in_currency IS '';
COMMENT ON COLUMN transactions.transaction_details.local_currency_code IS '';
COMMENT ON COLUMN transactions.transaction_details.er IS '';
COMMENT ON COLUMN transactions.transaction_details.amount_in_local_currency IS '';
COMMENT ON COLUMN transactions.transaction_details.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN transactions.transaction_details.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE transactions.transaction_master IS '';
COMMENT ON COLUMN transactions.transaction_master.transaction_master_id IS '';
COMMENT ON COLUMN transactions.transaction_master.transaction_counter IS '';
COMMENT ON COLUMN transactions.transaction_master.transaction_code IS '';
COMMENT ON COLUMN transactions.transaction_master.book IS '';
COMMENT ON COLUMN transactions.transaction_master.value_date IS '';
COMMENT ON COLUMN transactions.transaction_master.transaction_ts IS '';
COMMENT ON COLUMN transactions.transaction_master.login_id IS '';
COMMENT ON COLUMN transactions.transaction_master.user_id IS '';
COMMENT ON COLUMN transactions.transaction_master.sys_user_id IS '';
COMMENT ON COLUMN transactions.transaction_master.office_id IS '';
COMMENT ON COLUMN transactions.transaction_master.cost_center_id IS '';
COMMENT ON COLUMN transactions.transaction_master.reference_number IS '';
COMMENT ON COLUMN transactions.transaction_master.statement_reference IS '';
COMMENT ON COLUMN transactions.transaction_master.last_verified_on IS '';
COMMENT ON COLUMN transactions.transaction_master.verified_by_user_id IS '';
COMMENT ON COLUMN transactions.transaction_master.verification_status_id IS '';
COMMENT ON COLUMN transactions.transaction_master.verification_reason IS '';
COMMENT ON COLUMN transactions.transaction_master.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN transactions.transaction_master.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.units IS 'Contains units of measure.';
COMMENT ON COLUMN core.units.unit_id IS 'The primary key of this table, which is also a serial column.';
COMMENT ON COLUMN core.units.unit_code IS 'The case insensitive unique code which denotes the unit name.';
COMMENT ON COLUMN core.units.unit_name IS 'The case insensitive unique column which denotes the unit of measure.';
COMMENT ON COLUMN core.units.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.units.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE office.users IS 'The users table contains users accounts and their login information. It also contains a sys user account which does not have a password.
The sys user account is a special account used by the MixERP workflow to perform routine tasks. The sys user cannot have a valid password
or cannot be allowed to log in interactively.';
COMMENT ON COLUMN office.users.user_id IS 'The primary key of the table, which is also a serial field.';
COMMENT ON COLUMN office.users.role_id IS '';
COMMENT ON COLUMN office.users.office_id IS '';
COMMENT ON COLUMN office.users.user_name IS '';
COMMENT ON COLUMN office.users.full_name IS '';
COMMENT ON COLUMN office.users.password IS '';
COMMENT ON COLUMN office.users.elevated IS '';
COMMENT ON COLUMN office.users.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.users.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.verification_statuses IS 'Verification statuses are integer values used to represent the state of a transaction.
For example, a verification status of value "0" would mean that the transaction has not yet been verified.
A negative value indicates that the transaction was rejected, whereas a positive value means approved.

Remember:
1. Only approved transactions appear on ledgers and final reports.
2. Cash repository balance is maintained on the basis of LIFO principle. 

   This means that cash balance is affected (reduced) on your repository as soon as a credit transaction is posted,
   without the transaction being approved on the first place. If you reject the transaction, the cash balance then increases.
   This also means that the cash balance is not affected (increased) on your repository as soon as a debit transaction is posted.
   You will need to approve the transaction.

   It should however be noted that the cash repository balance might be less than the total cash shown on your balance sheet,
   if you have pending transactions to verify. You cannot perform EOD operation if you have pending verifications.';
COMMENT ON COLUMN core.verification_statuses.verification_status_id IS 'The primary key of this table.';
COMMENT ON COLUMN core.verification_statuses.verification_status_name IS 'The name of verification status, which is a unique field.';


COMMENT ON TABLE policy.voucher_verification_policy IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.user_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN policy.voucher_verification_policy.can_verify_sales_transactions IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.sales_verification_limit IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.can_verify_purchase_transactions IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.purchase_verification_limit IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.can_verify_gl_transactions IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.gl_verification_limit IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.can_self_verify IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.self_verification_limit IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.effective_from IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.ends_on IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.is_active IS '';
COMMENT ON COLUMN policy.voucher_verification_policy.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN policy.voucher_verification_policy.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE office.work_centers IS '';
COMMENT ON COLUMN office.work_centers.work_center_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN office.work_centers.office_id IS '';
COMMENT ON COLUMN office.work_centers.work_center_code IS '';
COMMENT ON COLUMN office.work_centers.work_center_name IS '';
COMMENT ON COLUMN office.work_centers.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN office.work_centers.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.zip_code_types IS 'Types of ZIP code.';
COMMENT ON COLUMN core.zip_code_types.zip_code_type_id IS 'The primary key of this table, which is also a serial field.';
COMMENT ON COLUMN core.zip_code_types.type IS 'The type of ZIP code, which is also a unique field.';
COMMENT ON COLUMN core.zip_code_types.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.zip_code_types.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';


COMMENT ON TABLE core.zip_codes IS 'This table stores information on the ZIP code.';
COMMENT ON COLUMN core.zip_codes.zip_code_id IS 'The primary key of this table, which is also a bigserial field.';
COMMENT ON COLUMN core.zip_codes.state_id IS 'Foreign key to the table core.states';
COMMENT ON COLUMN core.zip_codes.code IS 'ZIP code of the area.';
COMMENT ON COLUMN core.zip_codes.zip_code_type_id IS 'Foreign key to the table core.zip_code_types.';
COMMENT ON COLUMN core.zip_codes.city IS 'Name of the city,';
COMMENT ON COLUMN core.zip_codes.lat IS 'Latitude of the area.';
COMMENT ON COLUMN core.zip_codes.lon IS 'Longitude of the area.';
COMMENT ON COLUMN core.zip_codes.x_axis IS 'X-axis of the ZIP code.';
COMMENT ON COLUMN core.zip_codes.y_axis IS 'Y-axis of the ZIP code. ';
COMMENT ON COLUMN core.zip_codes.z_axis IS 'Z-axis of the ZIP code.';
COMMENT ON COLUMN core.zip_codes.audit_user_id IS 'Contains the id of the user who last inserted or updated the corresponding row.';
COMMENT ON COLUMN core.zip_codes.audit_ts IS 'Contains the date and timestamp of the last insert or update action.';




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.1/src/refresh-materialized-views.sql --<--<--
SELECT * FROM transactions.refresh_materialized_views(1);
-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/00.db core/1.scrud.sql --<--<--
CREATE OR REPLACE VIEW scrud.mixerp_table_view
AS
SELECT 
    pg_tables.schemaname                                    AS table_schema, 
    pg_tables.tablename                                     AS table_name, 
    pg_attribute.attname                                    AS column_name,
    constraint_name,
    references_schema, 
    references_table, 
    references_field, 
    pg_attribute.attnum                                     AS ordinal_position,
    CASE pg_attribute.attnotnull 
    WHEN false THEN 'YES' 
    ELSE 'NO' END                                           AS is_nullable, 
    (SELECT 
        scrud.parse_default(pg_attrdef.adsrc) 
        FROM pg_attrdef 
        WHERE pg_attrdef.adrelid = pg_class.oid 
        AND pg_attrdef.adnum = pg_attribute.attnum)         AS column_default,    
    format_type(pg_attribute.atttypid, NULL)                AS data_type, 
    format_type(pg_attribute.atttypid, NULL)                AS domain_name, 
    CASE pg_attribute.atttypmod
    WHEN -1 THEN NULL 
    ELSE pg_attribute.atttypmod - 4
    END                                         AS character_maximum_length,    
    pg_constraint.conname AS "key", 
    pc2.conname AS ckey
FROM pg_tables
INNER JOIN pg_class 
ON pg_class.relname = pg_tables.tablename 
AND pg_class.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname=pg_tables.schemaname)
INNER JOIN pg_attribute ON pg_class.oid = pg_attribute.attrelid 
LEFT JOIN pg_constraint ON pg_constraint.contype = 'p'::"char" 
    AND pg_constraint.conrelid = pg_class.oid AND
    (pg_attribute.attnum = ANY (pg_constraint.conkey)) 
LEFT JOIN pg_constraint AS pc2 ON pc2.contype = 'f'::"char" 
    AND pc2.conrelid = pg_class.oid 
    AND (pg_attribute.attnum = ANY (pc2.conkey))    
LEFT JOIN scrud.relationship_view 
ON pg_tables.schemaname = scrud.relationship_view.table_schema 
    AND pg_tables.tablename = scrud.relationship_view.table_name 
    AND pg_attribute.attname = scrud.relationship_view.column_name 
WHERE pg_attribute.attname NOT IN
    (
        'audit_user_id', 'audit_ts'
    )
AND NOT pg_attribute.attisdropped
AND pg_attribute.attnum > 0 
ORDER BY pg_attribute.attnum;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/00.db core/plpgunit/install/0.uninstall-unit-test.sql --<--<--

/********************************************************************************
The PostgreSQL License

Copyright (c) 2014, Binod Nepal, Mix Open Foundation (http://mixof.org).

Permission to use, copy, modify, and distribute this software and its documentation 
for any purpose, without fee, and without a written agreement is hereby granted, 
provided that the above copyright notice and this paragraph and 
the following two paragraphs appear in all copies.

IN NO EVENT SHALL MIX OPEN FOUNDATION BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, 
SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, 
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF 
MIX OPEN FOUNDATION HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

MIX OPEN FOUNDATION SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, 
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, 
AND MIX OPEN FOUNDATION HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, 
UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
***********************************************************************************/

DROP SCHEMA IF EXISTS assert CASCADE;
DROP SCHEMA IF EXISTS unit_tests CASCADE;
DROP DOMAIN IF EXISTS public.test_result CASCADE;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/00.db core/plpgunit/install/1.install-unit-test.sql --<--<--
/********************************************************************************
The PostgreSQL License

Copyright (c) 2014, Binod Nepal, Mix Open Foundation (http://mixof.org).

Permission to use, copy, modify, and distribute this software and its documentation 
for any purpose, without fee, and without a written agreement is hereby granted, 
provided that the above copyright notice and this paragraph and 
the following two paragraphs appear in all copies.

IN NO EVENT SHALL MIX OPEN FOUNDATION BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, 
SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, 
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF 
MIX OPEN FOUNDATION HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

MIX OPEN FOUNDATION SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, 
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, 
AND MIX OPEN FOUNDATION HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, 
UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
***********************************************************************************/

CREATE SCHEMA IF NOT EXISTS assert;
CREATE SCHEMA IF NOT EXISTS unit_tests;

DO 
$$
BEGIN
    IF NOT EXISTS 
    (
        SELECT * FROM pg_type
        WHERE 
            typname ='test_result'
        AND 
            typnamespace = 
            (
                SELECT oid FROM pg_namespace 
                WHERE nspname ='public'
            )
    ) THEN
        CREATE DOMAIN public.test_result AS text;
    END IF;
END
$$
LANGUAGE plpgsql;


DROP TABLE IF EXISTS unit_tests.test_details CASCADE;
DROP TABLE IF EXISTS unit_tests.tests CASCADE;
CREATE TABLE unit_tests.tests
(
    test_id                                 SERIAL NOT NULL PRIMARY KEY,
    started_on                              TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
    completed_on                            TIMESTAMP WITHOUT TIME ZONE NULL,
    total_tests                             integer NULL DEFAULT(0),
    failed_tests                            integer NULL DEFAULT(0)
);

CREATE INDEX unit_tests_tests_started_on_inx
ON unit_tests.tests(started_on);

CREATE INDEX unit_tests_tests_completed_on_inx
ON unit_tests.tests(completed_on);

CREATE INDEX unit_tests_tests_failed_tests_inx
ON unit_tests.tests(failed_tests);

CREATE TABLE unit_tests.test_details
(
    id                                      BIGSERIAL NOT NULL PRIMARY KEY,
    test_id                                 integer NOT NULL REFERENCES unit_tests.tests(test_id),
    function_name                           text NOT NULL,
    message                                 text NOT NULL,
    ts                                      TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'),
    status                                  boolean NOT NULL
);

CREATE INDEX unit_tests_test_details_test_id_inx
ON unit_tests.test_details(test_id);

CREATE INDEX unit_tests_test_details_status_inx
ON unit_tests.test_details(status);


DROP FUNCTION IF EXISTS assert.fail(message text);
CREATE FUNCTION assert.fail(message text)
RETURNS text
AS
$$
BEGIN
    IF $1 IS NULL OR trim($1) = '' THEN
        message := 'NO REASON SPECIFIED';
    END IF;
    
    RAISE WARNING 'ASSERT FAILED : %', message;
    RETURN message;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.pass(message text);
CREATE FUNCTION assert.pass(message text)
RETURNS text
AS
$$
BEGIN
    RAISE NOTICE 'ASSERT PASSED : %', message;
    RETURN '';
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.ok(message text);
CREATE FUNCTION assert.ok(message text)
RETURNS text
AS
$$
BEGIN
    RAISE NOTICE 'OK : %', message;
    RETURN '';
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.is_equal(IN have anyelement, IN want anyelement, OUT message text, OUT result boolean);
CREATE FUNCTION assert.is_equal(IN have anyelement, IN want anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 = $2) THEN
        message := 'Assert is equal.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;

    message := E'ASSERT IS_EQUAL FAILED.\n\nHave -> ' || $1::text || E'\nWant -> ' || $2::text || E'\n';    
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;


DROP FUNCTION IF EXISTS assert.are_equal(VARIADIC anyarray, OUT message text, OUT result boolean);
CREATE FUNCTION assert.are_equal(VARIADIC anyarray, OUT message text, OUT result boolean)
AS
$$
    DECLARE count integer=0;
BEGIN
    SELECT COUNT(DISTINCT $1[s.i]) INTO count
    FROM generate_series(array_lower($1,1), array_upper($1,1)) AS s(i)
    ORDER BY 1;

    IF count <> 1 THEN
        MESSAGE := 'ASSERT ARE_EQUAL FAILED.';  
        PERFORM assert.fail(MESSAGE);
        RESULT := FALSE;
        RETURN;
    END IF;

    message := 'Asserts are equal.';
    PERFORM assert.ok(message);
    result := true;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.is_not_equal(IN already_have anyelement, IN dont_want anyelement, OUT message text, OUT result boolean);
CREATE FUNCTION assert.is_not_equal(IN already_have anyelement, IN dont_want anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 != $2) THEN
        message := 'Assert is not equal.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_NOT_EQUAL FAILED.\n\nAlready Have -> ' || $1::text || E'\nDon''t Want   -> ' || $2::text || E'\n';   
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.are_not_equal(VARIADIC anyarray, OUT message text, OUT result boolean);
CREATE FUNCTION assert.are_not_equal(VARIADIC anyarray, OUT message text, OUT result boolean)
AS
$$
    DECLARE count integer=0;
BEGIN
    SELECT COUNT(DISTINCT $1[s.i]) INTO count
    FROM generate_series(array_lower($1,1), array_upper($1,1)) AS s(i)
    ORDER BY 1;

    IF count <> array_upper($1,1) THEN
        MESSAGE := 'ASSERT ARE_NOT_EQUAL FAILED.';  
        PERFORM assert.fail(MESSAGE);
        RESULT := FALSE;
        RETURN;
    END IF;

    message := 'Asserts are not equal.';
    PERFORM assert.ok(message);
    result := true;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.is_null(IN anyelement, OUT message text, OUT result boolean);
CREATE FUNCTION assert.is_null(IN anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 IS NULL) THEN
        message := 'Assert is NULL.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_NULL FAILED. NULL value was expected.\n\n\n';    
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.is_not_null(IN anyelement, OUT message text, OUT result boolean);
CREATE FUNCTION assert.is_not_null(IN anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 IS NOT NULL) THEN
        message := 'Assert is not NULL.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_NOT_NULL FAILED. The value is NULL.\n\n\n';  
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.is_true(IN boolean, OUT message text, OUT result boolean);
CREATE FUNCTION assert.is_true(IN boolean, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 = true) THEN
        message := 'Assert is true.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_TRUE FAILED. A true condition was expected.\n\n\n';  
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.is_false(IN boolean, OUT message text, OUT result boolean);
CREATE FUNCTION assert.is_false(IN boolean, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 = false) THEN
        message := 'Assert is false.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_FALSE FAILED. A false condition was expected.\n\n\n';    
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.is_greater_than(IN x anyelement, IN y anyelement, OUT message text, OUT result boolean);
CREATE FUNCTION assert.is_greater_than(IN x anyelement, IN y anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 > $2) THEN
        message := 'Assert greater than condition is satisfied.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_GREATER_THAN FAILED.\n\n X : -> ' || $1::text || E'\n is not greater than Y:   -> ' || $2::text || E'\n';    
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.is_less_than(IN x anyelement, IN y anyelement, OUT message text, OUT result boolean);
CREATE FUNCTION assert.is_less_than(IN x anyelement, IN y anyelement, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF($1 < $2) THEN
        message := 'Assert less than condition is satisfied.';
        PERFORM assert.ok(message);
        result := true;
        RETURN;
    END IF;
    
    message := E'ASSERT IS_LESS_THAN FAILED.\n\n X : -> ' || $1::text || E'\n is not  than Y:   -> ' || $2::text || E'\n';  
    PERFORM assert.fail(message);
    result := false;
    RETURN;
END
$$
LANGUAGE plpgsql
IMMUTABLE STRICT;

DROP FUNCTION IF EXISTS assert.function_exists(function_name text, OUT message text, OUT result boolean);
CREATE FUNCTION assert.function_exists(function_name text, OUT message text, OUT result boolean)
AS
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT  1
        FROM    pg_catalog.pg_namespace n
        JOIN    pg_catalog.pg_proc p
        ON      pronamespace = n.oid
        WHERE replace(nspname || '.' || proname || '(' || oidvectortypes(proargtypes) || ')', ' ' , '')::text=$1
    ) THEN
        message := 'The function % does not exist.', $1;
        PERFORM assert.fail(message);

        result := false;
        RETURN;
    END IF;

    message := 'OK. The function ' || $1 || ' exists.';
    PERFORM assert.ok(message);
    result := true;
    RETURN;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS assert.if_functions_compile(VARIADIC _schema_name text[], OUT message text, OUT result boolean);
CREATE OR REPLACE FUNCTION assert.if_functions_compile
(
    VARIADIC _schema_name text[],
    OUT message text, 
    OUT result boolean
)
AS
$$
    DECLARE all_parameters              text;
    DECLARE current_function            RECORD;
    DECLARE current_function_name       text;
    DECLARE current_type                text;
    DECLARE current_type_schema         text;
    DECLARE current_parameter           text;
    DECLARE functions_count             smallint := 0;
    DECLARE current_parameters_count    int;
    DECLARE i                           int;
    DECLARE command_text                text;
    DECLARE failed_functions            text;
BEGIN
    FOR current_function IN 
        SELECT proname, proargtypes, nspname 
        FROM pg_proc 
        INNER JOIN pg_namespace 
        ON pg_proc.pronamespace = pg_namespace.oid 
        WHERE pronamespace IN 
        (
            SELECT oid FROM pg_namespace 
            WHERE nspname = ANY($1) 
            AND nspname NOT IN
            (
                'assert', 'unit_tests', 'information_schema'
            ) 
            AND proname NOT IN('if_functions_compile')
        ) 
    LOOP
        current_parameters_count := array_upper(current_function.proargtypes, 1) + 1;

        i := 0;
        all_parameters := '';

        LOOP
        IF i < current_parameters_count THEN
            IF i > 0 THEN
                all_parameters := all_parameters || ', ';
            END IF;

            SELECT 
                nspname, typname 
            INTO 
                current_type_schema, current_type 
            FROM pg_type 
            INNER JOIN pg_namespace 
            ON pg_type.typnamespace = pg_namespace.oid
            WHERE pg_type.oid = current_function.proargtypes[i];

            IF(current_type IN('int4', 'int8', 'numeric', 'integer_strict', 'money_strict','decimal_strict', 'integer_strict2', 'money_strict2','decimal_strict2', 'money','decimal', 'numeric', 'bigint')) THEN
                current_parameter := '1::' || current_type_schema || '.' || current_type;
            ELSIF(substring(current_type, 1, 1) = '_') THEN
                current_parameter := 'NULL::' || current_type_schema || '.' || substring(current_type, 2, length(current_type)) || '[]';
            ELSIF(current_type in ('date')) THEN            
                current_parameter := '''1-1-2000''::' || current_type;
            ELSIF(current_type = 'bool') THEN
                current_parameter := 'false';            
            ELSE
                current_parameter := '''''::' || quote_ident(current_type_schema) || '.' || quote_ident(current_type);
            END IF;
            
            all_parameters = all_parameters || current_parameter;

            i := i + 1;
        ELSE
            EXIT;
        END IF;
    END LOOP;

    BEGIN
        current_function_name := quote_ident(current_function.nspname)  || '.' || quote_ident(current_function.proname);
        command_text := 'SELECT * FROM ' || current_function_name || '(' || all_parameters || ');';

        EXECUTE command_text;
        functions_count := functions_count + 1;

        EXCEPTION WHEN OTHERS THEN
            IF(failed_functions IS NULL) THEN 
                failed_functions := '';
            END IF;
            
            IF(SQLSTATE IN('42702', '42704')) THEN
                failed_functions := failed_functions || E'\n' || command_text || E'\n' || SQLERRM || E'\n';                
            END IF;
    END;


    END LOOP;

    IF(failed_functions != '') THEN
        message := E'The test if_functions_compile failed. The following functions failed to compile : \n\n' || failed_functions;
        result := false;
        PERFORM assert.fail(message);
        RETURN;
    END IF;
END;
$$
LANGUAGE plpgsql 
VOLATILE;

DROP FUNCTION IF EXISTS assert.if_views_compile(VARIADIC _schema_name text[], OUT message text, OUT result boolean);
CREATE FUNCTION assert.if_views_compile
(
    VARIADIC _schema_name text[],
    OUT message text, 
    OUT result boolean    
)
AS
$$

    DECLARE message                     test_result;
    DECLARE current_view                RECORD;
    DECLARE current_view_name           text;
    DECLARE command_text                text;
    DECLARE failed_views                text;
BEGIN
    FOR current_view IN 
        SELECT table_name, table_schema 
        FROM information_schema.views
        WHERE table_schema = ANY($1) 
    LOOP

    BEGIN
        current_view_name := quote_ident(current_view.table_schema)  || '.' || quote_ident(current_view.table_name);
        command_text := 'SELECT * FROM ' || current_view_name || ' LIMIT 1;';

        RAISE NOTICE '%', command_text;
        
        EXECUTE command_text;

        EXCEPTION WHEN OTHERS THEN
            IF(failed_views IS NULL) THEN 
                failed_views := '';
            END IF;

            failed_views := failed_views || E'\n' || command_text || E'\n' || SQLERRM || E'\n';                
    END;


    END LOOP;

    IF(failed_views != '') THEN
        message := E'The test if_views_compile failed. The following views failed to compile : \n\n' || failed_views;
        result := false;
        PERFORM assert.fail(message);
        RETURN;
    END IF;

    RETURN;
END;
$$
LANGUAGE plpgsql 
VOLATILE;


DROP FUNCTION IF EXISTS unit_tests.begin(verbosity integer, format text);
CREATE FUNCTION unit_tests.begin(verbosity integer DEFAULT 9, format text DEFAULT '')
RETURNS TABLE(message text, result character(1))
AS
$$
    DECLARE this                    record;
    DECLARE _function_name          text;
    DECLARE _sql                    text;
    DECLARE _message                text;
    DECLARE _result                 character(1);
    DECLARE _test_id                integer;
    DECLARE _status                 boolean;
    DECLARE _total_tests            integer                         = 0;
    DECLARE _failed_tests           integer                         = 0;
    DECLARE _list_of_failed_tests   text;
    DECLARE _started_from           TIMESTAMP WITHOUT TIME ZONE;
    DECLARE _completed_on           TIMESTAMP WITHOUT TIME ZONE;
    DECLARE _delta                  integer;
    DECLARE _ret_val                text                            = '';
    DECLARE _verbosity              text[]                          = 
                                    ARRAY['debug5', 'debug4', 'debug3', 'debug2', 'debug1', 'log', 'notice', 'warning', 'error', 'fatal', 'panic'];
BEGIN
    _started_from := clock_timestamp() AT TIME ZONE 'UTC';

    IF(format='teamcity') THEN
        RAISE INFO '##teamcity[testSuiteStarted name=''Plpgunit'' message=''Test started from : %'']', _started_from; 
    ELSE
        RAISE INFO 'Test started from : %', _started_from; 
    END IF;
    
    IF($1 > 11) THEN
        $1 := 9;
    END IF;
    
    EXECUTE 'SET CLIENT_MIN_MESSAGES TO ' || _verbosity[$1];
    RAISE WARNING 'CLIENT_MIN_MESSAGES set to : %' , _verbosity[$1];
    
    SELECT nextval('unit_tests.tests_test_id_seq') INTO _test_id;

    INSERT INTO unit_tests.tests(test_id)
    SELECT _test_id;

    FOR this IN
        SELECT 
            nspname AS ns_name,
            proname AS function_name
        FROM    pg_catalog.pg_namespace n
        JOIN    pg_catalog.pg_proc p
        ON      pronamespace = n.oid
        WHERE
            prorettype='test_result'::regtype::oid
        ORDER BY p.oid ASC
    LOOP
        BEGIN
            _status := false;
            _total_tests := _total_tests + 1;
            
            _function_name = this.ns_name|| '.' || this.function_name || '()';
            _sql := 'SELECT ' || _function_name || ';';
            
            RAISE NOTICE 'RUNNING TEST : %.', _function_name;

            IF(format='teamcity') THEN
                RAISE INFO '##teamcity[testStarted name=''%'' message=''%'']', _function_name, _started_from; 
            ELSE
                RAISE INFO 'Running test % : %', _function_name, _started_from; 
            END IF;
            
            EXECUTE _sql INTO _message;

            IF _message = '' THEN
                _status := true;

                IF(format='teamcity') THEN
                    RAISE INFO '##teamcity[testFinished name=''%'' message=''%'']', _function_name, clock_timestamp() AT TIME ZONE 'UTC'; 
                ELSE
                    RAISE INFO 'Passed % : %', _function_name, clock_timestamp() AT TIME ZONE 'UTC'; 
                END IF;
            ELSE
                IF(format='teamcity') THEN
                    RAISE INFO '##teamcity[testFailed name=''%'' message=''%'']', _function_name, _message; 
                    RAISE INFO '##teamcity[testFinished name=''%'' message=''%'']', _function_name, clock_timestamp() AT TIME ZONE 'UTC'; 
                ELSE
                    RAISE INFO 'Test failed % : %', _function_name, _message; 
                END IF;
            END IF;
            
            INSERT INTO unit_tests.test_details(test_id, function_name, message, status, ts)
            SELECT _test_id, _function_name, _message, _status, clock_timestamp();

            IF NOT _status THEN
                _failed_tests := _failed_tests + 1;         
                RAISE WARNING 'TEST % FAILED.', _function_name;
                RAISE WARNING 'REASON: %', _message;
            ELSE
                RAISE NOTICE 'TEST % COMPLETED WITHOUT ERRORS.', _function_name;
            END IF;

        EXCEPTION WHEN OTHERS THEN
            _message := 'ERR' || SQLSTATE || ': ' || SQLERRM;
            INSERT INTO unit_tests.test_details(test_id, function_name, message, status)
            SELECT _test_id, _function_name, _message, false;

            _failed_tests := _failed_tests + 1;         

            RAISE WARNING 'TEST % FAILED.', _function_name;
            RAISE WARNING 'REASON: %', _message;

            IF(format='teamcity') THEN
                RAISE INFO '##teamcity[testFailed name=''%'' message=''%'']', _function_name, _message; 
                RAISE INFO '##teamcity[testFinished name=''%'' message=''%'']', _function_name, clock_timestamp() AT TIME ZONE 'UTC'; 
            ELSE
                RAISE INFO 'Test failed % : %', _function_name, _message; 
            END IF;
        END;
    END LOOP;

    _completed_on := clock_timestamp() AT TIME ZONE 'UTC';
    _delta := extract(millisecond from _completed_on - _started_from)::integer;
    
    UPDATE unit_tests.tests
    SET total_tests = _total_tests, failed_tests = _failed_tests, completed_on = _completed_on
    WHERE test_id = _test_id;

    IF format='junit' THEN
        SELECT 
            '<?xml version="1.0" encoding="UTF-8"?>'||
            xmlelement
            (
                name testsuites,
                xmlelement
                (
                    name                    testsuite,
                    xmlattributes
                    (
                        'plpgunit'          AS name, 
                        t.total_tests       AS tests, 
                        t.failed_tests      AS failures, 
                        0                   AS errors, 
                        EXTRACT
                        (
                            EPOCH FROM t.completed_on - t.started_on
                        )                   AS time
                    ),
                    xmlagg
                    (
                        xmlelement
                        (
                            name testcase, 
                            xmlattributes
                            (
                                td.function_name
                                            AS name, 
                                EXTRACT
                                (
                                    EPOCH FROM td.ts - t.started_on
                                )           AS time
                            ),
                            CASE 
                                WHEN td.status=false 
                                THEN 
                                    xmlelement
                                    (
                                        name failure, 
                                        td.message
                                    ) 
                                END
                        )
                    )
                )
            ) INTO _ret_val
        FROM unit_tests.test_details td, unit_tests.tests t
        WHERE
            t.test_id=_test_id
        AND 
            td.test_id=t.test_id
        GROUP BY t.test_id;
    ELSE
        WITH failed_tests AS
        (
            SELECT row_number() OVER (ORDER BY id) AS id, 
                unit_tests.test_details.function_name,
                unit_tests.test_details.message
            FROM unit_tests.test_details 
            WHERE test_id = _test_id
            AND status= false
        )
        SELECT array_to_string(array_agg(f.id::text || '. ' || f.function_name || ' --> ' || f.message), E'\n') INTO _list_of_failed_tests 
        FROM failed_tests f;

        _ret_val := _ret_val ||  'Test completed on : ' || _completed_on::text || E' UTC. \nTotal test runtime: ' || _delta::text || E' ms.\n';
        _ret_val := _ret_val || E'\nTotal tests run : ' || COALESCE(_total_tests, '0')::text;
        _ret_val := _ret_val || E'.\nPassed tests    : ' || (COALESCE(_total_tests, '0') - COALESCE(_failed_tests, '0'))::text;
        _ret_val := _ret_val || E'.\nFailed tests    : ' || COALESCE(_failed_tests, '0')::text;
        _ret_val := _ret_val || E'.\n\nList of failed tests:\n' || '----------------------';
        _ret_val := _ret_val || E'\n' || COALESCE(_list_of_failed_tests, '<NULL>')::text;
        _ret_val := _ret_val || E'\n' || E'End of plpgunit test.\n\n';
    END IF;
    
    IF _failed_tests > 0 THEN
        _result := 'N';

        IF(format='teamcity') THEN
            RAISE INFO '##teamcity[testStarted name=''Result'']'; 
            RAISE INFO '##teamcity[testFailed name=''Result'' message=''%'']', REPLACE(_ret_val, E'\n', ' |n'); 
            RAISE INFO '##teamcity[testFinished name=''Result'']'; 
            RAISE INFO '##teamcity[testSuiteFinished name=''Plpgunit'' message=''%'']', REPLACE(_ret_val, E'\n', '|n'); 
        ELSE
            RAISE INFO '%', _ret_val;
        END IF;
    ELSE
        _result := 'Y';

        IF(format='teamcity') THEN
            RAISE INFO '##teamcity[testSuiteFinished name=''Plpgunit'' message=''%'']', REPLACE(_ret_val, E'\n', '|n'); 
        ELSE
            RAISE INFO '%', _ret_val;
        END IF;
    END IF;

    SET CLIENT_MIN_MESSAGES TO notice;
    
    RETURN QUERY SELECT _ret_val, _result;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS unit_tests.begin_junit(verbosity integer);
CREATE FUNCTION unit_tests.begin_junit(verbosity integer DEFAULT 9)
RETURNS TABLE(message text, result character(1))
AS
$$
BEGIN
    RETURN QUERY 
    SELECT * FROM unit_tests.begin($1, 'junit');
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/00.db core/plpgunit-privileges.sql --<--<--
REVOKE ALL ON SCHEMA assert FROM public;
REVOKE ALL ON SCHEMA unit_tests FROM public;

GRANT USAGE ON SCHEMA assert TO mix_erp;
GRANT USAGE ON SCHEMA unit_tests TO mix_erp;

ALTER DEFAULT PRIVILEGES IN SCHEMA assert GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;
ALTER DEFAULT PRIVILEGES IN SCHEMA unit_tests GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO mix_erp;

ALTER DEFAULT PRIVILEGES IN SCHEMA assert GRANT ALL ON SEQUENCES TO mix_erp;
ALTER DEFAULT PRIVILEGES IN SCHEMA unit_tests GRANT ALL ON SEQUENCES TO mix_erp;

ALTER DEFAULT PRIVILEGES IN SCHEMA assert GRANT EXECUTE ON FUNCTIONS TO mix_erp;
ALTER DEFAULT PRIVILEGES IN SCHEMA unit_tests GRANT EXECUTE ON FUNCTIONS TO mix_erp;

GRANT ALL PRIVILEGES ON SCHEMA unit_tests TO mix_erp;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA unit_tests TO mix_erp;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA unit_tests TO mix_erp;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA unit_tests TO mix_erp;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/01.types-domains-tables-and-constraints/tables-and-constraints.sql --<--<--
DO
$$
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM   pg_catalog.pg_class c
        JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
        WHERE  n.nspname = 'policy'
        AND    c.relname = 'http_actions'
        AND    c.relkind = 'r'
    ) THEN
        CREATE TABLE policy.http_actions
        (
            http_action_code                text NOT NULL PRIMARY KEY
        );

        CREATE UNIQUE INDEX policy_http_action_code_uix
        ON policy.http_actions(UPPER(http_action_code));    
    END IF;    
END
$$
LANGUAGE plpgsql;

DO
$$
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM   pg_catalog.pg_class c
        JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
        WHERE  n.nspname = 'policy'
        AND    c.relname = 'api_access_policy'
        AND    c.relkind = 'r'
    ) THEN
        CREATE TABLE policy.api_access_policy
        (
            api_access_policy_id            BIGSERIAL NOT NULL PRIMARY KEY,
            user_id                         integer NOT NULL REFERENCES office.users(user_id),
            office_id                       integer NOT NULL REFERENCES office.offices(office_id),
            poco_type_name                  text NOT NULL,
            http_action_code                text NOT NULL REFERENCES policy.http_actions(http_action_code),
            valid_till                      date NOT NULL,
            audit_user_id                   integer NULL REFERENCES office.users(user_id),
            audit_ts                        TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())    
        );

        CREATE UNIQUE INDEX api_access_policy_uix
        ON policy.api_access_policy(user_id, UPPER(poco_type_name), UPPER(http_action_code), valid_till);
    
    END IF;    
END
$$
LANGUAGE plpgsql;

DO
$$
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM   pg_catalog.pg_class c
        JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
        WHERE  n.nspname = 'core'
        AND    c.relname = 'recurrence_types'
        AND    c.relkind = 'r'
    ) THEN
        CREATE TABLE core.recurrence_types
        (
            recurrence_type_id              SERIAL NOT NULL PRIMARY KEY,
            recurrence_type_code            national character varying(12) NOT NULL,
            recurrence_type_name            national character varying(50) NOT NULL,
            is_frequency                    boolean NOT NULL,
            audit_user_id                   integer NULL REFERENCES office.users(user_id),
            audit_ts                        TIMESTAMP WITH TIME ZONE NULL 
                                            DEFAULT(NOW())            
        );
    END IF;    
END
$$
LANGUAGE plpgsql;




DROP TABLE IF EXISTS core.recurring_invoices_temp;
DROP TABLE IF EXISTS core.recurring_invoice_setup_temp;

CREATE TABLE core.recurring_invoices_temp
AS
SELECT * FROM core.recurring_invoices;

CREATE TABLE core.recurring_invoice_setup_temp
AS
SELECT * FROM core.recurring_invoice_setup;

DROP TABLE IF EXISTS core.recurring_invoices CASCADE;
DROP TABLE IF EXISTS core.recurring_invoice_setup CASCADE;

CREATE TABLE core.recurring_invoices
(
    recurring_invoice_id                        SERIAL NOT NULL PRIMARY KEY,
    recurring_invoice_code                      national character varying(12) NOT NULL,
    recurring_invoice_name                      national character varying(50) NOT NULL,
    item_id                                     integer NULL REFERENCES core.items(item_id),
    total_duration                              integer NOT NULL DEFAULT(365),
    recurrence_type_id                          integer REFERENCES core.recurrence_types(recurrence_type_id),
    recurring_frequency_id                      integer NOT NULL REFERENCES core.frequencies(frequency_id),
    recurring_duration                          public.integer_strict2 NOT NULL DEFAULT(30),
    recurs_on_same_calendar_date                boolean NOT NULL DEFAULT(true),
    recurring_amount                            public.money_strict NOT NULL,
    account_id                                  bigint REFERENCES core.accounts(account_id),
    payment_term_id                             integer NOT NULL REFERENCES core.payment_terms(payment_term_id),
    auto_trigger_on_sales                       boolean NOT NULL,
    is_active                                   boolean NOT NULL DEFAULT(true),
    statement_reference                         national character varying(100) NOT NULL DEFAULT(''),
    audit_user_id                               integer NULL REFERENCES office.users(user_id),
    audit_ts                                    TIMESTAMP WITH TIME ZONE NULL 
                                                DEFAULT(NOW())
);

CREATE UNIQUE INDEX recurring_invoices_item_id_auto_trigger_on_sales_uix
ON core.recurring_invoices(item_id, auto_trigger_on_sales)
WHERE auto_trigger_on_sales = true;

CREATE TABLE core.recurring_invoice_setup
(
    recurring_invoice_setup_id                  SERIAL NOT NULL PRIMARY KEY,
    recurring_invoice_id                        integer NOT NULL REFERENCES core.recurring_invoices(recurring_invoice_id),
    party_id                                    bigint NOT NULL REFERENCES core.parties(party_id),
    starts_from                                 date NOT NULL,
    ends_on                                     date NOT NULL
                                                CONSTRAINT recurring_invoice_setup_date_chk
                                                CHECK
                                                (
                                                    ends_on >= starts_from
                                                ),
    recurrence_type_id                          integer NOT NULL REFERENCES core.recurrence_types(recurrence_type_id),
    recurring_frequency_id                      integer NULL REFERENCES core.frequencies(frequency_id),
    recurring_duration                          public.integer_strict2 NOT NULL DEFAULT(0),
    recurs_on_same_calendar_date                boolean NOT NULL DEFAULT(true),
    recurring_amount                            public.money_strict NOT NULL,
    account_id                                  bigint REFERENCES core.accounts(account_id),
    payment_term_id                             integer NOT NULL REFERENCES core.payment_terms(payment_term_id),
    is_active                                   boolean NOT NULL DEFAULT(true),
    statement_reference                         national character varying(100) NOT NULL DEFAULT(''),
    audit_user_id                               integer NULL REFERENCES office.users(user_id),
    audit_ts                                    TIMESTAMP WITH TIME ZONE NULL 
                                                DEFAULT(NOW())    
    
);


INSERT INTO core.recurring_invoices
(
    recurring_invoice_id, 
    recurring_invoice_code, 
    recurring_invoice_name, 
    item_id, 
    recurring_frequency_id, 
    recurring_amount,
    auto_trigger_on_sales,
    payment_term_id,
    audit_user_id,
    audit_ts
)
SELECT
    recurring_invoice_id, 
    recurring_invoice_code, 
    recurring_invoice_name, 
    item_id, 
    COALESCE(recurring_frequency_id, 2), 
    recurring_amount,
    auto_trigger_on_sales,
    core.get_payment_term_id_by_payment_term_code('07-D'),
    audit_user_id,
    audit_ts
FROM core.recurring_invoices_temp;

SELECT setval
(
    pg_get_serial_sequence('core.recurring_invoices', 'recurring_invoice_id'), 
    (SELECT MAX(recurring_invoice_id) FROM core.recurring_invoices) + 1
); 


INSERT INTO core.recurring_invoice_setup
(
    recurring_invoice_setup_id,
    recurring_invoice_id,
    party_id,
    starts_from,
    ends_on,
    recurring_amount,
    payment_term_id,
    audit_user_id,
    audit_ts
)
SELECT
    recurring_invoice_setup_id,
    recurring_invoice_id,
    party_id,
    starts_from,
    ends_on,
    recurring_amount,
    payment_term_id,
    audit_user_id,
    audit_ts
FROM core.recurring_invoice_setup_temp;

UPDATE core.recurring_invoices
SET account_id = core.get_account_id_by_account_number('30100');

UPDATE core.recurring_invoice_setup
SET account_id = core.get_account_id_by_account_number('30100');

ALTER TABLE core.recurring_invoices
ALTER COLUMN account_id SET NOT NULL;

ALTER TABLE core.recurring_invoice_setup
ALTER COLUMN account_id SET NOT NULL;

SELECT setval
(
    pg_get_serial_sequence('core.recurring_invoice_setup', 'recurring_invoice_setup_id'), 
    (SELECT MAX(recurring_invoice_setup_id) FROM core.recurring_invoice_setup) + 1
); 

DROP TABLE IF EXISTS core.recurring_invoices_temp;
DROP TABLE IF EXISTS core.recurring_invoice_setup_temp;

DO
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'core.bonus_slabs'::regclass
        AND    attname = 'account_id'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE core.bonus_slabs
        ADD COLUMN account_id bigint NOT NULL 
        REFERENCES core.accounts(account_id);
    END IF;

    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'core.bonus_slabs'::regclass
        AND    attname = 'statement_reference'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE core.bonus_slabs
        ADD COLUMN statement_reference national character varying(100) NOT NULL DEFAULT('');
    END IF;

    ALTER TABLE transactions.transaction_master
    ALTER COLUMN login_id DROP NOT NULL;
END
$$
LANGUAGE plpgsql;

DO
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'transactions.stock_master'::regclass
        AND    attname = 'credit_settled'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE transactions.stock_master
        ADD COLUMN credit_settled boolean DEFAULT(false);

        CREATE INDEX stock_master_credit_settled_inx
        ON transactions.stock_master(credit_settled);
    END IF;

    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'transactions.transaction_master'::regclass
        AND    attname = 'cascading_tran_id'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE transactions.transaction_master
        ADD COLUMN cascading_tran_id bigint NULL
        REFERENCES transactions.transaction_master(transaction_master_id);

        CREATE INDEX transaction_master_cascading_tran_id_inx
        ON transactions.transaction_master(cascading_tran_id);
    END IF;
END
$$
LANGUAGE plpgsql;

UPDATE core.payment_terms
SET late_fee_posting_frequency_id = due_frequency_id
WHERE late_fee_posting_frequency_id IS NOT NULL
AND due_frequency_id IS NOT NULL
AND late_fee_posting_frequency_id < due_frequency_id;

ALTER TABLE core.payment_terms
DROP CONSTRAINT IF EXISTS payment_terms_late_fee_posting_frequency_id_chk;

ALTER TABLE core.payment_terms
ADD CONSTRAINT payment_terms_late_fee_posting_frequency_id_chk
CHECK(late_fee_posting_frequency_id IS NULL OR late_fee_posting_frequency_id >= due_frequency_id);

DO
$$
BEGIN
    IF EXISTS
    (
        SELECT TRUE
        FROM   pg_attribute 
        WHERE  attrelid = 'core.payment_terms'::regclass
        AND    attname = 'grace_peiod'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE core.payment_terms
        RENAME COLUMN grace_peiod TO grace_period;
    END IF;
END
$$
LANGUAGE plpgsql;

DO
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'core.late_fee'::regclass
        AND    attname = 'account_id'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE core.late_fee
        ADD COLUMN account_id bigint NULL 
        REFERENCES core.accounts(account_id);
        
        UPDATE core.late_fee
        SET account_id = core.get_account_id_by_account_number('30300')
        WHERE account_id IS NULL;
        
        ALTER TABLE core.late_fee
        ALTER COLUMN account_id SET NOT NULL;
    END IF;
END
$$
LANGUAGE plpgsql;

DO
$$
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM   pg_catalog.pg_class c
        JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
        WHERE  n.nspname = 'transactions'
        AND    c.relname = 'late_fee'
        AND    c.relkind = 'r'
    ) THEN
        CREATE TABLE transactions.late_fee
        (
            transaction_master_id               bigint PRIMARY KEY REFERENCES transactions.transaction_master(transaction_master_id),
            party_id                            bigint NOT NULL REFERENCES core.parties(party_id),
            value_date                          date NOT NULL,
            late_fee_tran_id                    bigint NOT NULL REFERENCES transactions.transaction_master(transaction_master_id),
            amount                              public.money_strict
        );
    END IF;    
END
$$
LANGUAGE plpgsql;
 
DO
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'office.offices'::regclass
        AND    attname = 'income_tax_rate'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE office.offices
        ADD COLUMN income_tax_rate public.decimal_strict2 NOT NULL
        DEFAULT(0);
    END IF;
END
$$
LANGUAGE plpgsql;

ALTER TABLE core.parties
ALTER COLUMN party_name SET NOT NULL;

DO
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'policy.voucher_verification_policy'::regclass
        AND    attname = 'office_id'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE policy.voucher_verification_policy
        ADD COLUMN office_id integer
        REFERENCES office.offices(office_id);
    END IF;

    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'policy.auto_verification_policy'::regclass
        AND    attname = 'office_id'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE policy.auto_verification_policy
        ADD COLUMN office_id integer
        REFERENCES office.offices(office_id);
    END IF;
    
    UPDATE policy.voucher_verification_policy
    SET office_id = (SELECT office_id FROM office.offices LIMIT 1)
    WHERE office_id IS NULL;

    UPDATE policy.auto_verification_policy
    SET office_id = (SELECT office_id FROM office.offices LIMIT 1)
    WHERE office_id IS NULL;

    ALTER TABLE policy.voucher_verification_policy
    ALTER COLUMN office_id SET NOT NULL;

    ALTER TABLE policy.auto_verification_policy
    ALTER COLUMN office_id SET NOT NULL;    
END
$$
LANGUAGE plpgsql;


DO
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'core.bank_accounts'::regclass
        AND    attname = 'is_merchant_account'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE core.bank_accounts
        ADD COLUMN is_merchant_account boolean NOT NULL DEFAULT(false);
    END IF;
END
$$
LANGUAGE plpgsql;


DO
$$
BEGIN
    IF NOT EXISTS (
        SELECT 1 
        FROM   pg_catalog.pg_class c
        JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
        WHERE  n.nspname = 'core'
        AND    c.relname = 'card_types'
        AND    c.relkind = 'r'
    ) THEN
        CREATE TABLE core.card_types
        (
            card_type_id                    integer PRIMARY KEY,
            card_type_code                  national character varying(12) NOT NULL,
            card_type_name                  national character varying(100) NOT NULL
        );

        CREATE UNIQUE INDEX card_types_card_type_code_uix
        ON core.card_types(UPPER(card_type_code));

        CREATE UNIQUE INDEX card_types_card_type_name_uix
        ON core.card_types(UPPER(card_type_name));
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 
        FROM   pg_catalog.pg_class c
        JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
        WHERE  n.nspname = 'core'
        AND    c.relname = 'payment_cards'
        AND    c.relkind = 'r'
    ) THEN
        CREATE TABLE core.payment_cards
        (
            payment_card_id                     SERIAL NOT NULL PRIMARY KEY,
            payment_card_code                   national character varying(12) NOT NULL,
            payment_card_name                   national character varying(100) NOT NULL,
            card_type_id                        integer NOT NULL REFERENCES core.card_types(card_type_id),            
            audit_user_id                       integer NULL REFERENCES office.users(user_id),            
            audit_ts                            TIMESTAMP WITH TIME ZONE NULL 
                                                DEFAULT(NOW())            
        );

        CREATE UNIQUE INDEX payment_cards_payment_card_code_uix
        ON core.payment_cards(UPPER(payment_card_code));

        CREATE UNIQUE INDEX payment_cards_payment_card_name_uix
        ON core.payment_cards(UPPER(payment_card_name));    
    END IF;

    IF NOT EXISTS (
        SELECT 1 
        FROM   pg_catalog.pg_class c
        JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
        WHERE  n.nspname = 'core'
        AND    c.relname = 'payment_cards'
        AND    c.relkind = 'r'
    ) THEN
        CREATE TABLE core.payment_cards
        (
            payment_card_id                     SERIAL NOT NULL PRIMARY KEY,
            payment_card_code                   national character varying(12) NOT NULL,
            payment_card_name                   national character varying(100) NOT NULL,
            card_type_id                        integer NOT NULL REFERENCES core.card_types(card_type_id),            
            audit_user_id                       integer NULL REFERENCES office.users(user_id),            
            audit_ts                            TIMESTAMP WITH TIME ZONE NULL 
                                                DEFAULT(NOW())            
        );

        CREATE UNIQUE INDEX payment_cards_payment_card_code_uix
        ON core.payment_cards(UPPER(payment_card_code));

        CREATE UNIQUE INDEX payment_cards_payment_card_name_uix
        ON core.payment_cards(UPPER(payment_card_name));    
    END IF;

    IF NOT EXISTS (
        SELECT 1 
        FROM   pg_catalog.pg_class c
        JOIN   pg_catalog.pg_namespace n ON n.oid = c.relnamespace
        WHERE  n.nspname = 'core'
        AND    c.relname = 'merchant_fee_setup'
        AND    c.relkind = 'r'
    ) THEN
        CREATE TABLE core.merchant_fee_setup
        (
            merchant_fee_setup_id               SERIAL NOT NULL PRIMARY KEY,
            merchant_account_id                 bigint NOT NULL REFERENCES core.bank_accounts(account_id),
            payment_card_id                     integer NOT NULL REFERENCES core.payment_cards(payment_card_id),
            rate                                public.decimal_strict NOT NULL,
            customer_pays_fee                   boolean NOT NULL DEFAULT(false),
            account_id                          bigint NOT NULL REFERENCES core.accounts(account_id),
            statement_reference                 national character varying(128) NOT NULL DEFAULT(''),
            audit_user_id                       integer NULL REFERENCES office.users(user_id),            
            audit_ts                            TIMESTAMP WITH TIME ZONE NULL 
                                                DEFAULT(NOW())            
        );

        CREATE UNIQUE INDEX merchant_fee_setup_merchant_account_id_payment_card_id_uix
        ON core.merchant_fee_setup(merchant_account_id, payment_card_id);
    END IF;    
END
$$
LANGUAGE plpgsql;

ALTER TABLE core.item_cost_prices
DROP COLUMN IF EXISTS includes_tax;

ALTER TABLE core.items
DROP COLUMN IF EXISTS cost_price_includes_tax CASCADE;

DO
$$
BEGIN
    IF EXISTS
    (
        SELECT * FROM information_schema.check_constraints
        WHERE constraint_name = 'payment_terms_check'
    ) THEN
        ALTER TABLE core.payment_terms
        RENAME CONSTRAINT payment_terms_check TO payment_terms_chk;
    END IF;
END
$$
LANGUAGE plpgsql;


ALTER TABLE core.ageing_slabs
DROP CONSTRAINT IF EXISTS ageing_slabs_to_days_check;

DROP VIEW IF EXISTS core.ageing_slab_scrud_view;

ALTER TABLE core.ageing_slabs
ALTER COLUMN to_days TYPE public.integer_strict2;


DO
$$
BEGIN
    IF EXISTS
    (
        SELECT TRUE
        FROM   pg_attribute 
        WHERE  attrelid = 'localization.resources'::regclass
        AND    attname = 'path'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE localization.resources
        RENAME COLUMN path TO resource_class;
    END IF;
END
$$
LANGUAGE plpgsql;

DROP TABLE IF EXISTS localization.localized_resources CASCADE;

CREATE TABLE localization.localized_resources
(
    resource_id             integer NOT NULL REFERENCES localization.resources(resource_id),
    culture_code            text NOT NULL REFERENCES localization.cultures(culture_code),
    value                   text NOT NULL
);

CREATE UNIQUE INDEX localized_resources_culture_key_uix
ON localization.localized_resources
(resource_id, UPPER(culture_code));

DO
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'transactions.transaction_master'::regclass
        AND    attname = 'book_date'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE transactions.transaction_master
        ADD COLUMN book_date date NOT NULL DEFAULT(NOW());
    END IF;
END
$$
LANGUAGE plpgsql;

DROP INDEX IF EXISTS core.compound_units_base_unit_id_uix;

CREATE UNIQUE INDEX compound_units_base_unit_id_uix
ON core.compound_units(base_unit_id);

DO
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT 1
        FROM   pg_attribute 
        WHERE  attrelid = 'core.compound_item_details'::regclass
        AND    attname = 'discount'
        AND    NOT attisdropped
    ) THEN
        ALTER TABLE core.compound_item_details
        ADD COLUMN discount public.money_strict2 NOT NULL DEFAULT(0);
    END IF;
END
$$
LANGUAGE plpgsql;


DROP INDEX IF EXISTS core.item_cost_price_id_uix;

CREATE UNIQUE INDEX item_cost_price_id_uix
ON core.item_cost_prices(item_id,unit_id);


DROP INDEX IF EXISTS core.item_selling_price_id_uix;

CREATE UNIQUE INDEX item_selling_price_id_uix
ON core.item_selling_prices(item_id,unit_id,price_type_id);

ALTER TABLE transactions.non_gl_stock_master
ALTER COLUMN party_id SET NOT NULL;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/audit/audit.get_office_id_by_login_id.sql --<--<--
DROP FUNCTION IF EXISTS audit.get_office_id_by_login_id(bigint);

CREATE FUNCTION audit.get_office_id_by_login_id(bigint)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN office_id
    FROM audit.logins
    WHERE login_id=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/audit/audit.get_user_id_by_login_id.sql --<--<--
DROP FUNCTION IF EXISTS audit.get_user_id_by_login_id(bigint);

CREATE FUNCTION audit.get_user_id_by_login_id(bigint)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN user_id
    FROM audit.logins
    WHERE login_id=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.create_menu.sql --<--<--
DROP FUNCTION IF EXISTS core.create_menu
(
    _menu_text          text,
    _url                text,
    _menu_code          text,
    _level              integer,
    _parent_menu_id     integer
);

CREATE FUNCTION core.create_menu
(
    _menu_text          text,
    _url                text,
    _menu_code          text,
    _level              integer,
    _parent_menu_id     integer
)
RETURNS void
VOLATILE
AS
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT * FROM core.menus
        WHERE menu_code = _menu_code
    ) THEN
        INSERT INTO core.menus(menu_text, url, menu_code, level, parent_menu_id)
        SELECT _menu_text, _url, _menu_code, _level, _parent_menu_id;
    END IF;

    UPDATE core.menus
    SET 
        menu_text       = _menu_text, 
        url             = _url, 
        level           = _level,
        parent_menu_id  = _parent_menu_id
    WHERE menu_code=_menu_code;    
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.create_menu_locale.sql --<--<--
DROP FUNCTION IF EXISTS core.create_menu_locale
(
    _menu_id            integer,
    _culture            text,
    _menu_text          text
);

CREATE FUNCTION core.create_menu_locale
(
    _menu_id            integer,
    _culture            text,
    _menu_text          text
)
RETURNS void
VOLATILE
AS
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT * FROM core.menu_locale
        WHERE menu_id = _menu_id
        AND culture = _culture
    ) THEN
        INSERT INTO core.menu_locale(menu_id, culture, menu_text)
        SELECT _menu_id, _culture, _menu_text;
    END IF;

    UPDATE core.menu_locale
    SET
        menu_text       = _menu_text
    WHERE menu_id = _menu_id
    AND culture = _culture;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_attachment_lookup_info.sql --<--<--
DROP FUNCTION IF EXISTS core.get_attachment_lookup_info(national character varying(50));

CREATE FUNCTION core.get_attachment_lookup_info(_book national character varying(50))
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN resource || resource_key
    FROM core.attachment_lookup
    WHERE book=$1;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_country_id_by_country_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_country_id_by_country_code(national character varying(12));

CREATE FUNCTION core.get_country_id_by_country_code(_country_code national character varying(12))
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN country_id
    FROM core.countries
    WHERE country_code = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_county_id_by_county_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_county_id_by_county_code(national character varying(12));

CREATE FUNCTION core.get_county_id_by_county_code(_county_code national character varying(12))
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN county_id
    FROM core.counties
    WHERE county_code = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_frequency_setup_end_date_frequency_setup_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_frequency_setup_end_date_frequency_setup_id(_frequency_setup_id integer);
DROP FUNCTION IF EXISTS core.get_frequency_setup_end_date_by_frequency_setup_id(_frequency_setup_id integer);
CREATE FUNCTION core.get_frequency_setup_end_date_by_frequency_setup_id(_frequency_setup_id integer)
RETURNS date
AS
$$
BEGIN
    RETURN
        value_date
    FROM
        core.frequency_setups
    WHERE
        frequency_setup_id = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_frequency_setup_start_date_frequency_setup_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_frequency_setup_start_date_frequency_setup_id(_frequency_setup_id integer);
DROP FUNCTION IF EXISTS core.get_frequency_setup_start_date_by_frequency_setup_id(_frequency_setup_id integer);
CREATE FUNCTION core.get_frequency_setup_start_date_by_frequency_setup_id(_frequency_setup_id integer)
RETURNS date
AS
$$
    DECLARE _start_date date;
BEGIN
    SELECT MAX(value_date) + 1 
    INTO _start_date
    FROM core.frequency_setups
    WHERE value_date < 
    (
        SELECT value_date
        FROM core.frequency_setups
        WHERE frequency_setup_id = $1
    );

    IF(_start_date IS NULL) THEN
        SELECT starts_from 
        INTO _start_date
        FROM core.fiscal_year;
    END IF;

    RETURN _start_date;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_income_tax_provison_amount.sql --<--<--
DROP FUNCTION IF EXISTS core.get_income_tax_provison_amount(_office_id integer, _profit  decimal(24, 4), _balance  decimal(24, 4));

CREATE FUNCTION core.get_income_tax_provison_amount(_office_id integer, _profit decimal(24, 4), _balance decimal(24, 4))
RETURNS  decimal(24, 4)
AS
$$
    DECLARE _rate real;
BEGIN
    _rate := office.get_income_tax_rate(_office_id);

    RETURN
    (
        (_profit * _rate/100) - _balance
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_item_cost_price.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_cost_price(integer, integer, bigint);
CREATE FUNCTION core.get_item_cost_price(item_id_ integer, unit_id_ integer, party_id_ bigint)
RETURNS public.money_strict2
AS
$$
    DECLARE _price public.money_strict2;
    DECLARE _unit_id integer;
    DECLARE _factor decimal;
   
BEGIN
    --Fist pick the catalog price which matches all these fields:
    --Item, Unit, and Supplier.
    --This is the most effective price.
    SELECT 
        item_cost_prices.price, 
        item_cost_prices.unit_id
       INTO 
        _price, 
        _unit_id
           FROM core.item_cost_prices
    WHERE item_cost_prices.item_id = $1
    AND item_cost_prices.unit_id = $2
    AND item_cost_prices.party_id =$3;

    IF(_unit_id IS NULL) THEN
        --We do not have a cost price of this item for the unit supplied.
        --Let's see if this item has a price for other units.
        SELECT 
            item_cost_prices.price, 
            item_cost_prices.unit_id
        INTO 
            _price, 
            _unit_id
                   FROM core.item_cost_prices
        WHERE item_cost_prices.item_id=$1
        AND item_cost_prices.party_id =$3;
    END IF;

    
    IF(_price IS NULL) THEN
        --This item does not have cost price defined in the catalog.
        --Therefore, getting the default cost price from the item definition.
        SELECT 
            cost_price, 
            unit_id
        INTO 
            _price, 
            _unit_id
        FROM core.items
        WHERE core.items.item_id = $1;
    END IF;

       --Get the unitary conversion factor if the requested unit does not match with the price defition.
    _factor := core.convert_unit($2, _unit_id);

    RETURN _price * _factor;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_menu_id_by_menu_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_menu_id_by_menu_code(national character varying(250));

CREATE FUNCTION core.get_menu_id_by_menu_code(_menu_code national character varying(250))
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN menu_id
    FROM core.menus
    WHERE menu_code=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_party_code_by_party_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_party_code_by_party_id(bigint);

CREATE FUNCTION core.get_party_code_by_party_id(bigint)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT
            party_code
        FROM
            core.parties
        WHERE 
            core.parties.party_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_party_name_by_party_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_party_name_by_party_id(bigint);

CREATE FUNCTION core.get_party_name_by_party_id(bigint)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT
            party_name
        FROM
            core.parties
        WHERE 
            core.parties.party_id=$1
    );
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_recurrence_type_id_by_recurrence_type_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_recurrence_type_id_by_recurrence_type_code(text);

CREATE FUNCTION core.get_recurrence_type_id_by_recurrence_type_code(text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN recurrence_type_id
    FROM core.recurrence_types
    WHERE recurrence_type_code = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/core/core.get_state_id_by_state_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_state_id_by_state_code(national character varying(12));

CREATE FUNCTION core.get_state_id_by_state_code(_state_code national character varying(12))
RETURNS integer
AS
$$
BEGIN
    RETURN
        state_id
    FROM
        core.states
    WHERE
        state_code = $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/localization/localization.add_localized_resource.sql --<--<--
DROP FUNCTION IF EXISTS localization.add_localized_resource
(
    _culture_code    text,
    _key             text,
    _value           text
);

DROP FUNCTION IF EXISTS localization.add_localized_resource
(
    _resource_class  text,
    _culture_code    text,
    _key             text,
    _value           text
);

CREATE FUNCTION localization.add_localized_resource
(
    _resource_class  text,
    _culture_code    text,
    _key             text,
    _value           text
)
RETURNS void 
VOLATILE
AS
$$
    DECLARE _resource_id    integer;
BEGIN
    IF(COALESCE(_culture_code, '') = '') THEN
        PERFORM localization.add_resource(_resource_class, _key, _value);
        RETURN;
    END IF;

    SELECT resource_id INTO _resource_id
    FROM localization.resources
    WHERE resource_class = _resource_class
    AND key = _key;

    IF EXISTS
    (
        SELECT 1 FROM localization.localized_resources 
        WHERE localization.localized_resources.resource_id=_resource_id
        AND culture_code = _culture_code
    ) THEN
        UPDATE localization.localized_resources
        SET value=_value
        WHERE localization.localized_resources.resource_id=_resource_id
        AND culture_code = _culture_code;

        RETURN;
    END IF;

    INSERT INTO localization.localized_resources(resource_id, culture_code, value)
    SELECT _resource_id, _culture_code, _value;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/localization/localization.add_resource.sql --<--<--
DROP FUNCTION IF EXISTS localization.add_resource
(
    resource_class  text,
    key             text,
    value           text
);

CREATE OR REPLACE FUNCTION localization.add_resource
(
    resource_class  text,
    key             text,
    value           text
)
RETURNS void 
VOLATILE
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM localization.resources WHERE localization.resources.resource_class=$1 AND localization.resources.key=$2) THEN
        INSERT INTO localization.resources(resource_class, key, value)
        SELECT $1, $2, $3;
    END IF;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/localization/localization.create_culture.sql --<--<--
DROP FUNCTION IF EXISTS localization.create_culture
(
    _culture_code text,
    _culture_name text
);

CREATE FUNCTION localization.create_culture
(
    _culture_code text,
    _culture_name text
)
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT * FROM localization.cultures
        WHERE culture_code = _culture_code
    ) THEN
        INSERT INTO localization.cultures(culture_code, culture_name)
        SELECT _culture_code, _culture_name;
    END IF;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.append_if_not_null.sql --<--<--
DROP FUNCTION IF EXISTS core.append_if_not_null(text, text);

CREATE FUNCTION core.append_if_not_null(_source text, _to_append text)
RETURNS text
IMMUTABLE
AS
$$
BEGIN
	IF($1 IS NULL) THEN
	    RETURN '';
	END IF;

	RETURN $1 || $2;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.cast_frequency.sql --<--<--
DROP FUNCTION IF EXISTS core.cast_frequency(_frequency_code text) CASCADE;

CREATE FUNCTION core.cast_frequency(_frequency_code text)
RETURNS integer
IMMUTABLE
AS
$$
BEGIN
    IF(UPPER($1) = 'EOM') THEN
        RETURN 2;
    END IF;
    IF(UPPER($1) = 'EOQ') THEN
        RETURN 3;
    END IF;
    IF(UPPER($1) = 'EOH') THEN
        RETURN 4;
    END IF;
    IF(UPPER($1) = 'EOY') THEN
        RETURN 5;
    END IF;

    RETURN NULL;
END
$$
LANGUAGE plpgsql;

CREATE CAST (text as integer)
WITH FUNCTION core.cast_frequency(text) AS ASSIGNMENT;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.count_purchases.sql --<--<--
DROP FUNCTION IF EXISTS core.count_purchases(_item_id integer, _unit_id integer, _store_id integer);

CREATE FUNCTION core.count_purchases(_item_id integer, _unit_id integer, _store_id integer)
RETURNS decimal
STABLE
AS
$$
        DECLARE _base_unit_id integer;
        DECLARE _debit decimal;
        DECLARE _factor decimal;
BEGIN
    --Get the base item unit
    SELECT 
        core.get_root_unit_id(core.items.unit_id) 
    INTO _base_unit_id
    FROM core.items
    WHERE core.items.item_id=$1;

    SELECT
        COALESCE(SUM(base_quantity), 0)
    INTO _debit
    FROM transactions.stock_details
    INNER JOIN transactions.stock_master
    ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
    INNER JOIN transactions.transaction_master
    ON transactions.stock_master.transaction_master_id = transactions.transaction_master.transaction_master_id
    WHERE transactions.transaction_master.verification_status_id > 0
    AND transactions.stock_details.item_id=$1
    AND transactions.stock_details.store_id=$3
    AND transactions.stock_details.tran_type='Dr';

    _factor = core.convert_unit(_base_unit_id, $2);    
    RETURN _debit * _factor;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.count_sales.sql --<--<--
DROP FUNCTION IF EXISTS core.count_sales(_item_id integer, _unit_id integer, _store_id integer);
CREATE FUNCTION core.count_sales(_item_id integer, _unit_id integer, _store_id integer)
RETURNS decimal
STABLE
AS
$$
        DECLARE _base_unit_id integer;
        DECLARE _credit decimal;
        DECLARE _factor decimal;
BEGIN
    --Get the base item unit
    SELECT 
        core.get_root_unit_id(core.items.unit_id) 
    INTO _base_unit_id
    FROM core.items
    WHERE core.items.item_id=$1;

    SELECT 
        COALESCE(SUM(base_quantity), 0)
    INTO _credit
    FROM transactions.stock_details
    INNER JOIN transactions.stock_master
    ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
    INNER JOIN transactions.transaction_master
    ON transactions.stock_master.transaction_master_id = transactions.transaction_master.transaction_master_id
    WHERE transactions.transaction_master.verification_status_id > 0
    AND transactions.stock_details.item_id=$1
    AND transactions.stock_details.store_id=$3
    AND transactions.stock_details.tran_type='Cr';

    _factor = core.convert_unit(_base_unit_id, $2);
    RETURN _credit * _factor;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.create_card_type.sql --<--<--
DROP FUNCTION IF EXISTS core.create_card_type
(
    _card_type_id       integer, 
    _card_type_code     national character varying(12),
    _card_type_name     national character varying(100)
);

CREATE FUNCTION core.create_card_type
(
    _card_type_id       integer, 
    _card_type_code     national character varying(12),
    _card_type_name     national character varying(100)
)
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT * FROM core.card_types
        WHERE card_type_id = _card_type_id
    ) THEN
        INSERT INTO core.card_types(card_type_id, card_type_code, card_type_name)
        SELECT _card_type_id, _card_type_code, _card_type_name;
    ELSE
        UPDATE core.card_types
        SET 
            card_type_id =      _card_type_id, 
            card_type_code =    _card_type_code, 
            card_type_name =    _card_type_name
        WHERE
            card_type_id =      _card_type_id;
    END IF;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.create_payment_card.sql --<--<--
DROP FUNCTION IF EXISTS core.create_payment_card
(
    _payment_card_code      national character varying(12),
    _payment_card_name      national character varying(100),
    _card_type_id           integer
);

CREATE FUNCTION core.create_payment_card
(
    _payment_card_code      national character varying(12),
    _payment_card_name      national character varying(100),
    _card_type_id           integer
)
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS
    (
        SELECT * FROM core.payment_cards
        WHERE payment_card_code = _payment_card_code
    ) THEN
        INSERT INTO core.payment_cards(payment_card_code, payment_card_name, card_type_id)
        SELECT _payment_card_code, _payment_card_name, _card_type_id;
    ELSE
        UPDATE core.payment_cards
        SET 
            payment_card_code =     _payment_card_code, 
            payment_card_name =     _payment_card_name,
            card_type_id =          _card_type_id
        WHERE
            payment_card_code =     _payment_card_code;
    END IF;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_account_id_by_account_number.sql --<--<--
CREATE OR REPLACE FUNCTION core.get_account_id_by_account_number(_account_number text)
RETURNS bigint
STABLE
AS
$$
BEGIN
    RETURN
		account_id
    FROM core.accounts
    WHERE account_number=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_account_id_by_shipper_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_account_id_by_shipper_id(integer);

CREATE FUNCTION core.get_account_id_by_shipper_id(_shipper_id integer)
RETURNS bigint
STABLE
AS
$$
BEGIN
    RETURN
        core.shippers.account_id
    FROM
        core.shippers
    WHERE
        core.shippers.shipper_id=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_account_master_id_by_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_account_master_id_by_account_id(bigint) CASCADE;

CREATE FUNCTION core.get_account_master_id_by_account_id(_account_id bigint)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN core.accounts.account_master_id
    FROM core.accounts
    WHERE core.accounts.account_id= $1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_account_master_id_by_account_master_code.sql --<--<--
DROP FUNCTION IF EXISTS core.get_account_master_id_by_account_master_code(text);

CREATE FUNCTION core.get_account_master_id_by_account_master_code(_account_master_code text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN core.account_masters.account_master_id
    FROM core.account_masters
    WHERE core.account_masters.account_master_code = $1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_account_name_by_account_id.sql --<--<--
DROP FUNCTION IF EXISTS core.get_account_name_by_account_id(bigint);

CREATE FUNCTION core.get_account_name_by_account_id(_account_id bigint)
RETURNS text
STABLE
AS
$$
BEGIN
    RETURN account_name
    FROM core.accounts
    WHERE account_id=$1;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_compound_item_details.sql --<--<--
DROP FUNCTION IF EXISTS core.get_compound_item_details
(
    _compound_item_code         national character varying(12),
    _sales_tax_code             national character varying(24),
    _tran_book                  national character varying(48),
    _store_id                   integer,
    _party_code                 national character varying(12),
    _price_type_id              integer    
);

CREATE FUNCTION core.get_compound_item_details
(
    _compound_item_code         national character varying(12),
    _sales_tax_code             national character varying(24),
    _tran_book                  national character varying(48),
    _store_id                   integer,
    _party_code                 national character varying(12),
    _price_type_id              integer    
)
RETURNS TABLE
(
    id                          integer,
    item_id                     integer,
    item_code                   text,
    item_name                   text,
    quantity                    public.integer_strict,
    unit_id                     integer,
    unit_name                   text,
    price                       public.money_strict2,
    discount                    public.money_strict2,
    sales_tax_id                integer,
    sales_tax_code              text,
    computed_tax                public.money_strict2
)
AS
$$
    DECLARE this                RECORD;
BEGIN
    DROP TABLE IF EXISTS temp_details;

    CREATE TEMPORARY TABLE temp_details
    (
        id                          SERIAL NOT NULL,
        item_id                     integer,
        item_code                   text,
        item_name                   text,
        quantity                    public.integer_strict,
        unit_id                     integer,
        unit_name                   text,
        price                       public.money_strict2,
        discount                    public.money_strict2,
        sales_tax_id                integer,
        sales_tax_code              text,
        computed_tax                public.money_strict2
    ) ON COMMIT DROP;
    
    INSERT INTO temp_details(item_id, quantity, unit_id, price, discount, sales_tax_code)
    SELECT 
        core.compound_item_details.item_id, 
        core.compound_item_details.quantity, 
        core.compound_item_details.unit_id, 
        core.compound_item_details.price, 
        core.compound_item_details.discount,
        _sales_tax_code
    FROM core.compound_item_details
    INNER JOIN core.compound_items
    ON core.compound_items.compound_item_id = core.compound_item_details.compound_item_id
    WHERE compound_item_code = _compound_item_code;

    UPDATE temp_details
    SET 
        item_code = core.items.item_code,
        item_name = core.items.item_name
    FROM core.items
    WHERE temp_details.item_id = core.items.item_id;

    UPDATE temp_details
    SET
        sales_tax_id = core.sales_taxes.sales_tax_id
    FROM core.sales_taxes
    WHERE temp_details.sales_tax_code = core.sales_taxes.sales_tax_code;

    UPDATE temp_details
    SET
        unit_name = core.units.unit_name
    FROM core.units
    WHERE temp_details.unit_id = core.units.unit_id;


    FOR this IN
    SELECT * FROM temp_details
    LOOP
        UPDATE temp_details
        SET computed_tax = 
        (
            SELECT COALESCE(SUM(tax), 0) 
            FROM transactions.get_sales_tax
            (
                _tran_book, 
                _store_id, 
                _party_code, 
                '', 
                _price_type_id, 
                this.item_code, 
                this.price, 
                this.quantity, 
                this.discount, 
                0, 
                this.sales_tax_id
            )
        )
        WHERE temp_details.id = this.id;
    END LOOP;
    
    RETURN QUERY
    SELECT * FROM temp_details;
END
$$
LANGUAGE plpgsql;


--SELECT * FROM core.get_compound_item_details('APP', 'MoF-NY-BK-STX', 'Sales', 1, 'JASMI-0002', 1);



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_field.sql --<--<--
DROP FUNCTION IF EXISTS core.get_field(this public.hstore, _column_name text);

CREATE FUNCTION core.get_field(_hstore public.hstore, _column_name text)
RETURNS text
AS
$$
   DECLARE _field_value text;
BEGIN
    _field_value := _hstore->_column_name;
    RETURN _field_value;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_frequency_end_date.sql --<--<--
DROP FUNCTION IF EXISTS core.get_frequency_end_date(_frequency_id integer, _value_date date);

CREATE FUNCTION core.get_frequency_end_date(_frequency_id integer, _value_date date)
RETURNS date
STABLE
AS
$$
    DECLARE _end_date date;
BEGIN
    SELECT MIN(value_date)
    INTO _end_date
    FROM core.frequency_setups
    WHERE value_date > $2
    AND frequency_id = ANY(core.get_frequencies($1));

    RETURN _end_date;
END
$$
LANGUAGE plpgsql;


--SELECT * FROM core.get_frequency_end_date(2, transactions.get_value_date(2));

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_frequency_start_date.sql --<--<--
DROP FUNCTION IF EXISTS core.get_frequency_start_date(_frequency_id integer, _value_date date);

CREATE FUNCTION core.get_frequency_start_date(_frequency_id integer, _value_date date)
RETURNS date
STABLE
AS
$$
    DECLARE _start_date date;
BEGIN
    SELECT MAX(value_date) 
    INTO _start_date
    FROM core.frequency_setups
    WHERE value_date < $2
    AND frequency_id = ANY(core.get_frequencies($1));

    IF(_start_date IS NULL AND $1 = 'EOY'::text::integer) THEN
        SELECT MAX(starts_from)
        INTO _start_date
        FROM core.fiscal_year
        WHERE starts_from < $2;
    END IF;

    RETURN _start_date;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM core.get_frequency_start_date('eoy'::text::integer, '2015-05-14');


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_item_cost_price.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_cost_price(item_id_ integer, party_id_ bigint, unit_id_ integer);
CREATE FUNCTION core.get_item_cost_price(item_id_ integer, party_id_ bigint, unit_id_ integer)
RETURNS public.money_strict2
AS
$$
    DECLARE _price public.money_strict2;
    DECLARE _unit_id integer;
    DECLARE _factor decimal;
  
BEGIN

    --Fist pick the catalog price which matches all these fields:
    --Item, Customer Type, Price Type, and Unit.
    --This is the most effective price.
    SELECT 
        item_cost_prices.price, 
        item_cost_prices.unit_id
    INTO 
        _price, 
        _unit_id   
    FROM core.item_cost_prices
    WHERE item_cost_prices.item_id=$1
    AND item_cost_prices.party_id=$2
    AND item_cost_prices.unit_id = $3;

    IF(_unit_id IS NULL) THEN
        --We do not have a cost price of this item for the unit supplied.
        --Let's see if this item has a price for other units.
        SELECT 
            item_cost_prices.price, 
            item_cost_prices.unit_id
        INTO 
            _price, 
            _unit_id
        FROM core.item_cost_prices
        WHERE item_cost_prices.item_id=$1
        AND item_cost_prices.party_id=$2;
    END IF;

    
    IF(_price IS NULL) THEN
        --This item does not have cost price defined in the catalog.
        --Therefore, getting the default cost price from the item definition.
        SELECT 
            cost_price, 
            unit_id
        INTO 
            _price, 
            _unit_id
        FROM core.items
        WHERE core.items.item_id = $1;
    END IF;

        --Get the unitary conversion factor if the requested unit does not match with the price defition.
    _factor := core.convert_unit($3, _unit_id);

    RETURN _price * _factor;
END
$$
LANGUAGE plpgsql;


/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_item_selling_price.sql --<--<--
DROP FUNCTION IF EXISTS core.get_item_selling_price(item_id_ integer, party_type_id_ integer, price_type_id_ integer, unit_id_ integer);
CREATE FUNCTION core.get_item_selling_price(item_id_ integer, party_type_id_ integer, price_type_id_ integer, unit_id_ integer)
RETURNS public.money_strict2
AS
$$
    DECLARE _price          public.money_strict2;
    DECLARE _unit_id        integer;
    DECLARE _factor         decimal;
    DECLARE _tax_rate       decimal;
    DECLARE _includes_tax   boolean;
    DECLARE _tax            public.money_strict2;
BEGIN

    --Fist pick the catalog price which matches all these fields:
    --Item, Customer Type, Price Type, and Unit.
    --This is the most effective price.
    SELECT 
        item_selling_prices.price, 
        item_selling_prices.unit_id,
        item_selling_prices.includes_tax
    INTO 
        _price, 
        _unit_id,
        _includes_tax       
    FROM core.item_selling_prices
    WHERE item_selling_prices.item_id=$1
    AND item_selling_prices.party_type_id=$2
    AND item_selling_prices.price_type_id =$3
    AND item_selling_prices.unit_id = $4;

    IF(_unit_id IS NULL) THEN
        --We do not have a selling price of this item for the unit supplied.
        --Let's see if this item has a price for other units.
        SELECT 
            item_selling_prices.price, 
            item_selling_prices.unit_id,
            item_selling_prices.includes_tax
        INTO 
            _price, 
            _unit_id,
            _includes_tax
        FROM core.item_selling_prices
        WHERE item_selling_prices.item_id=$1
        AND item_selling_prices.party_type_id=$2
        AND item_selling_prices.price_type_id =$3;
    END IF;

    IF(_price IS NULL) THEN
        SELECT 
            item_selling_prices.price, 
            item_selling_prices.unit_id,
            item_selling_prices.includes_tax
        INTO 
            _price, 
            _unit_id,
            _includes_tax
        FROM core.item_selling_prices
        WHERE item_selling_prices.item_id=$1
        AND item_selling_prices.price_type_id =$3;
    END IF;

    
    IF(_price IS NULL) THEN
        --This item does not have selling price defined in the catalog.
        --Therefore, getting the default selling price from the item definition.
        SELECT 
            selling_price, 
            unit_id,
            selling_price_includes_tax
        INTO 
            _price, 
            _unit_id,
            _includes_tax
        FROM core.items
        WHERE core.items.item_id = $1;
    END IF;

    IF(_includes_tax) THEN
        _tax_rate := core.get_item_tax_rate($1);
        _price := _price / ((100 + _tax_rate)/ 100);
    END IF;

    --Get the unitary conversion factor if the requested unit does not match with the price defition.
    _factor := core.convert_unit($4, _unit_id);

    RETURN _price * _factor;
END
$$
LANGUAGE plpgsql;



/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/


--SELECT * FROM core.get_item_selling_price(1, 1, 2, 1);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/core/core.get_periods.sql --<--<--
DROP FUNCTION IF EXISTS core.get_periods
(
    _date_from                      date,
    _date_to                        date
);

CREATE FUNCTION core.get_periods
(
    _date_from                      date,
    _date_to                        date
)
RETURNS core.period[]
VOLATILE
AS
$$
BEGIN
    DROP TABLE IF EXISTS frequency_setups_temp;
    CREATE TEMPORARY TABLE frequency_setups_temp
    (
        frequency_setup_id      int,
        value_date              date
    ) ON COMMIT DROP;

    INSERT INTO frequency_setups_temp
    SELECT frequency_setup_id, value_date
    FROM core.frequency_setups
    WHERE value_date BETWEEN _date_from AND _date_to
    ORDER BY value_date;

    RETURN
        array_agg
        (
            (
                core.get_frequency_setup_code_by_frequency_setup_id(frequency_setup_id),
                core.get_frequency_setup_start_date_by_frequency_setup_id(frequency_setup_id),
                core.get_frequency_setup_end_date_by_frequency_setup_id(frequency_setup_id)
            )::core.period
        )::core.period[]
    FROM frequency_setups_temp;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM core.get_periods('1-1-2000', '1-1-2020');

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/localization/localization.get_localization_table.sql --<--<--
DROP FUNCTION IF EXISTS localization.get_localization_table(text);

CREATE FUNCTION localization.get_localization_table
(
    culture_code        text
)
RETURNS TABLE
(
    id                  bigint,
    resource_class      text,
    key                 text,
    original            text,
    translated          text
)
AS
$$
BEGIN   
    CREATE TEMPORARY TABLE t
    (
        resource_id         integer,
        resource_class      text,
        key                 text,
        original            text,
        translated          text
    ) ON COMMIT DROP;
    
    INSERT INTO t
    SELECT
        localization.resources.resource_id, 
        localization.resources.resource_class, 
        localization.resources.key, 
        localization.resources.value,
        ''
    FROM localization.resources;

    UPDATE t
    SET translated = localization.localized_resources.value
    FROM localization.localized_resources
    WHERE t.resource_id = localization.localized_resources.resource_id
    AND localization.localized_resources.culture_code=$1;

    RETURN QUERY
    SELECT
        row_number() OVER(ORDER BY t.resource_class, t.key),
        t.resource_class, 
        t.key, 
        t.original,
        t.translated
    FROM t;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/office/office.add_office.sql --<--<--
DROP FUNCTION IF EXISTS office.add_office
(
    _office_code            national character varying(12),
    _office_name            national character varying(150),
    _nick_name              national character varying(50),
    _registration_date      date,
    _currency_code          national character varying(12),
    _currency_symbol        national character varying(12),
    _currency_name          national character varying(48),
    _hundredth_name         national character varying(48),
    _admin_name             national character varying(100),
    _user_name              national character varying(50),
    _password               national character varying(48)
);

CREATE FUNCTION office.add_office
(
    _office_code            national character varying(12),
    _office_name            national character varying(150),
    _nick_name              national character varying(50),
    _registration_date      date,
    _currency_code          national character varying(12),
    _currency_symbol        national character varying(12),
    _currency_name          national character varying(48),
    _hundredth_name         national character varying(48),
    _admin_name             national character varying(100),
    _user_name              national character varying(50),
    _password               national character varying(48)
)
RETURNS void 
VOLATILE AS
$$
    DECLARE _office_id      integer;
    DECLARE _user_id		integer;
BEGIN
    IF NOT EXISTS
    (
        SELECT 0 
        FROM core.currencies
        WHERE currency_code=_currency_code
    ) THEN
        INSERT INTO core.currencies(currency_code, currency_symbol, currency_name, hundredth_name)
        SELECT _currency_code, _currency_symbol, _currency_name, _hundredth_name;
    END IF;


    INSERT INTO office.offices(office_code, office_name, nick_name, registration_date, currency_code)
    SELECT _office_code, _office_name, _nick_name, _registration_date, _currency_code
    RETURNING office_id INTO _office_id;

    IF NOT EXISTS(SELECT 0 FROM office.users WHERE user_name='sys') THEN
        INSERT INTO office.users(role_id, department_id, office_id, user_name, password, full_name)
        SELECT office.get_role_id_by_role_code('SYST'), office.get_department_id_by_department_code('SUP'), _office_id, 'sys', '', 'System';
    END IF;
        
    INSERT INTO office.users(role_id, department_id, office_id,user_name,password, full_name, elevated)
    SELECT office.get_role_id_by_role_code('ADMN'), office.get_department_id_by_department_code('SUP'), _office_id, _user_name, _password, _admin_name, true
    RETURNING user_id INTO _user_id;

    INSERT INTO policy.menu_access(office_id, menu_id, user_id)
    SELECT _office_id, core.menus.menu_id, _user_id
    FROM core.menus;

    RETURN;
END;
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/office/office.get_income_tax_rate.sql --<--<--
DROP FUNCTION IF EXISTS core.get_income_tax_rate(_office_id integer);
DROP FUNCTION IF EXISTS office.get_income_tax_rate(_office_id integer);

CREATE FUNCTION office.get_income_tax_rate(_office_id integer)
RETURNS real
AS
$$
BEGIN
    RETURN income_tax_rate
    FROM office.offices
    WHERE office_id = $1;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM office.get_income_tax_rate(2);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/office/office.has_child_offices.sql --<--<--
DROP FUNCTION IF EXISTS office.has_child_offices(integer);

CREATE FUNCTION office.has_child_offices(_office_id integer)
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS(SELECT 0 FROM office.offices WHERE parent_office_id=$1 LIMIT 1) THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/policy/policy.save_menu_policy.sql --<--<--
DROP FUNCTION IF EXISTS policy.save_menu_policy
(
    _user_id        integer,
    _office_id      integer,
    _menu_ids       int[]
);

CREATE FUNCTION policy.save_menu_policy
(
    _user_id        integer,
    _office_id      integer,
    _menu_ids       int[]
)
RETURNS void
VOLATILE AS
$$
BEGIN
    DELETE FROM policy.menu_access
    WHERE policy.menu_access.menu_id NOT IN(SELECT * from explode_array(_menu_ids))
    AND user_id = _user_id
    AND office_id = _office_id;

    WITH menus
    AS
    (
        SELECT explode_array(_menu_ids) AS _menu_id
    )
    
    INSERT INTO policy.menu_access(user_id, office_id, menu_id)
    SELECT _user_id, _office_id, _menu_id
    FROM menus
    WHERE _menu_id NOT IN
    (
        SELECT menu_id
        FROM policy.menu_access
        WHERE policy.menu_access.user_id = _user_id
        AND policy.menu_access.office_id = _office_id
    );

    RETURN;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM policy.save_menu_policy(2, 2, string_to_array('106, 107', ',')::varchar[]::int[]);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/public/public.add_column.sql --<--<--
DROP FUNCTION IF EXISTS public.add_column(regclass, text, regtype, text, text);

CREATE FUNCTION public.add_column
(
    _table_name     regclass, 
    _column_name    text, 
    _data_type      regtype,
    _default        text = '',
    _comment        text = ''
)
RETURNS void
VOLATILE
AS
$$
BEGIN
    IF NOT EXISTS (
       SELECT 1 FROM pg_attribute
       WHERE  attrelid = _table_name
       AND    attname = _column_name
       AND    NOT attisdropped) THEN
        EXECUTE '
        ALTER TABLE ' || _table_name || ' ADD COLUMN ' || quote_ident(_column_name) || ' ' || _data_type;
    END IF;

    IF(COALESCE(_default, '') != '') THEN
        EXECUTE '
        ALTER TABLE ' || _table_name || ' ALTER COLUMN ' || _column_name || ' SET DEFAULT ' || _default;
    END IF;

    IF(COALESCE(_comment, '') != '') THEN
        EXECUTE '
        COMMENT ON COLUMN ' || _table_name || '.' || _column_name || ' IS ''' || _comment || ''''; 
    END IF;    
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/reports/transactions/transactions.get_salesperson_report.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_salesperson_report(_office_id integer, _factor integer);

CREATE FUNCTION transactions.get_salesperson_report(_office_id integer, _factor integer)
RETURNS TABLE
(
    id                  integer,
    salesperson_id      integer,
    salesperson_name    text,
    total_sales         decimal(24)
)
AS
$$
    DECLARE fy_start    date;
BEGIN
    DROP TABLE IF EXISTS temp_sales;
    
    CREATE TEMPORARY TABLE temp_sales
    (
        id                  SERIAL,
        salesperson_id      integer,
        salesperson_name    text,
        total_sales         decimal(24)
    ) ON COMMIT DROP;

    fy_start := core.get_fiscal_year_start_date(_office_id);
    
    INSERT INTO temp_sales(salesperson_id, salesperson_name, total_sales)
    SELECT
        transactions.verified_stock_transaction_view.salesperson_id, 
        '', 
        SUM(transactions.verified_stock_transaction_view.amount) / _factor
    FROM transactions.verified_stock_transaction_view
    WHERE book LIKE 'Sales%'
    AND value_date >= fy_start
    AND transactions.verified_stock_transaction_view.office_id IN (SELECT * FROM office.get_office_ids(_office_id)) 
    GROUP BY transactions.verified_stock_transaction_view.salesperson_id
    ORDER BY 3 DESC
    LIMIT 5;

    UPDATE temp_sales
    SET salesperson_name = core.salespersons.salesperson_name
    FROM core.salespersons
    WHERE core.salespersons.salesperson_id = temp_sales.salesperson_id;
    
    RETURN QUERY
    SELECT * FROM temp_sales
    ORDER BY id;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM transactions.get_salesperson_report(1, 1000);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/core.get_frequencies.sql --<--<--
DROP FUNCTION IF EXISTS core.get_frequencies(_frequency_id integer);

CREATE FUNCTION core.get_frequencies(_frequency_id integer)
RETURNS integer[]
IMMUTABLE
AS
$$
    DECLARE _frequencies integer[];
BEGIN
    IF(_frequency_id = 2) THEN--End of month
        --End of month
        --End of quarter is also end of third/ninth month
        --End of half is also end of sixth month
        --End of year is also end of twelfth month
        _frequencies = ARRAY[2, 3, 4, 5];
    ELSIF(_frequency_id = 3) THEN--End of quarter
        --End of quarter
        --End of half is the second end of quarter
        --End of year is the fourth/last end of quarter
        _frequencies = ARRAY[3, 4, 5];
    ELSIF(_frequency_id = 4) THEN--End of half
        --End of half
        --End of year is the second end of half
        _frequencies = ARRAY[4, 5];
    ELSIF(_frequency_id = 5) THEN--End of year
        --End of year
        _frequencies = ARRAY[5];
    END IF;

    RETURN _frequencies;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM core.get_frequencies(3);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.auto_verify.sql --<--<--
DROP FUNCTION IF EXISTS transactions.auto_verify
(
    _tran_id        bigint,
    _office_id      integer
) CASCADE;

CREATE FUNCTION transactions.auto_verify
(
    _tran_id        bigint,
    _office_id      integer
)
RETURNS VOID
VOLATILE
AS
$$
    DECLARE _transaction_master_id          bigint;
    DECLARE _transaction_posted_by          integer;
    DECLARE _verifier                       integer;
    DECLARE _status                         integer;
    DECLARE _reason                         national character varying(128);
    DECLARE _rejected                       smallint=-3;
    DECLARE _closed                         smallint=-2;
    DECLARE _withdrawn                      smallint=-1;
    DECLARE _unapproved                     smallint = 0;
    DECLARE _auto_approved                  smallint = 1;
    DECLARE _approved                       smallint=2;
    DECLARE _book                           text;
    DECLARE _auto_verify_sales              boolean;
    DECLARE _sales_verification_limit       public.money_strict2;
    DECLARE _auto_verify_purchase           boolean;
    DECLARE _purchase_verification_limit    public.money_strict2;
    DECLARE _auto_verify_gl                 boolean;
    DECLARE _gl_verification_limit          public.money_strict2;
    DECLARE _posted_amount                  public.money_strict2;
    DECLARE _auto_verification              boolean=true;
    DECLARE _has_policy                     boolean=false;
    DECLARE _voucher_date                   date;
    DECLARE _value_date                     date=transactions.get_value_date(_office_id);
BEGIN
    _transaction_master_id := $1;

    SELECT
        transactions.transaction_master.book,
        transactions.transaction_master.value_date,
        transactions.transaction_master.user_id
    INTO
        _book,
        _voucher_date,
        _transaction_posted_by  
    FROM
    transactions.transaction_master
    WHERE transactions.transaction_master.transaction_master_id=_transaction_master_id;

    IF(_voucher_date <> _value_date) THEN
        RETURN;
    END IF;

    _verifier := office.get_sys_user_id();
    _status := 2;
    _reason := 'Automatically verified by workflow.';

    IF EXISTS
    (
        SELECT 1 FROM policy.voucher_verification_policy    
        WHERE user_id=_verifier
        AND is_active=true
        AND now() >= effective_from
        AND now() <= ends_on
    ) THEN
        RAISE INFO 'A sys cannot have a verification policy defined.';
        RETURN;
    END IF;
    
    SELECT
        SUM(amount_in_local_currency)
    INTO
        _posted_amount
    FROM
        transactions.transaction_details
    WHERE transactions.transaction_details.transaction_master_id = _transaction_master_id
    AND transactions.transaction_details.tran_type='Cr';


    SELECT
        true,
        verify_sales_transactions,
        sales_verification_limit,
        verify_purchase_transactions,
        purchase_verification_limit,
        verify_gl_transactions,
        gl_verification_limit
    INTO
        _has_policy,
        _auto_verify_sales,
        _sales_verification_limit,
        _auto_verify_purchase,
        _purchase_verification_limit,
        _auto_verify_gl,
        _gl_verification_limit
    FROM
    policy.auto_verification_policy
    WHERE user_id=_transaction_posted_by
    AND office_id = _office_id
    AND is_active=true
    AND now() >= effective_from
    AND now() <= ends_on;



    IF(lower(_book) LIKE 'sales%') THEN
        IF(_auto_verify_sales = false) THEN
            _auto_verification := false;
        END IF;
        IF(_auto_verify_sales = true) THEN
            IF(_posted_amount > _sales_verification_limit AND _sales_verification_limit > 0::public.money_strict2) THEN
                _auto_verification := false;
            END IF;
        END IF;         
    END IF;


    IF(lower(_book) LIKE 'purchase%') THEN
        IF(_auto_verify_purchase = false) THEN
            _auto_verification := false;
        END IF;
        IF(_auto_verify_purchase = true) THEN
            IF(_posted_amount > _purchase_verification_limit AND _purchase_verification_limit > 0::public.money_strict2) THEN
                _auto_verification := false;
            END IF;
        END IF;         
    END IF;


    IF(lower(_book) LIKE 'journal%') THEN
        IF(_auto_verify_gl = false) THEN
            _auto_verification := false;
        END IF;
        IF(_auto_verify_gl = true) THEN
            IF(_posted_amount > _gl_verification_limit AND _gl_verification_limit > 0::public.money_strict2) THEN
                _auto_verification := false;
            END IF;
        END IF;         
    END IF;

    IF(_has_policy=true) THEN
        IF(_auto_verification = true) THEN
            UPDATE transactions.transaction_master
            SET 
                last_verified_on = now(),
                verified_by_user_id=_verifier,
                verification_status_id=_status,
                verification_reason=_reason
            WHERE
                transactions.transaction_master.transaction_master_id=_transaction_master_id
            OR
                transactions.transaction_master.cascading_tran_id=_transaction_master_id;

            PERFORM transactions.create_recurring_invoices(_transaction_master_id);
        END IF;
    ELSE
        RAISE NOTICE 'No auto verification policy found for this user.';
    END IF;
    RETURN;
END
$$
LANGUAGE plpgsql;



/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/


DROP FUNCTION IF EXISTS unit_tests.auto_verify_sales_test1();

CREATE FUNCTION unit_tests.auto_verify_sales_test1()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE _book_name                              national character varying(48)='Sales.Direct';
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _cost_center_id                         integer;
    DECLARE _reference_number                       national character varying(24)='Plpgunit.fixture';
    DECLARE _statement_reference                    text='Plpgunit test was here.';
    DECLARE _is_credit                              boolean=false;
    DECLARE _payment_term_id                        integer;
    DECLARE _party_code                             national character varying(12);
    DECLARE _price_type_id                          integer;
    DECLARE _salesperson_id                         integer;
    DECLARE _shipper_id                             integer;
    DECLARE _shipping_address_code                  national character varying(12)='';
    DECLARE _store_id                               integer;
    DECLARE _is_non_taxable_sales                   boolean=true;
    DECLARE _details                                transactions.stock_detail_type[];
    DECLARE _attachments                            core.attachment_type[];
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);
    _value_date         := transactions.get_value_date(_office_id);
    _cost_center_id     := office.get_cost_center_id_by_cost_center_code('dummy-cs01');
    _payment_term_id    := core.get_payment_term_id_by_payment_term_code('dummy-pt01');
    _party_code         := 'dummy-pr01';
    _price_type_id      := core.get_price_type_id_by_price_type_code('dummy-pt01');
    _salesperson_id     := core.get_salesperson_id_by_salesperson_code('dummy-sp01');
    _shipper_id         := core.get_shipper_id_by_shipper_code('dummy-sh01');
    _store_id           := office.get_store_id_by_store_code('dummy-st01');

    
    _details            := ARRAY[
                             ROW(_store_id, 'dummy-it01', 1, 'Test Mock Unit',1800000, 0, 0, '', 0)::transactions.stock_detail_type,
                             ROW(_store_id, 'dummy-it02', 2, 'Test Mock Unit',1300000, 300, 0, '', 0)::transactions.stock_detail_type];
             
    
    PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), _office_id, true, 0, true, 0, true, 0, '1-1-2000', '1-1-2020', true);


    SELECT * FROM transactions.post_sales
    (
        _book_name,_office_id, _user_id, _login_id, _value_date, _cost_center_id, _reference_number, _statement_reference,
        _is_credit, _payment_term_id, _party_code, _price_type_id, _salesperson_id, _shipper_id,
        _shipping_address_code,
        _store_id,
        _is_non_taxable_sales,
        _details,
        _attachments,
        NULL
    ) INTO _tran_id;

    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id < 1) THEN
        SELECT assert.fail('This transaction should have been verified.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS unit_tests.auto_verify_sales_test2();

CREATE FUNCTION unit_tests.auto_verify_sales_test2()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE _book_name                              national character varying(48)='Sales.Direct';
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _cost_center_id                         integer;
    DECLARE _reference_number                       national character varying(24)='Plpgunit.fixture';
    DECLARE _statement_reference                    text='Plpgunit test was here.';
    DECLARE _is_credit                              boolean=false;
    DECLARE _payment_term_id                        integer;
    DECLARE _party_code                             national character varying(12);
    DECLARE _price_type_id                          integer;
    DECLARE _salesperson_id                         integer;
    DECLARE _shipper_id                             integer;
    DECLARE _shipping_address_code                  national character varying(12)='';
    DECLARE _store_id                               integer;
    DECLARE _is_non_taxable_sales                   boolean=true;
    DECLARE _details                                transactions.stock_detail_type[];
    DECLARE _attachments                            core.attachment_type[];
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);
    _value_date         := transactions.get_value_date(_office_id);
    _cost_center_id     := office.get_cost_center_id_by_cost_center_code('dummy-cs01');
    _payment_term_id    := core.get_payment_term_id_by_payment_term_code('dummy-pt01');
    _party_code         := 'dummy-pr01';
    _price_type_id      := core.get_price_type_id_by_price_type_code('dummy-pt01');
    _salesperson_id     := core.get_salesperson_id_by_salesperson_code('dummy-sp01');
    _shipper_id         := core.get_shipper_id_by_shipper_code('dummy-sh01');
    _store_id           := office.get_store_id_by_store_code('dummy-st01');

    
    _details            := ARRAY[
                             ROW(_store_id, 'dummy-it01', 1, 'Test Mock Unit',180000, 0, 0, '', 0)::transactions.stock_detail_type,
                             ROW(_store_id, 'dummy-it02', 2, 'Test Mock Unit',130000, 300, 0, '', 0)::transactions.stock_detail_type];

    PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), _office_id, true, 100, true, 0, true, 0, '1-1-2000', '1-1-2020', true);

    SELECT * FROM transactions.post_sales
    (
        _book_name,_office_id, _user_id, _login_id, _value_date, _cost_center_id, _reference_number, _statement_reference,
        _is_credit, _payment_term_id, _party_code, _price_type_id, _salesperson_id, _shipper_id,
        _shipping_address_code,
        _store_id,
        _is_non_taxable_sales,
        _details,
        _attachments,
        NULL
    ) INTO _tran_id;


    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id > 0) THEN
        SELECT assert.fail('This transaction should not have been verified.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;






DROP FUNCTION IF EXISTS unit_tests.auto_verify_purchase_test1();

CREATE FUNCTION unit_tests.auto_verify_purchase_test1()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE _book_name                              national character varying(48)='Purchase.Direct';
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _cost_center_id                         integer;
    DECLARE _reference_number                       national character varying(24)='Plpgunit.fixture';
    DECLARE _statement_reference                    text='Plpgunit test was here.';
    DECLARE _is_credit                              boolean=false;
    DECLARE _payment_term_id                        integer;
    DECLARE _party_code                             national character varying(12);
    DECLARE _price_type_id                          integer;
    DECLARE _shipper_id                             integer;
    DECLARE _store_id                               integer;
    DECLARE _is_non_taxable_sales                   boolean=true;
    DECLARE _tran_ids                               bigint[];
    DECLARE _details                                transactions.stock_detail_type[];
    DECLARE _attachments                            core.attachment_type[];
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);
    _value_date         := transactions.get_value_date(_office_id);
    _cost_center_id     := office.get_cost_center_id_by_cost_center_code('dummy-cs01');
    _party_code         := 'dummy-pr01';
    _price_type_id      := core.get_price_type_id_by_price_type_code('dummy-pt01');
    _shipper_id         := core.get_shipper_id_by_shipper_code('dummy-sh01');
    _store_id           := office.get_store_id_by_store_code('dummy-st01');

    
    _details            := ARRAY[
                             ROW(_store_id, 'dummy-it01', 1, 'Test Mock Unit',180000, 0, 0, '', 0)::transactions.stock_detail_type,
                             ROW(_store_id, 'dummy-it02', 2, 'Test Mock Unit',130000, 300, 0, '', 0)::transactions.stock_detail_type];

    PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), _office_id, true, 0, true, 0, true, 0, '1-1-2000', '1-1-2020', true);

    SELECT * FROM transactions.post_purchase
    (
        _book_name,_office_id, _user_id, _login_id, _value_date, _cost_center_id, _reference_number, _statement_reference,
        _is_credit, _party_code, _price_type_id, _shipper_id,
        _store_id, _tran_ids, _details, _attachments
    ) INTO _tran_id;


    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id < 1) THEN
            SELECT assert.fail('This transaction should have been verified.') INTO message;
            RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS unit_tests.auto_verify_purchase_test2();

CREATE FUNCTION unit_tests.auto_verify_purchase_test2()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE _book_name                              national character varying(48)='Purchase.Direct';
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _cost_center_id                         integer;
    DECLARE _reference_number                       national character varying(24)='Plpgunit.fixture';
    DECLARE _statement_reference                    text='Plpgunit test was here.';
    DECLARE _is_credit                              boolean=false;
    DECLARE _payment_term_id                        integer;
    DECLARE _party_code                             national character varying(12);
    DECLARE _price_type_id                          integer;
    DECLARE _shipper_id                             integer;
    DECLARE _store_id                               integer;
    DECLARE _is_non_taxable_sales                   boolean=true;
    DECLARE _tran_ids                               bigint[];
    DECLARE _details                                transactions.stock_detail_type[];
    DECLARE _attachments                            core.attachment_type[];
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);
    _value_date         := transactions.get_value_date(_office_id);
    _cost_center_id     := office.get_cost_center_id_by_cost_center_code('dummy-cs01');
    _party_code         := 'dummy-pr01';
    _price_type_id      := core.get_price_type_id_by_price_type_code('dummy-pt01');
    _shipper_id         := core.get_shipper_id_by_shipper_code('dummy-sh01');
    _store_id           := office.get_store_id_by_store_code('dummy-st01');

    
    _details            := ARRAY[
                             ROW(_store_id, 'dummy-it01', 1, 'Test Mock Unit',180000, 0, 0, '', 0)::transactions.stock_detail_type,
                             ROW(_store_id, 'dummy-it02', 2, 'Test Mock Unit',130000, 300, 0, '', 0)::transactions.stock_detail_type];

    PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), _office_id, true, 0, true, 100, true, 0, '1-1-2000', '1-1-2000', true);


    SELECT * FROM transactions.post_purchase
    (
        _book_name,_office_id, _user_id, _login_id, _value_date, _cost_center_id, _reference_number, _statement_reference,
        _is_credit, _party_code, _price_type_id, _shipper_id,
        _store_id, _tran_ids, _details, _attachments
    ) INTO _tran_id;


    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id > 0) THEN
        SELECT assert.fail('This transaction should not have been verified.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS unit_tests.auto_verify_journal_test1();

CREATE FUNCTION unit_tests.auto_verify_journal_test1()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _value_date         := transactions.get_value_date(_office_id);
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);

    PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), _office_id, true, 0, true, 0, true, 0, '1-1-2000', '1-1-2020', true);

    _tran_id := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));

    INSERT INTO transactions.transaction_master
    (
        transaction_master_id, 
        transaction_counter, 
        transaction_code, 
        book, 
        value_date, 
        user_id, 
        login_id, 
        office_id, 
        reference_number, 
        statement_reference
    )
    SELECT 
        _tran_id, 
        transactions.get_new_transaction_counter(_value_date), 
        transactions.get_transaction_code(_value_date, _office_id, _user_id, 1),
        'Journal',
        _value_date,
        _user_id,
        _login_id,
        _office_id,
        'REF# TEST',
        'Thou art not able to see this.';



    INSERT INTO transactions.transaction_details
    (
        transaction_master_id, 
        value_date,
        tran_type, 
        account_id, 
        statement_reference, 
        currency_code, 
        amount_in_currency, 
        local_currency_code,    
        er, 
        amount_in_local_currency
    )

    SELECT _tran_id, _value_date, 'Cr', core.get_account_id_by_account_number('dummy-acc01'), '', 'NPR', 12000, 'NPR', 1, 12000 UNION ALL
    SELECT _tran_id, _value_date, 'Dr', core.get_account_id_by_account_number('dummy-acc02'), '', 'NPR', 3000, 'NPR', 1, 3000 UNION ALL
    SELECT _tran_id, _value_date, 'Dr', core.get_account_id_by_account_number('dummy-acc03'), '', 'NPR', 9000, 'NPR', 1, 9000;


    PERFORM transactions.auto_verify(currval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id')), office.get_office_id_by_office_code('dummy-off01'));

    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id < 1) THEN
        SELECT assert.fail('This transaction should have been verified.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;



DROP FUNCTION IF EXISTS unit_tests.auto_verify_journal_test2();

CREATE FUNCTION unit_tests.auto_verify_journal_test2()
RETURNS public.test_result
AS
$$
    DECLARE _value_date                             date;
    DECLARE _office_id                              integer;
    DECLARE _user_id                                integer;
    DECLARE _login_id                               bigint;
    DECLARE _tran_id                                bigint;
    DECLARE _verification_status_id                 smallint;
    DECLARE message                                 test_result;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id          := office.get_office_id_by_office_code('dummy-off01');
    _value_date         := transactions.get_value_date(_office_id);
    _user_id            := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id           := office.get_login_id(_user_id);

     PERFORM unit_tests.create_dummy_auto_verification_policy(office.get_user_id_by_user_name('plpgunit-test-user-000001'), _office_id, true, 0, true, 0, true, 100, '1-1-2000', '1-1-2020', true);
    _tran_id := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));

    INSERT INTO transactions.transaction_master
    (
        transaction_master_id, 
        transaction_counter, 
        transaction_code, 
        book, 
        value_date, 
        user_id, 
        login_id, 
        office_id, 
        reference_number, 
        statement_reference
    )
    SELECT 
        _tran_id, 
        transactions.get_new_transaction_counter(_value_date), 
        transactions.get_transaction_code(_value_date, _office_id, _user_id, 1),
        'Journal',
        _value_date,
        _user_id,
        _login_id,
        _office_id,
        'REF# TEST',
        'Thou art not able to see this.';



    INSERT INTO transactions.transaction_details
    (
        transaction_master_id,
        value_date,
        tran_type, 
        account_id, 
        statement_reference, 
        currency_code, 
        amount_in_currency, 
        local_currency_code,    
        er, 
        amount_in_local_currency
    )
    SELECT _tran_id, _value_date, 'Cr', core.get_account_id_by_account_number('dummy-acc01'), '', 'NPR', 12000, 'NPR', 1, 12000 UNION ALL
    SELECT _tran_id, _value_date, 'Dr', core.get_account_id_by_account_number('dummy-acc02'), '', 'NPR', 3000, 'NPR', 1, 3000 UNION ALL
    SELECT _tran_id, _value_date, 'Dr', core.get_account_id_by_account_number('dummy-acc03'), '', 'NPR', 9000, 'NPR', 1, 9000;


    PERFORM transactions.auto_verify(currval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id')), office.get_office_id_by_office_code('dummy-off01'));

    SELECT verification_status_id
    INTO _verification_status_id
    FROM transactions.transaction_master
    WHERE transaction_master_id = _tran_id;

    IF(_verification_status_id > 0) THEN
            SELECT assert.fail('This transaction should not have been verified.') INTO message;
            RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.create_recurring_invoices.sql --<--<--
DROP FUNCTION IF EXISTS transactions.create_recurring_invoices(bigint);

CREATE FUNCTION transactions.create_recurring_invoices(bigint)
RETURNS void
VOLATILE
AS
$$
    DECLARE _party_id       bigint;
BEGIN
    IF NOT EXISTS
    (
        SELECT * FROM transactions.transaction_master WHERE book IN('Sales.Direct', 'Sales.Delivery')
        AND transaction_master_id=$1
        AND verification_status_id > 0
    ) THEN
        RETURN;
    END IF;

    SELECT party_id INTO _party_id 
    FROM transactions.stock_master
    WHERE transaction_master_id = $1;

    IF(COALESCE(_party_id, 0) = 0) THEN
        RETURN;
    END IF;
    
    DROP TABLE IF EXISTS recurring_invoices_temp;

    CREATE TEMPORARY TABLE recurring_invoices_temp
    (
        recurring_invoice_id            integer,
        party_id                        bigint,
        total_duration                  integer,
        starts_from                     date,
        ends_on                         date,
        recurrence_type_id              integer,
        recurring_frequency_id          integer,
        recurring_duration              integer,
        recurs_on_same_calendar_date    boolean,
        recurring_amount                public.money_strict,
        account_id                      bigint,
        payment_term_id                 integer,
        is_active                       boolean DEFAULT(true),
        statement_reference             national character varying(100)
    ) ON COMMIT DROP;

    INSERT INTO recurring_invoices_temp
    (
        recurring_invoice_id,
        total_duration,
        recurrence_type_id,
        recurring_frequency_id,
        recurring_duration,
        recurs_on_same_calendar_date,
        recurring_amount,
        account_id,
        payment_term_id,
        is_active,
        statement_reference
    )
    SELECT
        recurring_invoice_id,
        total_duration,
        recurrence_type_id,
        recurring_frequency_id,
        recurring_duration,
        recurs_on_same_calendar_date,
        recurring_amount,
        account_id,
        payment_term_id,
        is_active,
        statement_reference
    FROM core.recurring_invoices
    WHERE is_active
    AND auto_trigger_on_sales
    AND item_id
    IN
    (
        SELECT item_id FROM transactions.stock_details
        INNER JOIN transactions.stock_master
        ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
        WHERE 1 = 1
        AND transactions.stock_master.transaction_master_id = $1
        AND tran_type='Cr'
    );

    UPDATE recurring_invoices_temp
    SET 
        party_id        = _party_id, 
        starts_from     = now()::date,
        ends_on         = now()::date + total_duration;

    INSERT INTO core.recurring_invoice_setup
    (
        recurring_invoice_id,
        party_id,
        starts_from,
        ends_on,
        recurrence_type_id,
        recurring_frequency_id,
        recurring_duration,
        recurs_on_same_calendar_date,
        recurring_amount,
        account_id,
        payment_term_id,
        is_active,
        statement_reference
    )
    SELECT
        recurring_invoice_id,
        party_id,
        starts_from,
        ends_on,
        recurrence_type_id,
        recurring_frequency_id,
        recurring_duration,
        recurs_on_same_calendar_date,
        recurring_amount,
        account_id,
        payment_term_id,
        is_active,
        statement_reference
    FROM recurring_invoices_temp;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.create_routine.sql --<--<--
DROP FUNCTION IF EXISTS transactions.create_routine(_routine_code national character varying(12), _routine regproc, _order integer);

CREATE FUNCTION transactions.create_routine(_routine_code national character varying(12), _routine regproc, _order integer)
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT * FROM transactions.routines WHERE routine_code=_routine_code) THEN
        INSERT INTO transactions.routines(routine_code, routine_name, "order")
        SELECT $1, $2, $3;
        RETURN;
    END IF;

    UPDATE transactions.routines
    SET
        routine_name = _routine,
        "order" = _order
    WHERE routine_code=_routine_code;
    RETURN;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.get_account_statement.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_account_statement
(
    _value_date_from        date,
    _value_date_to          date,
    _user_id                integer,
    _account_id             bigint,
    _office_id              integer
);

CREATE FUNCTION transactions.get_account_statement
(
    _value_date_from        date,
    _value_date_to          date,
    _user_id                integer,
    _account_id             bigint,
    _office_id              integer
)
RETURNS TABLE
(
    id                      integer,
    value_date              date,
    book_date               date,
    tran_code               text,
    statement_reference     text,
    debit                   decimal(24, 4),
    credit                  decimal(24, 4),
    balance                 decimal(24, 4),
    office                  text,
    book                    text,
    account_id              integer,
    account_number          text,
    account                 text,
    posted_on               TIMESTAMP WITH TIME ZONE,
    posted_by               text,
    approved_by             text,
    verification_status     integer,
    flag_bg                 text,
    flag_fg                 text
)
AS
$$
    DECLARE _normally_debit boolean;
BEGIN

    _normally_debit             := transactions.is_normally_debit(_account_id);

    DROP TABLE IF EXISTS temp_account_statement;
    CREATE TEMPORARY TABLE temp_account_statement
    (
        id                      SERIAL,
        value_date              date,
        book_date               date,
        tran_code               text,
        statement_reference     text,
        debit                   decimal(24, 4),
        credit                  decimal(24, 4),
        balance                 decimal(24, 4),
        office                  text,
        book                    text,
        account_id              integer,
        account_number          text,
        account                 text,
        posted_on               TIMESTAMP WITH TIME ZONE,
        posted_by               text,
        approved_by             text,
        verification_status     integer,
        flag_bg                 text,
        flag_fg                 text
    ) ON COMMIT DROP;


    INSERT INTO temp_account_statement(value_date, book_date, tran_code, statement_reference, debit, credit, office, book, account_id, posted_on, posted_by, approved_by, verification_status)
    SELECT
        _value_date_from,
        _value_date_from,
        NULL,
        'Opening Balance',
        NULL,
        SUM
        (
            CASE transactions.transaction_details.tran_type
            WHEN 'Cr' THEN amount_in_local_currency
            ELSE amount_in_local_currency * -1 
            END            
        ) as credit,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL
    FROM transactions.transaction_master
    INNER JOIN transactions.transaction_details
    ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
    WHERE
        transactions.transaction_master.verification_status_id > 0
    AND
        transactions.transaction_master.value_date < _value_date_from
    AND
       transactions.transaction_master.office_id IN (SELECT * FROM office.get_office_ids(_office_id)) 
    AND
       transactions.transaction_details.account_id IN (SELECT * FROM core.get_account_ids(_account_id));

    DELETE FROM temp_account_statement
    WHERE COALESCE(temp_account_statement.debit, 0) = 0
    AND COALESCE(temp_account_statement.credit, 0) = 0;
    

    UPDATE temp_account_statement SET 
    debit = temp_account_statement.credit * -1,
    credit = 0
    WHERE temp_account_statement.credit < 0;
    

    INSERT INTO temp_account_statement(value_date, book_date, tran_code, statement_reference, debit, credit, office, book, account_id, posted_on, posted_by, approved_by, verification_status)
    SELECT
        transactions.transaction_master.value_date,
        transactions.transaction_master.book_date,
        transactions.transaction_master. transaction_code,
        transactions.transaction_details.statement_reference,
        CASE transactions.transaction_details.tran_type
        WHEN 'Dr' THEN amount_in_local_currency
        ELSE NULL END,
        CASE transactions.transaction_details.tran_type
        WHEN 'Cr' THEN amount_in_local_currency
        ELSE NULL END,
        office.get_office_name_by_id(transactions.transaction_master.office_id),
        transactions.transaction_master.book,
        transactions.transaction_details.account_id,
        transactions.transaction_master.transaction_ts,
        office.get_user_name_by_user_id(COALESCE(transactions.transaction_master.user_id, transactions.transaction_master.sys_user_id)),
        office.get_user_name_by_user_id(transactions.transaction_master.verified_by_user_id),
        transactions.transaction_master.verification_status_id
    FROM transactions.transaction_master
    INNER JOIN transactions.transaction_details
    ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
    WHERE
        transactions.transaction_master.verification_status_id > 0
    AND
        transactions.transaction_master.value_date >= _value_date_from
    AND
        transactions.transaction_master.value_date <= _value_date_to
    AND
       transactions.transaction_master.office_id IN (SELECT * FROM office.get_office_ids(_office_id)) 
    AND
       transactions.transaction_details.account_id IN (SELECT * FROM core.get_account_ids(_account_id))
    ORDER BY 
        transactions.transaction_master.book_date,
        transactions.transaction_master.value_date,
        transactions.transaction_master.last_verified_on;



    UPDATE temp_account_statement
    SET balance = c.balance
    FROM
    (
        SELECT
            temp_account_statement.id, 
            SUM(COALESCE(c.credit, 0)) 
            - 
            SUM(COALESCE(c.debit,0)) As balance
        FROM temp_account_statement
        LEFT JOIN temp_account_statement AS c 
            ON (c.id <= temp_account_statement.id)
        GROUP BY temp_account_statement.id
        ORDER BY temp_account_statement.id
    ) AS c
    WHERE temp_account_statement.id = c.id;


    UPDATE temp_account_statement SET 
        account_number = core.accounts.account_number,
        account = core.accounts.account_name
    FROM core.accounts
    WHERE temp_account_statement.account_id = core.accounts.account_id;


    UPDATE temp_account_statement SET
        flag_bg = core.get_flag_background_color(core.get_flag_type_id(_user_id, 'account_statement', 'transaction_code', temp_account_statement.tran_code::text)),
        flag_fg = core.get_flag_foreground_color(core.get_flag_type_id(_user_id, 'account_statement', 'transaction_code', temp_account_statement.tran_code::text));


    IF(_normally_debit) THEN
        UPDATE temp_account_statement SET balance = temp_account_statement.balance * -1;
    END IF;

    RETURN QUERY
    SELECT * FROM temp_account_statement;
END;
$$
LANGUAGE plpgsql;

--SELECT * FROM transactions.get_account_statement('1-1-2010','1-1-2020',1,1,1);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.get_accrued_interest-todo.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_accrued_interest(office_id integer, party_id bigint);




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.get_cash_flow_statement.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_cash_flow_statement
(
    _date_from                      date,
    _date_to                        date,
    _user_id                        integer,
    _office_id                      integer,
    _factor                         integer
);

CREATE FUNCTION transactions.get_cash_flow_statement
(
    _date_from                      date,
    _date_to                        date,
    _user_id                        integer,
    _office_id                      integer,
    _factor                         integer
)
RETURNS json
AS
$$
    DECLARE _sql                    text;
    DECLARE _periods                core.period[];
    DECLARE _json                   json;
    DECLARE this                    RECORD;
    DECLARE _balance                decimal(24, 4);
    DECLARE _is_periodic            boolean = office.is_periodic_inventory(_office_id);
BEGIN    
    --We cannot divide by zero.
    IF(COALESCE(_factor, 0) = 0) THEN
        _factor := 1;
    END IF;

    DROP TABLE IF EXISTS cf_temp;
    CREATE TEMPORARY TABLE cf_temp
    (
        item_id                     integer PRIMARY KEY,
        item                        text,
        account_master_id           integer,
        parent_item_id              integer REFERENCES cf_temp(item_id),
        is_summation                boolean DEFAULT(false),
        is_debit                    boolean DEFAULT(false),
        is_sales                    boolean DEFAULT(false),
        is_purchase                 boolean DEFAULT(false)
    ) ON COMMIT DROP;


    _periods            := core.get_periods(_date_from, _date_to);

    IF(_periods IS NULL) THEN
        RAISE EXCEPTION 'Invalid period specified.'
        USING ERRCODE='P3009';
    END IF;

    /**************************************************************************************************************************************************************************************
        CREATING PERIODS
    **************************************************************************************************************************************************************************************/
    SELECT string_agg(dynamic, '') FROM
    (
            SELECT 'ALTER TABLE cf_temp ADD COLUMN "' || period_name || '" decimal(24, 4) DEFAULT(0);' as dynamic
            FROM explode_array(_periods)
         
    ) periods
    INTO _sql;
    
    EXECUTE _sql;

    /**************************************************************************************************************************************************************************************
        CASHFLOW TABLE STRUCTURE START
    **************************************************************************************************************************************************************************************/
    INSERT INTO cf_temp(item_id, item, is_summation, is_debit)
    SELECT  10000,  'Cash and cash equivalents, beginning of period',   false,  true    UNION ALL    
    SELECT  20000,  'Cash flows from operating activities',             true,   false   UNION ALL    
    SELECT  30000,  'Cash flows from investing activities',             true,   false   UNION ALL
    SELECT  40000,  'Cash flows from financing acticities',             true,   false   UNION ALL    
    SELECT  50000,  'Net increase in cash and cash equivalents',        false,  false   UNION ALL    
    SELECT  60000,  'Cash and cash equivalents, end of period',         false,  true;    

    INSERT INTO cf_temp(item_id, item, parent_item_id, is_debit, is_sales, is_purchase)
    SELECT  cash_flow_heading_id,   cash_flow_heading_name, 20000,  is_debit,   is_sales,   is_purchase FROM core.cash_flow_headings WHERE cash_flow_heading_type = 'O' UNION ALL
    SELECT  cash_flow_heading_id,   cash_flow_heading_name, 30000,  is_debit,   is_sales,   is_purchase FROM core.cash_flow_headings WHERE cash_flow_heading_type = 'I' UNION ALL 
    SELECT  cash_flow_heading_id,   cash_flow_heading_name, 40000,  is_debit,   is_sales,   is_purchase FROM core.cash_flow_headings WHERE cash_flow_heading_type = 'F';

    INSERT INTO cf_temp(item_id, item, parent_item_id, is_debit, account_master_id)
    SELECT core.account_masters.account_master_id + 50000, core.account_masters.account_master_name,  core.cash_flow_setup.cash_flow_heading_id, core.cash_flow_headings.is_debit, core.account_masters.account_master_id
    FROM core.cash_flow_setup
    INNER JOIN core.account_masters
    ON core.cash_flow_setup.account_master_id = core.account_masters.account_master_id
    INNER JOIN core.cash_flow_headings
    ON core.cash_flow_setup.cash_flow_heading_id = core.cash_flow_headings.cash_flow_heading_id;

    /**************************************************************************************************************************************************************************************
        CASHFLOW TABLE STRUCTURE END
    **************************************************************************************************************************************************************************************/


    /**************************************************************************************************************************************************************************************
        ITERATING THROUGH PERIODS TO UPDATE TRANSACTION BALANCES
    **************************************************************************************************************************************************************************************/
    FOR this IN SELECT * FROM explode_array(_periods) ORDER BY date_from ASC
    LOOP
        --
        --
        --Opening cash balance.
        --
        --
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"=
            (
                SELECT
                SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) - 
                SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) AS total_amount
            FROM transactions.verified_cash_transaction_mat_view
            WHERE account_master_id IN(10101, 10102) 
            AND value_date <''' || this.date_from::text ||
            ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
            )
        WHERE cf_temp.item_id = 10000;';

        EXECUTE _sql;

        --
        --
        --Updating debit balances of mapped account master heads.
        --
        --
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"=tran.total_amount
        FROM
        (
            SELECT transactions.verified_cash_transaction_mat_view.account_master_id,
            SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) - 
            SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) AS total_amount
        FROM transactions.verified_cash_transaction_mat_view
        WHERE transactions.verified_cash_transaction_mat_view.book NOT IN (''Sales.Direct'', ''Sales.Receipt'', ''Sales.Delivery'', ''Purchase.Direct'', ''Purchase.Receipt'')
        AND NOT account_master_id IN(10101, 10102) 
        AND value_date >=''' || this.date_from::text || ''' AND value_date <=''' || this.date_to::text ||
        ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
        GROUP BY transactions.verified_cash_transaction_mat_view.account_master_id
        ) AS tran
        WHERE tran.account_master_id = cf_temp.account_master_id';
        EXECUTE _sql;

        --
        --
        --Updating cash paid to suppliers.
        --
        --
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"=
        
        (
            SELECT
            SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) - 
            SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) 
        FROM transactions.verified_cash_transaction_mat_view
        WHERE transactions.verified_cash_transaction_mat_view.book IN (''Purchase.Direct'', ''Purchase.Receipt'', ''Purchase.Payment'')
        AND NOT account_master_id IN(10101, 10102) 
        AND value_date >=''' || this.date_from::text || ''' AND value_date <=''' || this.date_to::text ||
        ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
        )
        WHERE cf_temp.is_purchase;';
        EXECUTE _sql;

        --
        --
        --Updating cash received from customers.
        --
        --
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"=
        
        (
            SELECT
            SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) - 
            SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) 
        FROM transactions.verified_cash_transaction_mat_view
        WHERE transactions.verified_cash_transaction_mat_view.book IN (''Sales.Direct'', ''Sales.Receipt'', ''Sales.Delivery'')
        AND account_master_id IN(10101, 10102) 
        AND value_date >=''' || this.date_from::text || ''' AND value_date <=''' || this.date_to::text ||
        ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
        )
        WHERE cf_temp.is_sales;';
        RAISE NOTICE '%', _SQL;
        EXECUTE _sql;

        --Closing cash balance.
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"
        =
        (
            SELECT
            SUM(CASE tran_type WHEN ''Cr'' THEN amount_in_local_currency ELSE 0 END) - 
            SUM(CASE tran_type WHEN ''Dr'' THEN amount_in_local_currency ELSE 0 END) AS total_amount
        FROM transactions.verified_cash_transaction_mat_view
        WHERE account_master_id IN(10101, 10102) 
        AND value_date <''' || this.date_to::text ||
        ''' AND office_id IN (SELECT * FROM office.get_office_ids(' || _office_id::text || '))
        ) 
        WHERE cf_temp.item_id = 60000;';

        EXECUTE _sql;

        --Reversing to debit balance for associated headings.
        _sql := 'UPDATE cf_temp SET "' || this.period_name || '"="' || this.period_name || '"*-1 WHERE is_debit=true;';
        EXECUTE _sql;
    END LOOP;



    --Updating periodic balances on parent item by the sum of their respective child balances.
    SELECT 'UPDATE cf_temp SET ' || array_to_string(array_agg('"' || period_name || '"' || '=cf_temp."' || period_name || '" + tran."' || period_name || '"'), ',') || 
    ' FROM 
    (
        SELECT parent_item_id, '
        || array_to_string(array_agg('SUM("' || period_name || '") AS "' || period_name || '"'), ',') || '
         FROM cf_temp
        GROUP BY parent_item_id
    ) 
    AS tran
        WHERE tran.parent_item_id = cf_temp.item_id
        AND cf_temp.item_id NOT IN (10000, 60000);'
    INTO _sql
    FROM explode_array(_periods);

        RAISE NOTICE '%', _SQL;
    EXECUTE _sql;


    SELECT 'UPDATE cf_temp SET ' || array_to_string(array_agg('"' || period_name || '"=tran."' || period_name || '"'), ',') 
    || ' FROM 
    (
        SELECT
            cf_temp.parent_item_id,'
        || array_to_string(array_agg('SUM(CASE is_debit WHEN true THEN "' || period_name || '" ELSE "' || period_name || '" *-1 END) AS "' || period_name || '"'), ',') ||
    '
         FROM cf_temp
         GROUP BY cf_temp.parent_item_id
    ) 
    AS tran
    WHERE cf_temp.item_id = tran.parent_item_id
    AND cf_temp.parent_item_id IS NULL;'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql;


    --Dividing by the factor.
    SELECT 'UPDATE cf_temp SET ' || array_to_string(array_agg('"' || period_name || '"="' || period_name || '"/' || _factor::text), ',') || ';'
    INTO _sql
    FROM explode_array(_periods);
    EXECUTE _sql;


    --Converting 0's to NULLS.
    SELECT 'UPDATE cf_temp SET ' || array_to_string(array_agg('"' || period_name || '"= CASE WHEN "' || period_name || '" = 0 THEN NULL ELSE "' || period_name || '" END'), ',') || ';'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql;

    SELECT 
    'SELECT array_to_json(array_agg(row_to_json(report)))
    FROM
    (
        SELECT item, '
        || array_to_string(array_agg('"' || period_name || '"'), ',') ||
        ', is_summation FROM cf_temp
        WHERE account_master_id IS NULL
        ORDER BY item_id
    ) AS report;'
    INTO _sql
    FROM explode_array(_periods);

    EXECUTE _sql INTO _json ;

    RETURN _json;
END
$$
LANGUAGE plpgsql;

--SELECT transactions.get_cash_flow_statement('1-1-2000','1-15-2020', 2, 2, 1)

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.get_cash_repository_balance.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_cash_repository_balance(_cash_repository_id integer, _currency_code national character varying(12));
CREATE FUNCTION transactions.get_cash_repository_balance(_cash_repository_id integer, _currency_code national character varying(12))
RETURNS public.money_strict2
AS
$$
    DECLARE _debit public.money_strict2;
    DECLARE _credit public.money_strict2;
BEGIN
    SELECT COALESCE(SUM(amount_in_currency), 0::public.money_strict2) INTO _debit
    FROM transactions.verified_transaction_view
    WHERE cash_repository_id=$1
    AND currency_code=$2
    AND tran_type='Dr';

    SELECT COALESCE(SUM(amount_in_currency), 0::public.money_strict2) INTO _credit
    FROM transactions.verified_transaction_view
    WHERE cash_repository_id=$1
    AND currency_code=$2
    AND tran_type='Cr';

    RETURN _debit - _credit;
END
$$
LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS transactions.get_cash_repository_balance(_cash_repository_id integer);
CREATE FUNCTION transactions.get_cash_repository_balance(_cash_repository_id integer)
RETURNS public.money_strict2
AS
$$
    DECLARE _local_currency_code national character varying(12) = transactions.get_default_currency_code($1);
    DECLARE _debit public.money_strict2;
    DECLARE _credit public.money_strict2;
BEGIN
    SELECT COALESCE(SUM(amount_in_currency), 0::public.money_strict2) INTO _debit
    FROM transactions.verified_transaction_view
    WHERE cash_repository_id=$1
    AND currency_code=_local_currency_code
    AND tran_type='Dr';

    SELECT COALESCE(SUM(amount_in_currency), 0::public.money_strict2) INTO _credit
    FROM transactions.verified_transaction_view
    WHERE cash_repository_id=$1
    AND currency_code=_local_currency_code
    AND tran_type='Cr';

    RETURN _debit - _credit;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.get_net_profit.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_net_profit
(
    _date_from                      date,
    _date_to                        date,
    _office_id                      integer,
    _factor                         integer,
    _no_provison                    boolean
);

CREATE FUNCTION transactions.get_net_profit
(
    _date_from                      date,
    _date_to                        date,
    _office_id                      integer,
    _factor                         integer,
    _no_provison                    boolean DEFAULT false
)
RETURNS decimal(24, 4)
AS
$$
    DECLARE _incomes                decimal(24, 4) = 0;
    DECLARE _expenses               decimal(24, 4) = 0;
    DECLARE _profit_before_tax      decimal(24, 4) = 0;
    DECLARE _tax_paid               decimal(24, 4) = 0;
    DECLARE _tax_provison           decimal(24, 4) = 0;
BEGIN
    SELECT SUM(CASE tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE amount_in_local_currency * -1 END)
    INTO _incomes
    FROM transactions.verified_transaction_mat_view
    WHERE value_date >= _date_from AND value_date <= _date_to
    AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
    AND account_master_id >=20100
    AND account_master_id <= 20300;
    
    SELECT SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE amount_in_local_currency * -1 END)
    INTO _expenses
    FROM transactions.verified_transaction_mat_view
    WHERE value_date >= _date_from AND value_date <= _date_to
    AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
    AND account_master_id >=20400
    AND account_master_id <= 20701;
    
    SELECT SUM(CASE tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE amount_in_local_currency * -1 END)
    INTO _tax_paid
    FROM transactions.verified_transaction_mat_view
    WHERE value_date >= _date_from AND value_date <= _date_to
    AND office_id IN (SELECT * FROM office.get_office_ids(_office_id))
    AND account_master_id =20800;
    
    _profit_before_tax := COALESCE(_incomes, 0) - COALESCE(_expenses, 0);

    IF(_no_provison) THEN
        RETURN (_profit_before_tax - COALESCE(_tax_paid, 0)) / _factor;
    END IF;
    
    _tax_provison      := core.get_income_tax_provison_amount(_office_id, _profit_before_tax, COALESCE(_tax_paid, 0));
    
    RETURN (_profit_before_tax - (COALESCE(_tax_provison, 0) + COALESCE(_tax_paid, 0))) / _factor;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.get_party_transaction_summary.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_party_transaction_summary
(
    office_id integer, 
    party_id bigint
);

CREATE FUNCTION transactions.get_party_transaction_summary
(
    office_id integer, 
    party_id bigint, 
    OUT currency_code text, 
    OUT currency_symbol text, 
    OUT total_due_amount decimal(24, 4), 
    OUT office_due_amount decimal(24, 4), 
    OUT last_receipt_date date, 
    OUT transaction_value decimal(24, 4)
)
AS
$$
    DECLARE root_office_id integer = 0;
BEGIN
    currency_code := core.get_currency_code_by_party_id(party_id);

    SELECT core.currencies.currency_symbol into $4
    FROM core.currencies
    WHERE core.currencies.currency_code = $3;

    SELECT office.offices.office_id INTO root_office_id
    FROM office.offices
    WHERE parent_office_id IS NULL;

    total_due_amount := transactions.get_total_due(root_office_id, party_id);
    office_due_amount := transactions.get_total_due(office_id, party_id);
    last_receipt_date := transactions.get_last_receipt_date(office_id, party_id);
    transaction_value := transactions.get_average_party_transaction(party_id, office_id);

    RETURN;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.get_reorder_view_function.sql --<--<--
-- Function: transactions.get_reorder_view_function(integer)

 DROP FUNCTION transactions.get_reorder_view_function(integer);

CREATE OR REPLACE FUNCTION transactions.get_reorder_view_function(IN office_id integer)
  RETURNS TABLE(item_id integer, item_code character varying, item_name character varying, unit_id integer, unit text, quantity_on_hand numeric, reorder_level integer, reorder_quantity integer, preferred_supplier_id bigint, preferred_supplier text, price public.money_strict2) AS
$BODY$
BEGIN
        RETURN QUERY
        SELECT 
                core.items.item_id,
                core.items.item_code,
                core.items.item_name,
                core.items.reorder_unit_id,
                core.units.unit_name::text AS unit,
                floor(office.count_item_in_stock(core.items.item_id, core.items.reorder_unit_id, $1)) AS quantity_on_hand,
                core.items.reorder_level,
                core.items.reorder_quantity,
                core.items.preferred_supplier_id,
                core.parties.party_code::text AS party,
                core.get_item_cost_price(core.items.item_id, core.items.reorder_unit_id, core.items.preferred_supplier_id)
        FROM core.items
        INNER JOIN core.parties
        ON core.items.preferred_supplier_id = core.parties.party_id
        INNER JOIN core.units
        ON core.items.reorder_unit_id = core.units.unit_id
        WHERE 
        floor
        (
                office.count_item_in_stock(core.items.item_id, core.items.reorder_unit_id, $1)
                +
                core.get_ordered_quantity(core.items.item_id, core.items.reorder_unit_id, $1)
        ) 

        < core.items.reorder_level
        AND core.items.reorder_quantity > 0;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION transactions.get_reorder_view_function(integer)
  OWNER TO postgres;
GRANT EXECUTE ON FUNCTION transactions.get_reorder_view_function(integer) TO public;
GRANT EXECUTE ON FUNCTION transactions.get_reorder_view_function(integer) TO postgres;
GRANT EXECUTE ON FUNCTION transactions.get_reorder_view_function(integer) TO mix_erp;
GRANT EXECUTE ON FUNCTION transactions.get_reorder_view_function(integer) TO report_user;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.get_retained_earnings_statement.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_retained_earnings_statement
(
    _date_to                        date,
    _office_id                      integer,
    _factor                         integer    
);

CREATE FUNCTION transactions.get_retained_earnings_statement
(
    _date_to                        date,
    _office_id                      integer,
    _factor                         integer    
)
RETURNS TABLE
(
    id                              integer,
    value_date                      date,
    tran_code                       text,
    statement_reference             text,
    debit                           decimal(24, 4),
    credit                          decimal(24, 4),
    balance                         decimal(24, 4),
    office                          text,
    book                            text,
    account_id                      integer,
    account_number                  text,
    account                         text,
    posted_on                       TIMESTAMP WITH TIME ZONE,
    posted_by                       text,
    approved_by                     text,
    verification_status             integer
)
AS
$$
    DECLARE _accounts               integer[];
    DECLARE _date_from              date;
    DECLARE _net_profit             decimal(24, 4)  = 0;
    DECLARE _income_tax_rate        real            = 0;
    DECLARE _itp                    decimal(24, 4)  = 0;
BEGIN
    _date_from                      := core.get_fiscal_year_start_date(_office_id);
    _net_profit                     := transactions.get_net_profit(_date_from, _date_to, _office_id, _factor);
    _income_tax_rate                := office.get_income_tax_rate(_office_id);

    IF(COALESCE(_factor , 0) = 0) THEN
        _factor                         := 1;
    END IF; 

    IF(_income_tax_rate != 0) THEN
        _itp                            := (_net_profit * _income_tax_rate) / (100 - _income_tax_rate);
    END IF;

    DROP TABLE IF EXISTS temp_account_statement;
    CREATE TEMPORARY TABLE temp_account_statement
    (
        id                          SERIAL,
        value_date                  date,
        tran_code                   text,
        statement_reference         text,
        debit                       decimal(24, 4),
        credit                      decimal(24, 4),
        balance                     decimal(24, 4),
        office                      text,
        book                        text,
        account_id                  integer,
        account_number              text,
        account                     text,
        posted_on                   TIMESTAMP WITH TIME ZONE,
        posted_by                   text,
        approved_by                 text,
        verification_status         integer
    ) ON COMMIT DROP;

    SELECT array_agg(core.accounts.account_id) INTO _accounts
    FROM core.accounts
    WHERE core.accounts.account_master_id BETWEEN 15300 AND 15400;

    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit, office, book, account_id, posted_on, posted_by, approved_by, verification_status)
    SELECT
        _date_from,
        NULL,
        'Beginning balance on this fiscal year.',
        NULL,
        SUM
        (
            CASE transactions.transaction_details.tran_type
            WHEN 'Cr' THEN amount_in_local_currency
            ELSE amount_in_local_currency * -1 
            END            
        ) as credit,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL
    FROM transactions.transaction_master
    INNER JOIN transactions.transaction_details
    ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
    WHERE
        transactions.transaction_master.verification_status_id > 0
    AND
        transactions.transaction_master.value_date < _date_from
    AND
       transactions.transaction_master.office_id IN (SELECT * FROM office.get_office_ids(_office_id)) 
    AND
       transactions.transaction_details.account_id = ANY(_accounts);

    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit)
    SELECT _date_to, '', format('Add: Net Profit as on %1$s.', _date_to::text), 0, _net_profit;

    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit)
    SELECT _date_to, '', 'Add: Income Tax provison.', 0, _itp;

--     DELETE FROM temp_account_statement
--     WHERE COALESCE(temp_account_statement.debit, 0) = 0
--     AND COALESCE(temp_account_statement.credit, 0) = 0;
    

    UPDATE temp_account_statement SET 
    debit = temp_account_statement.credit * -1,
    credit = 0
    WHERE temp_account_statement.credit < 0;


    INSERT INTO temp_account_statement(value_date, tran_code, statement_reference, debit, credit, office, book, account_id, posted_on, posted_by, approved_by, verification_status)
    SELECT
        transactions.transaction_master.value_date,
        transactions.transaction_master. transaction_code,
        transactions.transaction_details.statement_reference,
        CASE transactions.transaction_details.tran_type
        WHEN 'Dr' THEN amount_in_local_currency / _factor
        ELSE NULL END,
        CASE transactions.transaction_details.tran_type
        WHEN 'Cr' THEN amount_in_local_currency / _factor
        ELSE NULL END,
        office.get_office_name_by_id(transactions.transaction_master.office_id),
        transactions.transaction_master.book,
        transactions.transaction_details.account_id,
        transactions.transaction_master.transaction_ts,
        office.get_user_name_by_user_id(COALESCE(transactions.transaction_master.user_id, transactions.transaction_master.sys_user_id)),
        office.get_user_name_by_user_id(transactions.transaction_master.verified_by_user_id),
        transactions.transaction_master.verification_status_id
    FROM transactions.transaction_master
    INNER JOIN transactions.transaction_details
    ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
    WHERE
        transactions.transaction_master.verification_status_id > 0
    AND
        transactions.transaction_master.value_date >= _date_from
    AND
        transactions.transaction_master.value_date <= _date_to
    AND
       transactions.transaction_master.office_id IN (SELECT * FROM office.get_office_ids(_office_id)) 
    AND
       transactions.transaction_details.account_id = ANY(_accounts)
    ORDER BY 
        transactions.transaction_master.value_date,
        transactions.transaction_master.last_verified_on;


    UPDATE temp_account_statement
    SET balance = c.balance
    FROM
    (
        SELECT
            temp_account_statement.id, 
            SUM(COALESCE(c.credit, 0)) 
            - 
            SUM(COALESCE(c.debit,0)) As balance
        FROM temp_account_statement
        LEFT JOIN temp_account_statement AS c 
            ON (c.id <= temp_account_statement.id)
        GROUP BY temp_account_statement.id
        ORDER BY temp_account_statement.id
    ) AS c
    WHERE temp_account_statement.id = c.id;

    UPDATE temp_account_statement SET 
        account_number = core.accounts.account_number,
        account = core.accounts.account_name
    FROM core.accounts
    WHERE temp_account_statement.account_id = core.accounts.account_id;


    UPDATE temp_account_statement SET debit = NULL WHERE temp_account_statement.debit = 0;
    UPDATE temp_account_statement SET credit = NULL WHERE temp_account_statement.credit = 0;

    RETURN QUERY
    SELECT * FROM temp_account_statement
    ORDER BY id;    
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.get_retained_earnings_statement('7/16/2015', 2, 1000);

--SELECT * FROM transactions.get_retained_earnings('7/16/2015', 2, 100);



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.get_sales_by_offices.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_sales_by_offices(office_id integer, divide_by integer);

CREATE FUNCTION transactions.get_sales_by_offices(office_id integer, divide_by integer)
RETURNS TABLE
(
  office text,
  jan numeric,
  feb numeric,
  mar numeric,
  apr numeric,
  may numeric,
  jun numeric,
  jul numeric,
  aug numeric,
  sep numeric,
  oct numeric,
  nov numeric,
  "dec" numeric
)
AS
$$
BEGIN
        IF divide_by <= 0 THEN
                divide_by := 1;
        END IF;
        
        RETURN QUERY
        SELECT * FROM crosstab
        (
                '
                SELECT 
                office.get_office_code_by_id(office_id) AS office,
                date_part(''month'', value_date) AS month_id,
                SUM((price * quantity) - discount + tax)/' || divide_by::text || '::integer AS total
                FROM transactions.verified_stock_transaction_view
                WHERE book IN (''Sales.Direct'', ''Sales.Delivery'')
                AND office_id IN (SELECT * FROM office.get_office_ids(' || quote_literal($1::text) || '))
                GROUP BY office_id,
                date_part(''month'', value_date),
                date_trunc(''month'',value_date)
                ',
                'select m from generate_series(1,12) m'
        )as (
          office text,
          "Jan" numeric,
          "Feb" numeric,
          "Mar" numeric,
          "Apr" numeric,
          "May" numeric,
          "Jun" numeric,
          "Jul" numeric,
          "Aug" numeric,
          "Sep" numeric,
          "Oct" numeric,
          "Nov" numeric,
          "Dec" numeric
        ) ;

END
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS transactions.get_sales_by_offices(divide_by integer);

CREATE FUNCTION transactions.get_sales_by_offices(divide_by integer)
RETURNS TABLE
(
  office text,
  jan numeric,
  feb numeric,
  mar numeric,
  apr numeric,
  may numeric,
  jun numeric,
  jul numeric,
  aug numeric,
  sep numeric,
  oct numeric,
  nov numeric,
  "dec" numeric
)
AS
$$
    DECLARE root_office_id integer = 0;
BEGIN
    SELECT office.offices.office_id INTO root_office_id
    FROM office.offices
    WHERE parent_office_id IS NULL
    LIMIT 1;

        IF divide_by <= 0 THEN
                divide_by := 1;
        END IF;
        
        RETURN QUERY
        SELECT * FROM transactions.get_sales_by_offices(root_office_id, divide_by);
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.get_sales_by_offices(1, 1);
--SELECT * FROM transactions.get_sales_by_offices(1000);



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.get_total_due.sql --<--<--
DROP FUNCTION IF EXISTS transactions.get_total_due(office_id integer, party_id bigint);

CREATE FUNCTION transactions.get_total_due(office_id integer, party_id bigint)
RETURNS DECIMAL(24, 4)
AS
$$
    DECLARE _account_id bigint= core.get_account_id_by_party_id($2);
    DECLARE _debit DECIMAL(24, 4) = 0;
    DECLARE _credit DECIMAL(24, 4) = 0;
    DECLARE _local_currency_code national character varying(12) = core.get_currency_code_by_office_id($1); 
    DECLARE _base_currency_code  national character varying(12) = core.get_currency_code_by_party_id($2);
    DECLARE _amount_in_local_currency DECIMAL(24, 4)= 0;
    DECLARE _amount_in_base_currency DECIMAL(24, 4)= 0;
    DECLARE _er decimal_strict2 = 0;
BEGIN

    SELECT SUM(amount_in_local_currency)
    INTO _debit
    FROM transactions.verified_transaction_view
    WHERE transactions.verified_transaction_view.account_id IN (SELECT * FROM core.get_account_ids(_account_id))
    AND transactions.verified_transaction_view.office_id IN (SELECT * FROM office.get_office_ids($1))
    AND tran_type='Dr';

    SELECT SUM(amount_in_local_currency)
    INTO _credit
    FROM transactions.verified_transaction_view
    WHERE transactions.verified_transaction_view.account_id IN (SELECT * FROM core.get_account_ids(_account_id))
    AND transactions.verified_transaction_view.office_id IN (SELECT * FROM office.get_office_ids($1))
    AND tran_type='Cr';

    _er := COALESCE(transactions.get_exchange_rate($1, _local_currency_code, _base_currency_code), 0);

    IF(_er = 0) THEN
        RAISE EXCEPTION 'Exchange rate between % and % was not found.', _local_currency_code, _base_currency_code
        USING ERRCODE='P4010';
    END IF;


    _amount_in_local_currency = COALESCE(_credit, 0) - COALESCE(_debit, 0);


    _amount_in_base_currency = _amount_in_local_currency * _er; 

    RETURN _amount_in_base_currency;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.perform_eod_operation.sql --<--<--
DROP FUNCTION IF EXISTS transactions.perform_eod_operation(_user_id integer, _office_id integer, _value_date date);
DROP FUNCTION IF EXISTS transactions.perform_eod_operation(_user_id integer, _login_id bigint, _office_id integer, _value_date date);

CREATE FUNCTION transactions.perform_eod_operation(_user_id integer, _login_id bigint, _office_id integer, _value_date date)
RETURNS boolean
AS
$$
    DECLARE _routine            regproc;
    DECLARE _routine_id         integer;
    DECLARE this                RECORD;
    DECLARE _sql                text;
    DECLARE _is_error           boolean=false;
    DECLARE _notice             text;
    DECLARE _office_code        text;
BEGIN
    IF(_value_date IS NULL) THEN
        RAISE EXCEPTION 'Invalid date.'
        USING ERRCODE='P3008';
    END IF;

    IF(NOT policy.is_elevated_user(_user_id)) THEN
        RAISE EXCEPTION 'Access is denied.'
        USING ERRCODE='P9001';
    END IF;

    IF(_value_date != transactions.get_value_date(_office_id)) THEN
        RAISE EXCEPTION 'Invalid value date.'
        USING ERRCODE='P3007';
    END IF;

    SELECT * FROM transactions.day_operation
    WHERE value_date=_value_date 
    AND office_id = _office_id INTO this;

    IF(this IS NULL) THEN
        RAISE EXCEPTION 'Invalid value date.'
        USING ERRCODE='P3007';
    ELSE    
        IF(this.completed OR this.completed_on IS NOT NULL) THEN
            RAISE EXCEPTION 'End of day operation was already performed.'
            USING ERRCODE='P5102';
            _is_error        := true;
        END IF;
    END IF;

    IF EXISTS
    (
        SELECT * FROM transactions.transaction_master
        WHERE value_date < _value_date
        AND verification_status_id = 0
    ) THEN
        RAISE EXCEPTION 'Past dated transactions in verification queue.'
        USING ERRCODE='P5103';
        _is_error        := true;
    END IF;

    IF EXISTS
    (
        SELECT * FROM transactions.transaction_master
        WHERE value_date = _value_date
        AND verification_status_id = 0
    ) THEN
        RAISE EXCEPTION 'Please verify transactions before performing end of day operation.'
        USING ERRCODE='P5104';
        _is_error        := true;
    END IF;
    
    IF(NOT _is_error) THEN
        _office_code        := office.get_office_code_by_id(_office_id);
        _notice             := 'EOD started.'::text;
        RAISE INFO  '%', _notice;

        FOR this IN
        SELECT routine_id, routine_name 
        FROM transactions.routines 
        WHERE status 
        ORDER BY "order" ASC
        LOOP
            _routine_id             := this.routine_id;
            _routine                := this.routine_name;
            _sql                    := format('SELECT * FROM %1$s($1, $2, $3, $4);', _routine);

            RAISE NOTICE '%', _sql;

            _notice             := 'Performing ' || _routine::text || '.';
            RAISE INFO '%', _notice;

            PERFORM pg_sleep(5);
            EXECUTE _sql USING _user_id, _login_id, _office_id, _value_date;

            _notice             := 'Completed  ' || _routine::text || '.';
            RAISE INFO '%', _notice;
            
            PERFORM pg_sleep(5);            
        END LOOP;


        UPDATE transactions.day_operation SET 
            completed_on = NOW(), 
            completed_by = _user_id,
            completed = true
        WHERE value_date=_value_date
        AND office_id = _office_id;

        _notice             := 'EOD of ' || _office_code || ' for ' || _value_date::text || ' completed without errors.'::text;
        RAISE INFO '%', _notice;

        _notice             := 'OK'::text;
        RAISE INFO '%', _notice;

        RETURN true;
    END IF;

    RETURN false;    
END;
$$
LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS transactions.perform_eod_operation(_login_id bigint);

CREATE FUNCTION transactions.perform_eod_operation(_login_id bigint)
RETURNS boolean
AS
$$
    DECLARE _user_id    integer;
    DECLARE _office_id integer;
    DECLARE _value_date date;
BEGIN
    SELECT 
        user_id,
        office_id,
        transactions.get_value_date(office_id)
    INTO
        _user_id,
        _office_id,
        _value_date
    FROM audit.logins
    WHERE login_id=$1;

    RETURN transactions.perform_eod_operation(_user_id,_login_id, _office_id, _value_date);
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_bonus.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_bonus(_user_id integer, _login_id bigint, _office_id integer, _value_date date);

CREATE FUNCTION transactions.post_bonus(_user_id integer, _login_id bigint, _office_id integer, _value_date date)
RETURNS void
VOLATILE
AS
$$
    DECLARE _frequency_id           integer;
    DECLARE _transaction_master_id  bigint;
    DECLARE _tran_counter           integer;
    DECLARE _transaction_code       text;
    DECLARE _default_currency_code  national character varying(12);
    DECLARE _sys                    integer = office.get_sys_user_id();
    DECLARE this                    RECORD;
BEGIN
    IF(_value_date != transactions.get_value_date(_office_id)) THEN
        RAISE EXCEPTION 'Invalid value date.'
        USING ERRCODE='P3007';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.bonus_slabs WHERE ends_on >= _value_date) THEN
        RETURN;
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.salesperson_bonus_setups) THEN
        RETURN;
    END IF;

    SELECT frequency_id INTO _frequency_id
    FROM core.frequency_setups
    WHERE value_date = _value_date;

    IF(COALESCE(_frequency_id, 0) = 0) THEN
        --Today does not fall on a frequency
        RETURN;
    END IF;


    DROP TABLE IF EXISTS bonus_slab_temp;
    CREATE TEMPORARY TABLE bonus_slab_temp
    (
        bonus_slab_id               integer,
        bonus_slab_code             text,
        bonus_slab_name             text,
        checking_frequency_id       integer,
        amount_from                 public.money_strict,
        amount_to                   public.money_strict,
        bonus_rate                  numeric,
        salesperson_id              integer,
        period_from                 date,
        period_to                   date,
        salesperson_account_id      bigint,
        bonus_account_id            bigint,
        statement_reference         national character varying(100)
    ) ON COMMIT DROP;

    INSERT INTO bonus_slab_temp(bonus_slab_id, bonus_slab_code, bonus_slab_name, checking_frequency_id, amount_from, amount_to, bonus_rate, salesperson_id, salesperson_account_id, bonus_account_id, statement_reference)
    SELECT
        core.bonus_slabs.bonus_slab_id,
        core.bonus_slabs.bonus_slab_code,
        core.bonus_slabs.bonus_slab_name,
        core.bonus_slabs.checking_frequency_id,
        core.bonus_slab_details.amount_from,
        core.bonus_slab_details.amount_to,
        core.bonus_slab_details.bonus_rate,
        core.salesperson_bonus_setups.salesperson_id,
        core.salespersons.account_id,
        core.bonus_slabs.account_id,
        core.bonus_slabs.statement_reference
    FROM core.bonus_slab_details
    INNER JOIN core.bonus_slabs
    ON core.bonus_slabs.bonus_slab_id = core.bonus_slab_details.bonus_slab_id
    INNER JOIN core.salesperson_bonus_setups
    ON core.salesperson_bonus_setups.bonus_slab_id = core.bonus_slabs.bonus_slab_id
    INNER JOIN core.salespersons
    ON core.salespersons.salesperson_id = core.salesperson_bonus_setups.salesperson_id
    WHERE ends_on >= _value_date::date
    AND _frequency_id = ANY(core.get_frequencies(core.bonus_slabs.checking_frequency_id));

    IF(SELECT COUNT(*) FROM bonus_slab_temp) = 0 THEN
        --Nothing found to post today
        RETURN;
    END IF;

    UPDATE bonus_slab_temp
    SET period_to = _value_date,
    period_from = core.get_frequency_start_date(_frequency_id, _value_date);

    DROP TABLE IF EXISTS bonus_temp;
    CREATE TEMPORARY TABLE bonus_temp
    (
        id                      SERIAL,
        salesperson_id          integer,
        period_from             date,
        period_to               date,
        sales                   public.money_strict2,
        bonus_rate              numeric,
        bonus                   numeric,
        salesperson_account_id  bigint,
        bonus_account_id        bigint,
        statement_reference     national character varying(100)
    ) ON COMMIT DROP;

    INSERT INTO bonus_temp(salesperson_id, period_from, period_to, salesperson_account_id, bonus_account_id, statement_reference)
    SELECT 
    DISTINCT 
        bonus_slab_temp.salesperson_id, 
        bonus_slab_temp.period_from, 
        bonus_slab_temp.period_to,
        bonus_slab_temp.salesperson_account_id,
        bonus_slab_temp.bonus_account_id,        
        bonus_slab_temp.statement_reference
    FROM bonus_slab_temp;
    
    UPDATE bonus_temp
    SET sales = 
    (
        SELECT
            SUM
            (
                (
                    COALESCE(quantity, 0)
                    * 
                    COALESCE(price, 0)
                ) - COALESCE(discount, 0)
            ) AS total
        FROM transactions.transaction_master
        INNER JOIN transactions.stock_master
        ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_id
        INNER JOIN transactions.stock_details
        ON transactions.stock_details.stock_master_id = transactions.stock_master.stock_master_id
        WHERE transactions.transaction_master.verification_status_id > 0
        AND transactions.stock_master.salesperson_id = bonus_temp.salesperson_id
        AND transactions.transaction_master.book = ANY(ARRAY['Sales.Direct', 'Sales.Delivery'])
        AND transactions.transaction_master.value_date
        BETWEEN bonus_temp.period_from AND bonus_temp.period_to
   );

   
    UPDATE bonus_temp
    SET bonus_rate = 
    (
        SELECT bonus_slab_temp.bonus_rate
        FROM bonus_slab_temp
        WHERE bonus_slab_temp.salesperson_id = bonus_temp.salesperson_id
        AND bonus_temp.sales > bonus_slab_temp.amount_from
        AND bonus_temp.sales <= bonus_slab_temp.amount_to
    );


    UPDATE bonus_temp
    SET bonus = ROUND(bonus_temp.sales * bonus_temp.bonus_rate / 100, 2);

    UPDATE bonus_temp
    SET statement_reference = REPLACE(bonus_temp.statement_reference, '{From}', bonus_temp.period_from::text);

    UPDATE bonus_temp
    SET statement_reference = REPLACE(bonus_temp.statement_reference, '{To}', bonus_temp.period_to::text);


    _default_currency_code                  := transactions.get_default_currency_code_by_office_id(_office_id);

    FOR this IN
    SELECT bonus_temp.id 
    FROM bonus_temp 
    WHERE COALESCE(bonus_temp.bonus, 0) > 0
    LOOP
        _transaction_master_id  := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
        _tran_counter           := transactions.get_new_transaction_counter(_value_date);
        _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

        INSERT INTO transactions.transaction_master
        (
            transaction_master_id, 
            transaction_counter, 
            transaction_code, 
            book, 
            value_date, 
            user_id, 
            office_id, 
            statement_reference,
            verification_status_id,
            sys_user_id,
            verified_by_user_id,
            verification_reason
        ) 
        SELECT            
            _transaction_master_id, 
            _tran_counter, 
            _transaction_code, 
            'Bonus.Slab', 
            _value_date, 
            _user_id, 
            _office_id,             
            bonus_temp.statement_reference,
            1,
            _sys,
            _sys,
            'Automatically verified by workflow.'
        FROM bonus_temp
        WHERE bonus_temp.id  = this.id
        LIMIT 1;

        INSERT INTO transactions.transaction_details
        (
            transaction_master_id,
            value_date,
            tran_type, 
            account_id, 
            statement_reference, 
            currency_code, 
            amount_in_currency, 
            er, 
            local_currency_code, 
            amount_in_local_currency
        )
        SELECT
            _transaction_master_id,
            _value_date,
            'Cr',
            bonus_temp.salesperson_account_id,
            bonus_temp.statement_reference,
            _default_currency_code, 
            bonus_temp.bonus, 
            1 AS exchange_rate,
            _default_currency_code,
            bonus_temp.bonus
        FROM bonus_temp
        WHERE bonus_temp.id = this.id

        UNION ALL
        SELECT
            _transaction_master_id,
            _value_date,
            'Dr',
            bonus_temp.bonus_account_id,
            bonus_temp.statement_reference,
            _default_currency_code, 
            bonus_temp.bonus, 
            1 AS exchange_rate,
            _default_currency_code,
            bonus_temp.bonus
        FROM bonus_temp
        WHERE bonus_temp.id = this.id;
    END LOOP;    
END
$$
LANGUAGE plpgsql;

DELETE FROM transactions.routines where routine_code='REF-POBNS';
SELECT transactions.create_routine('POST-BNS', 'transactions.post_bonus', 201);

--select * from transactions.post_bonus(2, 5, 2, '2015-04-13');





-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_er_fluctuation.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_er_fluctuation(_user_id integer, _login_id bigint, _office_id integer, _value_date date);

CREATE FUNCTION transactions.post_er_fluctuation(_user_id integer, _login_id bigint, _office_id integer, _value_date date)
RETURNS void
AS
$$
BEGIN

END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_late_fee.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_late_fee(_user_id integer, _login_id bigint, _office_id integer, _value_date date);

CREATE FUNCTION transactions.post_late_fee(_user_id integer, _login_id bigint, _office_id integer, _value_date date)
RETURNS void
VOLATILE
AS
$$
    DECLARE this                        RECORD;
    DECLARE _transaction_master_id      bigint;
    DECLARE _tran_counter               integer;
    DECLARE _transaction_code           text;
    DECLARE _sys                        integer = office.get_sys_user_id();
    DECLARE _default_currency_code      national character varying(12);
BEGIN
    IF(_value_date != transactions.get_value_date(_office_id)) THEN
        RAISE EXCEPTION 'Invalid value date.'
        USING ERRCODE='P3007';
    END IF;

    DROP TABLE IF EXISTS temp_late_fee;

    CREATE TEMPORARY TABLE temp_late_fee
    (
        transaction_master_id           bigint,
        value_date                      date,
        payment_term_id                 integer,
        payment_term_code               text,
        payment_term_name               text,        
        due_on_date                     boolean,
        due_days                        integer,
        due_frequency_id                integer,
        grace_period                    integer,
        late_fee_id                     integer,
        late_fee_posting_frequency_id   integer,
        late_fee_code                   text,
        late_fee_name                   text,
        is_flat_amount                  boolean,
        rate                            numeric(24, 4),
        due_amount                      public.money_strict2,
        late_fee                        public.money_strict2,
        party_id                        bigint,
        party_account_id                bigint,
        late_fee_account_id             bigint,
        due_date                        date
    ) ON COMMIT DROP;

    WITH unpaid_invoices
    AS
    (
        SELECT 
            transactions.transaction_master.transaction_master_id, 
            transactions.transaction_master.value_date,
            transactions.stock_master.payment_term_id,
            core.payment_terms.payment_term_code,
            core.payment_terms.payment_term_name,
            core.payment_terms.due_on_date,
            core.payment_terms.due_days,
            core.payment_terms.due_frequency_id,
            core.payment_terms.grace_period,
            core.payment_terms.late_fee_id,
            core.payment_terms.late_fee_posting_frequency_id,
            core.late_fee.late_fee_code,
            core.late_fee.late_fee_name,
            core.late_fee.is_flat_amount,
            core.late_fee.rate,
            0.00 as due_amount,
            0.00 as late_fee,
            transactions.stock_master.party_id,
            core.get_account_id_by_party_id(transactions.stock_master.party_id) AS party_account_id,
            core.late_fee.account_id AS late_fee_account_id
        FROM transactions.stock_master
        INNER JOIN transactions.transaction_master
        ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_id
        INNER JOIN core.payment_terms
        ON core.payment_terms.payment_term_id = transactions.stock_master.payment_term_id
        INNER JOIN core.late_fee
        ON core.payment_terms.late_fee_id = core.late_fee.late_fee_id
        WHERE transactions.transaction_master.verification_status_id > 0
        AND transactions.transaction_master.book = ANY(ARRAY['Sales.Delivery', 'Sales.Direct'])
        AND transactions.stock_master.is_credit AND NOT transactions.stock_master.credit_settled
        AND transactions.stock_master.payment_term_id IS NOT NULL
        AND core.payment_terms.late_fee_id IS NOT NULL
        AND transactions.transaction_master.transaction_master_id NOT IN
        (
            SELECT transactions.late_fee.transaction_master_id        --We have already posted the late fee before.
            FROM transactions.late_fee
        )
    ), 
    unpaid_invoices_details
    AS
    (
        SELECT *, 
        CASE WHEN unpaid_invoices.due_on_date
        THEN unpaid_invoices.value_date + unpaid_invoices.due_days + unpaid_invoices.grace_period
        ELSE core.get_frequency_end_date(unpaid_invoices.due_frequency_id, unpaid_invoices.value_date) +  unpaid_invoices.grace_period END as due_date
        FROM unpaid_invoices
    )


    INSERT INTO temp_late_fee
    SELECT * FROM unpaid_invoices_details
    WHERE unpaid_invoices_details.due_date <= _value_date;


    UPDATE temp_late_fee
    SET due_amount = 
    (
        SELECT
            SUM
            (
                (transactions.stock_details.quantity * transactions.stock_details.price) 
                - 
                transactions.stock_details.discount 
                + 
                transactions.stock_details.tax + 
                transactions.stock_details.shipping_charge
            )
        FROM transactions.stock_details
        INNER JOIN transactions.stock_master
        ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
        WHERE transactions.stock_master.transaction_master_id = temp_late_fee.transaction_master_id
    ) WHERE NOT temp_late_fee.is_flat_amount;

    UPDATE temp_late_fee
    SET late_fee = temp_late_fee.rate
    WHERE temp_late_fee.is_flat_amount;

    UPDATE temp_late_fee
    SET late_fee = temp_late_fee.due_amount * temp_late_fee.rate / 100
    WHERE NOT temp_late_fee.is_flat_amount;

    _default_currency_code                  := transactions.get_default_currency_code_by_office_id(_office_id);

    FOR this IN
    SELECT * FROM temp_late_fee
    WHERE temp_late_fee.late_fee > 0
    AND temp_late_fee.party_account_id IS NOT NULL
    AND temp_late_fee.late_fee_account_id IS NOT NULL
    LOOP
        _transaction_master_id  := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
        _tran_counter           := transactions.get_new_transaction_counter(_value_date);
        _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

        INSERT INTO transactions.transaction_master
        (
            transaction_master_id, 
            transaction_counter, 
            transaction_code, 
            book, 
            value_date, 
            user_id, 
            office_id, 
            reference_number,
            statement_reference,
            verification_status_id,
            sys_user_id,
            verified_by_user_id,
            verification_reason
        ) 
        SELECT            
            _transaction_master_id, 
            _tran_counter, 
            _transaction_code, 
            'Late.Fee', 
            _value_date, 
            _user_id, 
            _office_id,             
            this.transaction_master_id::text AS reference_number,
            this.late_fee_name AS statement_reference,
            1,
            _sys,
            _sys,
            'Automatically verified by workflow.';

        INSERT INTO transactions.transaction_details
        (
            transaction_master_id,
            value_date,
            tran_type, 
            account_id, 
            statement_reference, 
            currency_code, 
            amount_in_currency, 
            er, 
            local_currency_code, 
            amount_in_local_currency
        )
        SELECT
            _transaction_master_id,
            _value_date,
            'Cr',
            this.late_fee_account_id,
            this.late_fee_name || ' (' || core.get_party_code_by_party_id(this.party_id) || ')',
            _default_currency_code, 
            this.late_fee, 
            1 AS exchange_rate,
            _default_currency_code,
            this.late_fee
        UNION ALL
        SELECT
            _transaction_master_id,
            _value_date,
            'Dr',
            this.party_account_id,
            this.late_fee_name,
            _default_currency_code, 
            this.late_fee, 
            1 AS exchange_rate,
            _default_currency_code,
            this.late_fee;

        INSERT INTO transactions.late_fee(transaction_master_id, party_id, value_date, late_fee_tran_id, amount)
        SELECT this.transaction_master_id, this.party_id, _value_date, _transaction_master_id, this.late_fee;
    END LOOP;
END
$$
LANGUAGE plpgsql;

SELECT transactions.create_routine('POST-LF', 'transactions.post_late_fee', 250);

--SELECT * FROM transactions.post_late_fee(2, 5, 2, transactions.get_value_date(2));


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_non_gl_transaction.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_non_gl_transaction
(
    _book_name                              national character varying(12),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _is_non_taxable_sales                   boolean,
    _salesperson_id                         integer,
    _shipper_id                             integer,
    _shipping_address_code                  national character varying(12),
    _store_id                               integer,
    _tran_ids                               bigint[],
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]

);


CREATE FUNCTION transactions.post_non_gl_transaction
(
    _book_name                              national character varying(48),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _is_non_taxable_sales                   boolean,
    _salesperson_id                         integer,
    _shipper_id                             integer,
    _shipping_address_code                  national character varying(12),
    _store_id                               integer,
    _tran_ids                               bigint[],
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]

)
RETURNS bigint
AS
$$
    DECLARE _party_id                       bigint;
    DECLARE _non_gl_stock_master_id         bigint;
    DECLARE _non_gl_stock_detail_id         bigint;
    DECLARE _shipping_address_id            bigint;
    DECLARE _shipping_charge                public.money_strict2;
    DECLARE _tran_type                      transaction_type;
    DECLARE this                            RECORD;
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;

    _party_id                               := core.get_party_id_by_party_code(_party_code);
    _shipping_address_id                    := core.get_shipping_address_id_by_shipping_address_code(_shipping_address_code, _party_id);

    DROP TABLE IF EXISTS temp_stock_details CASCADE;

    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        non_gl_stock_master_id          bigint, 
        tran_type                       transaction_type, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        public.integer_strict,
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           public.money_strict,
        cost_of_goods_sold              public.money_strict2 DEFAULT(0),
        discount                        public.money_strict2,
        shipping_charge                 public.money_strict2,
        tax_form                        text,
        sales_tax_id                    integer,
        tax                             public.money_strict2
    ) ON COMMIT DROP;


    DROP TABLE IF EXISTS temp_stock_tax_details;
    
    CREATE TEMPORARY TABLE temp_stock_tax_details
    (
        id                                      SERIAL,
        temp_stock_detail_id                    integer REFERENCES temp_stock_details(id),
        sales_tax_detail_code                   text,
        stock_detail_id                         bigint,
        sales_tax_detail_id                     integer,
        state_sales_tax_id                      integer,
        county_sales_tax_id                     integer,
        account_id                              integer,
        principal                               public.money_strict,
        rate                                    public.decimal_strict,
        tax                                     public.money_strict
    ) ON COMMIT DROP;

    INSERT INTO temp_stock_details(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);

    UPDATE temp_stock_details 
    SET
        tran_type                   = _tran_type,
        sales_tax_id                = core.get_sales_tax_id_by_sales_tax_code(tax_form),
        item_id                     = core.get_item_id_by_item_code(item_code),
        unit_id                     = core.get_unit_id_by_unit_name(unit_name),
        base_quantity               = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                = core.get_base_unit_id_by_unit_name(unit_name);

    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;

    SELECT SUM(COALESCE(shipping_charge, 0))                    INTO _shipping_charge FROM temp_stock_details;

    IF(_is_non_taxable_sales) THEN
        IF EXISTS(SELECT * FROM temp_stock_details WHERE sales_tax_id IS NOT NULL LIMIT 1) THEN
            RAISE EXCEPTION 'You cannot provide sales tax information for non taxable sales.'
            USING ERRCODE='P5110';
        END IF;
    END IF;


    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        INSERT INTO temp_stock_tax_details
        (
            temp_stock_detail_id,
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            principal, 
            rate, 
            tax
        )
        SELECT 
            this.id, 
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            taxable_amount, 
            rate, 
            tax
        FROM transactions.get_sales_tax('Sales', _store_id, _party_code, _shipping_address_code, _price_type_id, this.item_code, this.price, this.quantity, this.discount, this.shipping_charge, this.sales_tax_id);
    END LOOP;

    UPDATE temp_stock_details
    SET tax =
    (SELECT SUM(COALESCE(temp_stock_tax_details.tax, 0)) FROM temp_stock_tax_details
    WHERE temp_stock_tax_details.temp_stock_detail_id = temp_stock_details.id);

    _non_gl_stock_master_id          := nextval(pg_get_serial_sequence('transactions.non_gl_stock_master', 'non_gl_stock_master_id'));

    UPDATE temp_stock_details SET non_gl_stock_master_id = _non_gl_stock_master_id;
    
    INSERT INTO transactions.non_gl_stock_master(non_gl_stock_master_id, value_date, book, party_id, price_type_id, login_id, user_id, office_id, reference_number, statement_reference, non_taxable, salesperson_id, shipper_id, shipping_address_id, shipping_charge, store_id) 
    SELECT _non_gl_stock_master_id, _value_date, _book_name, _party_id, _price_type_id, _login_id, _user_id, _office_id, _reference_number, _statement_reference, _is_non_taxable_sales, _salesperson_id, _shipper_id, _shipping_address_id, _shipping_charge, _store_id;


    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        _non_gl_stock_detail_id        := nextval(pg_get_serial_sequence('transactions.non_gl_stock_details', 'non_gl_stock_detail_id'));

        INSERT INTO transactions.non_gl_stock_details(non_gl_stock_detail_id, non_gl_stock_master_id, value_date, item_id, quantity, unit_id, base_quantity, base_unit_id, price, discount, shipping_charge, sales_tax_id, tax)    
        SELECT _non_gl_stock_detail_id, non_gl_stock_master_id, _value_date, item_id, quantity, unit_id, base_quantity, base_unit_id, price, discount, shipping_charge, sales_tax_id, COALESCE(this.tax, 0) 
        FROM temp_stock_details
        WHERE id = this.id;


        INSERT INTO transactions.non_gl_stock_tax_details(non_gl_stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax)
        SELECT _non_gl_stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax
        FROM temp_stock_tax_details
        WHERE temp_stock_detail_id = this.id;
        
    END LOOP;

    IF(array_length(_tran_ids, 1) > 0 AND _tran_ids != ARRAY[NULL::bigint]) THEN
        INSERT INTO transactions.non_gl_stock_master_relations(order_non_gl_stock_master_id, quotation_non_gl_stock_master_id)
        SELECT _non_gl_stock_master_id, explode_array(_tran_ids);
    END IF;

    IF(array_length(_attachments, 1) > 0 AND _attachments != ARRAY[NULL::core.attachment_type]) THEN
        INSERT INTO core.attachments(user_id, resource, resource_key, resource_id, original_file_name, file_extension, file_path, comment)
        SELECT _user_id, 'transactions.non_gl_stock_master', 'non_gl_stock_master_id', _non_gl_stock_master_id, original_file_name, file_extension, file_path, comment 
        FROM explode_array(_attachments);
    END IF;

    
    RETURN _non_gl_stock_master_id;
END;
$$
LANGUAGE plpgsql;

-- SELECT * FROM transactions.post_non_gl_transaction('Sales.Order', 2, 2, 5, '1-1-2020', '1', 'asdf', 'JASMI-0002', 1, false, 1, 1, '',  1, null::bigint[],
-- ARRAY[
--            ROW(1, 'RMBP', 1, 'Piece',180000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--            ROW(1, '13MBA', 1, 'Dozen',130000, 300, 30, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--            ROW(1, '11MBA', 1, 'Piece',110000, 5000, 50, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type], 
-- ARRAY[NULL::core.attachment_type]);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_purchase.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_purchase
(
    _book_name                              national character varying(12),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _cost_center_id                         integer,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _is_credit                              boolean,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _shipper_id                             integer,
    _store_id                               integer,
    _tran_ids                               bigint[],
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]
);


CREATE FUNCTION transactions.post_purchase
(
    _book_name                              national character varying(48),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _cost_center_id                         integer,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _is_credit                              boolean,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _shipper_id                             integer,
    _store_id                               integer,
    _tran_ids                               bigint[],
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]
)
RETURNS bigint
AS
$$
    DECLARE _party_id                       bigint;
    DECLARE _transaction_master_id          bigint;
    DECLARE _cash_tran_id                   bigint;
    DECLARE _stock_master_id                bigint;
    DECLARE _stock_detail_id                bigint;
    DECLARE _shipping_address_id            integer;
    DECLARE _grand_total                    money_strict;
    DECLARE _discount_total                 money_strict2;
    DECLARE _tax_total                      money_strict2;
    DECLARE _payable                        money_strict2;
    DECLARE _default_currency_code          national character varying(12);
    DECLARE _is_periodic                    boolean = office.is_periodic_inventory(_office_id);
    DECLARE _tran_counter                   integer;
    DECLARE _transaction_code               text;
    DECLARE _shipping_charge                money_strict2;
    DECLARE _tax                            RECORD;
    DECLARE _cash_repository_id             integer;
    DECLARE _cash_account_id                bigint;
    DECLARE _is_cash                        boolean;
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;

    _party_id                               := core.get_party_id_by_party_code(_party_code);
    _default_currency_code                  := transactions.get_default_currency_code_by_office_id(_office_id);
    _cash_account_id                        := core.get_cash_account_id_by_store_id(_store_id);
    _cash_repository_id                     := core.get_cash_repository_id_by_store_id(_store_id);
    _is_cash                                := core.is_cash_account_id(_cash_account_id);

    IF(NOT _is_cash) THEN
        _cash_repository_id                 := NULL;
    END IF;

    DROP TABLE IF EXISTS temp_stock_details CASCADE;
    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        stock_master_id                 bigint, 
        tran_type                       transaction_type, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        integer_strict,
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           money_strict,
        cost_of_goods_sold              money_strict2,
        discount                        money_strict2,
        shipping_charge                 money_strict2,
        tax_form                        text,
        sales_tax_id                    integer,
        tax                             money_strict2,
        purchase_account_id             integer, 
        purchase_discount_account_id    integer, 
        inventory_account_id            integer
    ) ON COMMIT DROP;


    DROP TABLE IF EXISTS temp_stock_tax_details;
    CREATE TEMPORARY TABLE temp_stock_tax_details
    (
        id                                      SERIAL,
        temp_stock_detail_id                    integer REFERENCES temp_stock_details(id),
        sales_tax_detail_code                   text,
        stock_detail_id                         bigint,
        sales_tax_detail_id                     integer,
        state_sales_tax_id                      integer,
        county_sales_tax_id                     integer,
        account_id                              integer,
        principal                               money_strict,
        rate                                    decimal_strict,
        tax                                     money_strict
    ) ON COMMIT DROP;
    

    INSERT INTO temp_stock_details(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);

    UPDATE temp_stock_details 
    SET
        tran_type                       = 'Dr',
        sales_tax_id                    = core.get_sales_tax_id_by_sales_tax_code(tax_form),
        item_id                         = core.get_item_id_by_item_code(item_code),
        unit_id                         = core.get_unit_id_by_unit_name(unit_name),
        base_quantity                   = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                    = core.get_base_unit_id_by_unit_name(unit_name);

    UPDATE temp_stock_details
    SET
        purchase_account_id             = core.get_purchase_account_id(item_id),
        purchase_discount_account_id    = core.get_purchase_discount_account_id(item_id),
        inventory_account_id            = core.get_inventory_account_id(item_id);

    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;

    FOR _tax IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        INSERT INTO temp_stock_tax_details
        (
            temp_stock_detail_id,
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id,            
            principal, 
            rate, 
            tax
        )
        SELECT 
            _tax.id, 
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            taxable_amount, 
            rate, 
            tax
        FROM transactions.get_sales_tax('Sales', _store_id, _party_code, NULL, _price_type_id, _tax.item_code, _tax.price, _tax.quantity, _tax.discount, _tax.shipping_charge, _tax.sales_tax_id);
    END LOOP;

    UPDATE temp_stock_details
    SET tax =
    (SELECT SUM(COALESCE(temp_stock_tax_details.tax, 0)) FROM temp_stock_tax_details
    WHERE temp_stock_tax_details.temp_stock_detail_id = temp_stock_tax_details.id);

    SELECT SUM(COALESCE(tax,0))                                     INTO _tax_total FROM temp_stock_details;
    SELECT SUM(COALESCE(discount, 0))                               INTO _discount_total FROM temp_stock_details;
    SELECT SUM(COALESCE(price, 0) * COALESCE(quantity, 0))          INTO _grand_total FROM temp_stock_details;
    SELECT SUM(COALESCE(shipping_charge, 0))                        INTO _shipping_charge FROM temp_stock_details;

    _payable                                := _grand_total - COALESCE(_discount_total, 0) + COALESCE(_tax_total, 0) + COALESCE(_shipping_charge, 0);

    DROP TABLE IF EXISTS temp_transaction_details;
    CREATE TEMPORARY TABLE temp_transaction_details
    (
        transaction_master_id       BIGINT, 
        tran_type                   transaction_type, 
        account_id                  integer, 
        statement_reference         text, 
        cash_repository_id          integer, 
        currency_code               national character varying(12), 
        amount_in_currency          money_strict, 
        local_currency_code         national character varying(12), 
        er                          decimal_strict, 
        amount_in_local_currency    money_strict
    ) ON COMMIT DROP;


    IF(_is_periodic = true) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', purchase_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), 1, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
        FROM temp_stock_details
        GROUP BY purchase_account_id;
    ELSE
        --Perpetutal Inventory Accounting System
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', inventory_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), 1, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
        FROM temp_stock_details
        GROUP BY inventory_account_id;
    END IF;

    IF(_tax_total > 0) THEN
        FOR _tax IN 
        SELECT 
            format('P: %s x R: %s %% = %s (%s)', principal::text, rate::text, tax::text, sales_tax_detail_code) as statement_reference,
            account_id,
            tax
        FROM temp_stock_tax_details ORDER BY id
        LOOP    
            INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
            SELECT 'Dr', _tax.account_id, _tax.statement_reference || _statement_reference, _default_currency_code, _tax.tax, 1, _default_currency_code, _tax.tax;
        END LOOP;
    END IF;


    IF(_discount_total > 0) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', purchase_discount_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(discount, 0)), 1, _default_currency_code, SUM(COALESCE(discount, 0))
        FROM temp_stock_details
        GROUP BY purchase_discount_account_id;
    END IF;

    INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
    SELECT 'Cr', core.get_account_id_by_party_id(_party_id), _statement_reference, _default_currency_code, _payable, 1, _default_currency_code, _payable;

    _transaction_master_id  := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _cash_tran_id           := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _stock_master_id        := nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));
    _tran_counter           := transactions.get_new_transaction_counter(_value_date);
    _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

    UPDATE temp_transaction_details     SET transaction_master_id   = _transaction_master_id;
    UPDATE temp_stock_details           SET stock_master_id         = _stock_master_id;
    
    INSERT INTO transactions.transaction_master(transaction_master_id, transaction_counter, transaction_code, book, value_date, user_id, login_id, office_id, cost_center_id, reference_number, statement_reference) 
    SELECT _transaction_master_id, _tran_counter, _transaction_code, _book_name, _value_date, _user_id, _login_id, _office_id, _cost_center_id, _reference_number, _statement_reference;


    INSERT INTO transactions.transaction_details(value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency)
    SELECT _value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency
    FROM temp_transaction_details
    ORDER BY tran_type DESC;


    INSERT INTO transactions.stock_master(value_date, stock_master_id, transaction_master_id, party_id, price_type_id, is_credit, shipper_id, shipping_charge, store_id, cash_repository_id)
    SELECT _value_date, _stock_master_id, _transaction_master_id, _party_id, _price_type_id, _is_credit, _shipper_id, _shipping_charge, _store_id, _cash_repository_id;
            
    FOR _tax IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        _stock_detail_id        := nextval(pg_get_serial_sequence('transactions.stock_details', 'stock_detail_id'));

        INSERT INTO transactions.stock_details(stock_detail_id, value_date, stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price, cost_of_goods_sold, discount, sales_tax_id, tax)
        SELECT _stock_detail_id, _value_date, _tax.stock_master_id, _tax.tran_type, _tax.store_id, _tax.item_id, _tax.quantity, _tax.unit_id, _tax.base_quantity, _tax.base_unit_id, _tax.price, COALESCE(_tax.cost_of_goods_sold, 0), _tax.discount, _tax.sales_tax_id, COALESCE(_tax.tax, 0)
        FROM temp_stock_details
        WHERE id = _tax.id;


        INSERT INTO transactions.stock_tax_details(stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax)
        SELECT _stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax
        FROM temp_stock_tax_details
        WHERE temp_stock_detail_id = _tax.id;
        
    END LOOP;


    IF(array_length(_tran_ids, 1) > 0 AND _tran_ids != ARRAY[NULL::bigint]) THEN
        INSERT INTO transactions.stock_master_non_gl_relations(stock_master_id, non_gl_stock_master_id)
        SELECT _stock_master_id, explode_array(_tran_ids);
    END IF;

    IF(array_length(_attachments, 1) > 0 AND _attachments != ARRAY[NULL::core.attachment_type]) THEN
        INSERT INTO core.attachments(user_id, resource, resource_key, resource_id, original_file_name, file_extension, file_path, comment)
        SELECT _user_id, 'transactions.transaction_master', 'transaction_master_id', _transaction_master_id, original_file_name, file_extension, file_path, comment 
        FROM explode_array(_attachments);
    END IF;


    IF(_is_credit = false) THEN
        _tran_counter           := transactions.get_new_transaction_counter(_value_date);
        _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

        INSERT INTO transactions.transaction_master(transaction_master_id, transaction_counter, transaction_code, book, value_date, user_id, login_id, office_id, cost_center_id, reference_number, statement_reference, cascading_tran_id) 
        SELECT _cash_tran_id, _tran_counter, _transaction_code, 'Purchase.Payment', _value_date, _user_id, _login_id, _office_id, _cost_center_id, _reference_number, _statement_reference, _transaction_master_id;


        INSERT INTO transactions.transaction_details(value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency)
        SELECT _value_date, _cash_tran_id, 'Cr', _cash_account_id, _statement_reference, _cash_repository_id, _default_currency_code, _payable, _default_currency_code, 1, _payable UNION ALL
        SELECT _value_date, _cash_tran_id, 'Dr', core.get_account_id_by_party_id(_party_id), _statement_reference, NULL, _default_currency_code, _payable, _default_currency_code, 1, _payable;
    END IF;

    
    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);
    PERFORM transactions.settle_party_due(_party_id, _office_id);
    RETURN _transaction_master_id;
END
$$
LANGUAGE plpgsql;


-- 
-- SELECT * FROM transactions.post_purchase('Purchase.Direct', 2, 2, 56, '2/2/2015', 1, '', '', false, 'JASMI-0002', NULL, NULL, 1, ARRAY[]::bigint[], 
--       ARRAY[
--                  ROW(1, 'RMBP', 1, 'Piece',180000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--                  ROW(1, '13MBA', 1, 'Dozen',130000, 300, 30, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--                  ROW(1, '11MBA', 1, 'Piece',110000, 5000, 50, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type], 
--       ARRAY[NULL::core.attachment_type]);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_purchase_return.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_purchase_return
(
    _transaction_master_id          bigint,
    _office_id                      integer,
    _user_id                        integer,
    _login_id                       bigint,
    _value_date                     date,
    _store_id                       integer,
    _party_code                     national character varying(12),
    _price_type_id                  integer,
    _reference_number               national character varying(24),
    _statement_reference            text,
    _details                        transactions.stock_detail_type[],
    _attachments                    core.attachment_type[]
);

CREATE FUNCTION transactions.post_purchase_return
(
    _transaction_master_id          bigint,
    _office_id                      integer,
    _user_id                        integer,
    _login_id                       bigint,
    _value_date                     date,
    _store_id                       integer,
    _party_code                     national character varying(12),
    _price_type_id                  integer,
    _reference_number               national character varying(24),
    _statement_reference            text,
    _details                        transactions.stock_detail_type[],
    _attachments                    core.attachment_type[]
)
RETURNS bigint
AS
$$
    DECLARE _party_id                       bigint;
    DECLARE _cost_center_id                 bigint;
    DECLARE _tran_master_id                 bigint;
    DECLARE _stock_detail_id                bigint;
    DECLARE _tran_counter                   integer;
    DECLARE _transaction_code               text;
    DECLARE _stock_master_id                bigint;
    DECLARE _grand_total                    money_strict;
    DECLARE _discount_total                 money_strict2;
    DECLARE _tax_total                      money_strict2;
    DECLARE _is_credit                      boolean;
    DECLARE _credit_account_id              bigint;
    DECLARE _default_currency_code          national character varying(12);
    DECLARE _sm_id                          bigint;
    DECLARE this                            RECORD;
    DECLARE _shipping_address_code          national character varying(12);
    DECLARE _is_periodic                    boolean = office.is_periodic_inventory(_office_id);
    DECLARE _book_name                      text='Purchase.Return';
    DECLARE _receivable                     money_strict;
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;

    IF(NOT transactions.validate_items_for_return(_transaction_master_id, _details)) THEN
        RETURN 0;
    END IF;
    
    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        stock_master_id                 bigint, 
        tran_type                       transaction_type, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        integer_strict,
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           money_strict,
        discount                        money_strict2,
        shipping_charge                 money_strict2,
        tax_form                        text,
        sales_tax_id                    integer,
        tax                             money_strict2,
        purchase_account_id             integer, 
        purchase_discount_account_id    integer, 
        inventory_account_id            integer
    ) ON COMMIT DROP;

    CREATE TEMPORARY TABLE temp_stock_tax_details
    (
        id                                      SERIAL,
        temp_stock_detail_id                    integer REFERENCES temp_stock_details(id),
        sales_tax_detail_code                   text,
        stock_detail_id                         bigint,
        sales_tax_detail_id                     integer,
        state_sales_tax_id                      integer,
        county_sales_tax_id                     integer,
        account_id                              integer,
        principal                               money_strict,
        rate                                    decimal_strict,
        tax                                     money_strict
    ) ON COMMIT DROP;

    CREATE TEMPORARY TABLE temp_transaction_details
    (
        transaction_master_id       BIGINT, 
        tran_type                   transaction_type, 
        account_id                  integer, 
        statement_reference         text, 
        cash_repository_id          integer, 
        currency_code               national character varying(12), 
        amount_in_currency          money_strict, 
        local_currency_code         national character varying(12), 
        er                          decimal_strict, 
        amount_in_local_currency    money_strict
    ) ON COMMIT DROP;

    _party_id                       := core.get_party_id_by_party_code(_party_code);
    _default_currency_code          := transactions.get_default_currency_code_by_office_id(_office_id);
    
    SELECT 
        cost_center_id   
    INTO 
        _cost_center_id    
    FROM transactions.transaction_master 
    WHERE transactions.transaction_master.transaction_master_id = _transaction_master_id;

    SELECT 
        is_credit,
        core.get_shipping_address_code_by_shipping_address_id(shipping_address_id),
        stock_master_id
    INTO 
        _is_credit,
        _shipping_address_code,
        _sm_id
    FROM transactions.stock_master 
    WHERE transaction_master_id = _transaction_master_id;

    INSERT INTO temp_stock_details(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);

    UPDATE temp_stock_details 
    SET
        tran_type                   = 'Cr',
        sales_tax_id                = core.get_sales_tax_id_by_sales_tax_code(tax_form),
        item_id                     = core.get_item_id_by_item_code(item_code),
        unit_id                     = core.get_unit_id_by_unit_name(unit_name),
        base_quantity               = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                = core.get_base_unit_id_by_unit_name(unit_name);

    UPDATE temp_stock_details
    SET
        purchase_account_id             = core.get_purchase_account_id(item_id),
        purchase_discount_account_id    = core.get_purchase_discount_account_id(item_id),
        inventory_account_id            = core.get_inventory_account_id(item_id);

    IF EXISTS
    (

        SELECT * 
        FROM transactions.stock_details
        INNER JOIN temp_stock_details
        ON temp_stock_details.item_id = transactions.stock_details.item_id
        WHERE transactions.stock_details.stock_master_id = _sm_id
        AND COALESCE(temp_stock_details.sales_tax_id, 0) != COALESCE(transactions.stock_details.sales_tax_id, 0)
        LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Tax form mismatch.'
        USING ERRCODE='P3202';
    END IF;
    
    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;


    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        INSERT INTO temp_stock_tax_details
        (
            temp_stock_detail_id,
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            principal, 
            rate, 
            tax
        )
        SELECT 
            this.id, 
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            taxable_amount, 
            rate, 
            tax
        FROM transactions.get_sales_tax('Purchase', _store_id, _party_code, _shipping_address_code, _price_type_id, this.item_code, this.price, this.quantity, this.discount, this.shipping_charge, this.sales_tax_id);
    END LOOP;
    
    UPDATE temp_stock_details
    SET tax =
    (SELECT SUM(COALESCE(temp_stock_tax_details.tax, 0)) FROM temp_stock_tax_details
    WHERE temp_stock_tax_details.temp_stock_detail_id = temp_stock_details.id);

    _credit_account_id = core.get_account_id_by_party_code(_party_code); 

        
    SELECT SUM(COALESCE(tax, 0))                                INTO _tax_total FROM temp_stock_tax_details;
    SELECT SUM(COALESCE(discount, 0))                           INTO _discount_total FROM temp_stock_details;
    SELECT SUM(COALESCE(price, 0) * COALESCE(quantity, 0))      INTO _grand_total FROM temp_stock_details;

    _receivable := _grand_total - COALESCE(_discount_total, 0) + COALESCE(_tax_total, 0);


    IF(_is_periodic = true) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', purchase_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), 1, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
        FROM temp_stock_details
        GROUP BY purchase_account_id;
    ELSE
        --Perpetutal Inventory Accounting System
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', inventory_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), 1, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
        FROM temp_stock_details
        GROUP BY inventory_account_id;
    END IF;


    IF(COALESCE(_tax_total, 0) > 0) THEN
        FOR this IN 
        SELECT 
            format('P: %s x R: %s %% = %s (%s)', principal::text, rate::text, tax::text, sales_tax_detail_code) as statement_reference,
            account_id,
            tax
        FROM temp_stock_tax_details ORDER BY id
        LOOP    
            INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
            SELECT 'Cr', this.account_id, this.statement_reference || _statement_reference, _default_currency_code, this.tax, 1, _default_currency_code, this.tax;
        END LOOP;
    END IF;

    IF(COALESCE(_discount_total, 0) > 0) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', purchase_discount_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(discount, 0)), 1, _default_currency_code, SUM(COALESCE(discount, 0))
        FROM temp_stock_details
        GROUP BY purchase_discount_account_id;
    END IF;

    INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
    SELECT 'Dr', core.get_account_id_by_party_id(_party_id), _statement_reference, _default_currency_code, _receivable, 1, _default_currency_code, _receivable;


    _tran_master_id         := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _stock_master_id        := nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));
    _tran_counter           := transactions.get_new_transaction_counter(_value_date);
    _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

    UPDATE temp_transaction_details     SET transaction_master_id   = _tran_master_id;
    UPDATE temp_stock_details           SET stock_master_id         = _stock_master_id;

    INSERT INTO transactions.transaction_master(transaction_master_id, transaction_counter, transaction_code, book, value_date, user_id, login_id, office_id, cost_center_id, reference_number, statement_reference) 
    SELECT _tran_master_id, _tran_counter, _transaction_code, _book_name, _value_date, _user_id, _login_id, _office_id, _cost_center_id, _reference_number, _statement_reference;


    INSERT INTO transactions.transaction_details(value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency)
    SELECT _value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency
    FROM temp_transaction_details
    ORDER BY tran_type DESC;


    INSERT INTO transactions.stock_master(value_date, stock_master_id, transaction_master_id, party_id, price_type_id, is_credit, shipper_id, shipping_charge, store_id, cash_repository_id)
    SELECT _value_date, _stock_master_id, _tran_master_id, _party_id, _price_type_id, _is_credit, NULL, 0, _store_id, NULL;
            
    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        _stock_detail_id        := nextval(pg_get_serial_sequence('transactions.stock_details', 'stock_detail_id'));

        INSERT INTO transactions.stock_details(stock_detail_id, value_date, stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price, discount, sales_tax_id, tax)
        SELECT _stock_detail_id, _value_date, this.stock_master_id, this.tran_type, this.store_id, this.item_id, this.quantity, this.unit_id, this.base_quantity, this.base_unit_id, this.price, this.discount, this.sales_tax_id, COALESCE(this.tax, 0)
        FROM temp_stock_details
        WHERE id = this.id;


        INSERT INTO transactions.stock_tax_details(stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax)
        SELECT _stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax
        FROM temp_stock_tax_details
        WHERE temp_stock_detail_id = this.id;
        
    END LOOP;

    INSERT INTO transactions.stock_return(transaction_master_id, return_transaction_master_id)
    SELECT _transaction_master_id, _tran_master_id;

    IF(array_length(_attachments, 1) > 0 AND _attachments != ARRAY[NULL::core.attachment_type]) THEN
        INSERT INTO core.attachments(user_id, resource, resource_key, resource_id, original_file_name, file_extension, file_path, comment)
        SELECT _user_id, 'transactions.transaction_master', 'transaction_master_id', _tran_master_id, original_file_name, file_extension, file_path, comment 
        FROM explode_array(_attachments);
    END IF;
    
    PERFORM transactions.auto_verify(_tran_master_id, _office_id);
    RETURN _tran_master_id;
END
$$
LANGUAGE plpgsql;




-- CREATE TEMPORARY TABLE temp_purchase_return
-- ON COMMIT DROP
-- AS
-- 
-- SELECT * FROM transactions.post_purchase_return(5, 2, 2, 1, '1-1-2000', 1, 'MAJON-0002', 1, '1234-AD', 'Test', 
-- ARRAY[
--  ROW(1, 'RMBP', 1, 'Piece', 180000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--  ROW(1, '13MBA', 1, 'Piece', 110000, 5000, 50, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type
-- ],
-- ARRAY[
-- NULL::core.attachment_type
-- ]);
-- 
-- SELECT  tran_type, core.get_account_name_by_account_id(account_id), amount_in_local_currency 
-- FROM transactions.transaction_details
-- WHERE transaction_master_id  = (SELECT * FROM temp_purchase_return);


/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_receipt.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_receipt_function
(
    _user_id                                    integer, 
    _office_id                                  integer, 
    _login_id                                   bigint,
    _party_code                                 national character varying(12), 
    _currency_code                              national character varying(12), 
    _amount                                     public.money_strict, 
    _exchange_rate_debit                        public.decimal_strict, 
    _exchange_rate_credit                       public.decimal_strict,
    _reference_number                           national character varying(24), 
    _statement_reference                        national character varying(128), 
    _cost_center_id                             integer,
    _cash_repository_id                         integer,
    _posted_date                                date,
    _bank_account_id                            integer,
    _bank_instrument_code                       national character varying(128),
    _bank_tran_code                             national character varying(128)
);

DROP FUNCTION IF EXISTS transactions.post_receipt
(
    _user_id                                    integer, 
    _office_id                                  integer, 
    _login_id                                   bigint,
    _party_code                                 national character varying(12), 
    _currency_code                              national character varying(12), 
    _amount                                     public.money_strict, 
    _exchange_rate_debit                        public.decimal_strict, 
    _exchange_rate_credit                       public.decimal_strict,
    _reference_number                           national character varying(24), 
    _statement_reference                        national character varying(128), 
    _cost_center_id                             integer,
    _cash_repository_id                         integer,
    _posted_date                                date,
    _bank_account_id                            integer,
    _bank_instrument_code                       national character varying(128),
    _bank_tran_code                             national character varying(128),
    _cascading_tran_id                          bigint
);

DROP FUNCTION IF EXISTS transactions.post_receipt
(
    _user_id                                    integer, 
    _office_id                                  integer, 
    _login_id                                   bigint,
    _party_code                                 national character varying(12), 
    _currency_code                              national character varying(12), 
    _amount                                     public.money_strict, 
    _exchange_rate_debit                        public.decimal_strict, 
    _exchange_rate_credit                       public.decimal_strict,
    _reference_number                           national character varying(24), 
    _statement_reference                        national character varying(128), 
    _cost_center_id                             integer,
    _cash_repository_id                         integer,
    _posted_date                                date,
    _bank_account_id                            bigint,
    _payment_card_id                            integer,
    _bank_instrument_code                       national character varying(128),
    _bank_tran_code                             national character varying(128),
    _cascading_tran_id                          bigint
);

CREATE FUNCTION transactions.post_receipt
(
    _user_id                                    integer, 
    _office_id                                  integer, 
    _login_id                                   bigint,
    _party_code                                 national character varying(12), 
    _currency_code                              national character varying(12), 
    _amount                                     public.money_strict, 
    _exchange_rate_debit                        public.decimal_strict, 
    _exchange_rate_credit                       public.decimal_strict,
    _reference_number                           national character varying(24), 
    _statement_reference                        national character varying(128), 
    _cost_center_id                             integer,
    _cash_repository_id                         integer,
    _posted_date                                date,
    _bank_account_id                            bigint,
    _payment_card_id                            integer,
    _bank_instrument_code                       national character varying(128),
    _bank_tran_code                             national character varying(128),
    _cascading_tran_id                          bigint DEFAULT NULL
)
RETURNS bigint
AS
$$
    DECLARE _value_date                         date;
    DECLARE _book                               text;
    DECLARE _transaction_master_id              bigint;
    DECLARE _base_currency_code                 national character varying(12);
    DECLARE _local_currency_code                national character varying(12);
    DECLARE _party_id                           bigint;
    DECLARE _party_account_id                   bigint;
    DECLARE _debit                              public.money_strict2;
    DECLARE _credit                             public.money_strict2;
    DECLARE _lc_debit                           public.money_strict2;
    DECLARE _lc_credit                          public.money_strict2;
    DECLARE _is_cash                            boolean;
    DECLARE _cash_account_id                    bigint;
    DECLARE _is_merchant                        boolean=false;
    DECLARE _merchant_rate                      public.decimal_strict2=0;
    DECLARE _customer_pays_fee                  boolean=false;
    DECLARE _merchant_fee_accont_id             bigint;
    DECLARE _merchant_fee_statement_reference   text;
    DECLARE _merchant_fee                       public.money_strict2;
    DECLARE _merchant_fee_lc                    public.money_strict2;
BEGIN
    _value_date                             := transactions.get_value_date(_office_id);

    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book, _value_date) = false) THEN
        RETURN 0;
    END IF;

    IF(_cash_repository_id > 0) THEN
        IF(_posted_date IS NOT NULL OR _bank_account_id IS NOT NULL OR COALESCE(_bank_instrument_code, '') != '' OR COALESCE(_bank_tran_code, '') != '') THEN
            RAISE EXCEPTION 'Invalid bank transaction information provided.'
            USING ERRCODE='P5111';
        END IF;
        _is_cash                            := true;
    END IF;

    _book                                   := 'Sales.Receipt';
    
    _party_id                               := core.get_party_id_by_party_code(_party_code);    
    _party_account_id                       := core.get_account_id_by_party_id(_party_id);
    _cash_account_id                        := core.get_cash_account_id();
    
    _local_currency_code                    := core.get_currency_code_by_office_id(_office_id);
    _base_currency_code                     := core.get_currency_code_by_party_id(_party_id);


    IF EXISTS
    (
        SELECT true FROM core.bank_accounts
        WHERE is_merchant_account
        AND account_id = _bank_account_id
    ) THEN
        _is_merchant = true;
    END IF;

    SELECT 
        rate,
        customer_pays_fee,
        account_id,
        statement_reference
    INTO
        _merchant_rate,
        _customer_pays_fee,
        _merchant_fee_accont_id,
        _merchant_fee_statement_reference
    FROM core.merchant_fee_setup
    WHERE merchant_account_id = _bank_account_id
    AND payment_card_id = _payment_card_id;

    _merchant_rate      := COALESCE(_merchant_rate, 0);
    _customer_pays_fee  := COALESCE(_customer_pays_fee, false);

    IF(_is_merchant AND COALESCE(_payment_card_id, 0) = 0) THEN
        RAISE EXCEPTION 'Invalid payment card information.'
        USING ERRCODE='P5112';
    END IF;

    IF(_merchant_rate > 0 AND COALESCE(_merchant_fee_accont_id, 0) = 0) THEN
        RAISE EXCEPTION 'Could not find an account to post merchant fee expenses.'
        USING ERRCODE='P5113';
    END IF;

    IF(_local_currency_code = _currency_code AND _exchange_rate_debit != 1) THEN
        RAISE EXCEPTION 'Invalid exchange rate.'
        USING ERRCODE='P3055';
    END IF;

    IF(_base_currency_code = _currency_code AND _exchange_rate_credit != 1) THEN
        RAISE EXCEPTION 'Invalid exchange rate.'
        USING ERRCODE='P3055';
    END IF;
        
    _debit                                  := _amount;
    _lc_debit                               := _amount * _exchange_rate_debit;

    _credit                                 := _amount * (_exchange_rate_debit/ _exchange_rate_credit);
    _lc_credit                              := _amount * _exchange_rate_debit;
    _merchant_fee                           := (_debit * _merchant_rate) / 100;
    _merchant_fee_lc                        := (_lc_debit * _merchant_rate)/100;
    
    INSERT INTO transactions.transaction_master
    (
        transaction_master_id, 
        transaction_counter, 
        transaction_code, 
        book, 
        value_date, 
        user_id, 
        login_id, 
        office_id, 
        cost_center_id, 
        reference_number, 
        statement_reference,
        cascading_tran_id
    )
    SELECT 
        nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id')), 
        transactions.get_new_transaction_counter(_value_date), 
        transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id),
        _book,
        _value_date,
        _user_id,
        _login_id,
        _office_id,
        _cost_center_id,
        _reference_number,
        _statement_reference,
        _cascading_tran_id;


    _transaction_master_id := currval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));

    --Debit
    IF(_is_cash) THEN
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency, audit_user_id)
        SELECT _transaction_master_id, _value_date, 'Dr', _cash_account_id, _statement_reference, _cash_repository_id, _currency_code, _debit, _local_currency_code, _exchange_rate_debit, _lc_debit, _user_id;
    ELSE
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency, audit_user_id)
        SELECT _transaction_master_id, _value_date, 'Dr', _bank_account_id, _statement_reference, NULL, _currency_code, _debit, _local_currency_code, _exchange_rate_debit, _lc_debit, _user_id;        
    END IF;

    --Credit
    INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency, audit_user_id)
    SELECT _transaction_master_id, _value_date, 'Cr', _party_account_id, _statement_reference, NULL, _base_currency_code, _credit, _local_currency_code, _exchange_rate_credit, _lc_credit, _user_id;


    IF(_is_merchant AND _merchant_rate > 0 AND _merchant_fee_accont_id > 0) THEN
        --Debit: Merchant Fee Expenses
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency, audit_user_id)
        SELECT _transaction_master_id, _value_date, 'Dr', _merchant_fee_accont_id, _merchant_fee_statement_reference, NULL, _currency_code, _merchant_fee, _local_currency_code, _exchange_rate_debit, _merchant_fee_lc, _user_id;

        --Credit: Merchant A/C
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency, audit_user_id)
        SELECT _transaction_master_id, _value_date, 'Cr', _bank_account_id, _merchant_fee_statement_reference, NULL, _currency_code, _merchant_fee, _local_currency_code, _exchange_rate_debit, _merchant_fee_lc, _user_id;

        IF(_customer_pays_fee) THEN
            --Debit: Party Account Id
            INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency, audit_user_id)
            SELECT _transaction_master_id, _value_date, 'Dr', _party_account_id, _merchant_fee_statement_reference, NULL, _currency_code, _merchant_fee, _local_currency_code, _exchange_rate_debit, _merchant_fee_lc, _user_id;

            --Credit: Reverse Merchant Fee Expenses
            INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency, audit_user_id)
            SELECT _transaction_master_id, _value_date, 'Cr', _merchant_fee_accont_id, _merchant_fee_statement_reference, NULL, _currency_code, _merchant_fee, _local_currency_code, _exchange_rate_debit, _merchant_fee_lc, _user_id;
        END IF;
    END IF;
    
    
    INSERT INTO transactions.customer_receipts(transaction_master_id, party_id, currency_code, amount, er_debit, er_credit, cash_repository_id, posted_date, bank_account_id, bank_instrument_code, bank_tran_code)
    SELECT _transaction_master_id, _party_id, _currency_code, _amount,  _exchange_rate_debit, _exchange_rate_credit, _cash_repository_id, _posted_date, _bank_account_id, _bank_instrument_code, _bank_tran_code;

    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);
    PERFORM transactions.settle_party_due(_party_id, _office_id);
    RETURN _transaction_master_id;
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.post_receipt(2, 2, 94, 'JASMI-0002', 'NPR', 1, 1, 1, '323234', 'ASDFASDF', 1, 1, NULL, NULL, NULL, NULL);

/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_recurring_invoices.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_recurring_invoices(_user_id integer, _login_id bigint, _office_id integer, _value_date date);

CREATE FUNCTION transactions.post_recurring_invoices(_user_id integer, _login_id bigint, _office_id integer, _value_date date)
RETURNS void
AS
$$
    DECLARE _frequency_id           integer;
    DECLARE _frequencies            integer[];
    DECLARE _day                    double precision;
    DECLARE _transaction_master_id  bigint;
    DECLARE _tran_counter           integer;
    DECLARE _transaction_code       text;
    DECLARE _sys                    integer = office.get_sys_user_id();
    DECLARE _default_currency_code  national character varying(12);
    DECLARE this                    RECORD;
BEGIN
    IF(_value_date != transactions.get_value_date(_office_id)) THEN
        RAISE EXCEPTION 'Invalid value date.'
        USING ERRCODE='P3007';
    END IF;

    _default_currency_code          := transactions.get_default_currency_code_by_office_id(_office_id);

    DROP TABLE IF EXISTS recurring_invoices_temp;
    CREATE TEMPORARY TABLE recurring_invoices_temp
    (
        id                          SERIAL,
        recurring_invoice_setup_id  integer,
        tran_type                   public.transaction_type,
        party_id                    bigint,
        recurring_amount            public.money_strict2,
        account_id                  bigint NOT NULL,
        statement_reference         national character varying(100),
        transaction_master_id       bigint
    ) ON COMMIT DROP;

    SELECT frequency_id INTO _frequency_id
    FROM core.frequency_setups
    WHERE value_date = _value_date;

    _frequency_id   := COALESCE(_frequency_id, 0);
    _day            := EXTRACT(DAY FROM _value_date);
    _frequencies    := core.get_frequencies(_frequency_id);

    --INSERT RECURRING INVOICES THAT :
    -->RECUR BASED ON SAME CALENDAR DATE 
    -->AND OCCUR TODAY 
    -->AND HAVE DURATION RECURRENCE TYPE
    INSERT INTO recurring_invoices_temp(recurring_invoice_setup_id, tran_type, party_id, recurring_amount, account_id, statement_reference)
    SELECT 
        core.recurring_invoice_setup.recurring_invoice_setup_id,
        'Cr' AS tran_type,
        core.recurring_invoice_setup.party_id, 
        core.recurring_invoice_setup.recurring_amount, 
        core.recurring_invoice_setup.account_id,
        core.recurring_invoice_setup.statement_reference
    FROM core.recurring_invoice_setup
    WHERE 1 = 1
    AND is_active                                   --IS ACTIVE
    AND _value_date > starts_from                   --HAS NOT STARTED YET
    AND _value_date <= ends_on                      --HAS NOT ENDED YET
    AND recurs_on_same_calendar_date                --RECURS ON THE SAME CALENDAR DATE
    AND _day = EXTRACT(DAY FROM starts_from) - 1    --OCCURS TODAY
    AND recurrence_type_id IN                       --HAS DURATION RECURRENCE TYPE
    (
        SELECT recurrence_type_id FROM core.recurrence_types
        WHERE NOT is_frequency
    );
   
    --INSERT RECURRING INVOICES THAT :
    -->DO NOT RECUR BASED ON SAME CALENDAR DATE, BUT RECURRING DAYS
    -->AND OCCUR TODAY
    -->AND HAVE DURATION RECURRENCE TYPE
    INSERT INTO recurring_invoices_temp(recurring_invoice_setup_id, tran_type, party_id, recurring_amount, account_id, statement_reference)
    SELECT 
        core.recurring_invoice_setup.recurring_invoice_setup_id, 
        'Cr' AS tran_type,
        core.recurring_invoice_setup.party_id, 
        core.recurring_invoice_setup.recurring_amount, 
        core.recurring_invoice_setup.account_id,
        core.recurring_invoice_setup.statement_reference
    FROM core.recurring_invoice_setup
    WHERE 1 = 1
    AND is_active                                   --IS ACTIVE
    AND _value_date > starts_from                   --HAS NOT STARTED YET
    AND _value_date <= ends_on                      --HAS NOT ENDED YET
    AND NOT recurs_on_same_calendar_date            --DOES NOT RECUR ON THE SAME CALENDAR DATE, BUT RECURRING DAYS
    --OCCURS TODAY
    AND _value_date
    IN
    (
        SELECT 
        GENERATE_SERIES
        (
            starts_from::timestamp, 
            ends_on::timestamp, 
            (
                recurring_duration::text || 'days'
            )::interval
        )::date - INTERVAL '1 DAY'
    )
    AND recurrence_type_id IN                       --HAS DURATION RECURRENCE TYPE
    (
        SELECT recurrence_type_id FROM core.recurrence_types
        WHERE NOT is_frequency
    );
   
    --INSERT RECURRING INVOICES THAT :
    -->OCCUR TODAY 
    -->AND RECUR BASED ON FREQUENCIES
    INSERT INTO recurring_invoices_temp(recurring_invoice_setup_id, tran_type, party_id, recurring_amount, account_id, statement_reference)
    SELECT
        core.recurring_invoice_setup.recurring_invoice_setup_id, 
        'Cr' AS tran_type,
        core.recurring_invoice_setup.party_id, 
        core.recurring_invoice_setup.recurring_amount, 
        core.recurring_invoice_setup.account_id,
        core.recurring_invoice_setup.statement_reference    
    FROM core.recurring_invoice_setup
    WHERE 1 = 1
    AND is_active                                   --IS ACTIVE
    AND _value_date > starts_from                   --HAS NOT STARTED YET
    AND _value_date <= ends_on                      --HAS NOT ENDED YET
    AND recurring_frequency_id = ANY(_frequencies)  --OCCURS TODAY
    AND recurrence_type_id IN                       --RECURS BASED ON FREQUENCIES
    (
        SELECT recurrence_type_id FROM core.recurrence_types
        WHERE is_frequency
    );

    UPDATE recurring_invoices_temp
    SET statement_reference = REPLACE(recurring_invoices_temp.statement_reference, '{RIMonth}', to_char(date_trunc('month', _value_date), 'MON'));

    UPDATE recurring_invoices_temp
    SET statement_reference = REPLACE(recurring_invoices_temp.statement_reference, '{RIYear}', to_char(date_trunc('year', _value_date), 'YYYY'));

    INSERT INTO recurring_invoices_temp(recurring_invoice_setup_id, tran_type, party_id, recurring_amount, account_id, statement_reference)
    SELECT 
        recurring_invoices_temp.recurring_invoice_setup_id, 
        'Dr' AS tran_type,
        recurring_invoices_temp.party_id, 
        recurring_invoices_temp.recurring_amount, 
        core.get_account_id_by_party_id(recurring_invoices_temp.party_id), 
        recurring_invoices_temp.statement_reference
    FROM recurring_invoices_temp;


    FOR this IN
    SELECT DISTINCT recurring_invoices_temp.recurring_invoice_setup_id
    FROM recurring_invoices_temp
    WHERE COALESCE(recurring_invoices_temp.recurring_amount, 0) > 0
    LOOP
        _transaction_master_id  := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
        _tran_counter           := transactions.get_new_transaction_counter(_value_date);
        _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

        INSERT INTO transactions.transaction_master
        (
            transaction_master_id, 
            transaction_counter, 
            transaction_code, 
            book, 
            value_date, 
            user_id, 
            office_id, 
            statement_reference,
            verification_status_id,
            sys_user_id,
            verified_by_user_id,
            verification_reason
        ) 
        SELECT            
            _transaction_master_id, 
            _tran_counter, 
            _transaction_code, 
            'Recurring.Invoice', 
            _value_date, 
            _user_id, 
            _office_id,             
            recurring_invoices_temp.statement_reference,
            1,
            _sys,
            _sys,
            'Automatically verified by workflow.'
        FROM recurring_invoices_temp
        WHERE recurring_invoices_temp.recurring_invoice_setup_id  = this.recurring_invoice_setup_id
        LIMIT 1;

        INSERT INTO transactions.transaction_details
        (
            transaction_master_id,
            value_date,
            tran_type, 
            account_id, 
            statement_reference, 
            currency_code, 
            amount_in_currency, 
            er, 
            local_currency_code, 
            amount_in_local_currency
        )
        SELECT
            _transaction_master_id,
            _value_date,
            recurring_invoices_temp.tran_type,
            recurring_invoices_temp.account_id,
            recurring_invoices_temp.statement_reference,
            _default_currency_code, 
            recurring_invoices_temp.recurring_amount, 
            1 AS exchange_rate,
            _default_currency_code,
            recurring_invoices_temp.recurring_amount
        FROM recurring_invoices_temp
        WHERE recurring_invoices_temp.recurring_invoice_setup_id  = this.recurring_invoice_setup_id;
    END LOOP;    
END
$$
LANGUAGE plpgsql;


DELETE FROM transactions.routines where routine_code='REF-PORCIV';
SELECT transactions.create_routine('POST-RCIV', 'transactions.post_recurring_invoices', 200);


--SELECT  * FROM transactions.post_recurring_invoices(2, 5, 2, '2015-04-17');


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_sales.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_sales
(
    _book_name                              national character varying(12),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _cost_center_id                         integer,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _is_credit                              boolean,
    _payment_term_id                        integer,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _salesperson_id                         integer,
    _shipper_id                             integer,
    _shipping_address_code                  national character varying(12),
    _store_id                               integer,
    _is_non_taxable_sales                   boolean,
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[]
);

DROP FUNCTION IF EXISTS transactions.post_sales
(
    _book_name                              national character varying(48),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _cost_center_id                         integer,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _is_credit                              boolean,
    _payment_term_id                        integer,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _salesperson_id                         integer,
    _shipper_id                             integer,
    _shipping_address_code                  national character varying(12),
    _store_id                               integer,
    _is_non_taxable_sales                   boolean,
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[],
    _non_gl_tran_ids                        bigint[]    
);

CREATE FUNCTION transactions.post_sales
(
    _book_name                              national character varying(48),
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _cost_center_id                         integer,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _is_credit                              boolean,
    _payment_term_id                        integer,
    _party_code                             national character varying(12),
    _price_type_id                          integer,
    _salesperson_id                         integer,
    _shipper_id                             integer,
    _shipping_address_code                  national character varying(12),
    _store_id                               integer,
    _is_non_taxable_sales                   boolean,
    _details                                transactions.stock_detail_type[],
    _attachments                            core.attachment_type[],
    _non_gl_tran_ids                        bigint[]
)
RETURNS bigint
AS
$$
    DECLARE _party_id                       bigint;
    DECLARE _transaction_master_id          bigint;
    DECLARE _stock_master_id                bigint;
    DECLARE _stock_detail_id                bigint;
    DECLARE _shipping_address_id            integer;
    DECLARE _grand_total                    money_strict;
    DECLARE _discount_total                 money_strict2;
    DECLARE _tax_total                      money_strict2;
    DECLARE _receivable                     money_strict2;
    DECLARE _default_currency_code          national character varying(12);
    DECLARE _is_periodic                    boolean = office.is_periodic_inventory(_office_id);
    DECLARE _cost_of_goods                  money_strict;
    DECLARE _tran_counter                   integer;
    DECLARE _transaction_code               text;
    DECLARE _shipping_charge                money_strict2;
    DECLARE this                            RECORD;
    DECLARE _cash_repository_id             integer;
    DECLARE _cash_account_id                bigint;
    DECLARE _is_cash                        boolean;
BEGIN        
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;

    _party_id                               := core.get_party_id_by_party_code(_party_code);
    _default_currency_code                  := transactions.get_default_currency_code_by_office_id(_office_id);
    _cash_account_id                        := core.get_cash_account_id_by_store_id(_store_id);
    _cash_repository_id                     := core.get_cash_repository_id_by_store_id(_store_id);
    _is_cash                                := core.is_cash_account_id(_cash_account_id);


    IF(NOT _is_credit AND NOT _is_cash) THEN
        RAISE EXCEPTION 'Cannot post sales. Invalid cash account mapping on store.'
        USING ERRCODE='P1302';
    END IF; 

    IF(NOT _is_cash) THEN
        _cash_repository_id                 := NULL;
    END IF;

    DROP TABLE IF EXISTS temp_stock_details CASCADE;
    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        stock_master_id                 bigint, 
        tran_type                       transaction_type, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        integer_strict,        
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           money_strict,
        cost_of_goods_sold              money_strict2 DEFAULT(0),
        discount                        money_strict2,
        shipping_charge                 money_strict2,
        tax_form                        text,
        sales_tax_id                    integer,
        tax                             money_strict2,
        sales_account_id                integer,
        sales_discount_account_id       integer,
        inventory_account_id            integer,
        cost_of_goods_sold_account_id   integer
    ) ON COMMIT DROP;
    
    DROP TABLE IF EXISTS temp_stock_tax_details;
    CREATE TEMPORARY TABLE temp_stock_tax_details
    (
        id                                      SERIAL,
        temp_stock_detail_id                    integer REFERENCES temp_stock_details(id),
        sales_tax_detail_code                   text,
        stock_detail_id                         bigint,
        sales_tax_detail_id                     integer,
        state_sales_tax_id                      integer,
        county_sales_tax_id                     integer,
        account_id                              integer,
        principal                               money_strict,
        rate                                    decimal_strict,
        tax                                     money_strict
    ) ON COMMIT DROP;
    
    INSERT INTO temp_stock_details(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);

    UPDATE temp_stock_details 
    SET
        tran_type                       = 'Cr',
        sales_tax_id                    = core.get_sales_tax_id_by_sales_tax_code(tax_form),
        item_id                         = core.get_item_id_by_item_code(item_code),
        unit_id                         = core.get_unit_id_by_unit_name(unit_name),
        base_quantity                   = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                    = core.get_base_unit_id_by_unit_name(unit_name);

    UPDATE temp_stock_details
    SET
        sales_account_id                = core.get_sales_account_id(item_id),
        sales_discount_account_id       = core.get_sales_discount_account_id(item_id),
        inventory_account_id            = core.get_inventory_account_id(item_id),
        cost_of_goods_sold_account_id   = core.get_cost_of_goods_sold_account_id(item_id);

    DROP TABLE IF EXISTS item_quantities_temp;
    CREATE TEMPORARY TABLE item_quantities_temp
    (
        item_id             integer,
        base_unit_id        integer,
        store_id            integer,
        total_sales         numeric,
        in_stock            numeric,
        maintain_stock      boolean
    ) ON COMMIT DROP;

    INSERT INTO item_quantities_temp(item_id, base_unit_id, store_id, total_sales)
    SELECT item_id, base_unit_id, store_id, SUM(base_quantity)
    FROM temp_stock_details
    GROUP BY item_id, base_unit_id, store_id;

    UPDATE item_quantities_temp
    SET maintain_stock = core.items.maintain_stock
    FROM core.items
    WHERE item_quantities_temp.item_id = core.items.item_id;
    
    UPDATE item_quantities_temp
    SET in_stock = core.count_item_in_stock(item_quantities_temp.item_id, item_quantities_temp.base_unit_id, item_quantities_temp.store_id)
    WHERE maintain_stock;


    IF EXISTS
    (
        SELECT 0 FROM item_quantities_temp
        WHERE total_sales > in_stock
        AND maintain_stock
        LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Insufficient item quantity'
        USING ERRCODE='P5500';
    END IF;
    
    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;

    IF(_is_non_taxable_sales) THEN
        IF EXISTS(SELECT * FROM temp_stock_details WHERE sales_tax_id IS NOT NULL LIMIT 1) THEN
            RAISE EXCEPTION 'You cannot provide sales tax information for non taxable sales.'
            USING ERRCODE='P5110';
        END IF;
    END IF;

    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        INSERT INTO temp_stock_tax_details
        (
            temp_stock_detail_id,
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            principal, 
            rate, 
            tax
        )
        SELECT 
            this.id, 
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            taxable_amount, 
            rate, 
            tax
        FROM transactions.get_sales_tax('Sales', _store_id, _party_code, _shipping_address_code, _price_type_id, this.item_code, this.price, this.quantity, this.discount, this.shipping_charge, this.sales_tax_id);
    END LOOP;

    UPDATE temp_stock_details
    SET tax =
    (SELECT SUM(COALESCE(temp_stock_tax_details.tax, 0)) FROM temp_stock_tax_details
    WHERE temp_stock_tax_details.temp_stock_detail_id = temp_stock_details.id);


    SELECT SUM(COALESCE(tax, 0))                                INTO _tax_total FROM temp_stock_tax_details;
    SELECT SUM(COALESCE(discount, 0))                           INTO _discount_total FROM temp_stock_details;
    SELECT SUM(COALESCE(price, 0) * COALESCE(quantity, 0))      INTO _grand_total FROM temp_stock_details;
    SELECT SUM(COALESCE(shipping_charge, 0))                    INTO _shipping_charge FROM temp_stock_details;
    
     _receivable                    := _grand_total - COALESCE(_discount_total, 0) + COALESCE(_tax_total, 0) + COALESCE(_shipping_charge, 0);
    
    DROP TABLE IF EXISTS temp_transaction_details;
    CREATE TEMPORARY TABLE temp_transaction_details
    (
        transaction_master_id       BIGINT, 
        tran_type                   transaction_type, 
        account_id                  integer, 
        statement_reference         text, 
        cash_repository_id          integer, 
        currency_code               national character varying(12), 
        amount_in_currency          money_strict, 
        local_currency_code         national character varying(12), 
        er                          decimal_strict, 
        amount_in_local_currency    money_strict
    ) ON COMMIT DROP;


    INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
    SELECT 'Cr', sales_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), 1, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
    FROM temp_stock_details
    GROUP BY sales_account_id;

    IF(NOT _is_periodic) THEN
        --Perpetutal Inventory Accounting System

        UPDATE temp_stock_details SET cost_of_goods_sold = transactions.get_cost_of_goods_sold(item_id, unit_id, store_id, quantity);
        
        SELECT SUM(cost_of_goods_sold) INTO _cost_of_goods
        FROM temp_stock_details;

        IF(_cost_of_goods > 0) THEN
            INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
            SELECT 'Dr', cost_of_goods_sold_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0)), 1, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0))
            FROM temp_stock_details
            GROUP BY cost_of_goods_sold_account_id;

            INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
            SELECT 'Cr', inventory_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0)), 1, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0))
            FROM temp_stock_details
            GROUP BY inventory_account_id;
        END IF;
    END IF;

    IF(_tax_total > 0) THEN
        FOR this IN 
        SELECT 
            format('P: %s x R: %s %% = %s (%s)/', SUM(principal)::text, rate::text, SUM(tax)::text, sales_tax_detail_code) as statement_reference,
            account_id,
            SUM(tax) AS tax 
        FROM temp_stock_tax_details
        GROUP BY account_id, rate, sales_tax_detail_code
        LOOP
            INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
            SELECT 'Cr', this.account_id, this.statement_reference || _statement_reference, _default_currency_code, this.tax, 1, _default_currency_code, this.tax;
        END LOOP;    
    END IF;

    IF(COALESCE(_shipping_charge, 0) > 0) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Cr', core.get_account_id_by_shipper_id(_shipper_id), _statement_reference, _default_currency_code, _shipping_charge, 1, _default_currency_code, _shipping_charge;                
    END IF;


    IF(_discount_total > 0) THEN
        INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT 'Dr', sales_discount_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(discount, 0)), 1, _default_currency_code, SUM(COALESCE(discount, 0))
        FROM temp_stock_details
        GROUP BY sales_discount_account_id;
    END IF;

    INSERT INTO temp_transaction_details(tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
    SELECT 'Dr', core.get_account_id_by_party_id(_party_id), _statement_reference, _default_currency_code, _receivable, 1, _default_currency_code, _receivable;

    _transaction_master_id  := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _stock_master_id        := nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));    
    _tran_counter           := transactions.get_new_transaction_counter(_value_date);
    _transaction_code       := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);
    _shipping_address_id    := core.get_shipping_address_id_by_shipping_address_code(_shipping_address_code, _party_id);

    UPDATE temp_transaction_details     SET transaction_master_id   = _transaction_master_id;
    UPDATE temp_stock_details           SET stock_master_id         = _stock_master_id;
    
    INSERT INTO transactions.transaction_master(transaction_master_id, transaction_counter, transaction_code, book, value_date, user_id, login_id, office_id, cost_center_id, reference_number, statement_reference) 
    SELECT _transaction_master_id, _tran_counter, _transaction_code, _book_name, _value_date, _user_id, _login_id, _office_id, _cost_center_id, _reference_number, _statement_reference;


    INSERT INTO transactions.transaction_details(value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency)
    SELECT _value_date, transaction_master_id, tran_type, account_id, statement_reference, cash_repository_id, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency
    FROM temp_transaction_details
    ORDER BY tran_type DESC;

    INSERT INTO transactions.stock_master(value_date, stock_master_id, transaction_master_id, party_id, salesperson_id, price_type_id, is_credit, payment_term_id, shipper_id, shipping_address_id, shipping_charge, store_id, cash_repository_id, non_taxable)
    SELECT _value_date, _stock_master_id, _transaction_master_id, _party_id, _salesperson_id, _price_type_id, _is_credit, _payment_term_id, _shipper_id, _shipping_address_id, _shipping_charge, _store_id, _cash_repository_id, _is_non_taxable_sales;
            

    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        _stock_detail_id        := nextval(pg_get_serial_sequence('transactions.stock_details', 'stock_detail_id'));

        INSERT INTO transactions.stock_details(stock_detail_id, value_date, stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price, cost_of_goods_sold, discount, shipping_charge, sales_tax_id, tax)
        SELECT _stock_detail_id, _value_date, this.stock_master_id, this.tran_type, this.store_id, this.item_id, this.quantity, this.unit_id, this.base_quantity, this.base_unit_id, this.price, COALESCE(this.cost_of_goods_sold, 0), this.discount, this.shipping_charge, this.sales_tax_id, COALESCE(this.tax, 0) 
        FROM temp_stock_details
        WHERE id = this.id;


        INSERT INTO transactions.stock_tax_details(stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax)
        SELECT _stock_detail_id, sales_tax_detail_id, state_sales_tax_id, county_sales_tax_id, principal, rate, tax
        FROM temp_stock_tax_details
        WHERE temp_stock_detail_id = this.id;
        
    END LOOP;



    IF(array_length(_attachments, 1) > 0 AND _attachments != ARRAY[NULL::core.attachment_type]) THEN
        INSERT INTO core.attachments(user_id, resource, resource_key, resource_id, original_file_name, file_extension, file_path, comment)
        SELECT _user_id, 'transactions.transaction_master', 'transaction_master_id', _transaction_master_id, original_file_name, file_extension, file_path, comment 
        FROM explode_array(_attachments);
    END IF;

    IF(array_length(_non_gl_tran_ids, 1) > 0 AND _non_gl_tran_ids != ARRAY[NULL::bigint]) THEN
        INSERT INTO transactions.stock_master_non_gl_relations(stock_master_id, non_gl_stock_master_id)
        SELECT _stock_master_id, explode_array(_non_gl_tran_ids);
    END IF;
    
    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);

    IF(NOT _is_credit) THEN
        PERFORM transactions.post_receipt(_user_id, _office_id, _login_id, _party_code, _default_currency_code, _receivable, 1, 1, _reference_number, _statement_reference, _cost_center_id, _cash_repository_id, NULL, NULL, NULL, NULL, NULL, _transaction_master_id);
    ELSE
        PERFORM transactions.settle_party_due(_party_id, _office_id);
    END IF;

    RETURN _transaction_master_id;
END
$$
LANGUAGE plpgsql;



--       SELECT * FROM transactions.post_sales('Sales.Direct', 2, 2, 5, '1-1-2020', 1, 'asdf', 'Test', false, NULL, 'JASMI-0002', 1, 1, 1, NULL, 1, false,
--       ARRAY[
--                  ROW(1, 'RMBP', 1, 'Piece',180000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--                  ROW(1, 'RMBP', 1, 'Dozen',130000, 300, 30, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--                  ROW(1, 'RMBP', 1, 'Box',110000, 5000, 50, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type], 
--       ARRAY[NULL::core.attachment_type], NULL::bigint[]);



/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_sales_return.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_sales_return
(
    _transaction_master_id          bigint,
    _office_id                      integer,
    _user_id                        integer,
    _login_id                       bigint,
    _value_date                     date,
    _store_id                       integer,
    _party_code                     national character varying(12),
    _price_type_id                  integer,
    _reference_number               national character varying(24),
    _statement_reference            text,
    _details                        transactions.stock_detail_type[],
    _attachments                    core.attachment_type[]
);

CREATE FUNCTION transactions.post_sales_return
(
    _transaction_master_id          bigint,
    _office_id                      integer,
    _user_id                        integer,
    _login_id                       bigint,
    _value_date                     date,
    _store_id                       integer,
    _party_code                     national character varying(12),
    _price_type_id                  integer,
    _reference_number               national character varying(24),
    _statement_reference            text,
    _details                        transactions.stock_detail_type[],
    _attachments                    core.attachment_type[]
)
RETURNS bigint
AS
$$
    DECLARE _party_id               bigint;
    DECLARE _cost_center_id         bigint;
    DECLARE _tran_master_id         bigint;
    DECLARE _tran_counter           integer;
    DECLARE _tran_code              text;
    DECLARE _stock_master_id        bigint;
    DECLARE _grand_total            money_strict;
    DECLARE _discount_total         money_strict2;
    DECLARE _tax_total              money_strict2;
    DECLARE _is_credit              boolean;
    DECLARE _default_currency_code  national character varying(12);
    DECLARE _cost_of_goods_sold     money_strict2;
    DECLARE _sm_id                  bigint;
    DECLARE _is_non_taxable_sales   boolean;
    DECLARE this                    RECORD;
    DECLARE _shipping_address_code  national character varying(12);
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, 'Sales.Return', _value_date) = false) THEN
        RETURN 0;
    END IF;

    IF(NOT transactions.validate_items_for_return(_transaction_master_id, _details)) THEN
        RETURN 0;
    END IF;
    
    _party_id                       := core.get_party_id_by_party_code(_party_code);
    _default_currency_code          := transactions.get_default_currency_code_by_office_id(_office_id);
    
    SELECT cost_center_id   INTO _cost_center_id    FROM transactions.transaction_master WHERE transactions.transaction_master.transaction_master_id = _transaction_master_id;

    SELECT 
        is_credit,
        non_taxable,
        core.get_shipping_address_code_by_shipping_address_id(shipping_address_id),
        stock_master_id
    INTO 
        _is_credit,
        _is_non_taxable_sales,
        _shipping_address_code,
        _sm_id
    FROM transactions.stock_master 
    WHERE transaction_master_id = _transaction_master_id;

    CREATE TEMPORARY TABLE temp_stock_details
    (
        id                              SERIAL PRIMARY KEY,
        stock_master_id                 bigint, 
        tran_type                       transaction_type, 
        store_id                        integer,
        item_code                       text,
        item_id                         integer, 
        quantity                        integer_strict,
        unit_name                       text,
        unit_id                         integer,
        base_quantity                   decimal,
        base_unit_id                    integer,                
        price                           money_strict,
        cost_of_goods_sold              money_strict2 DEFAULT(0),
        discount                        money_strict2,
        shipping_charge                 money_strict2,
        tax_form                        text,
        sales_tax_id                    integer,
        tax                             money_strict2,
        sales_account_id                integer,
        sales_discount_account_id       integer,
        sales_return_account_id         integer,
        inventory_account_id            integer,
        cost_of_goods_sold_account_id   integer        
    ) ON COMMIT DROP;

    CREATE TEMPORARY TABLE temp_stock_tax_details
    (
        id                                      SERIAL,
        temp_stock_detail_id                    integer REFERENCES temp_stock_details(id),
        sales_tax_detail_code                   text,
        stock_detail_id                         bigint,
        sales_tax_detail_id                     integer,
        state_sales_tax_id                      integer,
        county_sales_tax_id                     integer,
        account_id                              integer,
        principal                               money_strict,
        rate                                    decimal_strict,
        tax                                     money_strict
    ) ON COMMIT DROP;

    INSERT INTO temp_stock_details(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);

    UPDATE temp_stock_details 
    SET
        tran_type                   = 'Dr',
        sales_tax_id                = core.get_sales_tax_id_by_sales_tax_code(tax_form),
        item_id                     = core.get_item_id_by_item_code(item_code),
        unit_id                     = core.get_unit_id_by_unit_name(unit_name),
        base_quantity               = core.get_base_quantity_by_unit_name(unit_name, quantity),
        base_unit_id                = core.get_base_unit_id_by_unit_name(unit_name);

    UPDATE temp_stock_details
    SET
        sales_account_id                = core.get_sales_account_id(item_id),
        sales_discount_account_id       = core.get_sales_discount_account_id(item_id),
        sales_return_account_id         = core.get_sales_return_account_id(item_id),        
        inventory_account_id            = core.get_inventory_account_id(item_id),
        cost_of_goods_sold_account_id   = core.get_cost_of_goods_sold_account_id(item_id);
    
    IF EXISTS
    (

        SELECT * 
        FROM transactions.stock_details
        INNER JOIN temp_stock_details
        ON temp_stock_details.item_id = transactions.stock_details.item_id
        WHERE transactions.stock_details.stock_master_id = _sm_id
        AND COALESCE(temp_stock_details.sales_tax_id, 0) != COALESCE(transactions.stock_details.sales_tax_id, 0)
        LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Tax form mismatch.'
        USING ERRCODE='P3202';
    END IF;

    IF EXISTS
    (
            SELECT 1 FROM temp_stock_details AS details
            WHERE core.is_valid_unit_id(details.unit_id, details.item_id) = false
            LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Item/unit mismatch.'
        USING ERRCODE='P3201';
    END IF;

    IF(_is_non_taxable_sales) THEN
        IF EXISTS(SELECT * FROM temp_stock_details WHERE sales_tax_id IS NOT NULL LIMIT 1) THEN
            RAISE EXCEPTION 'You cannot provide sales tax information for non taxable sales.'
            USING ERRCODE='P5110';
        END IF;
    END IF;

    FOR this IN SELECT * FROM temp_stock_details ORDER BY id
    LOOP
        INSERT INTO temp_stock_tax_details
        (
            temp_stock_detail_id,
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            principal, 
            rate, 
            tax
        )
        SELECT 
            this.id, 
            sales_tax_detail_code,
            account_id, 
            sales_tax_detail_id, 
            state_sales_tax_id, 
            county_sales_tax_id, 
            taxable_amount, 
            rate, 
            tax
        FROM transactions.get_sales_tax('Sales', _store_id, _party_code, _shipping_address_code, _price_type_id, this.item_code, this.price, this.quantity, this.discount, this.shipping_charge, this.sales_tax_id);
    END LOOP;
    
    UPDATE temp_stock_details
    SET tax =
    (SELECT SUM(COALESCE(temp_stock_tax_details.tax, 0)) FROM temp_stock_tax_details
    WHERE temp_stock_tax_details.temp_stock_detail_id = temp_stock_details.id);

    _tran_master_id             := nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));
    _stock_master_id            := nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));
    _tran_counter               := transactions.get_new_transaction_counter(_value_date);
    _tran_code                  := transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id);

    INSERT INTO transactions.transaction_master(transaction_master_id, transaction_counter, transaction_code, book, value_date, user_id, login_id, office_id, cost_center_id, reference_number, statement_reference)
    SELECT _tran_master_id, _tran_counter, _tran_code, 'Sales.Return', _value_date, _user_id, _login_id, _office_id, _cost_center_id, _reference_number, _statement_reference;
        
    SELECT SUM(COALESCE(tax, 0))                                INTO _tax_total FROM temp_stock_tax_details;
    SELECT SUM(COALESCE(discount, 0))                           INTO _discount_total FROM temp_stock_details;
    SELECT SUM(COALESCE(price, 0) * COALESCE(quantity, 0))      INTO _grand_total FROM temp_stock_details;



    UPDATE temp_stock_details
    SET cost_of_goods_sold = transactions.get_write_off_cost_of_goods_sold(_sm_id, item_id, unit_id, quantity);


    SELECT SUM(cost_of_goods_sold) INTO _cost_of_goods_sold FROM temp_stock_details;


    IF(_cost_of_goods_sold > 0) THEN
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT _tran_master_id, _value_date, 'Dr', inventory_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0)), 1, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0))
        FROM temp_stock_details
        GROUP BY inventory_account_id;


        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, er, local_currency_code, amount_in_local_currency)
        SELECT _tran_master_id, _value_date, 'Cr', cost_of_goods_sold_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0)), 1, _default_currency_code, SUM(COALESCE(cost_of_goods_sold, 0))
        FROM temp_stock_details
        GROUP BY cost_of_goods_sold_account_id;
    END IF;


    INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, local_currency_code, er,amount_in_local_currency) 
    SELECT _tran_master_id, _value_date, 'Dr', sales_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)), _default_currency_code, 1, SUM(COALESCE(price, 0) * COALESCE(quantity, 0))
    FROM temp_stock_details
    GROUP BY sales_account_id;


    IF(_tax_total IS NOT NULL AND _tax_total > 0) THEN
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency)
        SELECT _tran_master_id, _value_date, 'Dr', temp_stock_tax_details.account_id, _statement_reference, _default_currency_code, SUM(COALESCE(tax, 0)), _default_currency_code, 1, SUM(COALESCE(tax, 0))
        FROM temp_stock_tax_details
        GROUP BY temp_stock_tax_details.account_id;
    END IF;

    IF(_discount_total IS NOT NULL AND _discount_total > 0) THEN
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency) 
        SELECT _tran_master_id, _value_date, 'Cr', sales_discount_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(discount, 0)), _default_currency_code, 1, SUM(COALESCE(discount, 0))
        FROM temp_stock_details
        GROUP BY sales_discount_account_id;
    END IF;

    IF(_is_credit) THEN
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency) 
        SELECT _tran_master_id, _value_date, 'Cr',  core.get_account_id_by_party_code(_party_code), _statement_reference, _default_currency_code, _grand_total + _tax_total - _discount_total, _default_currency_code, 1, _grand_total + _tax_total - _discount_total;
    ELSE
        INSERT INTO transactions.transaction_details(transaction_master_id, value_date, tran_type, account_id, statement_reference, currency_code, amount_in_currency, local_currency_code, er, amount_in_local_currency) 
        SELECT _tran_master_id, _value_date, 'Cr',  sales_return_account_id, _statement_reference, _default_currency_code, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)) + SUM(COALESCE(tax, 0)) - SUM(COALESCE(discount, 0)), _default_currency_code, 1, SUM(COALESCE(price, 0) * COALESCE(quantity, 0)) + SUM(COALESCE(tax, 0)) - SUM(COALESCE(discount, 0))
        FROM temp_stock_details
        GROUP BY sales_return_account_id;
    END IF;



    INSERT INTO transactions.stock_master(stock_master_id, value_date, transaction_master_id, party_id, price_type_id, is_credit, store_id) 
    SELECT _stock_master_id, _value_date, _tran_master_id, _party_id, _price_type_id, false, _store_id;


    INSERT INTO transactions.stock_details(value_date, stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price, cost_of_goods_sold, discount, sales_tax_id, tax)
    SELECT _value_date, _stock_master_id, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price, cost_of_goods_sold, discount, sales_tax_id, tax FROM temp_stock_details;

    INSERT INTO transactions.stock_return(transaction_master_id, return_transaction_master_id)
    SELECT _transaction_master_id, _tran_master_id;

    PERFORM transactions.auto_verify(_tran_master_id, _office_id);
    RETURN _tran_master_id;
END
$$
LANGUAGE plpgsql;




-- CREATE TEMPORARY TABLE temp_sales_return
-- ON COMMIT DROP
-- AS
-- 
-- SELECT * FROM transactions.post_sales_return(5, 2, 2, 1, transactions.get_value_date(2), 1, 'MAJON-0002', 1, '1234-AD', 'Test', 
-- ARRAY[
--  ROW(1, 'RMBP', 1, 'Piece', 180000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type,
--  ROW(1, '13MBA', 1, 'Piece', 110000, 5000, 50, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type
-- ],
-- ARRAY[
-- NULL::core.attachment_type
-- ]);
-- 
-- SELECT  tran_type, core.get_account_name_by_account_id(account_id), amount_in_local_currency 
-- FROM transactions.transaction_details
-- WHERE transaction_master_id  = (SELECT * FROM temp_sales_return);


/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.post_stock_journal.sql --<--<--
DROP FUNCTION IF EXISTS transactions.post_stock_journal
(
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _details                                transactions.stock_adjustment_type[]
);


CREATE FUNCTION transactions.post_stock_journal
(
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _value_date                             date,
    _reference_number                       national character varying(24),
    _statement_reference                    text,
    _details                                transactions.stock_adjustment_type[]
)
RETURNS bigint
AS
$$
    DECLARE _transaction_master_id                  bigint;
    DECLARE _stock_master_id                        bigint;
    DECLARE _book_name                              text='Inventory.Transfer';
BEGIN
    IF(policy.can_post_transaction(_login_id, _user_id, _office_id, _book_name, _value_date) = false) THEN
        RETURN 0;
    END IF;


    CREATE TEMPORARY TABLE IF NOT EXISTS temp_stock_details
    (
        tran_type       transaction_type,
        store_id        integer,
        store_name      national character varying(50),
        item_id         integer,
        item_code       national character varying(12),
        unit_id         integer,
        base_unit_id    integer,
        unit_name       national character varying(50),
        quantity        integer_strict,
        base_quantity   integer,                
        price           money_strict                             
    ) 
    ON COMMIT DROP; 

    INSERT INTO temp_stock_details(tran_type, store_name, item_code, unit_name, quantity)
    SELECT tran_type, store_name, item_code, unit_name, quantity FROM explode_array(_details);

    IF EXISTS
    (
        SELECT 1 FROM temp_stock_details
        GROUP BY item_code, store_name
        HAVING COUNT(item_code) <> 1
    ) THEN
        RAISE EXCEPTION 'An item can appear only once in a store.'
        USING ERRCODE='P5202';
    END IF;

    UPDATE temp_stock_details SET 
    item_id         = core.get_item_id_by_item_code(item_code),
    unit_id         = core.get_unit_id_by_unit_name(unit_name),
    store_id        = office.get_store_id_by_store_name(store_name);

    IF EXISTS
    (
        SELECT * FROM temp_stock_details
        WHERE item_id IS NULL OR unit_id IS NULL OR store_id IS NULL
    ) THEN
        RAISE EXCEPTION 'Invalid data supplied.'
        USING ERRCODE='P3000';
    END IF;

    UPDATE temp_stock_details SET
    base_unit_id    = core.get_root_unit_id(unit_id),
    base_quantity   = core.get_base_quantity_by_unit_id(unit_id, quantity),
    price           = core.get_item_cost_price(item_id, unit_id, NULL);

    IF EXISTS
    (
        SELECT item_code FROM temp_stock_details
        GROUP BY item_code
        HAVING SUM(CASE WHEN tran_type='Dr' THEN base_quantity ELSE base_quantity *-1 END) <> 0
    ) THEN
        RAISE EXCEPTION 'Referencing sides are not equal.'
        USING ERRCODE='P5000';        
    END IF;


    IF EXISTS
    (
            SELECT 1
            FROM 
            office.stores
            WHERE office.stores.store_id
            IN
            (
                SELECT temp_stock_details.store_id
                FROM temp_stock_details
            )
            HAVING COUNT(DISTINCT office.stores.office_id) > 1

    ) THEN
        RAISE EXCEPTION E'Access is denied!\nA stock journal transaction cannot references multiple branches.'
        USING ERRCODE='P9013';
    END IF;

    IF EXISTS
    (
            SELECT 1
            FROM 
            temp_stock_details
            WHERE tran_type = 'Cr'
            AND quantity > core.count_item_in_stock(item_id, unit_id, store_id)
    ) THEN
        RAISE EXCEPTION 'Negative stock is not allowed.'
        USING ERRCODE='P5001';
    END IF;

    INSERT INTO transactions.transaction_master
    (
            transaction_master_id,
            transaction_counter,
            transaction_code,
            book,
            value_date,
            login_id,
            user_id,
            office_id,
            reference_number,
            statement_reference
    )
    SELECT
            nextval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id')), 
            transactions.get_new_transaction_counter(_value_date), 
            transactions.get_transaction_code(_value_date, _office_id, _user_id, _login_id),
            _book_name,
            _value_date,
            _login_id,
            _user_id,
            _office_id,
            _reference_number,
            _statement_reference;


    _transaction_master_id                          := currval(pg_get_serial_sequence('transactions.transaction_master', 'transaction_master_id'));


    INSERT INTO transactions.stock_master(stock_master_id, transaction_master_id, value_date)
    SELECT nextval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id')), _transaction_master_id, _value_date;

    _stock_master_id                                := currval(pg_get_serial_sequence('transactions.stock_master', 'stock_master_id'));

    INSERT INTO transactions.stock_details(stock_master_id, value_date, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price)
    SELECT _stock_master_id, _value_date, tran_type, store_id, item_id, quantity, unit_id, base_quantity, base_unit_id, price
    FROM temp_stock_details;
    
    
    PERFORM transactions.auto_verify(_transaction_master_id, _office_id);
    RETURN _transaction_master_id;
END
$$
LANGUAGE plpgsql;


-- SELECT * FROM transactions.post_stock_journal(2, 2, 5, '1-1-2020', '22', 'Test', 
-- ARRAY[
-- ROW('Cr', 'Store 1', 'RMBP', 'Dozen', 2)::transactions.stock_adjustment_type,
-- ROW('Dr', 'Godown 1', 'RMBP', 'Piece', 24)::transactions.stock_adjustment_type
-- ]
-- );
-- 
-- 


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.refresh_materialized_views.sql --<--<--
DROP FUNCTION IF EXISTS transactions.refresh_materialized_views(_office_id integer);
DROP FUNCTION IF EXISTS transactions.refresh_materialized_views(_user_id integer, _login_id bigint, _office_id integer, _value_date date);

CREATE FUNCTION transactions.refresh_materialized_views(_user_id integer, _login_id bigint, _office_id integer, _value_date date)
RETURNS void
AS
$$
BEGIN
    REFRESH MATERIALIZED VIEW transactions.trial_balance_view;
    REFRESH MATERIALIZED VIEW transactions.verified_stock_transaction_view;
    REFRESH MATERIALIZED VIEW transactions.verified_transaction_mat_view;
    REFRESH MATERIALIZED VIEW transactions.verified_cash_transaction_mat_view;
END
$$
LANGUAGE plpgsql;


SELECT transactions.create_routine('REF-MV', 'transactions.refresh_materialized_views', 1000);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.settle_party_due.sql --<--<--
DROP FUNCTION IF EXISTS transactions.settle_party_due(_party_id bigint, _office_id integer);

CREATE FUNCTION transactions.settle_party_due(_party_id bigint, _office_id integer)
RETURNS void
STRICT VOLATILE
AS
$$
    DECLARE _settled_transactions           bigint[];
    DECLARE _settling_amount                numeric;
    DECLARE _closing_balance                numeric;
    DECLARE _total_sales                    numeric;
    DECLARE _party_account_id               bigint = core.get_account_id_by_party_id(_party_id);
BEGIN   
    --Closing balance of the party
    SELECT
        SUM
        (
            CASE WHEN tran_type = 'Cr' 
            THEN amount_in_local_currency 
            ELSE amount_in_local_currency  * -1 
            END
        ) INTO _closing_balance
    FROM transactions.transaction_details
    INNER JOIN transactions.transaction_master
    ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
    WHERE transactions.transaction_master.verification_status_id > 0
    AND transactions.transaction_master.office_id = _office_id
    AND transactions.transaction_details.account_id = _party_account_id;


    --Since party account is receivable, change the balance to debit
    _closing_balance := _closing_balance * -1;

    --Sum of total sales amount
    SELECT 
        SUM
        (
            (transactions.stock_details.quantity * transactions.stock_details.price) 
            - 
            transactions.stock_details.discount 
            + 
            transactions.stock_details.tax + 
            transactions.stock_details.shipping_charge
        ) INTO _total_sales
    FROM transactions.stock_master
    INNER JOIN transactions.stock_details
    ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
    INNER JOIN transactions.transaction_master
    ON transactions.stock_master.transaction_master_id = transactions.transaction_master.transaction_master_id
    WHERE transactions.transaction_master.book = ANY(ARRAY['Sales.Direct', 'Sales.Delivery'])
    AND transactions.transaction_master.verification_status_id > 0
    AND transactions.transaction_master.office_id = _office_id
    AND party_id = _party_id;


    _settling_amount := _total_sales - _closing_balance;

    --Note--
    --Can take advantage of temporary table instead of CTE here, if this query performs slow in future.--
    WITH all_sales
    AS
    (
        SELECT 
            transactions.stock_master.transaction_master_id,
            SUM
            (
                (transactions.stock_details.quantity * transactions.stock_details.price) 
                - 
                transactions.stock_details.discount 
                + 
                transactions.stock_details.tax + 
                transactions.stock_details.shipping_charge
            ) as due
        FROM transactions.stock_master
        INNER JOIN transactions.stock_details
        ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
        INNER JOIN transactions.transaction_master
        ON transactions.stock_master.transaction_master_id = transactions.transaction_master.transaction_master_id
        WHERE transactions.transaction_master.book = ANY(ARRAY['Sales.Direct', 'Sales.Delivery'])
        AND transactions.transaction_master.office_id = _office_id
        AND transactions.transaction_master.verification_status_id > 0      --Approved
        AND party_id = _party_id                                            --of this party
        GROUP BY transactions.stock_master.transaction_master_id
    ),
    sales_summary
    AS
    (
        SELECT 
            transaction_master_id, 
            due, 
            SUM(due) OVER(ORDER BY transaction_master_id) AS cumulative_due
        FROM all_sales
    )

    SELECT 
        ARRAY_AGG(transaction_master_id) INTO _settled_transactions
    FROM sales_summary
    WHERE cumulative_due <= _settling_amount;

    UPDATE transactions.stock_master
    SET credit_settled = true
    WHERE transaction_master_id = ANY(_settled_transactions);
END
$$
LANGUAGE plpgsql;

--SELECT * FROM transactions.settle_party_due(1, 2);

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.validate_items_for_return.sql --<--<--
DROP FUNCTION IF EXISTS transactions.validate_item_for_return
(
    _transaction_master_id                  bigint, 
    _store_id                               integer, 
    _item_code                              national character varying(12), 
    _unit_name                              national character varying(50), 
    _quantity                               integer, 
    _price                                  public.money_strict
);

DROP FUNCTION IF EXISTS transactions.validate_items_for_return
(
    _transaction_master_id                  bigint, 
    _details                                transactions.stock_detail_type[]
);

CREATE FUNCTION transactions.validate_items_for_return
(
    _transaction_master_id                  bigint, 
    _details                                transactions.stock_detail_type[]
)
RETURNS boolean
AS
$$
    DECLARE _stock_master_id                bigint = 0;
    DECLARE _is_purchase                    boolean = false;
    DECLARE _item_id                        integer = 0;
    DECLARE _item_code                      text;
    DECLARE _unit_name                      text;
    DECLARE _unit_id                        integer = 0;
    DECLARE _factor_to_base_unit            numeric(24, 4);
    DECLARE _returned_in_previous_batch     public.decimal_strict2 = 0;
    DECLARE _in_verification_queue          public.decimal_strict2 = 0;
    DECLARE _actual_price_in_root_unit      public.money_strict2 = 0;
    DECLARE _price_in_root_unit             public.money_strict2 = 0;
    DECLARE _item_in_stock                  public.decimal_strict2 = 0;
    DECLARE this                            RECORD; 
BEGIN        
    _stock_master_id                := transactions.get_stock_master_id_by_transaction_master_id(_transaction_master_id);
    _is_purchase                    := transactions.is_purchase(_transaction_master_id);

    DROP TABLE IF EXISTS details_temp;
    CREATE TEMPORARY TABLE details_temp
    (
        store_id            integer,
        item_id             integer,
        item_code           national character varying(12),
        item_in_stock       numeric(24, 4),
        quantity            integer_strict,        
        unit_id             integer,
        unit_name           national character varying(50),
        price               money_strict,
        discount            money_strict2,
        shipping_charge     money_strict2,
        tax_form            national character varying(24),
        tax                 money_strict2,
        root_unit_id        integer,
        base_quantity       numeric(24, 4)
    ) ON COMMIT DROP;

    INSERT INTO details_temp(store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax)
    SELECT store_id, item_code, quantity, unit_name, price, discount, shipping_charge, tax_form, tax
    FROM explode_array(_details);

    UPDATE details_temp
    SET 
        unit_id = core.get_unit_id_by_unit_name(unit_name),
        item_id = core.get_item_id_by_item_code(item_code),
        item_in_stock = core.count_item_in_stock(item_id, unit_id, store_id);
       
    UPDATE details_temp
    SET root_unit_id = core.get_root_unit_id(unit_id);

    UPDATE details_temp
    SET base_quantity = core.convert_unit(unit_id, root_unit_id) * quantity;


    --Determine whether the quantity of the returned item(s) is less than or equal to the same on the actual transaction
    DROP TABLE IF EXISTS item_summary_temp;
    CREATE TEMPORARY TABLE item_summary_temp
    (
        store_id                    integer,
        item_id                     integer,
        root_unit_id                integer,
        returned_quantity           numeric(24, 4),
        actual_quantity             numeric(24, 4),
        returned_in_previous_batch  numeric(24, 4),
        in_verification_queue       numeric(24, 4)
    ) ON COMMIT DROP;
    
    INSERT INTO item_summary_temp(store_id, item_id, root_unit_id, returned_quantity)
    SELECT
        store_id,
        item_id,
        root_unit_id, 
        SUM(base_quantity)
    FROM details_temp
    GROUP BY 
        store_id, 
        item_id,
        root_unit_id;

    UPDATE item_summary_temp
    SET actual_quantity = 
    (
        SELECT SUM(base_quantity)
        FROM transactions.stock_details
        WHERE transactions.stock_details.stock_master_id = _stock_master_id
        AND transactions.stock_details.item_id = item_summary_temp.item_id
    );

    UPDATE item_summary_temp
    SET returned_in_previous_batch = 
    (
        SELECT 
            COALESCE(SUM(base_quantity), 0)
        FROM transactions.stock_details
        WHERE stock_master_id IN
        (
            SELECT stock_master_id
            FROM transactions.stock_master
            INNER JOIN transactions.transaction_master
            ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_id
            WHERE transactions.transaction_master.verification_status_id > 0
            AND transactions.stock_master.transaction_master_id IN 
            (
                SELECT 
                return_transaction_master_id 
                FROM transactions.stock_return
                WHERE transaction_master_id = _transaction_master_id
            )
        )
        AND item_id = item_summary_temp.item_id
    );

    UPDATE item_summary_temp
    SET in_verification_queue =
    (
        SELECT 
            COALESCE(SUM(base_quantity), 0)
        FROM transactions.stock_details
        WHERE stock_master_id IN
        (
            SELECT stock_master_id
            FROM transactions.stock_master
            INNER JOIN transactions.transaction_master
            ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_id
            WHERE transactions.transaction_master.verification_status_id = 0
            AND transactions.stock_master.transaction_master_id IN 
            (
                SELECT 
                return_transaction_master_id 
                FROM transactions.stock_return
                WHERE transaction_master_id = _transaction_master_id
            )
        )
        AND item_id = item_summary_temp.item_id
    );
    
    --Determine whether the price of the returned item(s) is less than or equal to the same on the actual transaction
    DROP TABLE IF EXISTS cumulative_pricing_temp;
    CREATE TEMPORARY TABLE cumulative_pricing_temp
    (
        item_id                     integer,
        base_price                  numeric(24, 4),
        allowed_returns             numeric(24, 4)
    ) ON COMMIT DROP;

    INSERT INTO cumulative_pricing_temp
    SELECT 
        item_id,
        MIN(price  / base_quantity * quantity) as base_price,
        SUM(base_quantity) OVER(ORDER BY item_id, base_quantity) as allowed_returns
    FROM transactions.stock_details 
    WHERE stock_master_id = _stock_master_id
    GROUP BY item_id, base_quantity;

    IF EXISTS(SELECT 0 FROM details_temp WHERE store_id IS NULL OR store_id <= 0) THEN
        RAISE EXCEPTION 'Invalid store.'
        USING ERRCODE='P3012';
    END IF;    

    IF EXISTS(SELECT 0 FROM details_temp WHERE item_code IS NULL OR trim(item_code) = '' OR item_id IS NULL OR item_id <= 0) THEN
        RAISE EXCEPTION 'Invalid item.'
        USING ERRCODE='P3051';
    END IF;

    IF EXISTS(SELECT 0 FROM details_temp WHERE unit_name IS NULL OR trim(unit_name) = '' OR unit_id IS NULL OR unit_id <= 0) THEN
        RAISE EXCEPTION 'Invalid unit.'
        USING ERRCODE='P3052';
    END IF;

    IF EXISTS(SELECT 0 FROM details_temp WHERE quantity IS NULL OR quantity <= 0) THEN
        RAISE EXCEPTION 'Invalid quantity.'
        USING ERRCODE='P3301';
    END IF;

    IF(_stock_master_id  IS NULL OR _stock_master_id  <= 0) THEN
        RAISE EXCEPTION 'Invalid transaction id.'
        USING ERRCODE='P3302';
    END IF;

    IF NOT EXISTS
    (
        SELECT * FROM transactions.transaction_master
        WHERE transaction_master_id = _transaction_master_id
        AND verification_status_id > 0
    ) THEN
        RAISE EXCEPTION 'Invalid or rejected transaction.'
        USING ERRCODE='P5301';
    END IF;
        
    SELECT item_code INTO _item_code
    FROM details_temp
    WHERE item_id NOT IN
    (
        SELECT item_id FROM transactions.stock_details
        WHERE stock_master_id = _stock_master_id
    )
    LIMIT 1;

    IF(COALESCE(_item_code, '') != '') THEN
        RAISE EXCEPTION '%', format('The item %1$s is not associated with this transaction.', _item_code)
        USING ERRCODE='P4020';
    END IF;


    IF NOT EXISTS
    (
        SELECT * FROM transactions.stock_details
        INNER JOIN details_temp
        ON transactions.stock_details.item_id = details_temp.item_id
        WHERE stock_master_id = _stock_master_id
        AND core.get_root_unit_id(details_temp.unit_id) = core.get_root_unit_id(transactions.stock_details.unit_id)
        LIMIT 1
    ) THEN
        RAISE EXCEPTION 'Invalid or incompatible unit specified'
        USING ERRCODE='P3053';
    END IF;

    IF(_is_purchase = true) THEN    
        SELECT
            item_in_stock,
            unit_name,
            item_code
        INTO
            _item_in_stock,
            _unit_name,
            _item_code        
        FROM details_temp 
        WHERE item_in_stock < quantity 
        LIMIT 1;

        IF(COALESCE(_item_in_stock, 0) > 0) THEN
            RAISE EXCEPTION '%', format('Only %1$s %2$s of %3$s left in stock.',_item_in_stock, _unit_name, _item_code)
            USING ERRCODE='P5500';
        END IF;
    END IF;

    IF EXISTS
    (
        SELECT 0
        FROM item_summary_temp
        WHERE returned_quantity + returned_in_previous_batch + in_verification_queue > actual_quantity
        LIMIT 1
    ) THEN    
        RAISE EXCEPTION 'The returned quantity cannot be greater than actual quantity.'
        USING ERRCODE='P5203';
    END IF;

    FOR this IN
    SELECT item_id, base_quantity, (price / base_quantity * quantity)::numeric(24, 4) as price
    FROM details_temp
    LOOP
        IF NOT EXISTS
        (
            SELECT 0
            FROM cumulative_pricing_temp
            WHERE item_id = this.item_id
            AND base_price >=  this.price
            AND allowed_returns >= this.base_quantity
        ) THEN
            RAISE EXCEPTION 'The returned amount cannot be greater than actual amount.'
            USING ERRCODE='P5204';

            RETURN FALSE;
        END IF;
    END LOOP;
    
    RETURN TRUE;
END
$$
LANGUAGE plpgsql;

-- SELECT * FROM transactions.validate_items_for_return
-- (
--     127,
--     ARRAY[
--         ROW(1, 'RMBP', 2, 'Dozen', 1000, 0, 200, 'MoF-NY-BK-STX', 0)::transactions.stock_detail_type
--        
--     ]
-- );


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/transactions/transactions.verify_transaction.sql --<--<--
-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/FrontEnd/MixERP.Net.FrontEnd/db/src/02. functions and logic/logic/functions/transactions/transactions.verify_transaction.sql --<--<--
DROP FUNCTION IF EXISTS transactions.verify_transaction
(
    _transaction_master_id                  bigint,
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _verification_status_id                 smallint,
    _reason                                 national character varying
) 
CASCADE;

CREATE FUNCTION transactions.verify_transaction
(
    _transaction_master_id                  bigint,
    _office_id                              integer,
    _user_id                                integer,
    _login_id                               bigint,
    _verification_status_id                 smallint,
    _reason                                 national character varying
)
RETURNS VOID
VOLATILE
AS
$$
    DECLARE _transaction_posted_by          integer;
    DECLARE _can_approve                    boolean=true;
    DECLARE _book                           text;
    DECLARE _verify_sales                   boolean;
    DECLARE _sales_verification_limit       public.money_strict2;
    DECLARE _verify_purchase                boolean;
    DECLARE _purchase_verification_limit    public.money_strict2;
    DECLARE _verify_gl                      boolean;
    DECLARE _gl_verification_limit          public.money_strict2;
    DECLARE _can_self_verify                boolean;
    DECLARE _posted_amount                  public.money_strict2;
    DECLARE _has_policy                     boolean=false;
    DECLARE _voucher_date                   date;
    DECLARE _voucher_office_id              integer;
    DECLARE _value_date                     date=transactions.get_value_date(_office_id);
BEGIN

    SELECT
        transactions.transaction_master.book,
        transactions.transaction_master.value_date,
        transactions.transaction_master.office_id,
        transactions.transaction_master.user_id
    INTO
        _book,
        _voucher_date,
        _voucher_office_id,
        _transaction_posted_by  
    FROM
    transactions.transaction_master
    WHERE transactions.transaction_master.transaction_master_id=_transaction_master_id;


    IF(_voucher_office_id <> _office_id) THEN
        RAISE EXCEPTION 'Access is denied. You cannot verify a transaction of another office.'
        USING ERRCODE='P9014';
    END IF;
    
    IF(_voucher_date <> _value_date) THEN
        RAISE EXCEPTION 'Access is denied. You cannot verify past or futuer dated transaction.'
        USING ERRCODE='P9015';
    END IF;
    
    SELECT
        SUM(amount_in_local_currency)
    INTO
        _posted_amount
    FROM
        transactions.transaction_details
    WHERE transactions.transaction_details.transaction_master_id = _transaction_master_id
    AND transactions.transaction_details.tran_type='Cr';


    SELECT
        true,
        can_verify_sales_transactions,
        sales_verification_limit,
        can_verify_purchase_transactions,
        purchase_verification_limit,
        can_verify_gl_transactions,
        gl_verification_limit,
        can_self_verify
    INTO
        _has_policy,
        _verify_sales,
        _sales_verification_limit,
        _verify_purchase,
        _purchase_verification_limit,
        _verify_gl,
        _gl_verification_limit,
        _can_self_verify
    FROM
    policy.voucher_verification_policy
    WHERE user_id=_user_id
    AND office_id = _office_id
    AND is_active=true
    AND now() >= effective_from
    AND now() <= ends_on;

    IF(lower(_book) LIKE 'sales%') THEN
        IF(_verify_sales = false) THEN
            _can_approve := false;
        END IF;
        IF(_verify_sales = true) THEN
            IF(_posted_amount > _sales_verification_limit AND _sales_verification_limit > 0::public.money_strict2) THEN
                _can_approve := false;
            END IF;
        END IF;         
    END IF;


    IF(lower(_book) LIKE 'purchase%') THEN
        IF(_verify_purchase = false) THEN
            _can_approve := false;
        END IF;
        IF(_verify_purchase = true) THEN
            IF(_posted_amount > _purchase_verification_limit AND _purchase_verification_limit > 0::public.money_strict2) THEN
                _can_approve := false;
            END IF;
        END IF;         
    END IF;


    IF(lower(_book) LIKE 'journal%') THEN
        IF(_verify_gl = false) THEN
            _can_approve := false;
        END IF;
        IF(_verify_gl = true) THEN
            IF(_posted_amount > _gl_verification_limit AND _gl_verification_limit > 0::public.money_strict2) THEN
                _can_approve := false;
            END IF;
        END IF;         
    END IF;

    IF(NOT _can_self_verify AND _user_id = _transaction_posted_by) THEN
        _can_approve := false;
    END IF;

    IF(_has_policy=true) THEN
        IF(_can_approve = true) THEN
            UPDATE transactions.transaction_master
            SET 
                last_verified_on = now(),
                verified_by_user_id=_user_id,
                verification_status_id=_verification_status_id,
                verification_reason=_reason
            WHERE
                transactions.transaction_master.transaction_master_id=_transaction_master_id
            OR 
                transactions.transaction_master.cascading_tran_id =_transaction_master_id;

            PERFORM transactions.create_recurring_invoices(_transaction_master_id);

            RAISE NOTICE 'Done.';
        ELSE
            RAISE EXCEPTION 'Please ask someone else to verify your transaction.'
            USING ERRCODE='P4031';
        END IF;
    ELSE
        RAISE EXCEPTION 'No verification policy found for this user.'
        USING ERRCODE='P4030';
    END IF;
    RETURN;
END
$$
LANGUAGE plpgsql;


--SELECT * FROM transactions.verify_transaction(65::bigint, 2, 2, 51::bigint, -3::smallint, '');
--SELECT * FROM transactions.verify_transaction(133::bigint, 2, 2, 5::bigint, 2::smallint, 'ok'::national character varying);

/**************************************************************************************************************************
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
'########::'##:::::::'########:::'######:::'##::::'##:'##::: ##:'####:'########::::'########:'########::'######::'########:
 ##.... ##: ##::::::: ##.... ##:'##... ##:: ##:::: ##: ###:: ##:. ##::... ##..:::::... ##..:: ##.....::'##... ##:... ##..::
 ##:::: ##: ##::::::: ##:::: ##: ##:::..::: ##:::: ##: ####: ##:: ##::::: ##:::::::::: ##:::: ##::::::: ##:::..::::: ##::::
 ########:: ##::::::: ########:: ##::'####: ##:::: ##: ## ## ##:: ##::::: ##:::::::::: ##:::: ######:::. ######::::: ##::::
 ##.....::: ##::::::: ##.....::: ##::: ##:: ##:::: ##: ##. ####:: ##::::: ##:::::::::: ##:::: ##...:::::..... ##:::: ##::::
 ##:::::::: ##::::::: ##:::::::: ##::: ##:: ##:::: ##: ##:. ###:: ##::::: ##:::::::::: ##:::: ##:::::::'##::: ##:::: ##::::
 ##:::::::: ########: ##::::::::. ######:::. #######:: ##::. ##:'####:::: ##:::::::::: ##:::: ########:. ######::::: ##::::
..:::::::::........::..::::::::::......:::::.......:::..::::..::....:::::..:::::::::::..:::::........:::......::::::..:::::
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************/

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/logic/triggers/transactions.verification_trigger.sql --<--<--
DROP FUNCTION IF EXISTS transactions.verification_trigger() CASCADE;
CREATE FUNCTION transactions.verification_trigger()
RETURNS TRIGGER
AS
$$
    DECLARE _transaction_master_id              bigint;
    DECLARE _transaction_posted_by              integer;
    DECLARE _old_verifier                       integer;
    DECLARE _old_status                         integer;
    DECLARE _old_reason                         national character varying(128);
    DECLARE _verifier                           integer;
    DECLARE _status                             integer;
    DECLARE _reason                             national character varying(128);
    DECLARE _has_policy                         boolean;
    DECLARE _is_sys                             boolean;
    DECLARE _rejected                           smallint=-3;
    DECLARE _closed                             smallint=-2;
    DECLARE _withdrawn                          smallint=-1;
    DECLARE _unapproved                         smallint = 0;
    DECLARE _auto_approved                      smallint = 1;
    DECLARE _approved                           smallint=2;
    DECLARE _book                               text;
    DECLARE _can_verify_sales_transactions      boolean;
    DECLARE _sales_verification_limit           public.money_strict2;
    DECLARE _can_verify_purchase_transactions   boolean;
    DECLARE _purchase_verification_limit        public.money_strict2;
    DECLARE _can_verify_gl_transactions         boolean;
    DECLARE _gl_verification_limit              public.money_strict2;
    DECLARE _can_verify_self                    boolean;
    DECLARE _self_verification_limit            public.money_strict2;
    DECLARE _posted_amount                      public.money_strict2;
    DECLARE _voucher_date                       date;
    DECLARE _value_date                         date;
BEGIN
    IF TG_OP='DELETE' THEN
        RAISE EXCEPTION 'Deleting a transaction is not allowed. Mark the transaction as rejected instead.'
        USING ERRCODE='P5800';
    END IF;

    IF TG_OP='UPDATE' THEN
        RAISE NOTICE 'Columns except the following will be ignored for this update: %', 'verified_by_user_id, verification_status_id, verification_reason.';

        IF(OLD.transaction_master_id IS DISTINCT FROM NEW.transaction_master_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_master_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.transaction_counter IS DISTINCT FROM NEW.transaction_counter) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_counter".'
            USING ERRCODE='P8502';            
        END IF;

        IF(OLD.transaction_code IS DISTINCT FROM NEW.transaction_code) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_code".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.book IS DISTINCT FROM NEW.book) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"book".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.value_date IS DISTINCT FROM NEW.value_date) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"value_date".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.transaction_ts IS DISTINCT FROM NEW.transaction_ts) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_ts".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.login_id IS DISTINCT FROM NEW.login_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"login_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.user_id IS DISTINCT FROM NEW.user_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"user_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.sys_user_id IS DISTINCT FROM NEW.sys_user_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"sys_user_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.office_id IS DISTINCT FROM NEW.office_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"office_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.cost_center_id IS DISTINCT FROM NEW.cost_center_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"cost_center_id".'
            USING ERRCODE='P8502';
        END IF;

        _transaction_master_id  := OLD.transaction_master_id;
        _book                   := OLD.book;
        _old_verifier           := OLD.verified_by_user_id;
        _old_status             := OLD.verification_status_id;
        _old_reason             := OLD.verification_reason;
        _transaction_posted_by  := OLD.user_id;      
        _verifier               := NEW.verified_by_user_id;
        _status                 := NEW.verification_status_id;
        _reason                 := NEW.verification_reason;
        _is_sys                 := office.is_sys(_verifier);
        _voucher_date           := NEW.value_date;
        _value_date             := transactions.get_value_date(NEW.office_id);
        
        SELECT
            SUM(amount_in_local_currency)
        INTO
            _posted_amount
        FROM
            transactions.transaction_details
        WHERE transactions.transaction_details.transaction_master_id = _transaction_master_id
        AND transactions.transaction_details.tran_type='Cr';


        SELECT
            true,
            can_verify_sales_transactions,
            sales_verification_limit,
            can_verify_purchase_transactions,
            purchase_verification_limit,
            can_verify_gl_transactions,
            gl_verification_limit,
            can_self_verify,
            self_verification_limit
        INTO
            _has_policy,
            _can_verify_sales_transactions,
            _sales_verification_limit,
            _can_verify_purchase_transactions,
            _purchase_verification_limit,
            _can_verify_gl_transactions,
            _gl_verification_limit,
            _can_verify_self,
            _self_verification_limit
        FROM
        policy.voucher_verification_policy
        WHERE user_id=_verifier
        AND is_active=true
        AND now() >= effective_from
        AND now() <= ends_on;

        IF(_verifier IS NULL) THEN
            RAISE EXCEPTION 'Access is denied.'
            USING ERRCODE='P9001';
        END IF;     
        
        IF(_status != _withdrawn AND _has_policy = false) THEN
            RAISE EXCEPTION 'Access is denied. You don''t have the right to verify the transaction.'
            USING ERRCODE='P9016';
        END IF;

        IF(_voucher_date < _value_date) THEN
            RAISE EXCEPTION 'Access is denied. You don''t have the right to withdraw the transaction.'
            USING ERRCODE='P9017';
        END IF;

        IF(_status = _withdrawn AND _has_policy = false) THEN
            IF(_transaction_posted_by != _verifier) THEN
                RAISE EXCEPTION 'Access is denied. You don''t have the right to withdraw the transaction.'
                USING ERRCODE='P9017';
            END IF;
        END IF;

        IF(_status = _auto_approved AND _is_sys = false) THEN
            RAISE EXCEPTION 'Access is denied.'
            USING ERRCODE='P9001';
        END IF;


        IF(_has_policy = false) THEN
            RAISE EXCEPTION 'Access is denied.'
            USING ERRCODE='P9001';
        END IF;


        --Is trying verify self transaction.
        IF(NEW.verified_by_user_id = NEW.user_id) THEN
            IF(_can_verify_self = false) THEN
                RAISE EXCEPTION 'Please ask someone else to verify the transaction you posted.'
                USING ERRCODE='P5901';                
            END IF;
            IF(_can_verify_self = true) THEN
                IF(_posted_amount > _self_verification_limit AND _self_verification_limit > 0::public.money_strict2) THEN
                    RAISE EXCEPTION 'Self verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5910';
                END IF;
            END IF;
        END IF;

        IF(lower(_book) LIKE '%sales%') THEN
            IF(_can_verify_sales_transactions = false) THEN
                RAISE EXCEPTION 'Access is denied.'
                USING ERRCODE='P9001';
            END IF;
            IF(_can_verify_sales_transactions = true) THEN
                IF(_posted_amount > _sales_verification_limit AND _sales_verification_limit > 0::public.money_strict2) THEN
                    RAISE EXCEPTION 'Sales verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5911';
                END IF;
            END IF;         
        END IF;


        IF(lower(_book) LIKE '%purchase%') THEN
            IF(_can_verify_purchase_transactions = false) THEN
                RAISE EXCEPTION 'Access is denied.'
                USING ERRCODE='P9001';
            END IF;
            IF(_can_verify_purchase_transactions = true) THEN
                IF(_posted_amount > _purchase_verification_limit AND _purchase_verification_limit > 0::public.money_strict2) THEN
                    RAISE EXCEPTION 'Purchase verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5912';
                END IF;
            END IF;         
        END IF;


        IF(lower(_book) LIKE 'journal%') THEN
            IF(_can_verify_gl_transactions = false) THEN
                RAISE EXCEPTION 'Access is denied.'
                USING ERRCODE='P9001';
            END IF;
            IF(_can_verify_gl_transactions = true) THEN
                IF(_posted_amount > _gl_verification_limit AND _gl_verification_limit > 0::public.money_strict2) THEN
                    RAISE EXCEPTION 'GL verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5913';
                END IF;
            END IF;         
        END IF;

        NEW.last_verified_on := now();

    END IF; 
    RETURN NEW;
END
$$
LANGUAGE plpgsql;


CREATE TRIGGER verification_update_trigger
AFTER UPDATE
ON transactions.transaction_master
FOR EACH ROW 
EXECUTE PROCEDURE transactions.verification_trigger();

CREATE TRIGGER verification_delete_trigger
BEFORE DELETE
ON transactions.transaction_master
FOR EACH ROW 
EXECUTE PROCEDURE transactions.verification_trigger();


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.create_user.sql --<--<--
DROP FUNCTION IF EXISTS office.create_user
(
    _role_id		integer,
    _department_id	integer,
    _office_id		integer,
    _user_name 		text,
    _password 		text,
    _full_name 		text,
    _elevated 		boolean
);

CREATE FUNCTION office.create_user
(
    _role_id		integer,
    _department_id	integer,
    _office_id		integer,
    _user_name 		text,
    _password 		text,
    _full_name 		text,
    _elevated 		boolean = false
)
RETURNS VOID
AS
$$
BEGIN
    IF(COALESCE(_user_name, '')) THEN
        RETURN;
    END IF;

    INSERT INTO office.users(role_id, department_id, office_id, user_name, password, full_name, elevated)
    SELECT _role_id, _department_id, _office_id, _user_name, _password, _full_name, _elevated;
    RETURN;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_cash_repository_id_by_cash_repository_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_cash_repository_id_by_cash_repository_code(text);

CREATE FUNCTION office.get_cash_repository_id_by_cash_repository_code(_cash_repository_code text)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT cash_repository_id
        FROM office.cash_repositories
        WHERE cash_repository_code=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_cash_repository_id_by_cash_repository_name.sql --<--<--
DROP FUNCTION IF EXISTS office.get_cash_repository_id_by_cash_repository_name(text);

CREATE FUNCTION office.get_cash_repository_id_by_cash_repository_name(_cash_repository_name text)
RETURNS integer
AS
$$
BEGIN
    RETURN
    (
        SELECT cash_repository_id
        FROM office.cash_repositories
        WHERE cash_repository_name=$1
    );
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_cost_center_id_by_cost_center_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_cost_center_id_by_cost_center_code(text);

CREATE FUNCTION office.get_cost_center_id_by_cost_center_code(_cost_center_code text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN cost_center_id
    FROM office.cost_centers
    WHERE cost_center_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_department_id_by_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_department_id_by_code(text);

CREATE FUNCTION office.get_department_id_by_code(_department_code text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN department_id
    FROM office.departments
    WHERE department_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_department_id_by_department_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_department_id_by_code(text);

DROP FUNCTION IF EXISTS office.get_department_id_by_department_code(text);

CREATE FUNCTION office.get_department_id_by_department_code(_department_code text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN department_id
    FROM office.departments
    WHERE department_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_office_id_by_cash_repository_id.sql --<--<--
CREATE OR REPLACE FUNCTION office.get_office_id_by_cash_repository_id(_cash_repository_id integer)
RETURNS integer
AS
$$
BEGIN
        RETURN office_id
        FROM office.cash_repositories
        WHERE cash_repository_id=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_office_id_by_store_id.sql --<--<--
DROP FUNCTION IF EXISTS office.get_office_id_by_store_id(integer);

CREATE FUNCTION office.get_office_id_by_store_id(_store_id integer)
RETURNS integer
AS
$$
BEGIN
        RETURN office_id
        FROM office.stores
        WHERE store_id=$1;
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_role_id_by_role_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_role_id_by_role_code(text);

CREATE FUNCTION office.get_role_id_by_role_code(_role_code text)
RETURNS integer
AS
$$
BEGIN
        RETURN
        role_id
        FROM office.roles
        WHERE role_code=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_role_id_by_role_name.sql --<--<--
DROP FUNCTION IF EXISTS office.get_role_id_by_role_name(text);

CREATE FUNCTION office.get_role_id_by_role_name(_role_name text)
RETURNS integer
AS
$$
BEGIN
        RETURN
        role_id
        FROM office.roles
        WHERE role_name=$1;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_store_id_by_store_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_store_id_by_store_code(text);

CREATE FUNCTION office.get_store_id_by_store_code(_store_code text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN
    (
        SELECT store_id
        FROM office.stores
        WHERE store_code=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_store_id_by_store_name.sql --<--<--
CREATE OR REPLACE FUNCTION office.get_store_id_by_store_name(_store_name text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN
    (
        SELECT store_id
        FROM office.stores
        WHERE store_name=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_store_name_by_store_id.sql --<--<--
DROP FUNCTION IF EXISTS office.get_store_name_by_store_id(integer);

CREATE FUNCTION office.get_store_name_by_store_id(_store_id integer)
RETURNS text
AS
$$
BEGIN
    RETURN
    (
        SELECT store_name
        FROM office.stores
        WHERE store_id=$1
    );
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.get_store_type_id_by_store_type_code.sql --<--<--
DROP FUNCTION IF EXISTS office.get_store_type_id_by_store_type_code(text);

CREATE FUNCTION office.get_store_type_id_by_store_type_code(_store_type_code text)
RETURNS integer
STABLE
AS
$$
BEGIN
    RETURN store_type_id
    FROM office.store_types
    WHERE store_type_code=$1;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.is_admin.sql --<--<--
CREATE OR REPLACE FUNCTION office.is_admin(_user_id integer)
RETURNS boolean
AS
$$
BEGIN
    RETURN
    (
        SELECT office.roles.is_admin FROM office.users
        INNER JOIN office.roles
        ON office.users.role_id = office.roles.role_id
        WHERE office.users.user_id=$1
    );
END
$$
LANGUAGE PLPGSQL;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.is_sys.sql --<--<--
CREATE OR REPLACE FUNCTION office.is_sys(_user_id integer)
RETURNS boolean
AS
$$
BEGIN
    RETURN
    (
        SELECT office.roles.is_system FROM office.users
        INNER JOIN office.roles
        ON office.users.role_id = office.roles.role_id
        WHERE office.users.user_id=$1
    );
END
$$
LANGUAGE PLPGSQL;





-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.is_sys_user.sql --<--<--
CREATE OR REPLACE FUNCTION office.is_sys_user(_user_id integer)
RETURNS boolean
AS
$$
BEGIN
    IF EXISTS
    (
        SELECT * FROM office.users
        WHERE user_id=$1
        AND role_id IN
        (
            SELECT office.roles.role_id FROM office.roles WHERE office.roles.role_code='SYST'
        )
    ) THEN
        RETURN true;
    END IF;

    RETURN false;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/functions/office/office.is_valid_office_id.sql --<--<--
DROP FUNCTION IF EXISTS office.is_valid_office_id(integer);

CREATE FUNCTION office.is_valid_office_id(_office_id integer)
RETURNS boolean
AS
$$
BEGIN
        IF EXISTS(SELECT 1 FROM office.offices WHERE office_id=$1) THEN
                RETURN true;
        END IF;

        RETURN false;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/triggers/transactions.verification_trigger.sql --<--<--
DROP FUNCTION IF EXISTS transactions.verification_trigger() CASCADE;
CREATE FUNCTION transactions.verification_trigger()
RETURNS TRIGGER
AS
$$
    DECLARE _transaction_master_id bigint;
    DECLARE _transaction_posted_by integer;
    DECLARE _old_verifier integer;
    DECLARE _old_status integer;
    DECLARE _old_reason national character varying(128);
    DECLARE _verifier integer;
    DECLARE _status integer;
    DECLARE _reason national character varying(128);
    DECLARE _has_policy boolean;
    DECLARE _is_sys boolean;
    DECLARE _rejected smallint=-3;
    DECLARE _closed smallint=-2;
    DECLARE _withdrawn smallint=-1;
    DECLARE _unapproved smallint = 0;
    DECLARE _auto_approved smallint = 1;
    DECLARE _approved smallint=2;
    DECLARE _book text;
    DECLARE _can_verify_sales_transactions boolean;
    DECLARE _sales_verification_limit money_strict2;
    DECLARE _can_verify_purchase_transactions boolean;
    DECLARE _purchase_verification_limit money_strict2;
    DECLARE _can_verify_gl_transactions boolean;
    DECLARE _gl_verification_limit money_strict2;
    DECLARE _can_verify_self boolean;
    DECLARE _self_verification_limit money_strict2;
    DECLARE _posted_amount money_strict2;
BEGIN
    IF TG_OP='DELETE' THEN
        RAISE EXCEPTION 'Deleting a transaction is not allowed. Mark the transaction as rejected instead.'
        USING ERRCODE='P5800';
    END IF;

    IF TG_OP='UPDATE' THEN
        RAISE NOTICE 'Columns except the following will be ignored for this update: %', 'verified_by_user_id, verification_status_id, verification_reason.';

        IF(OLD.transaction_master_id IS DISTINCT FROM NEW.transaction_master_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_master_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.transaction_counter IS DISTINCT FROM NEW.transaction_counter) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_counter".'
            USING ERRCODE='P8502';            
        END IF;

        IF(OLD.transaction_code IS DISTINCT FROM NEW.transaction_code) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_code".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.book IS DISTINCT FROM NEW.book) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"book".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.value_date IS DISTINCT FROM NEW.value_date) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"value_date".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.transaction_ts IS DISTINCT FROM NEW.transaction_ts) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"transaction_ts".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.login_id IS DISTINCT FROM NEW.login_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"login_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.user_id IS DISTINCT FROM NEW.user_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"user_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.sys_user_id IS DISTINCT FROM NEW.sys_user_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"sys_user_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.office_id IS DISTINCT FROM NEW.office_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"office_id".'
            USING ERRCODE='P8502';
        END IF;

        IF(OLD.cost_center_id IS DISTINCT FROM NEW.cost_center_id) THEN
            RAISE EXCEPTION 'Cannot update the column %', '"cost_center_id".'
            USING ERRCODE='P8502';
        END IF;

        _transaction_master_id := OLD.transaction_master_id;
        _book := OLD.book;
        _old_verifier := OLD.verified_by_user_id;
        _old_status := OLD.verification_status_id;
        _old_reason := OLD.verification_reason;
        _transaction_posted_by := OLD.user_id;      
        _verifier := NEW.verified_by_user_id;
        _status := NEW.verification_status_id;
        _reason := NEW.verification_reason;
        _is_sys := office.is_sys(_verifier);

        
        SELECT
            SUM(amount_in_local_currency)
        INTO
            _posted_amount
        FROM
            transactions.transaction_details
        WHERE transactions.transaction_details.transaction_master_id = _transaction_master_id
        AND transactions.transaction_details.tran_type='Cr';


        SELECT
            true,
            can_verify_sales_transactions,
            sales_verification_limit,
            can_verify_purchase_transactions,
            purchase_verification_limit,
            can_verify_gl_transactions,
            gl_verification_limit,
            can_self_verify,
            self_verification_limit
        INTO
            _has_policy,
            _can_verify_sales_transactions,
            _sales_verification_limit,
            _can_verify_purchase_transactions,
            _purchase_verification_limit,
            _can_verify_gl_transactions,
            _gl_verification_limit,
            _can_verify_self,
            _self_verification_limit
        FROM
        policy.voucher_verification_policy
        WHERE user_id=_verifier
        AND is_active=true
        AND now() >= effective_from
        AND now() <= ends_on;

        IF(_verifier IS NULL) THEN
            RAISE EXCEPTION 'Access is denied.'
            USING ERRCODE='P9001';
        END IF;     
        
        IF(_status != _withdrawn AND _has_policy = false) THEN
            RAISE EXCEPTION 'Access is denied. You don''t have the right to verify the transaction.'
            USING ERRCODE='P9016';
        END IF;

        IF(_status = _withdrawn AND _has_policy = false) THEN
            IF(_transaction_posted_by != _verifier) THEN
                RAISE EXCEPTION 'Access is denied. You don''t have the right to withdraw the transaction.'
                USING ERRCODE='P9017';
            END IF;
        END IF;

        IF(_status = _auto_approved AND _is_sys = false) THEN
            RAISE EXCEPTION 'Access is denied.'
            USING ERRCODE='P9001';
        END IF;


        IF(_has_policy = false) THEN
            RAISE EXCEPTION 'Access is denied.'
            USING ERRCODE='P9001';
        END IF;


        --Is trying verify self transaction.
        IF(NEW.verified_by_user_id = NEW.user_id) THEN
            IF(_can_verify_self = false) THEN
                RAISE EXCEPTION 'Please ask someone else to verify the transaction you posted.'
                USING ERRCODE='P5901';                
            END IF;
            IF(_can_verify_self = true) THEN
                IF(_posted_amount > _self_verification_limit AND _self_verification_limit > 0::money_strict2) THEN
                    RAISE EXCEPTION 'Self verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5910';
                END IF;
            END IF;
        END IF;

        IF(lower(_book) LIKE '%sales%') THEN
            IF(_can_verify_sales_transactions = false) THEN
                RAISE EXCEPTION 'Access is denied.'
                USING ERRCODE='P9001';
            END IF;
            IF(_can_verify_sales_transactions = true) THEN
                IF(_posted_amount > _sales_verification_limit AND _sales_verification_limit > 0::money_strict2) THEN
                    RAISE EXCEPTION 'Sales verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5911';
                END IF;
            END IF;         
        END IF;


        IF(lower(_book) LIKE '%purchase%') THEN
            IF(_can_verify_purchase_transactions = false) THEN
                RAISE EXCEPTION 'Access is denied.'
                USING ERRCODE='P9001';
            END IF;
            IF(_can_verify_purchase_transactions = true) THEN
                IF(_posted_amount > _purchase_verification_limit AND _purchase_verification_limit > 0::money_strict2) THEN
                    RAISE EXCEPTION 'Purchase verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5912';
                END IF;
            END IF;         
        END IF;


        IF(lower(_book) LIKE 'journal%') THEN
            IF(_can_verify_gl_transactions = false) THEN
                RAISE EXCEPTION 'Access is denied.'
                USING ERRCODE='P9001';
            END IF;
            IF(_can_verify_gl_transactions = true) THEN
                IF(_posted_amount > _gl_verification_limit AND _gl_verification_limit > 0::money_strict2) THEN
                    RAISE EXCEPTION 'GL verification limit exceeded. The transaction was not verified.'
                    USING ERRCODE='P5913';
                END IF;
            END IF;         
        END IF;

        NEW.last_verified_on := now();

    END IF; 
    RETURN NEW;
END
$$
LANGUAGE plpgsql;


CREATE TRIGGER verification_update_trigger
AFTER UPDATE
ON transactions.transaction_master
FOR EACH ROW 
EXECUTE PROCEDURE transactions.verification_trigger();

CREATE TRIGGER verification_delete_trigger
BEFORE DELETE
ON transactions.transaction_master
FOR EACH ROW 
EXECUTE PROCEDURE transactions.verification_trigger();


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/02.functions-and-logic/triggers/transactions.verify_book_date_trigger.sql --<--<--
DROP FUNCTION IF EXISTS transactions.verify_book_date_trigger() CASCADE;

CREATE FUNCTION transactions.verify_book_date_trigger()
RETURNS TRIGGER
AS
$$
    DECLARE _office_id integer;
    DECLARE _eoy_date date;
    DECLARE _book_date date;
BEGIN
    _office_id := NEW.office_id;
    _book_date := NEW.book_date;
    _eoy_date := core.get_fiscal_year_end_date(_office_id);

    IF(_book_date > _eoy_date) THEN
        RAISE EXCEPTION '%', 'Invalid date.'
        USING ERRCODE='P3008';
    END IF;

    RETURN NEW;
END
$$
LANGUAGE plpgsql;

CREATE TRIGGER verify_book_date_trigger
AFTER UPDATE OR INSERT
ON transactions.transaction_master
FOR EACH ROW 
EXECUTE PROCEDURE transactions.verify_book_date_trigger();


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/04.default-values/01.frequencies-payment-terms-late-fee.sql.sql --<--<--
UPDATE core.frequency_setups
SET frequency_setup_code= 'Sep-Oct'
WHERE frequency_setup_code= 'Sep-Oc';

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/04.default-values/http-actions.sql --<--<--
--This table should not be localized.
WITH http_actions
AS
(
SELECT 'GET' as code UNION ALL
SELECT 'PUT' UNION ALL
SELECT 'POST' UNION ALL
SELECT 'DELETE'
)

INSERT INTO policy.http_actions
SELECT * FROM http_actions
WHERE code NOT IN
(
    SELECT http_action_code FROM policy.http_actions
    WHERE http_action_code IN('GET','PUT','POST','DELETE')
);


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/04.default-values/localization.sql --<--<--
SELECT * FROM localization.create_culture('de', 'German');
SELECT * FROM localization.create_culture('en', 'English');
SELECT * FROM localization.create_culture('es', 'Spanish');
SELECT * FROM localization.create_culture('fil', 'Filipino');
SELECT * FROM localization.create_culture('fr', 'French');
SELECT * FROM localization.create_culture('id', 'Indonesian');
SELECT * FROM localization.create_culture('ja', 'Japanese');
SELECT * FROM localization.create_culture('ms', 'Malay');
SELECT * FROM localization.create_culture('nl', 'Dutch');
SELECT * FROM localization.create_culture('pt', 'Portuguese');
SELECT * FROM localization.create_culture('ru', 'Russian');
SELECT * FROM localization.create_culture('sv', 'Swedish');
SELECT * FROM localization.create_culture('zh', 'Simplified Chinese');


DO
$$
BEGIN
    DELETE FROM localization.localized_resources;
    DELETE FROM localization.resources;

    ALTER SEQUENCE localization.resources_resource_id_seq RESTART WITH 1;

    PERFORM localization.add_resource('CommonResource', 'DateMustBeGreaterThan', 'Invalid date. Must be greater than "{0}".');
    PERFORM localization.add_resource('CommonResource', 'DateMustBeLessThan', 'Invalid date. Must be less than "{0}".');
    PERFORM localization.add_resource('CommonResource', 'InvalidDate', 'Invalid date.');
    PERFORM localization.add_resource('CommonResource', 'NoRecordFound', 'Sorry, no record found.');
    PERFORM localization.add_resource('CommonResource', 'RequiredField', 'This is a required field.');
    PERFORM localization.add_resource('DbErrors', 'P1301', 'Cannot calculate interest. The number of days in a year was not provided.');
    PERFORM localization.add_resource('DbErrors', 'P3000', 'Invalid data.');
    PERFORM localization.add_resource('DbErrors', 'P3001', 'Invalid user name.');
    PERFORM localization.add_resource('DbErrors', 'P3005', 'Password cannot be empty.');
    PERFORM localization.add_resource('DbErrors', 'P3006', 'Please provide a new password.');
    PERFORM localization.add_resource('DbErrors', 'P3007', 'Invalid value date.');
    PERFORM localization.add_resource('DbErrors', 'P3008', 'Invalid date.');
    PERFORM localization.add_resource('DbErrors', 'P3009', 'Invalid period specified.');
    PERFORM localization.add_resource('DbErrors', 'P3010', 'Invalid office id.');
    PERFORM localization.add_resource('DbErrors', 'P3011', 'Invalid office.');
    PERFORM localization.add_resource('DbErrors', 'P3012', 'Invalid store.');
    PERFORM localization.add_resource('DbErrors', 'P3013', 'Invalid cash repository.');
    PERFORM localization.add_resource('DbErrors', 'P3050', 'Invalid party.');
    PERFORM localization.add_resource('DbErrors', 'P3051', 'Invalid item.');
    PERFORM localization.add_resource('DbErrors', 'P3052', 'Invalid unit.');
    PERFORM localization.add_resource('DbErrors', 'P3053', 'Invalid or incompatible unit.');
    PERFORM localization.add_resource('DbErrors', 'P3054', 'The reorder unit is incompatible with the base unit.');
    PERFORM localization.add_resource('DbErrors', 'P3055', 'Invalid exchange rate.');
    PERFORM localization.add_resource('DbErrors', 'P3101', 'Invalid LoginId.');
    PERFORM localization.add_resource('DbErrors', 'P3105', 'Your current password is incorrect.');
    PERFORM localization.add_resource('DbErrors', 'P3201', 'Item/unit mismatch.');
    PERFORM localization.add_resource('DbErrors', 'P3202', 'Tax form mismatch.');
    PERFORM localization.add_resource('DbErrors', 'P3301', 'Invalid quantity.');
    PERFORM localization.add_resource('DbErrors', 'P3302', 'Invalid transaction id.');
    PERFORM localization.add_resource('DbErrors', 'P3501', 'The column account_id cannot be null.');
    PERFORM localization.add_resource('DbErrors', 'P4010', 'Exchange rate between the currencies was not found.');
    PERFORM localization.add_resource('DbErrors', 'P4020', 'This item is not associated with this transaction.');
    PERFORM localization.add_resource('DbErrors', 'P4030', 'No verification policy found for this user.');
    PERFORM localization.add_resource('DbErrors', 'P4031', 'Please ask someone else to verify your transaction.');
    PERFORM localization.add_resource('DbErrors', 'P5000', 'Referencing sides are not equal.');
    PERFORM localization.add_resource('DbErrors', 'P5001', 'Negative stock is not allowed.');
    PERFORM localization.add_resource('DbErrors', 'P5002', 'Posting this transaction would produce a negative cash balance.');
    PERFORM localization.add_resource('DbErrors', 'P5010', 'Past dated transactions are not allowed.');
    PERFORM localization.add_resource('DbErrors', 'P5100', 'This establishment does not allow transaction posting.');
    PERFORM localization.add_resource('DbErrors', 'P5101', 'Cannot post transaction during restricted transaction mode.');
    PERFORM localization.add_resource('DbErrors', 'P5102', 'End of day operation was already performed.');
    PERFORM localization.add_resource('DbErrors', 'P5103', 'Past dated transactions in verification queue.');
    PERFORM localization.add_resource('DbErrors', 'P5104', 'Please verify transactions before performing end of day operation.');
    PERFORM localization.add_resource('DbErrors', 'P5110', 'You cannot provide sales tax information for non taxable sales.');
    PERFORM localization.add_resource('DbErrors', 'P5111', 'Invalid bank transaction information provided.');
    PERFORM localization.add_resource('DbErrors', 'P5112', 'Invalid payment card information.');
    PERFORM localization.add_resource('DbErrors', 'P5113', 'Could not find an account to post merchant fee expenses.');
    PERFORM localization.add_resource('DbErrors', 'P5201', 'A stock adjustment entry can not contain debit item(s).');
    PERFORM localization.add_resource('DbErrors', 'P5202', 'An item can appear only once in a store.');
    PERFORM localization.add_resource('DbErrors', 'P5203', 'The returned quantity cannot be greater than actual quantity.');
    PERFORM localization.add_resource('DbErrors', 'P5204', 'The returned amount cannot be greater than actual amount.');
    PERFORM localization.add_resource('DbErrors', 'P5301', 'Invalid or rejected transaction.');
    PERFORM localization.add_resource('DbErrors', 'P5500', 'Insufficient item quantity.');
    PERFORM localization.add_resource('DbErrors', 'P5800', 'Deleting a transaction is not allowed. Mark the transaction as rejected instead.');
    PERFORM localization.add_resource('DbErrors', 'P5901', 'Please ask someone else to verify the transaction you posted.');
    PERFORM localization.add_resource('DbErrors', 'P5910', 'Self verification limit exceeded. The transaction was not verified.');
    PERFORM localization.add_resource('DbErrors', 'P5911', 'Sales verification limit exceeded. The transaction was not verified.');
    PERFORM localization.add_resource('DbErrors', 'P5912', 'Purchase verification limit exceeded. The transaction was not verified.');
    PERFORM localization.add_resource('DbErrors', 'P5913', 'GL verification limit exceeded. The transaction was not verified.');
    PERFORM localization.add_resource('DbErrors', 'P6010', 'Invalid configuration: COGS method.');
    PERFORM localization.add_resource('DbErrors', 'P8001', 'Cannot produce P/L statement of office(s) having different base currencies.');
    PERFORM localization.add_resource('DbErrors', 'P8002', 'Cannot produce trial balance of office(s) having different base currencies.');
    PERFORM localization.add_resource('DbErrors', 'P8003', 'You cannot have a different currency on the mapped GL account.');
    PERFORM localization.add_resource('DbErrors', 'P8101', 'EOD operation was already initialized.');
    PERFORM localization.add_resource('DbErrors', 'P8501', 'Only one column is required.');
    PERFORM localization.add_resource('DbErrors', 'P8502', 'Cannot update column.');
    PERFORM localization.add_resource('DbErrors', 'P8990', 'You are not allowed to change system accounts.');
    PERFORM localization.add_resource('DbErrors', 'P8991', 'You are not allowed to add system accounts.');
    PERFORM localization.add_resource('DbErrors', 'P8992', 'A sys user cannot have a password.');
    PERFORM localization.add_resource('DbErrors', 'P9001', 'Access is denied.');
    PERFORM localization.add_resource('DbErrors', 'P9010', 'Access is denied. You are not authorized to post this transaction.');
    PERFORM localization.add_resource('DbErrors', 'P9011', 'Access is denied. Invalid values supplied.');
    PERFORM localization.add_resource('DbErrors', 'P9012', 'Access is denied! A stock adjustment transaction cannot references multiple branches.');
    PERFORM localization.add_resource('DbErrors', 'P9013', 'Access is denied! A stock journal transaction cannot references multiple branches.');
    PERFORM localization.add_resource('DbErrors', 'P9014', 'Access is denied. You cannot verify a transaction of another office.');
    PERFORM localization.add_resource('DbErrors', 'P9015', 'Access is denied. You cannot verify past or futuer dated transaction.');
    PERFORM localization.add_resource('DbErrors', 'P9016', 'Access is denied. You don''''t have the right to verify the transaction.');
    PERFORM localization.add_resource('DbErrors', 'P9017', 'Access is denied. You don''''t have the right to withdraw the transaction.');
    PERFORM localization.add_resource('DbErrors', 'P9201', 'Acess is denied. You cannot update the "transaction_details" table.');
    PERFORM localization.add_resource('DbResource', 'actions', 'Actions');
    PERFORM localization.add_resource('DbResource', 'amount', 'Amount');
    PERFORM localization.add_resource('DbResource', 'currency', 'Currency');
    PERFORM localization.add_resource('DbResource', 'flag_background_color', 'Flag Background Color');
    PERFORM localization.add_resource('DbResource', 'flag_foreground_color', 'Flag Foreground Color');
    PERFORM localization.add_resource('DbResource', 'id', 'ID');
    PERFORM localization.add_resource('DbResource', 'office', 'Office');
    PERFORM localization.add_resource('DbResource', 'party', 'Party');
    PERFORM localization.add_resource('DbResource', 'reference_number', 'Reference Number');
    PERFORM localization.add_resource('DbResource', 'statement_reference', 'Statement Reference');
    PERFORM localization.add_resource('DbResource', 'transaction_ts', 'Transaction Timestamp');
    PERFORM localization.add_resource('DbResource', 'user', 'User');
    PERFORM localization.add_resource('DbResource', 'value_date', 'Value Date');
    PERFORM localization.add_resource('Errors', 'BothSidesCannotHaveValue', 'Both debit and credit cannot have values.');
    PERFORM localization.add_resource('Errors', 'CompoundUnitOfMeasureErrorMessage', 'Base unit id and compare unit id cannot be same.');
    PERFORM localization.add_resource('Errors', 'InsufficientStockWarning', 'Only {0} {1} of {2} left in stock.');
    PERFORM localization.add_resource('Errors', 'InvalidSubTranBookPurchaseDelivery', 'Invalid SubTranBook ''Purchase Delivery''.');
    PERFORM localization.add_resource('Errors', 'InvalidSubTranBookPurchaseQuotation', 'Invalid SubTranBook ''Purchase Quotation''.');
    PERFORM localization.add_resource('Errors', 'InvalidSubTranBookPurchaseReceipt', 'Invalid SubTranBook ''Purchase Receipt''.');
    PERFORM localization.add_resource('Errors', 'InvalidSubTranBookSalesPayment', 'Invalid SubTranBook ''Sales Payment''.');
    PERFORM localization.add_resource('Errors', 'InvalidUserId', 'Invalid user id.');
    PERFORM localization.add_resource('Errors', 'KeyValueMismatch', 'There is a mismatching count of key/value items in this ListControl.');
    PERFORM localization.add_resource('Errors', 'NoTransactionToPost', 'No transaction to post.');
    PERFORM localization.add_resource('Errors', 'ReferencingSidesNotEqual', 'The referencing sides are not equal.');
    PERFORM localization.add_resource('Labels', 'AllFieldsRequired', 'All fields are required.');
    PERFORM localization.add_resource('Labels', 'CannotWithdrawNotValidGLTransaction', 'Cannot withdraw transaction. This is a not a valid GL transaction.');
    PERFORM localization.add_resource('Labels', 'CannotWithdrawTransaction', 'Cannot withdraw transaction.');
    PERFORM localization.add_resource('Labels', 'ClickHereToDownload', 'Click here to download.');
    PERFORM localization.add_resource('Labels', 'ConfirmedPasswordDoesNotMatch', 'The confirmed password does not match.');
    PERFORM localization.add_resource('Labels', 'DatabaseBackupSuccessful', 'The database backup was successful.');
    PERFORM localization.add_resource('Labels', 'DaysLowerCase', 'days');
    PERFORM localization.add_resource('Labels', 'EmailBody', '<h2>Hi,</h2><p>Please find the attached document.</p><p>Thank you.<br />MixERP</p>');
    PERFORM localization.add_resource('Labels', 'EmailSentConfirmation', 'An email was sent to {0}.');
    PERFORM localization.add_resource('Labels', 'FlagLabel', 'You can mark this transaction with a flag, however you will not be able to see the flags created by other users.');
    PERFORM localization.add_resource('Labels', 'GoToChecklistWindow', 'Go to checklist window.');
    PERFORM localization.add_resource('Labels', 'GoToTop', 'Go to top.');
    PERFORM localization.add_resource('Labels', 'JustAMomentPlease', 'Just a moment, please!');
    PERFORM localization.add_resource('Labels', 'NumRowsAffected', '{0} rows affected.');
    PERFORM localization.add_resource('Labels', 'OpeningInventoryAlreadyEntered', 'Opening inventory has already been entered for this office.');
    PERFORM localization.add_resource('Labels', 'PartyDescription', 'Parties collectively refer to suppliers, customers, agents, and dealers.');
    PERFORM localization.add_resource('Labels', 'SelectAFlag', 'Select a flag.');
    PERFORM localization.add_resource('Labels', 'TaskCompletedSuccessfully', 'Task completed successfully.');
    PERFORM localization.add_resource('Labels', 'ThankYouForYourBusiness', 'Thank you for your business.');
    PERFORM localization.add_resource('Labels', 'ThisFieldIsRequired', 'This field is required.');
    PERFORM localization.add_resource('Labels', 'TransactionApprovedDetails', 'This transaction was approved by {0} on {1}.');
    PERFORM localization.add_resource('Labels', 'TransactionAutoApprovedDetails', 'This transaction was automatically approved by {0} on {1}.');
    PERFORM localization.add_resource('Labels', 'TransactionAwaitingVerification', 'This transaction is awaiting verification from an administrator.');
    PERFORM localization.add_resource('Labels', 'TransactionClosedDetails', 'This transaction was closed by {0} on {1}. Reason: "{2}".');
    PERFORM localization.add_resource('Labels', 'TransactionPostedSuccessfully', 'The transaction was posted successfully.');
    PERFORM localization.add_resource('Labels', 'TransactionRejectedDetails', 'This transaction was rejected by {0} on {1}. Reason: "{2}".');
    PERFORM localization.add_resource('Labels', 'TransactionWithdrawalInformation', 'When you withdraw a transaction, it won''t be forwarded to the workflow module. This means that your withdrawn transactions are rejected and require no further verification. However, you won''t be able to unwithdraw this transaction later.');
    PERFORM localization.add_resource('Labels', 'TransactionWithdrawnDetails', 'This transaction was withdrawn by {0} on {1}. Reason: "{2}".');
    PERFORM localization.add_resource('Labels', 'TransactionWithdrawnMessage', 'The transaction was withdrawn successfully. Moreover, this action will affect the all the reports produced on and after "{0}".');
    PERFORM localization.add_resource('Labels', 'UserGreeting', 'Hi {0}!');
    PERFORM localization.add_resource('Labels', 'YourPasswordWasChanged', 'Your password was changed.');
    PERFORM localization.add_resource('Messages', 'AreYouSure', 'Are you sure?');
    PERFORM localization.add_resource('Messages', 'CouldNotDetermineVirtualPathError', 'Could not determine virtual path to create an image.');
    PERFORM localization.add_resource('Messages', 'DuplicateFile', 'Duplicate File!');
    PERFORM localization.add_resource('Messages', 'EODDoNotCloseWindow', 'Please do not close this window or navigate away from this page during initialization.');
    PERFORM localization.add_resource('Messages', 'EODElevatedPriviledgeCanLogIn', 'During the day-end period, only users having elevated privilege are allowed to log-in.');
    PERFORM localization.add_resource('Messages', 'EODLogsOffUsers', 'When you initialize day-end operation, the already logged-in application users including you are logged off on 120 seconds.');
    PERFORM localization.add_resource('Messages', 'EODProcessIsIrreversible', 'This process is irreversible.');
    PERFORM localization.add_resource('Messages', 'EODRoutineTasks', 'During EOD operation, routine tasks such as interest calculation, settlements, and report generation are performed.');
    PERFORM localization.add_resource('Messages', 'EODTransactionPosting', 'When you perform EOD operation for a particular date, no transaction on that date or before can be altered, changed, or deleted.');
    PERFORM localization.add_resource('Messages', 'InvalidFile', 'Invalid file!');
    PERFORM localization.add_resource('Messages', 'TempDirectoryNullError', 'Cannot create an image when the temp directory is null.');
    PERFORM localization.add_resource('Messages', 'UploadFilesDeleted', 'The uploaded files were successfully deleted.');
    PERFORM localization.add_resource('Questions', 'AreYouSure', 'Are you sure?');
    PERFORM localization.add_resource('Questions', 'CannotAccessAccount', 'Cannot access your account?');
    PERFORM localization.add_resource('Questions', 'ConfirmAnalyze', 'This will lock client database access during execution. Are you sure you want to execute this action right now?');
    PERFORM localization.add_resource('Questions', 'ConfirmVacuum', 'This will lock client database access during execution. Are you sure you want to execute this action right now?');
    PERFORM localization.add_resource('Questions', 'ConfirmVacuumFull', 'This will lock client database access during execution. Are you sure you want to execute this action right now?');
    PERFORM localization.add_resource('Questions', 'WhatIsYourHomeCurrency', 'What Is Your Home Currency?');
    PERFORM localization.add_resource('Questions', 'WithdrawalReason', 'Why do you want to withdraw this transaction?');
    PERFORM localization.add_resource('ScrudResource', 'Select', 'Select');
    PERFORM localization.add_resource('ScrudResource', 'account', 'Account');
    PERFORM localization.add_resource('ScrudResource', 'account_id', 'Account Id');
    PERFORM localization.add_resource('ScrudResource', 'account_master', 'Account Master');
    PERFORM localization.add_resource('ScrudResource', 'account_master_code', 'Account Master Code');
    PERFORM localization.add_resource('ScrudResource', 'account_master_id', 'Account Master Id');
    PERFORM localization.add_resource('ScrudResource', 'account_master_name', 'Account Master Name');
    PERFORM localization.add_resource('ScrudResource', 'account_name', 'Account Name');
    PERFORM localization.add_resource('ScrudResource', 'account_number', 'Account Number');
    PERFORM localization.add_resource('ScrudResource', 'address', 'Address');
    PERFORM localization.add_resource('ScrudResource', 'address_line_1', 'Address Line 1');
    PERFORM localization.add_resource('ScrudResource', 'address_line_2', 'Address Line 2');
    PERFORM localization.add_resource('ScrudResource', 'ageing_slab_id', 'Ageing Slab Id');
    PERFORM localization.add_resource('ScrudResource', 'ageing_slab_name', 'Ageing Slab Name');
    PERFORM localization.add_resource('ScrudResource', 'allow_credit', 'Allow Credit');
    PERFORM localization.add_resource('ScrudResource', 'allow_sales', 'Allow Sales');
    PERFORM localization.add_resource('ScrudResource', 'allow_transaction_posting', 'Allow Transaction Posting');
    PERFORM localization.add_resource('ScrudResource', 'amount', 'Amount');
    PERFORM localization.add_resource('ScrudResource', 'amount_from', 'Amount From');
    PERFORM localization.add_resource('ScrudResource', 'amount_to', 'Amount To');
    PERFORM localization.add_resource('ScrudResource', 'analyze_count', 'Analyze Count');
    PERFORM localization.add_resource('ScrudResource', 'api_access_policy_id', 'API Access Policy Id');
    PERFORM localization.add_resource('ScrudResource', 'api_access_policy_uix', 'Duplicate Entry for API Access Policy');
    PERFORM localization.add_resource('ScrudResource', 'applied_on_shipping_charge', 'Applied on Shipping Charge');
    PERFORM localization.add_resource('ScrudResource', 'audit_ts', 'Audit Timestamp');
    PERFORM localization.add_resource('ScrudResource', 'audit_user_id', 'Audit User Id');
    PERFORM localization.add_resource('ScrudResource', 'auto_trigger_on_sales', 'Automatically Trigger on Sales');
    PERFORM localization.add_resource('ScrudResource', 'autoanalyze_count', 'Autoanalyze Count');
    PERFORM localization.add_resource('ScrudResource', 'autovacuum_count', 'Autovacuum Count');
    PERFORM localization.add_resource('ScrudResource', 'background_color', 'Background Color');
    PERFORM localization.add_resource('ScrudResource', 'balance', 'Balance');
    PERFORM localization.add_resource('ScrudResource', 'bank_account_number', 'Bank Account Number');
    PERFORM localization.add_resource('ScrudResource', 'bank_account_type', 'Bank Account Type');
    PERFORM localization.add_resource('ScrudResource', 'bank_accounts_account_id_chk', 'The selected item is not a valid bank account.');
    PERFORM localization.add_resource('ScrudResource', 'bank_accounts_pkey', 'Duplicate bank account.');
    PERFORM localization.add_resource('ScrudResource', 'bank_address', 'Bank Address');
    PERFORM localization.add_resource('ScrudResource', 'bank_branch', 'Bank Branch');
    PERFORM localization.add_resource('ScrudResource', 'bank_contact_number', 'Bank Contact Number');
    PERFORM localization.add_resource('ScrudResource', 'bank_name', 'Bank Name');
    PERFORM localization.add_resource('ScrudResource', 'base_unit_id', 'Base Unit Id');
    PERFORM localization.add_resource('ScrudResource', 'base_unit_name', 'Base Unit Name');
    PERFORM localization.add_resource('ScrudResource', 'based_on_shipping_address', 'Based On Shipping Address');
    PERFORM localization.add_resource('ScrudResource', 'bonus_rate', 'Bonus Rate');
    PERFORM localization.add_resource('ScrudResource', 'bonus_slab_code', 'Bonus Slab Code');
    PERFORM localization.add_resource('ScrudResource', 'bonus_slab_detail_id', 'Bonus Slab Detail Id');
    PERFORM localization.add_resource('ScrudResource', 'bonus_slab_details_amounts_chk', 'The field "AmountTo" must be greater than "AmountFrom".');
    PERFORM localization.add_resource('ScrudResource', 'bonus_slab_id', 'Bonus Slab Id');
    PERFORM localization.add_resource('ScrudResource', 'bonus_slab_name', 'Bonus Slab Name');
    PERFORM localization.add_resource('ScrudResource', 'book', 'Book');
    PERFORM localization.add_resource('ScrudResource', 'brand', 'Brand');
    PERFORM localization.add_resource('ScrudResource', 'brand_code', 'Brand Code');
    PERFORM localization.add_resource('ScrudResource', 'brand_id', 'Brand Id');
    PERFORM localization.add_resource('ScrudResource', 'brand_name', 'Brand Name');
    PERFORM localization.add_resource('ScrudResource', 'can_change_password', 'Can Change Password');
    PERFORM localization.add_resource('ScrudResource', 'can_self_verify', 'Can Self Verify');
    PERFORM localization.add_resource('ScrudResource', 'can_verify_gl_transactions', 'Can Verify Gl Transactions');
    PERFORM localization.add_resource('ScrudResource', 'can_verify_purchase_transactions', 'Can Verify Purchase Transactions');
    PERFORM localization.add_resource('ScrudResource', 'can_verify_sales_transactions', 'Can Verify Sales Transactions');
    PERFORM localization.add_resource('ScrudResource', 'card_type_code', 'Card Type Code');
    PERFORM localization.add_resource('ScrudResource', 'card_type_id', 'Card Type Id');
    PERFORM localization.add_resource('ScrudResource', 'card_type_name', 'Card Type Name');
    PERFORM localization.add_resource('ScrudResource', 'cash_flow_heading', 'Cash Flow Heading');
    PERFORM localization.add_resource('ScrudResource', 'cash_flow_heading_cash_flow_heading_type_chk', 'Invalid Cashflow Heading Type. Allowed values: O, I, F.');
    PERFORM localization.add_resource('ScrudResource', 'cash_flow_heading_code', 'Cash Flow Heading Code');
    PERFORM localization.add_resource('ScrudResource', 'cash_flow_heading_id', 'Cash Flow Heading Id');
    PERFORM localization.add_resource('ScrudResource', 'cash_flow_heading_name', 'Cash Flow Heading Name');
    PERFORM localization.add_resource('ScrudResource', 'cash_flow_heading_type', 'Cashflow Heading Type');
    PERFORM localization.add_resource('ScrudResource', 'cash_flow_master_code', 'Cash Flow Master Code');
    PERFORM localization.add_resource('ScrudResource', 'cash_flow_master_id', 'Cash Flow Master Id');
    PERFORM localization.add_resource('ScrudResource', 'cash_flow_master_name', 'Cash Flow Master Name');
    PERFORM localization.add_resource('ScrudResource', 'cash_flow_setup_id', 'Cashflow Setup Id');
    PERFORM localization.add_resource('ScrudResource', 'cash_repositories_cash_repository_code_uix', 'Duplicate Cash Repository Code');
    PERFORM localization.add_resource('ScrudResource', 'cash_repositories_cash_repository_name_uix', 'Duplicate Cash Repository Name');
    PERFORM localization.add_resource('ScrudResource', 'cash_repository', 'Cash Repository');
    PERFORM localization.add_resource('ScrudResource', 'cash_repository_code', 'Cash Repository Code');
    PERFORM localization.add_resource('ScrudResource', 'cash_repository_id', 'Cash Repository Id');
    PERFORM localization.add_resource('ScrudResource', 'cash_repository_name', 'Cash Repository Name');
    PERFORM localization.add_resource('ScrudResource', 'cell', 'Cell');
    PERFORM localization.add_resource('ScrudResource', 'charge_interest', 'Charge Interest');
    PERFORM localization.add_resource('ScrudResource', 'check_nexus', 'Check Nexus');
    PERFORM localization.add_resource('ScrudResource', 'checking_frequency', 'Checking Frequency');
    PERFORM localization.add_resource('ScrudResource', 'checking_frequency_id', 'Checking Frequency Id');
    PERFORM localization.add_resource('ScrudResource', 'city', 'City');
    PERFORM localization.add_resource('ScrudResource', 'collecting_account', 'Collecting Account');
    PERFORM localization.add_resource('ScrudResource', 'collecting_account_id', 'Collecting Account Id');
    PERFORM localization.add_resource('ScrudResource', 'collecting_tax_authority', 'Collecting Tax Authority');
    PERFORM localization.add_resource('ScrudResource', 'collecting_tax_authority_id', 'Collecting Tax Authority Id');
    PERFORM localization.add_resource('ScrudResource', 'commision_rate', 'Commission Rate');
    PERFORM localization.add_resource('ScrudResource', 'commission_rate', 'Commission Rate');
    PERFORM localization.add_resource('ScrudResource', 'company_name', 'Company Name');
    PERFORM localization.add_resource('ScrudResource', 'compare_unit_id', 'Compare Unit Id');
    PERFORM localization.add_resource('ScrudResource', 'compare_unit_name', 'Compare Unit Name');
    PERFORM localization.add_resource('ScrudResource', 'compound_item', 'Compound Item');
    PERFORM localization.add_resource('ScrudResource', 'compound_item_code', 'Compound Item Code');
    PERFORM localization.add_resource('ScrudResource', 'compound_item_detail_id', 'Compound Item Detail Id');
    PERFORM localization.add_resource('ScrudResource', 'compound_item_details_unit_chk', 'Invalid unit provided.');
    PERFORM localization.add_resource('ScrudResource', 'compound_item_id', 'Compound Item Id');
    PERFORM localization.add_resource('ScrudResource', 'compound_item_name', 'Compound Item Name');
    PERFORM localization.add_resource('ScrudResource', 'compound_unit_id', 'Compound Unit Id');
    PERFORM localization.add_resource('ScrudResource', 'compound_units_chk', 'The base unit id cannot same as compare unit id.');
    PERFORM localization.add_resource('ScrudResource', 'compounding_frequency', 'Compounding Frequency');
    PERFORM localization.add_resource('ScrudResource', 'confidential', 'Confidential');
    PERFORM localization.add_resource('ScrudResource', 'contact_address_line_1', 'Contact Address Line 1');
    PERFORM localization.add_resource('ScrudResource', 'contact_address_line_2', 'Contact Address Line 2');
    PERFORM localization.add_resource('ScrudResource', 'contact_cell', 'Contact Cell');
    PERFORM localization.add_resource('ScrudResource', 'contact_city', 'Contact City');
    PERFORM localization.add_resource('ScrudResource', 'contact_country', 'Contact Country');
    PERFORM localization.add_resource('ScrudResource', 'contact_email', 'Contact Email');
    PERFORM localization.add_resource('ScrudResource', 'contact_number', 'Contact Number');
    PERFORM localization.add_resource('ScrudResource', 'contact_person', 'Contact Person');
    PERFORM localization.add_resource('ScrudResource', 'contact_phone', 'Contact Phone');
    PERFORM localization.add_resource('ScrudResource', 'contact_po_box', 'Contact Po Box');
    PERFORM localization.add_resource('ScrudResource', 'contact_state', 'Contact State');
    PERFORM localization.add_resource('ScrudResource', 'contact_street', 'Contact Street');
    PERFORM localization.add_resource('ScrudResource', 'cost_center_code', 'Cost Center Code');
    PERFORM localization.add_resource('ScrudResource', 'cost_center_id', 'Cost Center Id');
    PERFORM localization.add_resource('ScrudResource', 'cost_center_name', 'Cost Center Name');
    PERFORM localization.add_resource('ScrudResource', 'cost_of_goods_sold_account_id', 'COGS Account Id');
    PERFORM localization.add_resource('ScrudResource', 'cost_price', 'Cost Price');
    PERFORM localization.add_resource('ScrudResource', 'cost_price_includes_tax', 'Cost Price Includes Tax');
    PERFORM localization.add_resource('ScrudResource', 'counter_code', 'Counter Code');
    PERFORM localization.add_resource('ScrudResource', 'counter_id', 'Counter Id');
    PERFORM localization.add_resource('ScrudResource', 'counter_name', 'Counter Name');
    PERFORM localization.add_resource('ScrudResource', 'country', 'Country');
    PERFORM localization.add_resource('ScrudResource', 'country_code', 'Country Code');
    PERFORM localization.add_resource('ScrudResource', 'country_id', 'Country Id');
    PERFORM localization.add_resource('ScrudResource', 'country_name', 'Country Name');
    PERFORM localization.add_resource('ScrudResource', 'county', 'County');
    PERFORM localization.add_resource('ScrudResource', 'county_code', 'County Code');
    PERFORM localization.add_resource('ScrudResource', 'county_id', 'County Id');
    PERFORM localization.add_resource('ScrudResource', 'county_name', 'County Name');
    PERFORM localization.add_resource('ScrudResource', 'county_sales_tax', 'County Sales Tax');
    PERFORM localization.add_resource('ScrudResource', 'county_sales_tax_code', 'County Sales Tax Code');
    PERFORM localization.add_resource('ScrudResource', 'county_sales_tax_id', 'County Sales Tax Id');
    PERFORM localization.add_resource('ScrudResource', 'county_sales_tax_name', 'County Sales Tax Name');
    PERFORM localization.add_resource('ScrudResource', 'credit', 'Credit');
    PERFORM localization.add_resource('ScrudResource', 'cst_number', 'CST Number');
    PERFORM localization.add_resource('ScrudResource', 'currency', 'Currency');
    PERFORM localization.add_resource('ScrudResource', 'currency_code', 'Currency Code');
    PERFORM localization.add_resource('ScrudResource', 'currency_name', 'Currency Name');
    PERFORM localization.add_resource('ScrudResource', 'currency_symbol', 'Currency Symbol');
    PERFORM localization.add_resource('ScrudResource', 'customer_pays_fee', 'Customer Pays Fee');
    PERFORM localization.add_resource('ScrudResource', 'date_of_birth', 'Date Of Birth');
    PERFORM localization.add_resource('ScrudResource', 'debit', 'Debit');
    PERFORM localization.add_resource('ScrudResource', 'default_cash_account_id', 'Default Cash Account Id');
    PERFORM localization.add_resource('ScrudResource', 'default_cash_repository_id', 'Default Cash Repository Id');
    PERFORM localization.add_resource('ScrudResource', 'department_code', 'Department Code');
    PERFORM localization.add_resource('ScrudResource', 'department_id', 'Department Id');
    PERFORM localization.add_resource('ScrudResource', 'department_name', 'Department Name');
    PERFORM localization.add_resource('ScrudResource', 'description', 'Description');
    PERFORM localization.add_resource('ScrudResource', 'discount', 'Discount');
    PERFORM localization.add_resource('ScrudResource', 'due_days', 'Due Days');
    PERFORM localization.add_resource('ScrudResource', 'due_frequency', 'Due Frequency');
    PERFORM localization.add_resource('ScrudResource', 'due_frequency_id', 'Due Frequency Id');
    PERFORM localization.add_resource('ScrudResource', 'due_on_date', 'Due on Date');
    PERFORM localization.add_resource('ScrudResource', 'effective_from', 'Effective From');
    PERFORM localization.add_resource('ScrudResource', 'elevated', 'Elevated');
    PERFORM localization.add_resource('ScrudResource', 'email', 'Email');
    PERFORM localization.add_resource('ScrudResource', 'ends_on', 'Ends On');
    PERFORM localization.add_resource('ScrudResource', 'entity_id', 'Entity Id');
    PERFORM localization.add_resource('ScrudResource', 'entity_name', 'Entity Name');
    PERFORM localization.add_resource('ScrudResource', 'entry_ts', 'Entry Ts');
    PERFORM localization.add_resource('ScrudResource', 'er', 'ER');
    PERFORM localization.add_resource('ScrudResource', 'exclude_from_purchase', 'Exclude From Purchase');
    PERFORM localization.add_resource('ScrudResource', 'exclude_from_sales', 'Exclude From Sales');
    PERFORM localization.add_resource('ScrudResource', 'external_code', 'External Code');
    PERFORM localization.add_resource('ScrudResource', 'factory_address', 'Factory Address');
    PERFORM localization.add_resource('ScrudResource', 'fax', 'Fax');
    PERFORM localization.add_resource('ScrudResource', 'first_name', 'First Name');
    PERFORM localization.add_resource('ScrudResource', 'fiscal_year_code', 'Fiscal Year Code');
    PERFORM localization.add_resource('ScrudResource', 'fiscal_year_name', 'Fiscal Year Name');
    PERFORM localization.add_resource('ScrudResource', 'flag_id', 'Flag Id');
    PERFORM localization.add_resource('ScrudResource', 'flag_type_id', 'Flag Type Id');
    PERFORM localization.add_resource('ScrudResource', 'flag_type_name', 'Flag Type Name');
    PERFORM localization.add_resource('ScrudResource', 'flagged_on', 'Flagged On');
    PERFORM localization.add_resource('ScrudResource', 'foreground_color', 'Foreground Color');
    PERFORM localization.add_resource('ScrudResource', 'frequency_code', 'Frequency Code');
    PERFORM localization.add_resource('ScrudResource', 'frequency_id', 'Frequency Id');
    PERFORM localization.add_resource('ScrudResource', 'frequency_name', 'Frequency Name');
    PERFORM localization.add_resource('ScrudResource', 'frequency_setup_code', 'Frequency Setup Code');
    PERFORM localization.add_resource('ScrudResource', 'frequency_setup_id', 'Frequency Setup Id');
    PERFORM localization.add_resource('ScrudResource', 'from_days', 'From Days');
    PERFORM localization.add_resource('ScrudResource', 'full_name', 'Full Name');
    PERFORM localization.add_resource('ScrudResource', 'gl_head', 'GL Head');
    PERFORM localization.add_resource('ScrudResource', 'gl_verification_limit', 'Gl Verification Limit');
    PERFORM localization.add_resource('ScrudResource', 'grace_period', 'Grace Period');
    PERFORM localization.add_resource('ScrudResource', 'has_child', 'Has Child');
    PERFORM localization.add_resource('ScrudResource', 'height_in_centimeters', 'Height In Centimeters');
    PERFORM localization.add_resource('ScrudResource', 'hot_item', 'Hot item');
    PERFORM localization.add_resource('ScrudResource', 'http_action_code', 'HTTP Action Code');
    PERFORM localization.add_resource('ScrudResource', 'hundredth_name', 'Hundredth Name');
    PERFORM localization.add_resource('ScrudResource', 'id', 'Id');
    PERFORM localization.add_resource('ScrudResource', 'includes_tax', 'Includes Tax');
    PERFORM localization.add_resource('ScrudResource', 'income_tax_rate', 'Income Tax Rate');
    PERFORM localization.add_resource('ScrudResource', 'industry_id', 'Industry Id');
    PERFORM localization.add_resource('ScrudResource', 'industry_name', 'Industry Name');
    PERFORM localization.add_resource('ScrudResource', 'interest_compounding_frequency_id', 'Interest Compounding Frequency Id');
    PERFORM localization.add_resource('ScrudResource', 'interest_rate', 'Interest Rate');
    PERFORM localization.add_resource('ScrudResource', 'inventory_account_id', 'Inventory Account Id');
    PERFORM localization.add_resource('ScrudResource', 'is_active', 'Is Active');
    PERFORM localization.add_resource('ScrudResource', 'is_added', 'Is Added');
    PERFORM localization.add_resource('ScrudResource', 'is_admin', 'Is Admin');
    PERFORM localization.add_resource('ScrudResource', 'is_cash', 'Is Cash');
    PERFORM localization.add_resource('ScrudResource', 'is_debit', 'Is Debit');
    PERFORM localization.add_resource('ScrudResource', 'is_employee', 'Is Employee');
    PERFORM localization.add_resource('ScrudResource', 'is_exempt', 'Is Exempt');
    PERFORM localization.add_resource('ScrudResource', 'is_exemption', 'Is Exemption');
    PERFORM localization.add_resource('ScrudResource', 'is_flat_amount', 'Is Flat Amount');
    PERFORM localization.add_resource('ScrudResource', 'is_merchant_account', 'Is Merchant Account');
    PERFORM localization.add_resource('ScrudResource', 'is_party', 'Is Party');
    PERFORM localization.add_resource('ScrudResource', 'is_purchase', 'Is Purchase');
    PERFORM localization.add_resource('ScrudResource', 'is_rectangular', 'Is Rectangular');
    PERFORM localization.add_resource('ScrudResource', 'is_sales', 'Is Sales');
    PERFORM localization.add_resource('ScrudResource', 'is_summary', 'Is Summary');
    PERFORM localization.add_resource('ScrudResource', 'is_supplier', 'Is Supplier');
    PERFORM localization.add_resource('ScrudResource', 'is_system', 'Is System');
    PERFORM localization.add_resource('ScrudResource', 'is_transaction_node', 'Is Transaction Node');
    PERFORM localization.add_resource('ScrudResource', 'is_vat', 'Is Vat');
    PERFORM localization.add_resource('ScrudResource', 'item', 'Item');
    PERFORM localization.add_resource('ScrudResource', 'item_code', 'Item Code');
    PERFORM localization.add_resource('ScrudResource', 'item_cost_price_id', 'Item Cost Price Id');
    PERFORM localization.add_resource('ScrudResource', 'item_cost_prices_unit_chk', 'Invalid unit provided.');
    PERFORM localization.add_resource('ScrudResource', 'item_group', 'Item Group');
    PERFORM localization.add_resource('ScrudResource', 'item_group_code', 'Item Group Code');
    PERFORM localization.add_resource('ScrudResource', 'item_group_id', 'Item Group Id');
    PERFORM localization.add_resource('ScrudResource', 'item_group_name', 'Item Group Name');
    PERFORM localization.add_resource('ScrudResource', 'item_id', 'Item Id');
    PERFORM localization.add_resource('ScrudResource', 'item_name', 'Item Name');
    PERFORM localization.add_resource('ScrudResource', 'item_opening_inventory_unit_chk', 'Invalid unit provided.');
    PERFORM localization.add_resource('ScrudResource', 'item_selling_price_id', 'Item Selling Price Id');
    PERFORM localization.add_resource('ScrudResource', 'item_selling_prices_unit_chk', 'Invalid unit provided.');
    PERFORM localization.add_resource('ScrudResource', 'item_type_code', 'Item Type Code');
    PERFORM localization.add_resource('ScrudResource', 'item_type_id', 'Item Type Id');
    PERFORM localization.add_resource('ScrudResource', 'item_type_name', 'Item Type Name');
    PERFORM localization.add_resource('ScrudResource', 'items_item_code_uix', 'Duplicate item code.');
    PERFORM localization.add_resource('ScrudResource', 'items_item_name_uix', 'Duplicate item name.');
    PERFORM localization.add_resource('ScrudResource', 'items_reorder_quantity_chk', 'The reorder quantity must be great than or equal to the reorder level.');
    PERFORM localization.add_resource('ScrudResource', 'last_analyze', 'Last Analyze On');
    PERFORM localization.add_resource('ScrudResource', 'last_autoanalyze', 'Last Autoanalyze On');
    PERFORM localization.add_resource('ScrudResource', 'last_autovacuum', 'Last Autovacuum On');
    PERFORM localization.add_resource('ScrudResource', 'last_name', 'Last Name');
    PERFORM localization.add_resource('ScrudResource', 'last_vacuum', 'Last Vacuum On');
    PERFORM localization.add_resource('ScrudResource', 'late_fee', 'Late Fee');
    PERFORM localization.add_resource('ScrudResource', 'late_fee_code', 'Late Fee Code');
    PERFORM localization.add_resource('ScrudResource', 'late_fee_id', 'Late Fee Id');
    PERFORM localization.add_resource('ScrudResource', 'late_fee_name', 'Late Fee Name');
    PERFORM localization.add_resource('ScrudResource', 'late_fee_posting_frequency', 'Late Fee Posting Frequency');
    PERFORM localization.add_resource('ScrudResource', 'late_fee_posting_frequency_id', 'Late Fee Posting Frequency Id');
    PERFORM localization.add_resource('ScrudResource', 'lc_credit', 'LC Credit');
    PERFORM localization.add_resource('ScrudResource', 'lc_debit', 'LC Debit');
    PERFORM localization.add_resource('ScrudResource', 'lead_source_code', 'Lead Source Code');
    PERFORM localization.add_resource('ScrudResource', 'lead_source_id', 'Lead Source Id');
    PERFORM localization.add_resource('ScrudResource', 'lead_source_name', 'Lead Source Name');
    PERFORM localization.add_resource('ScrudResource', 'lead_status_code', 'Lead Status Code');
    PERFORM localization.add_resource('ScrudResource', 'lead_status_id', 'Lead Status Id');
    PERFORM localization.add_resource('ScrudResource', 'lead_status_name', 'Lead Status Name');
    PERFORM localization.add_resource('ScrudResource', 'lead_time_in_days', 'Lead Time In Days');
    PERFORM localization.add_resource('ScrudResource', 'length_in_centimeters', 'Length In Centimeters');
    PERFORM localization.add_resource('ScrudResource', 'machinable', 'Machinable');
    PERFORM localization.add_resource('ScrudResource', 'maintain_stock', 'Maintain Stock');
    PERFORM localization.add_resource('ScrudResource', 'maintained_by_user_id', 'Maintained By User Id');
    PERFORM localization.add_resource('ScrudResource', 'maximum_credit_amount', 'Maximum Credit Amount');
    PERFORM localization.add_resource('ScrudResource', 'maximum_credit_period', 'Maximum Credit Period');
    PERFORM localization.add_resource('ScrudResource', 'merchant_account_id', 'Merchant Account Id');
    PERFORM localization.add_resource('ScrudResource', 'merchant_fee_setup_id', 'Merchant Fee Setup Id');
    PERFORM localization.add_resource('ScrudResource', 'middle_name', 'Middle Name');
    PERFORM localization.add_resource('ScrudResource', 'nick_name', 'Nick Name');
    PERFORM localization.add_resource('ScrudResource', 'non_gl_stock_details_unit_chk', 'Invalid unit provided.');
    PERFORM localization.add_resource('ScrudResource', 'normally_debit', 'Normally Debit');
    PERFORM localization.add_resource('ScrudResource', 'office', 'Office');
    PERFORM localization.add_resource('ScrudResource', 'office_code', 'Office Code');
    PERFORM localization.add_resource('ScrudResource', 'office_id', 'Office Id');
    PERFORM localization.add_resource('ScrudResource', 'office_name', 'Office Name');
    PERFORM localization.add_resource('ScrudResource', 'opportunity_stage_code', 'Opportunity Stage Code');
    PERFORM localization.add_resource('ScrudResource', 'opportunity_stage_id', 'Opportunity Stage Id');
    PERFORM localization.add_resource('ScrudResource', 'opportunity_stage_name', 'Opportunity Stage Name');
    PERFORM localization.add_resource('ScrudResource', 'pan_number', 'Pan Number');
    PERFORM localization.add_resource('ScrudResource', 'parent', 'Parent');
    PERFORM localization.add_resource('ScrudResource', 'parent_account_id', 'Parent Account Id');
    PERFORM localization.add_resource('ScrudResource', 'parent_account_master_id', 'Parent Account Master Id');
    PERFORM localization.add_resource('ScrudResource', 'parent_account_name', 'Parent Account Name');
    PERFORM localization.add_resource('ScrudResource', 'parent_account_number', 'Parent Account Number');
    PERFORM localization.add_resource('ScrudResource', 'parent_cash_flow_heading_id', 'Parent Cash Flow Heading Id');
    PERFORM localization.add_resource('ScrudResource', 'parent_cash_repository', 'Parent Cash Repository');
    PERFORM localization.add_resource('ScrudResource', 'parent_cash_repository_id', 'Parent Cash Repository Id');
    PERFORM localization.add_resource('ScrudResource', 'parent_cr_code', 'Parent CR Code');
    PERFORM localization.add_resource('ScrudResource', 'parent_cr_name', 'Parent CR Name');
    PERFORM localization.add_resource('ScrudResource', 'parent_industry_id', 'Parent Industry Id');
    PERFORM localization.add_resource('ScrudResource', 'parent_industry_name', 'Parent Industry Name');
    PERFORM localization.add_resource('ScrudResource', 'parent_item_group_id', 'Parent Item Group Id');
    PERFORM localization.add_resource('ScrudResource', 'parent_office', 'Parent Office');
    PERFORM localization.add_resource('ScrudResource', 'parent_office_id', 'Parent Office Id');
    PERFORM localization.add_resource('ScrudResource', 'party', 'Party');
    PERFORM localization.add_resource('ScrudResource', 'party_code', 'Party Code');
    PERFORM localization.add_resource('ScrudResource', 'party_id', 'Party Id');
    PERFORM localization.add_resource('ScrudResource', 'party_name', 'Party Name');
    PERFORM localization.add_resource('ScrudResource', 'party_type', 'Party Type');
    PERFORM localization.add_resource('ScrudResource', 'party_type_code', 'Party Tpye Code');
    PERFORM localization.add_resource('ScrudResource', 'party_type_id', 'Party Type Id');
    PERFORM localization.add_resource('ScrudResource', 'party_type_name', 'Party Type Name');
    PERFORM localization.add_resource('ScrudResource', 'password', 'Password');
    PERFORM localization.add_resource('ScrudResource', 'payment_card_code', 'Payment Card Code');
    PERFORM localization.add_resource('ScrudResource', 'payment_card_id', 'Payment Card Id');
    PERFORM localization.add_resource('ScrudResource', 'payment_card_name', 'Payment Card Name');
    PERFORM localization.add_resource('ScrudResource', 'payment_term', 'Payment Term');
    PERFORM localization.add_resource('ScrudResource', 'payment_term_code', 'Payment Term Code');
    PERFORM localization.add_resource('ScrudResource', 'payment_term_id', 'Payment Term Id');
    PERFORM localization.add_resource('ScrudResource', 'payment_term_name', 'Payment Term Name');
    PERFORM localization.add_resource('ScrudResource', 'phone', 'Phone');
    PERFORM localization.add_resource('ScrudResource', 'po_box', 'Po Box');
    PERFORM localization.add_resource('ScrudResource', 'poco_type_name', 'Poco Type Name');
    PERFORM localization.add_resource('ScrudResource', 'policy_id', 'Policy id');
    PERFORM localization.add_resource('ScrudResource', 'preferred_shipping_mail_type', 'Preferred Shipping Mail Type');
    PERFORM localization.add_resource('ScrudResource', 'preferred_shipping_mail_type_id', 'Preferred Shipping Mail Type Id');
    PERFORM localization.add_resource('ScrudResource', 'preferred_shipping_package_shape', 'Preferred Shipping Package Shape');
    PERFORM localization.add_resource('ScrudResource', 'preferred_supplier', 'Preferred Supplier');
    PERFORM localization.add_resource('ScrudResource', 'preferred_supplier_id', 'Preferred Supplier Id');
    PERFORM localization.add_resource('ScrudResource', 'price', 'Price');
    PERFORM localization.add_resource('ScrudResource', 'price_from', 'Price From');
    PERFORM localization.add_resource('ScrudResource', 'price_to', 'Price To');
    PERFORM localization.add_resource('ScrudResource', 'price_type_code', 'Price Type Code');
    PERFORM localization.add_resource('ScrudResource', 'price_type_id', 'Price Type Id');
    PERFORM localization.add_resource('ScrudResource', 'price_type_name', 'Price Type Name');
    PERFORM localization.add_resource('ScrudResource', 'priority', 'Priority');
    PERFORM localization.add_resource('ScrudResource', 'purchase_account_id', 'Purchase Account Id');
    PERFORM localization.add_resource('ScrudResource', 'purchase_discount_account_id', 'Purchase Discount Account Id');
    PERFORM localization.add_resource('ScrudResource', 'purchase_verification_limit', 'Purchase Verification Limit');
    PERFORM localization.add_resource('ScrudResource', 'quantity', 'Quantity');
    PERFORM localization.add_resource('ScrudResource', 'rate', 'Rate');
    PERFORM localization.add_resource('ScrudResource', 'recurrence_type_id', 'Recurrence Type Id');
    PERFORM localization.add_resource('ScrudResource', 'recurring_amount', 'Recurring Amount');
    PERFORM localization.add_resource('ScrudResource', 'recurring_duration', 'Recurring Duration');
    PERFORM localization.add_resource('ScrudResource', 'recurring_frequency', 'Recurring Frequency');
    PERFORM localization.add_resource('ScrudResource', 'recurring_frequency_id', 'Recurring Frequency Id');
    PERFORM localization.add_resource('ScrudResource', 'recurring_invoice', 'Recurring Invoice');
    PERFORM localization.add_resource('ScrudResource', 'recurring_invoice_code', 'Recurring Invoice Code');
    PERFORM localization.add_resource('ScrudResource', 'recurring_invoice_id', 'Recurring Invoice Id');
    PERFORM localization.add_resource('ScrudResource', 'recurring_invoice_name', 'Recurring Invoice Name');
    PERFORM localization.add_resource('ScrudResource', 'recurring_invoice_setup_id', 'Recurring Invoice Setup Id');
    PERFORM localization.add_resource('ScrudResource', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'You cannot have more than one auto trigger on sales for this item.');
    PERFORM localization.add_resource('ScrudResource', 'recurs_on_same_calendar_date', 'Recurs on Same Calendar Date');
    PERFORM localization.add_resource('ScrudResource', 'registration_date', 'Registration Date');
    PERFORM localization.add_resource('ScrudResource', 'registration_number', 'Registration Number');
    PERFORM localization.add_resource('ScrudResource', 'relationship_officer_name', 'Relationship Officer Name');
    PERFORM localization.add_resource('ScrudResource', 'relname', 'Relation Name');
    PERFORM localization.add_resource('ScrudResource', 'reorder_level', 'Reorder Level');
    PERFORM localization.add_resource('ScrudResource', 'reorder_quantity', 'Reorder Quantity');
    PERFORM localization.add_resource('ScrudResource', 'reorder_unit', 'Reorder Unit');
    PERFORM localization.add_resource('ScrudResource', 'reorder_unit_id', 'Reorder Unit Id');
    PERFORM localization.add_resource('ScrudResource', 'reporting_tax_authority', 'Reporting Tax Authority');
    PERFORM localization.add_resource('ScrudResource', 'reporting_tax_authority_id', 'Reporting Tax Authority Id');
    PERFORM localization.add_resource('ScrudResource', 'repository', 'Repository');
    PERFORM localization.add_resource('ScrudResource', 'resource', 'Resource');
    PERFORM localization.add_resource('ScrudResource', 'resource_id', 'Resource Id');
    PERFORM localization.add_resource('ScrudResource', 'resource_key', 'Resource Key');
    PERFORM localization.add_resource('ScrudResource', 'role_code', 'Role Code');
    PERFORM localization.add_resource('ScrudResource', 'role_id', 'Role Id');
    PERFORM localization.add_resource('ScrudResource', 'role_name', 'Role Name');
    PERFORM localization.add_resource('ScrudResource', 'rounding_decimal_places', 'Rounding Decimal Places');
    PERFORM localization.add_resource('ScrudResource', 'rounding_method', 'Rounding Method');
    PERFORM localization.add_resource('ScrudResource', 'rounding_method_code', 'Rounding Method Code');
    PERFORM localization.add_resource('ScrudResource', 'rounding_method_name', 'Rounding Method Name');
    PERFORM localization.add_resource('ScrudResource', 'sales_account_id', 'Sales Account Id');
    PERFORM localization.add_resource('ScrudResource', 'sales_discount_account_id', 'Sales Discount Account Id');
    PERFORM localization.add_resource('ScrudResource', 'sales_return_account_id', 'Sales Return Account Id');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax', 'Sales Tax');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_code', 'Sales Tax Code');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_detail_code', 'Sales Tax Detail Code');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_detail_id', 'Sales Tax Detail Id');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_detail_name', 'Sales Tax Detail Name');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_details_rate_chk', 'Rate should not be empty unless you have selected state or county tax. Similarly, you cannot provide both rate and choose to have state or county tax.');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_exempt', 'Sales Tax Exempt');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_exempt_code', 'Sales Tax Exempt Code');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_exempt_detail_id', 'Sales Tax Exempt Detail Id');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_exempt_id', 'Sales Tax Exempt Id');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_exempt_name', 'Sales Tax Exempt Name');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_exempts_price_to_chk', 'The field "PriceFrom" must be less than "PriceTo".');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_id', 'Sales Tax Id');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_name', 'Sales Tax Name');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_type', 'Sales Tax Type');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_type_code', 'Sales Tax Type Code');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_type_id', 'Sales Tax Type Id');
    PERFORM localization.add_resource('ScrudResource', 'sales_tax_type_name', 'Sales Tax Type Name');
    PERFORM localization.add_resource('ScrudResource', 'sales_team_code', 'Sales Team Code');
    PERFORM localization.add_resource('ScrudResource', 'sales_team_id', 'Sales Team Id');
    PERFORM localization.add_resource('ScrudResource', 'sales_team_name', 'Sales Team Name');
    PERFORM localization.add_resource('ScrudResource', 'sales_verification_limit', 'Sales Verification Limit');
    PERFORM localization.add_resource('ScrudResource', 'salesperson_bonus_setup_id', 'Salesperson Bonus Setup Id');
    PERFORM localization.add_resource('ScrudResource', 'salesperson_code', 'Salesperson Code');
    PERFORM localization.add_resource('ScrudResource', 'salesperson_id', 'Salesperson Id');
    PERFORM localization.add_resource('ScrudResource', 'salesperson_name', 'Salesperson Name');
    PERFORM localization.add_resource('ScrudResource', 'self_verification_limit', 'Self Verification Limit');
    PERFORM localization.add_resource('ScrudResource', 'selling_price', 'Selling Price');
    PERFORM localization.add_resource('ScrudResource', 'selling_price_includes_tax', 'Selling Price Includes Tax');
    PERFORM localization.add_resource('ScrudResource', 'shipper_code', 'Shipper Code');
    PERFORM localization.add_resource('ScrudResource', 'shipper_id', 'Shipper Id');
    PERFORM localization.add_resource('ScrudResource', 'shipper_name', 'Shipper Name');
    PERFORM localization.add_resource('ScrudResource', 'shipping_address_code', 'Shipping Address Code');
    PERFORM localization.add_resource('ScrudResource', 'shipping_address_id', 'Shipping Address Id');
    PERFORM localization.add_resource('ScrudResource', 'shipping_mail_type_code', 'Shipping Mail Type Code');
    PERFORM localization.add_resource('ScrudResource', 'shipping_mail_type_id', 'Shipping Mail Type Id');
    PERFORM localization.add_resource('ScrudResource', 'shipping_mail_type_name', 'Shipping Mail Type Name');
    PERFORM localization.add_resource('ScrudResource', 'shipping_package_shape_code', 'Shipping Package Shape Code');
    PERFORM localization.add_resource('ScrudResource', 'shipping_package_shape_id', 'Shipping Package Shape Id');
    PERFORM localization.add_resource('ScrudResource', 'shipping_package_shape_name', 'Shipping Package Shape Name');
    PERFORM localization.add_resource('ScrudResource', 'slab_name', 'Slab Name');
    PERFORM localization.add_resource('ScrudResource', 'sst_number', 'SST Number');
    PERFORM localization.add_resource('ScrudResource', 'starts_from', 'Starts From');
    PERFORM localization.add_resource('ScrudResource', 'state', 'State');
    PERFORM localization.add_resource('ScrudResource', 'state_code', 'State Code');
    PERFORM localization.add_resource('ScrudResource', 'state_id', 'State Id');
    PERFORM localization.add_resource('ScrudResource', 'state_name', 'State Name');
    PERFORM localization.add_resource('ScrudResource', 'state_sales_tax', 'State Sales Tax');
    PERFORM localization.add_resource('ScrudResource', 'state_sales_tax_code', 'State Sales Tax Code');
    PERFORM localization.add_resource('ScrudResource', 'state_sales_tax_id', 'State Sales Tax Id');
    PERFORM localization.add_resource('ScrudResource', 'state_sales_tax_name', 'State Sales Tax Name');
    PERFORM localization.add_resource('ScrudResource', 'statement_reference', 'Statement Reference');
    PERFORM localization.add_resource('ScrudResource', 'stock_details_unit_chk', 'Invalid unit provided.');
    PERFORM localization.add_resource('ScrudResource', 'store', 'Store');
    PERFORM localization.add_resource('ScrudResource', 'store_code', 'Store Code');
    PERFORM localization.add_resource('ScrudResource', 'store_id', 'Store Id');
    PERFORM localization.add_resource('ScrudResource', 'store_name', 'Store Name');
    PERFORM localization.add_resource('ScrudResource', 'store_type', 'Store Type');
    PERFORM localization.add_resource('ScrudResource', 'store_type_code', 'Store Type Code');
    PERFORM localization.add_resource('ScrudResource', 'store_type_id', 'Store Type Id');
    PERFORM localization.add_resource('ScrudResource', 'store_type_name', 'Store Type Name');
    PERFORM localization.add_resource('ScrudResource', 'stores_default_cash_account_id_chk', 'Please select a valid Cash or Bank AccountId.');
    PERFORM localization.add_resource('ScrudResource', 'stores_sales_tax_id_chk', 'The chosen SalesTaxId is invalid for this office.');
    PERFORM localization.add_resource('ScrudResource', 'street', 'Street');
    PERFORM localization.add_resource('ScrudResource', 'sub_total', 'Sub Total');
    PERFORM localization.add_resource('ScrudResource', 'sys_type', 'Sys Type');
    PERFORM localization.add_resource('ScrudResource', 'tax', 'Tax');
    PERFORM localization.add_resource('ScrudResource', 'tax_authority_code', 'Tax Authority Code');
    PERFORM localization.add_resource('ScrudResource', 'tax_authority_id', 'Tax Authority Id');
    PERFORM localization.add_resource('ScrudResource', 'tax_authority_name', 'Tax Authority Name');
    PERFORM localization.add_resource('ScrudResource', 'tax_base_amount', 'Tax Base Amount');
    PERFORM localization.add_resource('ScrudResource', 'tax_base_amount_type_code', 'Tax Base Amount Type Code');
    PERFORM localization.add_resource('ScrudResource', 'tax_base_amount_type_name', 'Tax Base Amount Type Name');
    PERFORM localization.add_resource('ScrudResource', 'tax_code', 'Tax Code');
    PERFORM localization.add_resource('ScrudResource', 'tax_exempt_type', 'Tax Exempt Type');
    PERFORM localization.add_resource('ScrudResource', 'tax_exempt_type_code', 'Tax Exempt Type Code');
    PERFORM localization.add_resource('ScrudResource', 'tax_exempt_type_id', 'Tax Exempt Type Id');
    PERFORM localization.add_resource('ScrudResource', 'tax_exempt_type_name', 'Tax Exempt Type Name');
    PERFORM localization.add_resource('ScrudResource', 'tax_id', 'Tax Id');
    PERFORM localization.add_resource('ScrudResource', 'tax_master', 'Tax Master');
    PERFORM localization.add_resource('ScrudResource', 'tax_master_code', 'Tax Master Code');
    PERFORM localization.add_resource('ScrudResource', 'tax_master_id', 'Tax Master Id');
    PERFORM localization.add_resource('ScrudResource', 'tax_master_name', 'Tax Master Name');
    PERFORM localization.add_resource('ScrudResource', 'tax_name', 'Tax Name');
    PERFORM localization.add_resource('ScrudResource', 'tax_rate_type', 'Tax Rate Type');
    PERFORM localization.add_resource('ScrudResource', 'tax_rate_type_code', 'Tax Rate Type Code');
    PERFORM localization.add_resource('ScrudResource', 'tax_rate_type_name', 'Tax Rate Type Name');
    PERFORM localization.add_resource('ScrudResource', 'tax_type_code', 'Tax Type Code');
    PERFORM localization.add_resource('ScrudResource', 'tax_type_id', 'Tax Type Id');
    PERFORM localization.add_resource('ScrudResource', 'tax_type_name', 'Tax Type Name');
    PERFORM localization.add_resource('ScrudResource', 'to_days', 'To Days');
    PERFORM localization.add_resource('ScrudResource', 'total', 'Total');
    PERFORM localization.add_resource('ScrudResource', 'total_duration', 'Total Duration');
    PERFORM localization.add_resource('ScrudResource', 'total_sales', 'Total Sales');
    PERFORM localization.add_resource('ScrudResource', 'tran_code', 'Tran Code');
    PERFORM localization.add_resource('ScrudResource', 'tran_type', 'Tran Type');
    PERFORM localization.add_resource('ScrudResource', 'unit', 'Unit');
    PERFORM localization.add_resource('ScrudResource', 'unit_code', 'Unit Code');
    PERFORM localization.add_resource('ScrudResource', 'unit_id', 'Unit Id');
    PERFORM localization.add_resource('ScrudResource', 'unit_name', 'Unit Name');
    PERFORM localization.add_resource('ScrudResource', 'url', 'Url');
    PERFORM localization.add_resource('ScrudResource', 'use_tax_collecting_account', 'Use Tax Collecting Account');
    PERFORM localization.add_resource('ScrudResource', 'use_tax_collecting_account_id', 'Use Tax Collecting Account Id');
    PERFORM localization.add_resource('ScrudResource', 'user_id', 'User Id');
    PERFORM localization.add_resource('ScrudResource', 'user_name', 'User Name');
    PERFORM localization.add_resource('ScrudResource', 'vacuum_count', 'Vacuum Count');
    PERFORM localization.add_resource('ScrudResource', 'valid_from', 'Valid From');
    PERFORM localization.add_resource('ScrudResource', 'valid_till', 'Valid Till');
    PERFORM localization.add_resource('ScrudResource', 'value', 'Value');
    PERFORM localization.add_resource('ScrudResource', 'value_date', 'Value Date');
    PERFORM localization.add_resource('ScrudResource', 'verify_gl_transactions', 'Verify Gl Transactions');
    PERFORM localization.add_resource('ScrudResource', 'verify_purchase_transactions', 'Verify Purchase Transactions');
    PERFORM localization.add_resource('ScrudResource', 'verify_sales_transactions', 'Verify Sales Transactions');
    PERFORM localization.add_resource('ScrudResource', 'weight_in_grams', 'Weight In Grams');
    PERFORM localization.add_resource('ScrudResource', 'width_in_centimeters', 'Width In Centimeters');
    PERFORM localization.add_resource('ScrudResource', 'zip_code', 'Zip Code');
    PERFORM localization.add_resource('Titles', 'AboutInitializingDayEnd', 'About Initializing Day End');
    PERFORM localization.add_resource('Titles', 'AboutYourOffice', 'About Your Office');
    PERFORM localization.add_resource('Titles', 'Access', 'Access');
    PERFORM localization.add_resource('Titles', 'AccessIsDenied', 'Access is denied.');
    PERFORM localization.add_resource('Titles', 'Account', 'Account');
    PERFORM localization.add_resource('Titles', 'AccountId', 'Account Id');
    PERFORM localization.add_resource('Titles', 'AccountMaster', 'Account Master');
    PERFORM localization.add_resource('Titles', 'AccountName', 'Account Name');
    PERFORM localization.add_resource('Titles', 'AccountNumber', 'Account Number');
    PERFORM localization.add_resource('Titles', 'AccountOverview', 'Account Overview');
    PERFORM localization.add_resource('Titles', 'AccountStatement', 'Account Statement');
    PERFORM localization.add_resource('Titles', 'Action', 'Action');
    PERFORM localization.add_resource('Titles', 'Actions', 'Actions');
    PERFORM localization.add_resource('Titles', 'Actual', 'Actual');
    PERFORM localization.add_resource('Titles', 'Add', 'Add');
    PERFORM localization.add_resource('Titles', 'AddNew', 'Add New');
    PERFORM localization.add_resource('Titles', 'Address', 'Address');
    PERFORM localization.add_resource('Titles', 'AddressAndContactInfo', 'Address & Contact Information');
    PERFORM localization.add_resource('Titles', 'AgeingSlabs', 'Ageing Slabs');
    PERFORM localization.add_resource('Titles', 'AgentBonusSlabAssignment', 'Bonus Slab Assignment');
    PERFORM localization.add_resource('Titles', 'AgentBonusSlabs', 'Bonus Slab for Salespersons');
    PERFORM localization.add_resource('Titles', 'Alerts', 'Alerts');
    PERFORM localization.add_resource('Titles', 'Amount', 'Amount');
    PERFORM localization.add_resource('Titles', 'AmountInBaseCurrency', 'Amount (In Base Currency)');
    PERFORM localization.add_resource('Titles', 'AmountInHomeCurrency', 'Amount (In Home Currency)');
    PERFORM localization.add_resource('Titles', 'AnalyzeDatabse', 'Analyze Databse');
    PERFORM localization.add_resource('Titles', 'Approve', 'Approve');
    PERFORM localization.add_resource('Titles', 'ApproveThisTransaction', 'Approve This Transaction');
    PERFORM localization.add_resource('Titles', 'ApprovedTransactions', 'Approved Transactions');
    PERFORM localization.add_resource('Titles', 'AreYouSure', 'Are you sure?');
    PERFORM localization.add_resource('Titles', 'AssignCashier', 'Assign Cashier');
    PERFORM localization.add_resource('Titles', 'AttachmentsPlus', 'Attachments (+)');
    PERFORM localization.add_resource('Titles', 'AutoVerificationPolicy', 'Autoverification Policy');
    PERFORM localization.add_resource('Titles', 'AutomaticallyApprovedByWorkflow', 'Automatically Approved by Workflow');
    PERFORM localization.add_resource('Titles', 'Back', 'Back');
    PERFORM localization.add_resource('Titles', 'BackToPreviousPage', 'Back to Previous Page');
    PERFORM localization.add_resource('Titles', 'BackupConsole', 'Backup Console');
    PERFORM localization.add_resource('Titles', 'BackupDatabase', 'Backup Database');
    PERFORM localization.add_resource('Titles', 'BackupNow', 'Backup Now');
    PERFORM localization.add_resource('Titles', 'Balance', 'Balance');
    PERFORM localization.add_resource('Titles', 'BalanceSheet', 'Balance Sheet');
    PERFORM localization.add_resource('Titles', 'BankAccounts', 'Bank Accounts');
    PERFORM localization.add_resource('Titles', 'BankTransactionCode', 'Bank Transaction Code');
    PERFORM localization.add_resource('Titles', 'BaseCurrency', 'Base Currency');
    PERFORM localization.add_resource('Titles', 'BaseUnitName', 'Base Unit Name');
    PERFORM localization.add_resource('Titles', 'BonusSlabDetails', 'Bonus Slab Details for Salespersons');
    PERFORM localization.add_resource('Titles', 'Book', 'Book');
    PERFORM localization.add_resource('Titles', 'Brand', 'Brand');
    PERFORM localization.add_resource('Titles', 'Brands', 'Brands');
    PERFORM localization.add_resource('Titles', 'Browse', 'Browse');
    PERFORM localization.add_resource('Titles', 'CSTNumber', 'CST Number');
    PERFORM localization.add_resource('Titles', 'Cancel', 'Cancel');
    PERFORM localization.add_resource('Titles', 'CashFlowHeading', 'Cash Flow Heading');
    PERFORM localization.add_resource('Titles', 'CashFlowHeadings', 'Cash Flow Headings');
    PERFORM localization.add_resource('Titles', 'CashFlowSetup', 'Cash Flow Setup');
    PERFORM localization.add_resource('Titles', 'CashRepositories', 'Cash Repositories');
    PERFORM localization.add_resource('Titles', 'CashRepository', 'Cash Repository');
    PERFORM localization.add_resource('Titles', 'CashRepositoryBalance', 'Cash Repository Balance');
    PERFORM localization.add_resource('Titles', 'CashTransaction', 'Cash Transaction');
    PERFORM localization.add_resource('Titles', 'ChangePassword', 'Change Password');
    PERFORM localization.add_resource('Titles', 'ChangeSideWhenNegative', 'Change Side When Negative');
    PERFORM localization.add_resource('Titles', 'ChartOfAccounts', 'Chart of Accounts');
    PERFORM localization.add_resource('Titles', 'Check', 'Check');
    PERFORM localization.add_resource('Titles', 'CheckAll', 'Check All');
    PERFORM localization.add_resource('Titles', 'Checklists', 'Checklists');
    PERFORM localization.add_resource('Titles', 'Clear', 'Clear');
    PERFORM localization.add_resource('Titles', 'Close', 'Close');
    PERFORM localization.add_resource('Titles', 'ClosedTransactions', 'Closed Transactions');
    PERFORM localization.add_resource('Titles', 'ClosingBalance', 'Closing Balance');
    PERFORM localization.add_resource('Titles', 'ClosingCredit', 'Closing Credit');
    PERFORM localization.add_resource('Titles', 'ClosingDebit', 'Closing Debit');
    PERFORM localization.add_resource('Titles', 'Comment', 'Comment');
    PERFORM localization.add_resource('Titles', 'CompoundItemDetails', 'Compound Item Details');
    PERFORM localization.add_resource('Titles', 'CompoundItems', 'Compound Items');
    PERFORM localization.add_resource('Titles', 'CompoundUnitsOfMeasure', 'Compound Units of Measure');
    PERFORM localization.add_resource('Titles', 'Confidential', 'Confidential');
    PERFORM localization.add_resource('Titles', 'ConfirmPassword', 'Confirm Password');
    PERFORM localization.add_resource('Titles', 'ConvertedtoBaseCurrency', 'Converted to Base Currency');
    PERFORM localization.add_resource('Titles', 'ConvertedtoHomeCurrency', 'Converted to Home Currency');
    PERFORM localization.add_resource('Titles', 'CostCenter', 'Cost Center');
    PERFORM localization.add_resource('Titles', 'CostCenters', 'Cost Centers');
    PERFORM localization.add_resource('Titles', 'Counters', 'Counters');
    PERFORM localization.add_resource('Titles', 'Counties', 'Counties');
    PERFORM localization.add_resource('Titles', 'Countries', 'Countries');
    PERFORM localization.add_resource('Titles', 'CountySalesTaxes', 'County Sales Taxes');
    PERFORM localization.add_resource('Titles', 'CreateaUserAccountforYourself', 'Create a User Account for Yourself');
    PERFORM localization.add_resource('Titles', 'CreatedOn', 'Created On');
    PERFORM localization.add_resource('Titles', 'Credit', 'Credit');
    PERFORM localization.add_resource('Titles', 'CreditAllowed', 'Credit Allowed');
    PERFORM localization.add_resource('Titles', 'CreditTotal', 'Credit Total');
    PERFORM localization.add_resource('Titles', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_resource('Titles', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_resource('Titles', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_resource('Titles', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_resource('Titles', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_resource('Titles', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_resource('Titles', 'Currencies', 'Currencies');
    PERFORM localization.add_resource('Titles', 'Currency', 'Currency');
    PERFORM localization.add_resource('Titles', 'CurrencyCode', 'Currency Code');
    PERFORM localization.add_resource('Titles', 'CurrencyName', 'Currency Name');
    PERFORM localization.add_resource('Titles', 'CurrencySymbol', 'Currency Symbol');
    PERFORM localization.add_resource('Titles', 'CurrentIP', 'Current IP');
    PERFORM localization.add_resource('Titles', 'CurrentLoginOn', 'Current Login On');
    PERFORM localization.add_resource('Titles', 'CurrentPassword', 'Current Password');
    PERFORM localization.add_resource('Titles', 'CurrentPeriod', 'Current Period');
    PERFORM localization.add_resource('Titles', 'CustomerCode', 'Customer Code');
    PERFORM localization.add_resource('Titles', 'CustomerName', 'Customer Name');
    PERFORM localization.add_resource('Titles', 'CustomerPanNumber', 'Customer PAN #');
    PERFORM localization.add_resource('Titles', 'CustomerPaysFees', 'Customer Pays Fees');
    PERFORM localization.add_resource('Titles', 'DatabaseBackups', 'Database Backups');
    PERFORM localization.add_resource('Titles', 'DatabaseStatistics', 'Database Statistics');
    PERFORM localization.add_resource('Titles', 'Date', 'Date');
    PERFORM localization.add_resource('Titles', 'Days', 'Days');
    PERFORM localization.add_resource('Titles', 'Debit', 'Debit');
    PERFORM localization.add_resource('Titles', 'DebitTotal', 'Debit Total');
    PERFORM localization.add_resource('Titles', 'DefaultAddress', 'Default Address');
    PERFORM localization.add_resource('Titles', 'DefaultCurrency', 'Default Currency');
    PERFORM localization.add_resource('Titles', 'DefaultReorderQuantityAbbreviated', 'Default Reorder Qty');
    PERFORM localization.add_resource('Titles', 'Definition', 'Definition');
    PERFORM localization.add_resource('Titles', 'Delete', 'Delete');
    PERFORM localization.add_resource('Titles', 'DeleteSelected', 'Delete Selected');
    PERFORM localization.add_resource('Titles', 'DeliverTo', 'Deliver To');
    PERFORM localization.add_resource('Titles', 'Department', 'Department');
    PERFORM localization.add_resource('Titles', 'Departments', 'Departments');
    PERFORM localization.add_resource('Titles', 'Difference', 'Difference');
    PERFORM localization.add_resource('Titles', 'DirectPurchase', 'Direct Purchase');
    PERFORM localization.add_resource('Titles', 'DirectSales', 'Direct Sales');
    PERFORM localization.add_resource('Titles', 'Discount', 'Discount');
    PERFORM localization.add_resource('Titles', 'Documentation', 'Documentation');
    PERFORM localization.add_resource('Titles', 'Download', 'Download');
    PERFORM localization.add_resource('Titles', 'DownloadSourceCode', 'Download Source Code');
    PERFORM localization.add_resource('Titles', 'DueDate', 'Due Date');
    PERFORM localization.add_resource('Titles', 'EODConsole', 'EOD Console');
    PERFORM localization.add_resource('Titles', 'ER', 'ER');
    PERFORM localization.add_resource('Titles', 'ERToBaseCurrency', 'Exchange Rate (To Base Currency)');
    PERFORM localization.add_resource('Titles', 'ERToHomeCurrency', 'Exchange Rate (To Home Currency)');
    PERFORM localization.add_resource('Titles', 'EditSelected', 'Edit Selected');
    PERFORM localization.add_resource('Titles', 'Email', 'Email');
    PERFORM localization.add_resource('Titles', 'EmailAddress', 'Email Address');
    PERFORM localization.add_resource('Titles', 'EmailThisDelivery', 'Email This Delivery');
    PERFORM localization.add_resource('Titles', 'EmailThisInvoice', 'Email This Invoice');
    PERFORM localization.add_resource('Titles', 'EmailThisNote', 'Email This Note');
    PERFORM localization.add_resource('Titles', 'EmailThisOrder', 'Email This Order');
    PERFORM localization.add_resource('Titles', 'EmailThisQuotation', 'Email This Quotation');
    PERFORM localization.add_resource('Titles', 'EmailThisReceipt', 'Email This Receipt');
    PERFORM localization.add_resource('Titles', 'EmailThisReturn', 'Email This Return');
    PERFORM localization.add_resource('Titles', 'EndOfDayOperation', 'End of Day Operation');
    PERFORM localization.add_resource('Titles', 'EnterBackupName', 'Enter Backup Name');
    PERFORM localization.add_resource('Titles', 'EnterNewPassword', 'Enter a New Password');
    PERFORM localization.add_resource('Titles', 'EnteredBy', 'Entered By');
    PERFORM localization.add_resource('Titles', 'Entities', 'Entities');
    PERFORM localization.add_resource('Titles', 'ExchangeRate', 'Exchange Rate');
    PERFORM localization.add_resource('Titles', 'Execute', 'Execute');
    PERFORM localization.add_resource('Titles', 'ExternalCode', 'External Code');
    PERFORM localization.add_resource('Titles', 'Factor', 'Factor');
    PERFORM localization.add_resource('Titles', 'Fax', 'Fax');
    PERFORM localization.add_resource('Titles', 'FilePath', 'File Path');
    PERFORM localization.add_resource('Titles', 'FinalDueAmountinBaseCurrency', 'Final Due Amount in Base Currency');
    PERFORM localization.add_resource('Titles', 'FirstPage', 'First Page');
    PERFORM localization.add_resource('Titles', 'FiscalYear', 'Fiscal Year');
    PERFORM localization.add_resource('Titles', 'Flag', 'Flag');
    PERFORM localization.add_resource('Titles', 'FlagBackgroundColor', 'Flag Background Color');
    PERFORM localization.add_resource('Titles', 'FlagDescription', 'You can mark this transaction with a flag, however you will not be able to see the flags created by other users.');
    PERFORM localization.add_resource('Titles', 'FlagForegroundColor', 'Flag Foreground Color');
    PERFORM localization.add_resource('Titles', 'FlagThisTransaction', 'Flag This Transaction');
    PERFORM localization.add_resource('Titles', 'FlaggedTransactions', 'Flagged Transactions');
    PERFORM localization.add_resource('Titles', 'Flags', 'Flags');
    PERFORM localization.add_resource('Titles', 'Frequencies', 'Frequencies');
    PERFORM localization.add_resource('Titles', 'From', 'From');
    PERFORM localization.add_resource('Titles', 'GLAdvice', 'GL Advice');
    PERFORM localization.add_resource('Titles', 'GLDetails', 'GL Details');
    PERFORM localization.add_resource('Titles', 'GLHead', 'GL Head');
    PERFORM localization.add_resource('Titles', 'Go', 'Go');
    PERFORM localization.add_resource('Titles', 'GoToTop', 'GoToTop');
    PERFORM localization.add_resource('Titles', 'GoodsReceiptNote', 'Goods Receipt Note');
    PERFORM localization.add_resource('Titles', 'GrandTotal', 'Grand Total');
    PERFORM localization.add_resource('Titles', 'Home', 'Home');
    PERFORM localization.add_resource('Titles', 'HomeCurrency', 'Home Currency');
    PERFORM localization.add_resource('Titles', 'HundredthName', 'Hundredth Name');
    PERFORM localization.add_resource('Titles', 'Id', 'Id');
    PERFORM localization.add_resource('Titles', 'InVerificationStack', 'In Verification Stack');
    PERFORM localization.add_resource('Titles', 'IncludeZeroBalanceAccounts', 'Include Zero Balance Accounts');
    PERFORM localization.add_resource('Titles', 'Industries', 'Industries');
    PERFORM localization.add_resource('Titles', 'InitializeDayEnd', 'Initialize Day End');
    PERFORM localization.add_resource('Titles', 'InstallMixERP', 'Install MixERP');
    PERFORM localization.add_resource('Titles', 'InstrumentCode', 'Instrument Code');
    PERFORM localization.add_resource('Titles', 'InterestApplicable', 'Interest Applicable');
    PERFORM localization.add_resource('Titles', 'InvalidDate', 'This is not a valid date.');
    PERFORM localization.add_resource('Titles', 'InvalidImage', 'This is not a valid image.');
    PERFORM localization.add_resource('Titles', 'InventoryAdvice', 'Inventory Advice');
    PERFORM localization.add_resource('Titles', 'InvoiceAmount', 'Invoice Amount');
    PERFORM localization.add_resource('Titles', 'InvoiceDetails', 'Invoice Details');
    PERFORM localization.add_resource('Titles', 'IsCash', 'Is Cash');
    PERFORM localization.add_resource('Titles', 'IsEmployee', 'Is Employee');
    PERFORM localization.add_resource('Titles', 'IsParty', 'Is Party');
    PERFORM localization.add_resource('Titles', 'IsSystemAccount', 'Is System Account');
    PERFORM localization.add_resource('Titles', 'ItemCode', 'Item Code');
    PERFORM localization.add_resource('Titles', 'ItemCostPrices', 'Item Cost Prices');
    PERFORM localization.add_resource('Titles', 'ItemGroup', 'Item Group');
    PERFORM localization.add_resource('Titles', 'ItemGroups', 'Item Groups');
    PERFORM localization.add_resource('Titles', 'ItemId', 'Item Id');
    PERFORM localization.add_resource('Titles', 'ItemName', 'Item Name');
    PERFORM localization.add_resource('Titles', 'ItemOverview', 'Item Overview');
    PERFORM localization.add_resource('Titles', 'ItemSellingPrices', 'Item Selling Prices');
    PERFORM localization.add_resource('Titles', 'ItemType', 'Item Type');
    PERFORM localization.add_resource('Titles', 'ItemTypes', 'Item Types');
    PERFORM localization.add_resource('Titles', 'Items', 'Items');
    PERFORM localization.add_resource('Titles', 'ItemsBelowReorderLevel', 'Items Below Reorder Level');
    PERFORM localization.add_resource('Titles', 'JournalVoucher', 'Journal Voucher');
    PERFORM localization.add_resource('Titles', 'JournalVoucherEntry', 'Journal Voucher Entry');
    PERFORM localization.add_resource('Titles', 'KeyColumnEmptyExceptionMessage', 'The property ''KeyColumn'' cannot be left empty.');
    PERFORM localization.add_resource('Titles', 'LCCredit', 'LC Credit');
    PERFORM localization.add_resource('Titles', 'LCDebit', 'LC Debit');
    PERFORM localization.add_resource('Titles', 'LastAccessedOn', 'Last Accessed On');
    PERFORM localization.add_resource('Titles', 'LastLoginIP', 'Last Login IP');
    PERFORM localization.add_resource('Titles', 'LastLoginOn', 'Last Login On');
    PERFORM localization.add_resource('Titles', 'LastPage', 'Last Page');
    PERFORM localization.add_resource('Titles', 'LastPaymentDate', 'Last Payment Date');
    PERFORM localization.add_resource('Titles', 'LastWrittenOn', 'Last Written On');
    PERFORM localization.add_resource('Titles', 'LateFees', 'Late Fees');
    PERFORM localization.add_resource('Titles', 'LeadSources', 'Lead Sources');
    PERFORM localization.add_resource('Titles', 'LeadStatuses', 'Lead Statuses');
    PERFORM localization.add_resource('Titles', 'LeadTime', 'Lead Time');
    PERFORM localization.add_resource('Titles', 'ListItems', 'List Items');
    PERFORM localization.add_resource('Titles', 'Load', 'Load');
    PERFORM localization.add_resource('Titles', 'LoggedInTo', 'Logged in to');
    PERFORM localization.add_resource('Titles', 'ManageProfile', 'Manage Profile');
    PERFORM localization.add_resource('Titles', 'MaximumCreditAmount', 'Maximum Credit Amount');
    PERFORM localization.add_resource('Titles', 'MaximumCreditPeriod', 'Maximum Credit Period');
    PERFORM localization.add_resource('Titles', 'MenuAccessPolicy', 'Menu Access Policy');
    PERFORM localization.add_resource('Titles', 'MenuCode', 'Menu Code');
    PERFORM localization.add_resource('Titles', 'MenuId', 'Menu Id');
    PERFORM localization.add_resource('Titles', 'MenuText', 'Menu Text');
    PERFORM localization.add_resource('Titles', 'MerchantFeeInPercent', 'Merchant Fee (In percent)');
    PERFORM localization.add_resource('Titles', 'MerchantFeeSetup', 'Merchant Fee Setup');
    PERFORM localization.add_resource('Titles', 'MergeBatchToGRN', 'Merge Batch to GRN');
    PERFORM localization.add_resource('Titles', 'MergeBatchToSalesDelivery', 'Merge Batch to Sales Delivery');
    PERFORM localization.add_resource('Titles', 'MergeBatchToSalesOrder', 'Merge Batch to Sales Order');
    PERFORM localization.add_resource('Titles', 'MixERPDocumentation', 'MixERP Documentation');
    PERFORM localization.add_resource('Titles', 'MixERPLinks', 'MixERP Links');
    PERFORM localization.add_resource('Titles', 'MixERPOnFacebook', 'MixERP on Facebook');
    PERFORM localization.add_resource('Titles', 'Name', 'Name');
    PERFORM localization.add_resource('Titles', 'NewJournalEntry', 'New Journal Entry');
    PERFORM localization.add_resource('Titles', 'NewPassword', 'New Password');
    PERFORM localization.add_resource('Titles', 'NextPage', 'Next Page');
    PERFORM localization.add_resource('Titles', 'No', 'No');
    PERFORM localization.add_resource('Titles', 'NonTaxableSales', 'Nontaxable Sales');
    PERFORM localization.add_resource('Titles', 'None', 'None');
    PERFORM localization.add_resource('Titles', 'NormallyDebit', 'Normally Debit');
    PERFORM localization.add_resource('Titles', 'NothingSelected', 'Nothing selected!');
    PERFORM localization.add_resource('Titles', 'Notifications', 'Notifications');
    PERFORM localization.add_resource('Titles', 'OK', 'OK');
    PERFORM localization.add_resource('Titles', 'Office', 'Office');
    PERFORM localization.add_resource('Titles', 'OfficeCode', 'Office Code');
    PERFORM localization.add_resource('Titles', 'OfficeInformation', 'Office Information');
    PERFORM localization.add_resource('Titles', 'OfficeName', 'Office Name');
    PERFORM localization.add_resource('Titles', 'OfficeNickName', 'Office Nick Name');
    PERFORM localization.add_resource('Titles', 'OfficeSetup', 'Office Setup');
    PERFORM localization.add_resource('Titles', 'OnlyNumbersAllowed', 'Please type a valid number.');
    PERFORM localization.add_resource('Titles', 'OpeningInventory', 'Opening Inventory');
    PERFORM localization.add_resource('Titles', 'OpportunityStages', 'Opportunity Stages');
    PERFORM localization.add_resource('Titles', 'OtherDetails', 'Other Details');
    PERFORM localization.add_resource('Titles', 'PANNumber', 'PAN Number');
    PERFORM localization.add_resource('Titles', 'PageN', 'Page {0}');
    PERFORM localization.add_resource('Titles', 'ParentAccount', 'Parent Account');
    PERFORM localization.add_resource('Titles', 'Parties', 'Parties');
    PERFORM localization.add_resource('Titles', 'Party', 'Party');
    PERFORM localization.add_resource('Titles', 'PartyCode', 'Party Code');
    PERFORM localization.add_resource('Titles', 'PartyName', 'Party Name');
    PERFORM localization.add_resource('Titles', 'PartySummary', 'Party Summary');
    PERFORM localization.add_resource('Titles', 'PartyType', 'Party Type');
    PERFORM localization.add_resource('Titles', 'PartyTypes', 'Party Types');
    PERFORM localization.add_resource('Titles', 'Password', 'Password');
    PERFORM localization.add_resource('Titles', 'PasswordUpdated', 'Password was updated.');
    PERFORM localization.add_resource('Titles', 'PaymentCards', 'Payment Cards');
    PERFORM localization.add_resource('Titles', 'PaymentTerms', 'Payment Terms');
    PERFORM localization.add_resource('Titles', 'PerformEODOperation', 'Perform EOD Operation');
    PERFORM localization.add_resource('Titles', 'PerformingEODOperation', 'Performing EOD Operation');
    PERFORM localization.add_resource('Titles', 'Phone', 'Phone');
    PERFORM localization.add_resource('Titles', 'PlaceReorderRequests', 'Place Reorder Request(s)');
    PERFORM localization.add_resource('Titles', 'PostTransaction', 'Post Transaction');
    PERFORM localization.add_resource('Titles', 'PostedBy', 'Posted By');
    PERFORM localization.add_resource('Titles', 'PostedDate', 'Posted Date');
    PERFORM localization.add_resource('Titles', 'PreferredSupplier', 'Preferred Supplier');
    PERFORM localization.add_resource('Titles', 'PreferredSupplierIdAbbreviated', 'Pref SupId');
    PERFORM localization.add_resource('Titles', 'Prepare', 'Prepare');
    PERFORM localization.add_resource('Titles', 'PreparedOn', 'Prepared On');
    PERFORM localization.add_resource('Titles', 'Preview', 'Preview');
    PERFORM localization.add_resource('Titles', 'PreviousBalance', 'Previous Balance');
    PERFORM localization.add_resource('Titles', 'PreviousCredit', 'Previous Credit');
    PERFORM localization.add_resource('Titles', 'PreviousDebit', 'Previous Debit');
    PERFORM localization.add_resource('Titles', 'PreviousPage', 'Previous Page');
    PERFORM localization.add_resource('Titles', 'PreviousPeriod', 'Previous Period  ');
    PERFORM localization.add_resource('Titles', 'Price', 'Price');
    PERFORM localization.add_resource('Titles', 'PriceType', 'Price Type');
    PERFORM localization.add_resource('Titles', 'Print', 'Print');
    PERFORM localization.add_resource('Titles', 'PrintGlEntry', 'Print GL Entry');
    PERFORM localization.add_resource('Titles', 'PrintReceipt', 'Print Receipt');
    PERFORM localization.add_resource('Titles', 'ProfitAndLossStatement', 'Profit & Loss Statement');
    PERFORM localization.add_resource('Titles', 'Progress', 'Progress');
    PERFORM localization.add_resource('Titles', 'PurchaseInvoice', 'Purchase Invoice');
    PERFORM localization.add_resource('Titles', 'PurchaseOrder', 'Purchase Order');
    PERFORM localization.add_resource('Titles', 'PurchaseReturn', 'Purchase Return');
    PERFORM localization.add_resource('Titles', 'PurchaseType', 'Purchase Type');
    PERFORM localization.add_resource('Titles', 'Quantity', 'Quantity');
    PERFORM localization.add_resource('Titles', 'QuantityAbbreviated', 'Qty');
    PERFORM localization.add_resource('Titles', 'QuantityOnHandAbbreviated', 'Qty (On Hand)');
    PERFORM localization.add_resource('Titles', 'Rate', 'Rate');
    PERFORM localization.add_resource('Titles', 'Reason', 'Reason');
    PERFORM localization.add_resource('Titles', 'Receipt', 'Receipt');
    PERFORM localization.add_resource('Titles', 'ReceiptAmount', 'Receipt Amount');
    PERFORM localization.add_resource('Titles', 'ReceiptCurrency', 'Receipt Currency');
    PERFORM localization.add_resource('Titles', 'ReceiptType', 'Receipt Type');
    PERFORM localization.add_resource('Titles', 'ReceivedAmountInaboveCurrency', 'Received Amount (In above Currency)');
    PERFORM localization.add_resource('Titles', 'ReceivedCurrency', 'Received Currency');
    PERFORM localization.add_resource('Titles', 'RecurringInvoiceSetup', 'Recurring Invoice Setup');
    PERFORM localization.add_resource('Titles', 'RecurringInvoices', 'Recurring Invoices');
    PERFORM localization.add_resource('Titles', 'ReferenceNumber', 'Reference Number');
    PERFORM localization.add_resource('Titles', 'ReferenceNumberAbbreviated', 'Ref#');
    PERFORM localization.add_resource('Titles', 'RefererenceNumberAbbreviated', 'Ref #');
    PERFORM localization.add_resource('Titles', 'RegistrationDate', 'Registration Date');
    PERFORM localization.add_resource('Titles', 'Reject', 'Reject');
    PERFORM localization.add_resource('Titles', 'RejectThisTransaction', 'Reject This Transaction');
    PERFORM localization.add_resource('Titles', 'RejectedTransactions', 'Rejected Transactions');
    PERFORM localization.add_resource('Titles', 'RememberMe', 'Remember Me');
    PERFORM localization.add_resource('Titles', 'ReorderLevel', 'Reorder Level');
    PERFORM localization.add_resource('Titles', 'ReorderQuantityAbbreviated', 'Reorder Qty');
    PERFORM localization.add_resource('Titles', 'ReorderUnitName', 'Reorder Unit Name');
    PERFORM localization.add_resource('Titles', 'RequiredField', 'This is a required field.');
    PERFORM localization.add_resource('Titles', 'RequiredFieldDetails', 'The fields marked with asterisk (*) are required.');
    PERFORM localization.add_resource('Titles', 'RequiredFieldIndicator', ' *');
    PERFORM localization.add_resource('Titles', 'Reset', 'Reset');
    PERFORM localization.add_resource('Titles', 'RestrictedTransactionMode', 'Restricted Transaction Mode');
    PERFORM localization.add_resource('Titles', 'RetainedEarnings', 'Retained Earnings');
    PERFORM localization.add_resource('Titles', 'Return', 'Return');
    PERFORM localization.add_resource('Titles', 'ReturnToView', 'Return to View');
    PERFORM localization.add_resource('Titles', 'Role', 'Role');
    PERFORM localization.add_resource('Titles', 'Roles', 'Roles');
    PERFORM localization.add_resource('Titles', 'RowNumber', 'Row Number');
    PERFORM localization.add_resource('Titles', 'RunningTotal', 'Running Total');
    PERFORM localization.add_resource('Titles', 'SSTNumber', 'SST Number');
    PERFORM localization.add_resource('Titles', 'SalesByMonthInThousands', 'Sales By Month (In Thousands)');
    PERFORM localization.add_resource('Titles', 'SalesByOfficeInThousands', 'Sales By Office (In Thousands)');
    PERFORM localization.add_resource('Titles', 'SalesDelivery', 'Sales Delivery');
    PERFORM localization.add_resource('Titles', 'SalesDeliveryNote', 'Delivery Note');
    PERFORM localization.add_resource('Titles', 'SalesInvoice', 'Sales Invoice');
    PERFORM localization.add_resource('Titles', 'SalesOrder', 'Sales Order');
    PERFORM localization.add_resource('Titles', 'SalesPersons', 'Salespersons');
    PERFORM localization.add_resource('Titles', 'SalesQuotation', 'Sales Quotation');
    PERFORM localization.add_resource('Titles', 'SalesReceipt', 'Sales Receipt');
    PERFORM localization.add_resource('Titles', 'SalesReturn', 'Sales Return');
    PERFORM localization.add_resource('Titles', 'SalesTaxDetails', 'Sales Tax Details');
    PERFORM localization.add_resource('Titles', 'SalesTaxExemptDetails', 'Sales Tax Exempt Details');
    PERFORM localization.add_resource('Titles', 'SalesTaxExempts', 'Sales Tax Exempts');
    PERFORM localization.add_resource('Titles', 'SalesTaxTypes', 'Sales Tax Types');
    PERFORM localization.add_resource('Titles', 'SalesTaxes', 'Sales Taxes');
    PERFORM localization.add_resource('Titles', 'SalesTeams', 'Sales Teams');
    PERFORM localization.add_resource('Titles', 'SalesType', 'Sales Type');
    PERFORM localization.add_resource('Titles', 'Salesperson', 'Salesperson');
    PERFORM localization.add_resource('Titles', 'Save', 'Save');
    PERFORM localization.add_resource('Titles', 'Saving', 'Saving');
    PERFORM localization.add_resource('Titles', 'Select', 'Select');
    PERFORM localization.add_resource('Titles', 'SelectCustomer', 'Select Customer');
    PERFORM localization.add_resource('Titles', 'SelectFlag', 'Select a Flag');
    PERFORM localization.add_resource('Titles', 'SelectLanguage', 'Select Language');
    PERFORM localization.add_resource('Titles', 'SelectOffice', 'Select Office');
    PERFORM localization.add_resource('Titles', 'SelectParty', 'Select Party');
    PERFORM localization.add_resource('Titles', 'SelectPaymentCard', 'Select Payment Card');
    PERFORM localization.add_resource('Titles', 'SelectStore', 'Select Store');
    PERFORM localization.add_resource('Titles', 'SelectSupplier', 'Select Supplier');
    PERFORM localization.add_resource('Titles', 'SelectUnit', 'Select Unit');
    PERFORM localization.add_resource('Titles', 'SelectUser', 'Select User');
    PERFORM localization.add_resource('Titles', 'SelectYourBranch', 'Select Your Branch');
    PERFORM localization.add_resource('Titles', 'Shipper', 'Shipper');
    PERFORM localization.add_resource('Titles', 'Shippers', 'Shippers');
    PERFORM localization.add_resource('Titles', 'ShippingAddress', 'Shipping Address');
    PERFORM localization.add_resource('Titles', 'ShippingAddressMaintenance', 'Shipping Address Maintenance');
    PERFORM localization.add_resource('Titles', 'ShippingAddresses', 'Shipping Address(es)');
    PERFORM localization.add_resource('Titles', 'ShippingCharge', 'Shipping Charge');
    PERFORM localization.add_resource('Titles', 'ShippingCompany', 'Shipping Company');
    PERFORM localization.add_resource('Titles', 'Show', 'Show');
    PERFORM localization.add_resource('Titles', 'ShowAll', 'Show All');
    PERFORM localization.add_resource('Titles', 'ShowCompact', 'Show Compact');
    PERFORM localization.add_resource('Titles', 'SignIn', 'Sign In');
    PERFORM localization.add_resource('Titles', 'SignOut', 'Sign Out');
    PERFORM localization.add_resource('Titles', 'SigningIn', 'Signing In');
    PERFORM localization.add_resource('Titles', 'Start', 'Start');
    PERFORM localization.add_resource('Titles', 'StateSalesTaxes', 'State Sales Taxes');
    PERFORM localization.add_resource('Titles', 'StatementOfCashFlows', 'Statement of Cash Flows');
    PERFORM localization.add_resource('Titles', 'StatementReference', 'Statement Reference');
    PERFORM localization.add_resource('Titles', 'States', 'States');
    PERFORM localization.add_resource('Titles', 'Status', 'Status');
    PERFORM localization.add_resource('Titles', 'StockAdjustment', 'Stock Adjustment');
    PERFORM localization.add_resource('Titles', 'StockTransaction', 'Stock Transaction');
    PERFORM localization.add_resource('Titles', 'StockTransferJournal', 'Stock Transfer Journal');
    PERFORM localization.add_resource('Titles', 'Store', 'Store');
    PERFORM localization.add_resource('Titles', 'StoreName', 'Store Name');
    PERFORM localization.add_resource('Titles', 'StoreTypes', 'Store Types');
    PERFORM localization.add_resource('Titles', 'Stores', 'Stores');
    PERFORM localization.add_resource('Titles', 'SubTotal', 'Sub Total');
    PERFORM localization.add_resource('Titles', 'SubmitBugs', 'Submit Bugs');
    PERFORM localization.add_resource('Titles', 'SupplierName', 'Supplier Name');
    PERFORM localization.add_resource('Titles', 'Support', 'Support');
    PERFORM localization.add_resource('Titles', 'TableEmptyExceptionMessage', 'The property ''Table'' cannot be left empty.');
    PERFORM localization.add_resource('Titles', 'TableSchemaEmptyExceptionMessage', 'The property ''TableSchema'' cannot be left empty.');
    PERFORM localization.add_resource('Titles', 'TaskCompletedSuccessfully', 'The task was completed successfully.');
    PERFORM localization.add_resource('Titles', 'Tax', 'Tax');
    PERFORM localization.add_resource('Titles', 'TaxAuthorities', 'Tax Authorities');
    PERFORM localization.add_resource('Titles', 'TaxExemptTypes', 'Tax Exempt Types');
    PERFORM localization.add_resource('Titles', 'TaxForm', 'Tax Form');
    PERFORM localization.add_resource('Titles', 'TaxMaster', 'Tax Master');
    PERFORM localization.add_resource('Titles', 'TaxRate', 'Tax Rate');
    PERFORM localization.add_resource('Titles', 'TaxSetup', 'Tax Setup');
    PERFORM localization.add_resource('Titles', 'TaxTotal', 'Tax Total');
    PERFORM localization.add_resource('Titles', 'TaxTypes', 'Tax Types');
    PERFORM localization.add_resource('Titles', 'TaxableSales', 'Taxable Sales');
    PERFORM localization.add_resource('Titles', 'Tel', 'Tel');
    PERFORM localization.add_resource('Titles', 'To', 'To');
    PERFORM localization.add_resource('Titles', 'TopSellingProductsOfAllTime', 'Top Selling Products of All Time');
    PERFORM localization.add_resource('Titles', 'Total', 'Total');
    PERFORM localization.add_resource('Titles', 'TotalDueAmount', 'Total Due Amount');
    PERFORM localization.add_resource('Titles', 'TotalDueAmountCurrentOffice', 'Total Due Amount (Current Office)');
    PERFORM localization.add_resource('Titles', 'TotalDueAmountInBaseCurrency', 'Total Due Amount (In Base Currency)');
    PERFORM localization.add_resource('Titles', 'TotalSales', 'Total Sales :');
    PERFORM localization.add_resource('Titles', 'TranCode', 'Tran Code');
    PERFORM localization.add_resource('Titles', 'TranId', 'Tran Id');
    PERFORM localization.add_resource('Titles', 'TranIdParameter', 'TranId: #{0}');
    PERFORM localization.add_resource('Titles', 'TransactionDate', 'Transaction Date');
    PERFORM localization.add_resource('Titles', 'TransactionDetails', 'Transaction Details');
    PERFORM localization.add_resource('Titles', 'TransactionStatement', 'TransactionStatement');
    PERFORM localization.add_resource('Titles', 'TransactionStatus', 'Transaction Status');
    PERFORM localization.add_resource('Titles', 'TransactionSummary', 'Transaction Summary');
    PERFORM localization.add_resource('Titles', 'TransactionTimestamp', 'Transaction Timestamp');
    PERFORM localization.add_resource('Titles', 'TransactionType', 'Transaction Type');
    PERFORM localization.add_resource('Titles', 'TransactionValue', 'Transaction Value');
    PERFORM localization.add_resource('Titles', 'TransferDetails', 'Transfer Details');
    PERFORM localization.add_resource('Titles', 'TrialBalance', 'Trial Balance');
    PERFORM localization.add_resource('Titles', 'Type', 'Type');
    PERFORM localization.add_resource('Titles', 'UncheckAll', 'Uncheck All');
    PERFORM localization.add_resource('Titles', 'Undo', 'Undo');
    PERFORM localization.add_resource('Titles', 'Unit', 'Unit');
    PERFORM localization.add_resource('Titles', 'UnitId', 'Unit Id');
    PERFORM localization.add_resource('Titles', 'UnitName', 'Unit Name');
    PERFORM localization.add_resource('Titles', 'UnitsOfMeasure', 'Units of Measure');
    PERFORM localization.add_resource('Titles', 'UnknownError', 'Operation failed due to an unknown error.');
    PERFORM localization.add_resource('Titles', 'Update', 'Update');
    PERFORM localization.add_resource('Titles', 'Upload', 'Upload');
    PERFORM localization.add_resource('Titles', 'UploadAttachments', 'Upload Attachments');
    PERFORM localization.add_resource('Titles', 'UploadAttachmentsForThisTransaction', 'Upload Attachments for This Transaction');
    PERFORM localization.add_resource('Titles', 'Url', 'Url');
    PERFORM localization.add_resource('Titles', 'Use', 'Use');
    PERFORM localization.add_resource('Titles', 'User', 'User');
    PERFORM localization.add_resource('Titles', 'UserId', 'User Id');
    PERFORM localization.add_resource('Titles', 'Username', 'Username');
    PERFORM localization.add_resource('Titles', 'Users', 'Users');
    PERFORM localization.add_resource('Titles', 'VacuumDatabase', 'Vacuum Database');
    PERFORM localization.add_resource('Titles', 'VacuumFullDatabase', 'Vacuum Database (Full)');
    PERFORM localization.add_resource('Titles', 'ValueDate', 'Value Date');
    PERFORM localization.add_resource('Titles', 'VerificationReason', 'Verification Reason');
    PERFORM localization.add_resource('Titles', 'VerifiedBy', 'Verified By');
    PERFORM localization.add_resource('Titles', 'VerifiedOn', 'VerifiedOn');
    PERFORM localization.add_resource('Titles', 'Verify', 'Verify');
    PERFORM localization.add_resource('Titles', 'View', 'View');
    PERFORM localization.add_resource('Titles', 'ViewAttachments', 'View Attachments');
    PERFORM localization.add_resource('Titles', 'ViewBackups', 'View Backups');
    PERFORM localization.add_resource('Titles', 'ViewCustomerCopy', 'View Customer Copy');
    PERFORM localization.add_resource('Titles', 'ViewEmptyExceptionMessage', 'The property ''View'' cannot be left empty.');
    PERFORM localization.add_resource('Titles', 'ViewSalesInovice', 'View Sales Invoice');
    PERFORM localization.add_resource('Titles', 'ViewSchemaEmptyExceptionMessage', 'The property ''ViewSchema'' cannot be left empty.');
    PERFORM localization.add_resource('Titles', 'ViewThisAdjustment', 'View This Adjustment');
    PERFORM localization.add_resource('Titles', 'ViewThisDelivery', 'View This Delivery');
    PERFORM localization.add_resource('Titles', 'ViewThisInvoice', 'View This Invoice');
    PERFORM localization.add_resource('Titles', 'ViewThisNote', 'View This Note');
    PERFORM localization.add_resource('Titles', 'ViewThisOrder', 'View This Order');
    PERFORM localization.add_resource('Titles', 'ViewThisQuotation', 'View This Quotation');
    PERFORM localization.add_resource('Titles', 'ViewThisReturn', 'View This Return');
    PERFORM localization.add_resource('Titles', 'ViewThisTransfer', 'View This Transfer');
    PERFORM localization.add_resource('Titles', 'VoucherVerification', 'Voucher Verification');
    PERFORM localization.add_resource('Titles', 'VoucherVerificationPolicy', 'Voucher Verification Policy');
    PERFORM localization.add_resource('Titles', 'Warning', 'Warning');
    PERFORM localization.add_resource('Titles', 'WhichBank', 'Which Bank?');
    PERFORM localization.add_resource('Titles', 'WithdrawTransaction', 'Withdraw Transaction');
    PERFORM localization.add_resource('Titles', 'WithdrawnTransactions', 'Withdrawn Transactions');
    PERFORM localization.add_resource('Titles', 'Workflow', 'Workflow');
    PERFORM localization.add_resource('Titles', 'WorldSalesStatistics', 'World Sales Statistics');
    PERFORM localization.add_resource('Titles', 'Yes', 'Yes');
    PERFORM localization.add_resource('Titles', 'YourName', 'Your Name');
    PERFORM localization.add_resource('Titles', 'YourOffice', 'Your Office');
    PERFORM localization.add_resource('Warnings', 'AccessIsDenied', 'Access is denied.');
    PERFORM localization.add_resource('Warnings', 'CannotCreateABackup', 'Sorry, cannot create a database backup at this time.');
    PERFORM localization.add_resource('Warnings', 'CannotCreateFlagTransactionTableNull', 'Cannot create or update flag. Transaction table was not provided.');
    PERFORM localization.add_resource('Warnings', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'Cannot create or update flag. Transaction table primary key was not provided.');
    PERFORM localization.add_resource('Warnings', 'CannotMergeAlreadyMerged', 'The selected transactions contain items which have already been merged. Please try again.');
    PERFORM localization.add_resource('Warnings', 'CannotMergeDifferentPartyTransaction', 'Cannot merge transactions of different parties into a single batch. Please try again.');
    PERFORM localization.add_resource('Warnings', 'CannotMergeIncompatibleTax', 'Cannot merge transactions having incompatible tax types. Please try again.');
    PERFORM localization.add_resource('Warnings', 'CannotMergeUrlNull', 'Cannot merge transactions. The merge url was not provided.');
    PERFORM localization.add_resource('Warnings', 'CashTransactionCannotContainBankInfo', 'A cash transaction cannot contain bank transaction details.');
    PERFORM localization.add_resource('Warnings', 'CompareAmountErrorMessage', 'The amount to should be greater than the amount from.');
    PERFORM localization.add_resource('Warnings', 'CompareDaysErrorMessage', 'From days should be less than to days.');
    PERFORM localization.add_resource('Warnings', 'ComparePriceErrorMessage', 'Price from should be less than price to.');
    PERFORM localization.add_resource('Warnings', 'ConfigurationError', 'Cannot continue the task. Please correct configuration issues.');
    PERFORM localization.add_resource('Warnings', 'ConfirmationPasswordDoesNotMatch', 'The confirmation password does not match with the new password.');
    PERFORM localization.add_resource('Warnings', 'CouldNotDetermineEmailImageParserType', 'Could not determine image parser type for email.');
    PERFORM localization.add_resource('Warnings', 'CouldNotRegisterJavascript', 'Could not register JavaScript on this page because the page instance was invalid or empty.');
    PERFORM localization.add_resource('Warnings', 'DateErrorMessage', 'Selected date is invalid.');
    PERFORM localization.add_resource('Warnings', 'DueFrequencyErrorMessage', 'Due days should be 0 if due frequency id is selected.');
    PERFORM localization.add_resource('Warnings', 'DuplicateEntry', 'Duplicate entry.');
    PERFORM localization.add_resource('Warnings', 'DuplicateFiles', 'Duplicate files.');
    PERFORM localization.add_resource('Warnings', 'GridViewEmpty', 'Gridview is empty.');
    PERFORM localization.add_resource('Warnings', 'InsufficientBalanceInCashRepository', 'There is no sufficient balance in the cash repository to process this transaction.');
    PERFORM localization.add_resource('Warnings', 'InsufficientStockWarning', 'Only {0} {1} of {2} left in stock.');
    PERFORM localization.add_resource('Warnings', 'InvalidAccount', 'Invalid account.');
    PERFORM localization.add_resource('Warnings', 'InvalidCashRepository', 'Invalid cash repository.');
    PERFORM localization.add_resource('Warnings', 'InvalidCostCenter', 'Invalid cost center.');
    PERFORM localization.add_resource('Warnings', 'InvalidData', 'Invalid data.');
    PERFORM localization.add_resource('Warnings', 'InvalidDate', 'Invalid date.');
    PERFORM localization.add_resource('Warnings', 'InvalidParameterName', 'Invalid Npgsql parameter name {0}. . Make sure that the parameter name matches with your command text.');
    PERFORM localization.add_resource('Warnings', 'InvalidParty', 'Invalid party.');
    PERFORM localization.add_resource('Warnings', 'InvalidPaymentTerm', 'Invalid payment term.');
    PERFORM localization.add_resource('Warnings', 'InvalidPriceType', 'Invalid price type.');
    PERFORM localization.add_resource('Warnings', 'InvalidReceiptMode', 'Invalid receipt mode.');
    PERFORM localization.add_resource('Warnings', 'InvalidSalesPerson', 'Invalid salesperson.');
    PERFORM localization.add_resource('Warnings', 'InvalidShippingCompany', 'Invalid shipping company.');
    PERFORM localization.add_resource('Warnings', 'InvalidStockTransaction', 'Invalid stock transaction.');
    PERFORM localization.add_resource('Warnings', 'InvalidStore', 'Invalid store.');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookInventoryDelivery', 'Invalid SubTranBook "Inventory Delivery"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookInventoryDirect', 'Invalid SubTranBook "Inventory Direct"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookInventoryInvoice', 'Invalid SubTranBook "Inventory Invoice"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookInventoryOrder', 'Invalid SubTranBook "Inventory Order"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookInventoryPayment', 'Invalid SubTranBook "Inventory Payment"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookInventoryQuotation', 'Invalid SubTranBook "Inventory Quotation"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookInventoryReceipt', 'Invalid SubTranBook "Inventory Receipt"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookInventoryReturn', 'Invalid SubTranBook "Inventory Return"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookPurchaseDelivery', 'Invalid SubTranBook "Purchase Delivery"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookPurchaseQuotation', 'Invalid SubTranBook "Purchase Quotation"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookPurchaseSuspense', 'Invalid SubTranBook "Purchase Suspense"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookPurchaseTransfer', 'Invalid SubTranBook "Purchase Transfer"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookSalesPayment', 'Invalid SubTranBook "Sales Payment"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookSalesSuspense', 'Invalid SubTranBook "Sales Suspense"');
    PERFORM localization.add_resource('Warnings', 'InvalidSubTranBookSalesTransfer', 'Invalid SubTranBook "Sales Transfer"');
    PERFORM localization.add_resource('Warnings', 'InvalidUser', 'Invalid user.');
    PERFORM localization.add_resource('Warnings', 'ItemErrorMessage', 'You have to select either item id or  compound item id.');
    PERFORM localization.add_resource('Warnings', 'LateFeeErrorMessage', 'Late fee id and late fee posting frequency id both should be either selected or not.');
    PERFORM localization.add_resource('Warnings', 'NegativeValueSupplied', 'Negative value supplied.');
    PERFORM localization.add_resource('Warnings', 'NewPasswordCannotBeOldPassword', 'New password can not be old password.');
    PERFORM localization.add_resource('Warnings', 'NoFileSpecified', 'No file specified.');
    PERFORM localization.add_resource('Warnings', 'NoTransactionToPost', 'No transaction to post.');
    PERFORM localization.add_resource('Warnings', 'NotAuthorized', 'You are not authorized to access this resource at this time.');
    PERFORM localization.add_resource('Warnings', 'NothingSelected', 'Nothing selected.');
    PERFORM localization.add_resource('Warnings', 'PasswordCannotBeEmpty', 'Password cannot be empty.');
    PERFORM localization.add_resource('Warnings', 'PleaseEnterCurrentPassword', 'Please enter your current password.');
    PERFORM localization.add_resource('Warnings', 'PleaseEnterNewPassword', 'Please enter a new password.');
    PERFORM localization.add_resource('Warnings', 'RecurringAmountErrorMessage', 'Recurring amount should not be less than or equal to 0.');
    PERFORM localization.add_resource('Warnings', 'ReferencingSidesNotEqual', 'The referencing sides are not equal.');
    PERFORM localization.add_resource('Warnings', 'RestrictedTransactionMode', 'This establishment does not allow transaction posting.');
    PERFORM localization.add_resource('Warnings', 'ReturnButtonUrlNull', 'Cannot return this entry. The return url was not provided.');
    PERFORM localization.add_resource('Warnings', 'UserIdOrPasswordIncorrect', 'User id or password incorrect.');
    PERFORM localization.add_localized_resource('CommonResource', 'de', 'DateMustBeGreaterThan', 'Ungültiges Datum. Muss größer als sein "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'de', 'DateMustBeLessThan', 'Ungültiges Datum. Muss kleiner sein als "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'de', 'InvalidDate', 'Dies ist kein gültiges Datum aus.');
    PERFORM localization.add_localized_resource('CommonResource', 'de', 'NoRecordFound', 'Leider kein Eintrag gefunden.');
    PERFORM localization.add_localized_resource('CommonResource', 'de', 'RequiredField', 'Dies ist ein Pflichtfeld.');
    PERFORM localization.add_localized_resource('CommonResource', 'es', 'DateMustBeGreaterThan', 'Fecha no válida. Debe ser mayor que "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'es', 'DateMustBeLessThan', 'Fecha no válida. Debe ser inferior a "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'es', 'InvalidDate', 'Fecha no válida.');
    PERFORM localization.add_localized_resource('CommonResource', 'es', 'NoRecordFound', 'Lo sentimos, no hay registro encontrado.');
    PERFORM localization.add_localized_resource('CommonResource', 'es', 'RequiredField', 'Este es un campo obligatorio.');
    PERFORM localization.add_localized_resource('CommonResource', 'fil', 'DateMustBeGreaterThan', 'Di-wastong petsa. Dapat ay mas higit "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'fil', 'DateMustBeLessThan', 'Di-wastong petsa. Dapat na mas mababa sa "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'fil', 'InvalidDate', 'Ito ay hindi isang wastong petsa.');
    PERFORM localization.add_localized_resource('CommonResource', 'fil', 'NoRecordFound', 'Paumanhin, walang nahanap na mga record.');
    PERFORM localization.add_localized_resource('CommonResource', 'fil', 'RequiredField', 'Ito ay isang kinakailangang patlang.');
    PERFORM localization.add_localized_resource('CommonResource', 'fr', 'DateMustBeGreaterThan', 'date non valide. Doit être supérieur à "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'fr', 'DateMustBeLessThan', 'Date non valide. Doit être inférieure à "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'fr', 'InvalidDate', 'Ce ne est pas une date valide.');
    PERFORM localization.add_localized_resource('CommonResource', 'fr', 'NoRecordFound', 'Désolé, aucun enregistrement n''a été trouvé.');
    PERFORM localization.add_localized_resource('CommonResource', 'fr', 'RequiredField', 'Ce est un champ obligatoire.');
    PERFORM localization.add_localized_resource('CommonResource', 'id', 'DateMustBeGreaterThan', 'Tanggal tidak valid. Harus lebih besar dari "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'id', 'DateMustBeLessThan', 'Tanggal tidak valid. Harus kurang dari "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'id', 'InvalidDate', 'Tarikh tidak sah.');
    PERFORM localization.add_localized_resource('CommonResource', 'id', 'NoRecordFound', 'Maaf, tidak ada catatan ditemukan.');
    PERFORM localization.add_localized_resource('CommonResource', 'id', 'RequiredField', 'Ini adalah bidang yang dibutuhkan.');
    PERFORM localization.add_localized_resource('CommonResource', 'ja', 'DateMustBeGreaterThan', '無効な日付。よりも大きくなければなりません"{0}"。');
    PERFORM localization.add_localized_resource('CommonResource', 'ja', 'DateMustBeLessThan', '無効な日付。未満でなければなりません"{0}"。');
    PERFORM localization.add_localized_resource('CommonResource', 'ja', 'InvalidDate', 'これは有効な日付ではありません。');
    PERFORM localization.add_localized_resource('CommonResource', 'ja', 'NoRecordFound', '申し訳ありませんが、レコードが見つかりませんでした。');
    PERFORM localization.add_localized_resource('CommonResource', 'ja', 'RequiredField', 'これは、必須フィールドです。');
    PERFORM localization.add_localized_resource('CommonResource', 'ms', 'DateMustBeGreaterThan', 'Tarikh tidak sah. Mesti lebih besar daripada "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'ms', 'DateMustBeLessThan', 'Tarikh tidak sah. Mesti kurang daripada "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'ms', 'InvalidDate', 'Tarikh tidak sah.');
    PERFORM localization.add_localized_resource('CommonResource', 'ms', 'NoRecordFound', 'Maaf, tiada rekod dijumpai.');
    PERFORM localization.add_localized_resource('CommonResource', 'ms', 'RequiredField', 'Ini adalah medan yang diperlukan.');
    PERFORM localization.add_localized_resource('CommonResource', 'nl', 'DateMustBeGreaterThan', 'Ongeldige datum. Moet groter zijn dan "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'nl', 'DateMustBeLessThan', 'Ongeldige datum. Moet kleiner zijn dan "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'nl', 'InvalidDate', 'Dit is geen geldige datum.');
    PERFORM localization.add_localized_resource('CommonResource', 'nl', 'NoRecordFound', 'sorry, geen record gevonden.');
    PERFORM localization.add_localized_resource('CommonResource', 'nl', 'RequiredField', 'Dit is een verplicht veld.');
    PERFORM localization.add_localized_resource('CommonResource', 'pt', 'DateMustBeGreaterThan', 'Data inválida. Deve ser maior que "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'pt', 'DateMustBeLessThan', 'Data inválida. Deve ser inferior a "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'pt', 'InvalidDate', 'Esta não é uma data válida.');
    PERFORM localization.add_localized_resource('CommonResource', 'pt', 'NoRecordFound', 'Desculpe, nenhum registro encontrado.');
    PERFORM localization.add_localized_resource('CommonResource', 'pt', 'RequiredField', 'Este é um campo obrigatório.');
    PERFORM localization.add_localized_resource('CommonResource', 'ru', 'DateMustBeGreaterThan', 'Неправильная дата. Должно быть больше, чем "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'ru', 'DateMustBeLessThan', 'Неправильная дата. Должна быть меньше, чем "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'ru', 'InvalidDate', 'Это не действительной датой.');
    PERFORM localization.add_localized_resource('CommonResource', 'ru', 'NoRecordFound', 'К сожалению, никаких записей не найдено.');
    PERFORM localization.add_localized_resource('CommonResource', 'ru', 'RequiredField', 'Это обязательное поле.');
    PERFORM localization.add_localized_resource('CommonResource', 'sv', 'DateMustBeGreaterThan', 'ogiltigt datum. Måste vara större än "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'sv', 'DateMustBeLessThan', 'Ogiltigt datum. Måste vara mindre än "{0}".');
    PERFORM localization.add_localized_resource('CommonResource', 'sv', 'InvalidDate', 'Detta är inte ett giltigt datum.');
    PERFORM localization.add_localized_resource('CommonResource', 'sv', 'NoRecordFound', 'Tyvärr, ingen post hittas.');
    PERFORM localization.add_localized_resource('CommonResource', 'sv', 'RequiredField', 'Detta är ett obligatoriskt fält.');
    PERFORM localization.add_localized_resource('CommonResource', 'zh', 'DateMustBeGreaterThan', '无效的日期。必须大于“{0}”。');
    PERFORM localization.add_localized_resource('CommonResource', 'zh', 'DateMustBeLessThan', '无效的日期。必须小于“{0}”。');
    PERFORM localization.add_localized_resource('CommonResource', 'zh', 'InvalidDate', '无效的日期。');
    PERFORM localization.add_localized_resource('CommonResource', 'zh', 'NoRecordFound', '对不起，没有找到记录。');
    PERFORM localization.add_localized_resource('CommonResource', 'zh', 'RequiredField', '这是一个必填字段。');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P1301', 'Können keine Zinsen. Die Anzahl der Tage in einem Jahr nicht zur Verfügung gestellt.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3000', 'Ungültige Daten.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3001', 'Ungültiger Benutzername.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3005', 'Das Passwort darf nicht leer sein.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3006', 'Bitte geben Sie ein neues Kennwort ein.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3007', 'Ungültige Wertstellung.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3008', 'Ungültiges Datum.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3009', 'Ungültige Zeitraum angegeben.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3010', 'Ungültige Büro-ID.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3011', 'Ungültige Büro.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3012', 'Ungültige Laden.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3013', 'Ungültige Cash-Repository.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3050', 'Ungültige Partei.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3051', 'Invalid item.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3052', 'Ungültige Einheit.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3053', 'Ungültige oder inkompatibel Einheit.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3054', 'Die Meldeeinheit ist mit der Basiseinheit nicht kompatibel.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3055', 'Ungültige Wechselkurs.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3101', 'Ungültige LoginId.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3105', 'Ihr aktuelles Passwort ist nicht korrekt.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3201', 'Artikel / Gerät Missverhältnis.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3202', 'Steuerformular Mismatch.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3301', 'Ungültige Menge.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3302', 'Ungültige Transaktions-ID.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P3501', 'Die Spalte account_id darf nicht null sein.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P4010', 'Wechselkurse zwischen den Währungen, wurde nicht gefunden.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P4020', 'Dieser Artikel wird nicht mit dieser Transaktion zugeordnet ist.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P4030', 'Keine Überprüfung Politik für diesen Benutzer gefunden.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P4031', 'Bitte fragen Sie eine andere Person, um die Transaktion zu überprüfen.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5000', 'Referenzieren Seiten sind nicht gleich.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5001', 'Negative Lager ist nicht erlaubt.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5002', 'Veröffentlichung dieser Transaktion hätte einen negativen Cash-Balance herzustellen.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5010', 'Vergangenheit datiert Transaktionen sind nicht gestattet.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5100', 'Diese Einrichtung erlaubt keine Transaktions Beitrag.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5101', 'Kann Transaktion während eingeschränkte Transaktionsmodus nicht erlaubt.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5102', 'Am Ende des Tages Operation wurde bereits durchgeführt.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5103', 'Vergangenheit datiert Transaktionen Überprüfung Warteschlange.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5104', 'Bitte überprüfen Transaktionen, bevor am Ende des Tages den Betrieb.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5110', 'Sie können keine Umsatzsteuer Informationen für nicht steuerpflichtige Umsätze.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5111', 'Ungültige Banktransaktionsinformationen zur Verfügung gestellt.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5112', 'Ungültige Kreditkarteninformationen.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5113', 'Konnte nicht gefunden werden Sie ein Konto, um Kaufgebühr Ausgaben veröffentlichen.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5201', 'Eine Aktie Einstellung Eintrag kann nicht Debit Position (en) enthalten.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5202', 'Ein Element kann nur einmal in einem Geschäft angezeigt.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5203', 'Der zurückgegebene Menge nicht größer als die tatsächliche Menge ist.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5204', 'Der zurückgegebene Betrag nicht größer als die tatsächliche Menge ist.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5301', 'Ungültig ist oder abgelehnt Transaktion.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5500', 'Unzureichende Artikelmenge.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5800', 'Löschen einer Transaktion ist nicht erlaubt. Markieren Sie die Transaktion statt abgelehnt.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5901', 'Bitte fragen Sie eine andere Person, um die Transaktion Sie auf dem Laufenden zu überprüfen.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5910', 'Selbstüberprüfung überschritten. Die Transaktion wurde nicht überprüft.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5911', 'Der Umsatz Prüfung überschritten. Die Transaktion wurde nicht überprüft.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5912', 'Kaufprüfung überschritten. Die Transaktion wurde nicht überprüft.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P5913', 'GL Überprüfung überschritten. Die Transaktion wurde nicht überprüft.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P6010', 'Ungültige Konfiguration: COGS Verfahren.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P8001', 'P / L Rechnung Geschäftsstelle (n) mit unterschiedlichen Basiswährungen kann nicht produzieren.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P8002', 'Kann Kontenbilanz der Geschäftsstelle (n) mit unterschiedlichen Basiswährungen nicht zu produzieren.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P8003', 'Sie können nicht eine andere Währung auf dem zugeordneten Sachkonto.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P8101', 'EOD Operation wurde bereits initialisiert.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P8501', 'Nur eine Spalte erforderlich.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P8502', 'Kann Spalte nicht aktualisiert werden.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P8990', 'Sie sind nicht berechtigt, Systemkonten zu ändern.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P8991', 'Sie sind nicht berechtigt, Systemkonten hinzuzufügen.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P8992', 'Ein sys Benutzer kein Passwort.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P9001', 'Zugriff wird verweigert.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P9010', 'Zugriff wird verweigert. Sie sind nicht berechtigt, diese Transaktion zu schreiben.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P9011', 'Zugriff wird verweigert. Ungültige Werte geliefert.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P9012', 'Zugriff verweigert! Eine Aktie Anpassung Transaktion kann nicht Verweise mehreren Niederlassungen.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P9013', 'Zugriff verweigert! Eine Aktie Zeitschrift Transaktion kann nicht Verweise mehreren Niederlassungen.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P9014', 'Zugriff wird verweigert. Sie können nicht überprüfen, eine Transaktion von einem anderen Büro.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P9015', 'Zugriff wird verweigert. Sie können nicht überprüfen, Vergangenheit oder futuer vom Transaktion.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P9016', 'Zugriff wird verweigert. Sie don''''t haben das Recht, die Transaktion zu überprüfen.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P9017', 'Zugriff wird verweigert. Sie don''''t haben das Recht, die Transaktion zu widerrufen.');
    PERFORM localization.add_localized_resource('DbErrors', 'de', 'P9201', 'Acess verweigert. Sie können die "transaction_details" Tabelle nicht aktualisieren.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P1301', 'No se puede calcular el interés. No se proporcionó el número de días en un año.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3000', 'Los datos no válidos.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3001', 'Nombre de usuario válido.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3005', 'La contraseña no puede estar vacío.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3006', 'Por favor ingrese su nueva contraseña.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3007', 'Fecha valor no válido.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3008', 'Fecha no válida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3009', 'Período especificado no es válido.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3010', 'Identificación del despacho no es válida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3011', 'La oficina no es válida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3012', 'Tienda no válida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3013', 'Depósito de efectivo no es válida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3050', 'Partido válido.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3051', 'Elemento no válido.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3052', 'Unidad no válida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3053', 'Unidad no válida o incompatible.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3054', 'La unidad de reordenación es incompatible con la unidad base.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3055', 'Tipo de cambio no es válida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3101', 'Loginid válido.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3105', 'Su contraseña actual es incorrecto.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3201', 'Artículo / desajuste unidad.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3202', 'Formulario de impuestos desajuste.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3301', 'Cantidad no válida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3302', 'Identificación de la transacción no válida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P3501', 'El account_id columna no puede ser nulo.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P4010', 'No se encontró el tipo de cambio entre las monedas.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P4020', 'Este artículo no está asociada con esta transacción.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P4030', 'Sin política de verificación encontrado para este usuario.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P4031', 'Por favor pedir a otra persona para verificar su transacción.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5000', 'Hacer referencia a los lados no son iguales.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5001', 'No se permite social negativo.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5002', 'Publicar esta transacción produciría un saldo de caja negativo.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5010', 'Transacciones con fecha del pasado no están permitidos.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5100', 'Este establecimiento no permite la publicación de transacciones.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5101', 'No se puede publicar la transacción durante el modo de operación restringida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5102', 'Fin de la operación de día ya se realizó.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5103', 'Transacciones con fecha del pasado en la cola de verificación.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5104', 'Por favor, verificar las transacciones antes de realizar la operación final de día.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5110', 'No se puede proporcionar información impuesto sobre las ventas para las ventas de los no imponibles.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5111', 'Información de la transacción bancaria inválida proporcionada.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5112', 'Información de tarjeta de pago válida.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5113', 'No se pudo encontrar una cuenta para publicar los gastos de honorarios de comerciante.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5201', 'Una entrada de ajuste de valores no puede contener punto (s) de débito.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5202', 'Un elemento puede aparecer sólo una vez en una tienda.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5203', 'La cantidad devuelta no puede ser mayor que la cantidad real.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5204', 'El importe devuelto no puede ser mayor que la cantidad real.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5301', 'Transacción no válida o rechazado.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5500', 'Cantidad de artículos insuficiente.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5800', 'Eliminación de una transacción no está permitido. Marque la transacción rechazada en su lugar.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5901', 'Por favor pedir a otra persona para verificar la transacción informados.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5910', 'Límite de verificación Auto superó. La transacción no se verificó.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5911', 'Límite de verificación de las ventas superó. La transacción no se verificó.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5912', 'Límite de verificación Compra superó. La transacción no se verificó.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P5913', 'Límite de verificación GL superó. La transacción no se verificó.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P6010', 'Configuración no válida: método de costo de ventas.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P8001', 'No se puede producir declaración P / L de oficina (s) con diferentes monedas base.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P8002', 'No se puede producir balance de comprobación de oficina (s) con diferentes monedas base.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P8003', 'No se puede tener una moneda diferente de la cuenta GL asignada.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P8101', 'Operación EOD ya se ha inicializado.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P8501', 'Sólo se requiere una columna.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P8502', 'No se puede actualizar la columna.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P8990', 'No se le permite cambiar las cuentas del sistema.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P8991', 'No se le permite añadir cuentas del sistema.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P8992', 'Un usuario sys no puede tener una contraseña.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P9001', 'Acceso denegado.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P9010', 'Acceso denegado. Usted no está autorizado para publicar esta transacción.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P9011', 'Acceso denegado. Los valores no válidos suministrados.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P9012', 'Acceso denegado! Una transacción de ajuste de valores no puede referencias múltiples ramas.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P9013', 'Acceso denegado! Una transacción de acciones revista no puede referencias múltiples ramas.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P9014', 'Acceso denegado. No se puede verificar una transacción de otra oficina.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P9015', 'Acceso denegado. No se puede verificar transacción pasado o futuer fecha.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P9016', 'Acceso denegado. Usted don''''t tener el derecho de verificar la transacción.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P9017', 'Acceso denegado. Usted don''''t tener el derecho de retirar la transacción.');
    PERFORM localization.add_localized_resource('DbErrors', 'es', 'P9201', 'Acess denegado. No se puede actualizar la tabla "transaction_details".');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P1301', 'Hindi ma-makalkula ang interes. Ang bilang ng mga araw sa isang taon ay hindi ibinigay.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3000', 'Di-wastong data.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3001', 'Hindi wastong user name.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3005', 'Hindi maaaring walang laman ang password.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3006', 'Mangyaring magbigay ng bagong password.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3007', 'Di-wastong petsa halaga.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3008', 'Di-wastong petsa.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3009', 'Di-wastong panahon ng tinukoy.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3010', 'Di-wastong id ng opisina.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3011', 'Di-wastong opisina.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3012', 'Di-wastong store.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3013', 'Di-wastong cash imbakan.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3050', 'Di-wastong party.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3051', 'Di-wastong item.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3052', 'Di-wastong unit.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3053', 'Di-wasto o hindi tugma unit.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3054', 'Ang Muling mag-order yunit ay hindi tugma sa ang pangunahing yunit.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3055', 'Di-wastong halaga ng palitan.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3101', 'Di-wastong LoginId.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3105', 'Ang iyong kasalukuyang password ay hindi tama.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3201', 'Item / yunit ng hindi pagtutugma.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3202', 'Maling pagtutugma ng form sa buwis.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3301', 'Di-wastong dami.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3302', 'Di-wastong id transaksyon.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P3501', 'Ang hanay ng ACCOUNT_ID ay hindi maaaring maging null.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P4010', 'Exchange rate sa pagitan ng mga pera ay hindi natagpuan.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P4020', 'Ang item na ito ay hindi nauugnay sa transaksyong ito.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P4030', 'Walang patakaran sa pag-verify natagpuan para sa user na ito.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P4031', 'Mangyaring hilingin sa ibang tao upang i-verify ang iyong transaksyon.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5000', 'Na tumutukoy sa gilid ay hindi katumbas.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5001', 'Negatibong mga stock ay hindi pinapayagan.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5002', 'Pagpo-post ng transaksyong ito ay makabuo ng isang negatibong balanse cash.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5010', 'Nakalipas na napetsahan transaksyon ay hindi pinahihintulutan.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5100', 'Hindi pinapayagan ng establisimentong ito sa pag-post ng transaksyon.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5101', 'Hindi maaaring mag-post ng transaksyon sa panahon ng pinaghihigpitang mode transaksyon.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5102', 'Dulo ng araw operasyon ay na gumanap.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5103', 'Nakalipas na napetsahan ang mga transaksyon sa queue ng pag-verify.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5104', 'Paki-verify ang mga transaksyon bago isagawa pagtatapos ng araw na operasyon.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5110', 'Hindi ka maaaring magbigay ng impormasyon sa buwis sa pagbebenta para sa mga non taxable benta.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5111', 'Impormasyon Di-wastong bank transaksyon na ibinigay.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5112', 'Di-wastong impormasyon ng card sa pagbabayad.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5113', 'Hindi mahanap ang isang account upang mag-post ng gastos bayad sa merchant.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5201', 'Ang isang adjustment sa stock entry ay hindi maaaring maglaman ng debit (mga) item.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5202', 'Maaaring lumitaw ang isang item nang isang beses lamang sa isang tindahan.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5203', 'Ang ibinalik na dami ay hindi maaaring maging mas malaki kaysa sa aktwal na dami.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5204', 'Ang ibinalik na halaga ay hindi maaaring maging mas malaki kaysa sa aktwal na halaga.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5301', 'Di-wasto o tinanggihan transaksyon.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5500', 'Hindi sapat na dami ng item.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5800', 'Ang pagtatanggal ng isang transaksyon ay hindi pinapayagan. Markahan ang transaksyon bilang tinanggihan halip.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5901', 'Mangyaring hilingin sa ibang tao upang i-verify ang transaksyon iyong na-post.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5910', 'Lumagpas na sa limitasyon ng pag-verify sa sarili. Ang transaksiyon ay hindi na-verify.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5911', 'Lumagpas na sa limitasyon ng pag-verify benta. Ang transaksiyon ay hindi na-verify.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5912', 'Lumagpas na sa limitasyon ng pag-verify pagbili. Ang transaksiyon ay hindi na-verify.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P5913', 'Lumagpas na limitasyon sa GL pag-verify. Ang transaksiyon ay hindi na-verify.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P6010', 'Di-wastong configuration: pamamaraan COGS.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P8001', 'Hindi maaaring mag-produce P / L pahayag ng (mga) opisina pagkakaroon ng iba''t ibang mga batayang pera.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P8002', 'Hindi maaaring mag-produce pagsubok balanse ng (mga) opisina pagkakaroon ng iba''t ibang mga batayang pera.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P8003', 'Hindi ka maaaring magkaroon ng ibang pera sa nai-map GL account.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P8101', 'EOD operasyon ay nasimulan.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P8501', 'Haligi Isa lamang ang kailangan.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P8502', 'Hindi ma-update ang hanay.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P8990', 'Hindi ka pinahihintulutang baguhin ang sistema ng mga account.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P8991', 'Ikaw ay hindi pinahihintulutang magdagdag ng sistema account.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P8992', 'Ang isang gumagamit sys ay hindi maaaring magkaroon ng isang password.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P9001', 'Tinanggihan ang access.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P9010', 'Tinanggihan ang access. Wala kang pahintulot na mag-post sa transaksyong ito.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P9011', 'Tinanggihan ang access. Hindi wastong mga halaga binigay.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P9012', 'Tinanggihan ang access! Hindi isang adjustment sa stock transaksyon maaari sanggunian ng maramihang mga sanga.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P9013', 'Tinanggihan ang access! Hindi isang stock journal transaksyon maaari sanggunian ng maramihang mga sanga.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P9014', 'Tinanggihan ang access. Hindi mo maaaring i-verify ang transaksyon ng isa pang opisina.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P9015', 'Tinanggihan ang access. Hindi mo maaaring i-verify ang nakaraan o futuer na may petsang transaksyon.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P9016', 'Tinanggihan ang access. Don''''t kang magkaroon ng karapatan upang i-verify ang transaksyon.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P9017', 'Tinanggihan ang access. Don''''t mo ay may karapatan para bawiin ang mga transaksyon.');
    PERFORM localization.add_localized_resource('DbErrors', 'fil', 'P9201', '-Access ay tinanggihan. Hindi mo maaaring i-update ang talahanayan "transaction_details".');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P1301', 'Vous ne pouvez pas calculer les intérêts. Le nombre de jours dans une année n''a pas été fourni.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3000', 'Des données non valides.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3001', 'Nom d''utilisateur valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3005', 'Mot de passe ne peut pas être vide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3006', 'Se il vous plaît fournir un nouveau mot de passe.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3007', 'Invalid date de valeur.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3008', 'Date non valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3009', 'Période spécifié invalide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3010', 'Invalid id de bureau.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3011', 'Bureau non valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3012', 'Magasin non valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3013', 'Invalid référentiel de trésorerie.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3050', 'Partie non valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3051', 'Élément non valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3052', 'Unité non valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3053', 'Unité non valide ou incompatible.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3054', 'L''unité de réapprovisionnement est incompatible avec l''unité de base.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3055', 'Taux de change non valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3101', 'LoginID valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3105', 'Votre mot de passe actuel est incorrecte.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3201', 'Point / unité décalage.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3202', 'Forme impôt décalage.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3301', 'Quantité non valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3302', 'Invalid id de transaction.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P3501', 'Le account_id de colonne ne peut pas être nulle.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P4010', 'Taux de change entre les devises n''a pas été trouvé.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P4020', 'Cet article ne est pas associé à cette transaction.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P4030', 'Aucune politique de vérification trouvé pour cet utilisateur.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P4031', 'Se il vous plaît demander à quelqu''un de vérifier votre transaction.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5000', 'Référencement côtés ne sont pas égaux.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5001', 'Stock négatif ne est pas autorisé.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5002', 'L''affichage de cette transaction serait de produire un solde de trésorerie négatif.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5010', 'Datées opérations passées ne sont pas autorisés.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5100', 'Cet établissement ne permet pas l''affichage de la transaction.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5101', 'Vous ne pouvez pas poster transaction pendant le mode de transaction restreint.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5102', 'Fin de l''opération de jour a déjà été effectuée.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5103', 'Transactions datées passées en attente de vérification.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5104', 'Se il vous plaît vérifier les transactions avant d''effectuer fin de l''opération de jour.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5110', 'Vous ne pouvez pas fournir des informations de la taxe de vente pour les ventes non imposables.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5111', 'Informations de transaction bancaire fourni non valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5112', 'Informations de carte de paiement valide.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5113', 'Impossible de trouver un compte pour publier dépenses de frais de marchand.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5201', 'Une entrée d''ajustement des stocks ne peut pas contenir article (s) de débit.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5202', 'Un élément peut apparaître qu''une seule fois dans un magasin.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5203', 'La quantité retournée ne peut pas être supérieure à la quantité réelle.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5204', 'Le montant remboursé ne peut pas être supérieure à montant réel.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5301', 'Transaction invalide ou rejetée.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5500', 'Insuffisante quantité d''articles.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5800', 'Suppression d''une transaction ne est pas autorisé. Marquez la transaction comme rejetée place.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5901', 'Se il vous plaît demander à quelqu''un de vérifier la transaction que vous avez posté.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5910', 'Limite de l''autonomie de vérification dépassé. La transaction n''a pas été vérifiée.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5911', 'Limite de vérification des ventes dépassée. La transaction n''a pas été vérifiée.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5912', 'Limite de vérification d''achat dépassée. La transaction n''a pas été vérifiée.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P5913', 'Limite de vérification GL dépassée. La transaction n''a pas été vérifiée.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P6010', 'Configuration invalide: méthode fondée sur le CMV.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P8001', 'Vous ne pouvez pas produire des P / L déclaration du mandat (s) ayant des monnaies de base.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P8002', 'Vous ne pouvez pas produire balance du mandat (s) ayant des monnaies de base.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P8003', 'Vous ne pouvez pas avoir une monnaie différente sur le compte GL mappé.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P8101', 'Opération EOD était déjà initialisé.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P8501', 'Une seule colonne est nécessaire.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P8502', 'Vous ne pouvez pas mettre à jour la colonne.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P8990', 'Vous n''êtes pas autorisé à modifier les comptes du système.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P8991', 'Vous n''êtes pas autorisé à ajouter des comptes du système.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P8992', 'Un utilisateur système ne peut pas avoir un mot de passe.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P9001', 'L''accès est refusé.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P9010', 'L''accès est refusé. Vous n''êtes pas autorisé à afficher cette transaction.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P9011', 'L''accès est refusé. Les valeurs incorrectes fournies.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P9012', 'Accès refusé! Une transaction d''ajustement des stocks ne peut pas références multiples branches.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P9013', 'Accès refusé! Une transaction stock revue ne peut références multiples branches.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P9014', 'L''accès est refusé. Vous ne pouvez pas vérifier une transaction d''un autre bureau.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P9015', 'L''accès est refusé. Vous ne pouvez pas vérifier transaction passée ou du futuer.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P9016', 'L''accès est refusé. Vous n''''avez pas le droit de vérifier la transaction.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P9017', 'L''accès est refusé. Vous don''''t avoir le droit de se retirer de la transaction.');
    PERFORM localization.add_localized_resource('DbErrors', 'fr', 'P9201', 'Acess est refusé. Vous ne pouvez pas mettre à jour le "transaction_details" table.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P1301', 'Tidak bisa menghitung bunga. Jumlah hari dalam satu tahun tidak disediakan.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3000', 'Data yang tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3001', 'Nama pengguna tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3005', 'Password tidak boleh kosong.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3006', 'Silahkan memberikan password baru.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3007', 'Tanggal nilai yang tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3008', 'Tanggal tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3009', 'Periode yang ditentukan tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3010', 'Id kantor valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3011', 'Kantor valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3012', 'Toko tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3013', 'Repositori kas valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3050', 'Partai yang tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3051', 'Item yang tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3052', 'Unit valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3053', 'Unit valid atau tidak kompatibel.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3054', 'Unit menyusun ulang tidak sesuai dengan unit dasar.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3055', 'Nilai tukar yang tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3101', 'LoginId valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3105', 'Password Anda saat ini tidak benar.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3201', 'Barang / unit ketidakcocokan.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3202', 'Formulir pajak mismatch.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3301', 'Kuantitas tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3302', 'Id transaksi yang tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P3501', 'Kolom account_id tidak dapat null.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P4010', 'Nilai tukar antara mata uang tidak ditemukan.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P4020', 'Item ini tidak terkait dengan transaksi ini.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P4030', 'Tidak ada kebijakan verifikasi ditemukan untuk pengguna ini.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P4031', 'Silakan meminta orang lain untuk memverifikasi transaksi Anda.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5000', 'Mengacu sisi tidak sama.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5001', 'Saham negatif tidak diperbolehkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5002', 'Posting transaksi ini akan menghasilkan saldo kas negatif.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5010', 'Transaksi tanggal terakhir tidak diperbolehkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5100', 'Pendirian ini tidak memungkinkan transaksi posting.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5101', 'Tidak dapat mengirim transaksi selama modus transaksi terbatas.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5102', 'Akhir hari operasi sudah dilakukan.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5103', 'Tanggal transaksi terakhir dalam antrian verifikasi.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5104', 'Silakan verifikasi transaksi sebelum melakukan akhir hari operasi.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5110', 'Anda tidak dapat memberikan informasi pajak penjualan untuk penjualan non pajak.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5111', 'Informasi transaksi bank tidak valid disediakan.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5112', 'Informasi kartu pembayaran yang tidak valid.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5113', 'Tidak dapat menemukan akun untuk mengirim biaya merchant fee.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5201', 'Sebuah entri penyesuaian saham tidak dapat berisi barang debit (s).');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5202', 'Item dapat muncul hanya sekali dalam toko.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5203', 'Kuantitas kembali tidak dapat lebih besar dari jumlah yang sebenarnya.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5204', 'Jumlah kembali tidak dapat lebih besar dari jumlah yang sebenarnya.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5301', 'Transaksi yang tidak valid atau ditolak.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5500', 'Cukup kuantitas item.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5800', 'Menghapus transaksi tidak diperbolehkan. Tandai transaksi yang ditolak sebagai gantinya.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5901', 'Silakan meminta orang lain untuk memverifikasi transaksi yang diposting.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5910', 'Batas verifikasi diri terlampaui. Transaksi tidak diverifikasi.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5911', 'Batas verifikasi penjualan melebihi. Transaksi tidak diverifikasi.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5912', 'Batas verifikasi pembelian melebihi. Transaksi tidak diverifikasi.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P5913', 'Batas verifikasi GL melebihi. Transaksi tidak diverifikasi.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P6010', 'Konfigurasi yang salah: Metode HPP.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P8001', 'Tidak dapat menghasilkan P / L pernyataan kantor (s) memiliki mata uang dasar yang berbeda.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P8002', 'Tidak dapat menghasilkan neraca saldo kantor (s) memiliki mata uang dasar yang berbeda.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P8003', 'Anda tidak dapat memiliki mata uang yang berbeda pada account GL yang dipetakan.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P8101', 'Operasi EOD sudah diinisialisasi.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P8501', 'Hanya satu kolom yang diperlukan.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P8502', 'Tidak dapat memperbarui kolom.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P8990', 'Anda tidak diizinkan untuk mengubah account sistem.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P8991', 'Anda tidak diperbolehkan untuk menambahkan account sistem.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P8992', 'Seorang pengguna sys tidak dapat memiliki password.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P9001', 'Akses ditolak.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P9010', 'Akses ditolak. Anda tidak memiliki izin untuk posting transaksi ini.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P9011', 'Akses ditolak. Nilai yang tidak disediakan.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P9012', 'Akses ditolak! Transaksi penyesuaian saham tidak bisa referensi beberapa cabang.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P9013', 'Akses ditolak! Transaksi jurnal saham tidak bisa referensi beberapa cabang.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P9014', 'Akses ditolak. Anda tidak dapat memverifikasi transaksi kantor lain.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P9015', 'Akses ditolak. Anda tidak dapat memverifikasi transaksi masa lalu atau futuer tanggal.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P9016', 'Akses ditolak. Anda don '''' t memiliki hak untuk memverifikasi transaksi.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P9017', 'Akses ditolak. Anda don '''' t memiliki hak untuk menarik transaksi.');
    PERFORM localization.add_localized_resource('DbErrors', 'id', 'P9201', 'Acess ditolak. Anda tidak dapat memperbarui "transaction_details" table.');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P1301', '興味を計算することはできません。年の日数が提供されていませんでした。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3000', '無効なデータ。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3001', '無効なユーザー名。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3005', 'パスワードが空にすることはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3006', '新しいパスワードを入力してください。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3007', '無効な値の日付。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3008', '無効な日付。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3009', '無効な期間が指定されました。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3010', '無効なオフィスのID。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3011', '無効なオフィス。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3012', '無効な店。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3013', '無効な現金リポジトリ。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3050', '無効なパーティー。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3051', '無効なアイテム。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3052', '無効なユニット。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3053', '無効なまたは互換性のないユニット。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3054', '並べ替えユニットは、ベースユニットと互換性がありません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3055', '無効な為替相場。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3101', '無効なログインID。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3105', 'あなたの現在のパスワードが正しくありません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3201', 'アイテム/ユニットのミスマッチ。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3202', '税フォームの不一致。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3301', '無効な量。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3302', '無効なトランザクションID。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P3501', 'コラムACCOUNT_IDはnullにすることはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P4010', '通貨間の為替レートは見つかりませんでした。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P4020', 'この項目は、このトランザクションに関連付けられていない。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P4030', 'このユーザーが見つかりませ検証ポリシーません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P4031', 'あなたのトランザクションを確認するために他の誰かに依頼してください。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5000', '参照辺が等しくない。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5001', 'マイナス在庫が許可されていません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5002', 'このトランザクションを投稿する負の現金残高を生成するであろう。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5010', '過去の日付のトランザクションが許可されていません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5100', 'この施設は、トランザクションの投稿を許可していません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5101', '制限されたトランザクションモードの間に取引を投稿することはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5102', '一日の動作の終了は、既に実施した。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5103', '検証·キュー内の過去の日付の取引。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5104', '日操作の終了を実行する前に取引を確認してください。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5110', 'あなたは非課税販売の売上税情報を提供することはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5111', '無効な銀行取引情報を提供。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5112', '無効な支払いカード情報。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5113', '加盟店手数料費を投稿するアカウントが見つかりませんでした。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5201', 'ストック調整エントリは、デビット項目（複数可）を含めることはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5202', '項目は店で一度だけ表示されることがあります。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5203', '返された数量は、実際の量よりも大きくすることはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5204', '返された量は、実際の量よりも大きくすることはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5301', '無効または拒否されたトランザクション。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5500', '不十分な数量。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5800', 'トランザクションを削除することはできません。代わりに拒否されたとして、トランザクションをマークします。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5901', 'あなたが投稿トランザクションを確認するために他の誰かに依頼してください。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5910', '自己検証の限界を超えました。トランザクションが確認されていませんでした。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5911', 'セールス検証制限を超えました。トランザクションが確認されていませんでした。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5912', '購入検証制限を超えました。トランザクションが確認されていませんでした。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P5913', 'GL検証制限を超えました。トランザクションが確認されていませんでした。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P6010', '無効な設定：COGS方法。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P8001', 'オフィス（S）異なるベースの通貨を持っていることのP / Lの文を生成することはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P8002', 'オフィス（S）異なるベースの通貨を持っていることの試算表を生成することはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P8003', 'あなたは、マップされたGLアカウントで異なる通貨を持つことはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P8101', 'EOD操作がすでに初期化されました。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P8501', 'つだけの列が必要です。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P8502', '列を更新できません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P8990', 'あなたは、システムアカウントを変更することが許可されていません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P8991', 'あなたは、システムアカウントを追加することはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P8992', 'SYSユーザーは、パスワードを持つことができません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P9001', 'アクセスが拒否されました。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P9010', 'アクセスが拒否されました。あなたがこのトランザクションを投稿する権限がありません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P9011', 'アクセスが拒否されました。無効な値が付属。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P9012', 'アクセスが拒否されました！ストック調整トランザクションが参照が複数のブランチすることはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P9013', 'アクセスが拒否されました！在庫ジャーナルトランザクションが参照が複数のブランチすることはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P9014', 'アクセスが拒否されました。あなたは別のオフィスのトランザクションを確認することはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P9015', 'アクセスが拒否されました。あなたは、過去またはfutuer日付のトランザクションを確認することはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P9016', 'アクセスが拒否されました。あなたは、トランザクションを検証する権利を有するDON''''T。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P9017', 'アクセスが拒否されました。あなたが取引を撤回する権利を有するDON''''T。');
    PERFORM localization.add_localized_resource('DbErrors', 'ja', 'P9201', 'アセスは拒否されます。あなたは「TRANSACTION_DETAILS"テーブルを更新することはできません。');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P1301', 'Tidak boleh mengira faedah. Bilangan hari dalam setahun tidak disediakan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3000', 'Data tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3001', 'Nama pengguna tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3005', 'Kata laluan tidak boleh kosong.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3006', 'Sila berikan kata laluan baru.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3007', 'Tarikh nilai tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3008', 'Tarikh tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3009', 'Tempoh yang ditentukan tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3010', 'Id pejabat tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3011', 'Pejabat tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3012', 'Kedai tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3013', 'Repositori tunai tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3050', 'Pihak yang tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3051', 'Item tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3052', 'Unit tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3053', 'Unit tidak sah atau tidak serasi.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3054', 'Unit pesanan semula adalah tidak serasi dengan unit asas.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3055', 'Kadar pertukaran tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3101', 'LoginId tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3105', 'Kata laluan semasa anda tidak betul.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3201', 'Perkara / tidak sepadan unit.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3202', 'Bentuk cukai tidak sepadan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3301', 'Kuantiti tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3302', 'Id transaksi tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P3501', 'Lajur account_id tidak boleh batal.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P4010', 'Kadar pertukaran antara mata wang tidak dijumpai.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P4020', 'Item ini tidak berkaitan dengan urus niaga ini.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P4030', 'Tiada dasar pengesahan dijumpai untuk pengguna ini.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P4031', 'Sila tanya orang lain untuk mengesahkan transaksi anda.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5000', 'Pihak rujukan tidak sama.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5001', 'Saham negatif tidak dibenarkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5002', 'Pos urus niaga ini akan menghasilkan baki tunai negatif.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5010', 'Transaksi tarikh yang telah lepas tidak dibenarkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5100', 'Pertubuhan ini tidak membenarkan urus niaga dicatatkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5101', 'Tidak boleh menghantar transaksi semasa mod transaksi yang terhad.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5102', 'Akhir operasi hari sudah dilakukan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5103', 'Transaksi bertarikh lalu dalam barisan pengesahan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5104', 'Sila sahkan transaksi sebelum persembahan akhir operasi hari.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5110', 'Anda tidak boleh memberikan maklumat cukai jualan untuk jualan tidak dikenakan cukai.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5111', 'Maklumat transaksi bank tidak sah disediakan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5112', 'Maklumat kad pembayaran tidak sah.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5113', 'Tidak dapat mencari akaun untuk menyiarkan perbelanjaan yuran saudagar.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5201', 'A kemasukan pelarasan saham tidak boleh mengandungi item debit (s).');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5202', 'Item boleh muncul sekali sahaja di kedai.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5203', 'Kuantiti kembali tidak boleh lebih besar daripada kuantiti sebenar.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5204', 'Jumlah kembali tidak boleh lebih besar daripada jumlah sebenar.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5301', 'Transaksi tidak sah atau ditolak.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5500', 'Kuantiti item yang tidak mencukupi.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5800', 'Memadam transaksi yang tidak dibenarkan. Tandakan transaksi itu sebagai menolak sebaliknya.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5901', 'Sila tanya orang lain untuk mengesahkan transaksi anda diposkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5910', 'Had pengesahan diri melebihi. Transaksi itu tidak disahkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5911', 'Had pengesahan jualan melebihi. Transaksi itu tidak disahkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5912', 'Pembelian melebihi had pengesahan. Transaksi itu tidak disahkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P5913', 'Had pengesahan GL melebihi. Transaksi itu tidak disahkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P6010', 'Konfigurasi tidak sah: Kaedah salah satu alat.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P8001', 'Tidak boleh menghasilkan P / L penyata pejabat (s) yang mempunyai mata wang asas yang berbeza.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P8002', 'Tidak boleh menghasilkan imbangan duga jawatan (s) yang mempunyai mata wang asas yang berbeza.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P8003', 'Anda tidak boleh mempunyai mata wang yang berbeza pada akaun GL yang dipetakan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P8101', 'Operasi EOD telah pun dimulakan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P8501', 'Hanya satu lajur diperlukan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P8502', 'Tidak boleh mengemas kini ruangan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P8990', 'Anda tidak dibenarkan untuk menukar akaun sistem.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P8991', 'Anda tidak dibenarkan untuk menambah akaun-akaun sistem.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P8992', 'Seseorang pengguna sys tidak boleh mempunyai kata laluan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P9001', 'Akses dinafikan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P9010', 'Akses dinafikan. Anda tiada kebenaran untuk menyiarkan urus niaga ini.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P9011', 'Akses dinafikan. Nilai yang tidak sah yang dibekalkan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P9012', 'Akses dinafikan! Urus niaga saham pelarasan tidak boleh rujukan pelbagai cawangan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P9013', 'Akses dinafikan! Urus niaga saham jurnal tidak boleh rujukan pelbagai cawangan.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P9014', 'Akses dinafikan. Anda tidak boleh mengesahkan transaksi jawatan lain.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P9015', 'Akses dinafikan. Anda tidak boleh mengesahkan transaksi yang lalu atau futuer bertarikh.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P9016', 'Akses dinafikan. Anda don''''t mempunyai hak untuk mengesahkan transaksi.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P9017', 'Akses dinafikan. Anda don''''t mempunyai hak untuk menarik balik urus niaga.');
    PERFORM localization.add_localized_resource('DbErrors', 'ms', 'P9201', 'Acess dinafikan. Anda tidak boleh mengemas kini "transaction_details" meja.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P1301', 'Kan niet berekenen rente. Het aantal dagen in een jaar werd niet verstrekt.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3000', 'Ongeldige gegevens.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3001', 'Ongeldige gebruikersnaam.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3005', 'Wachtwoord kan niet leeg zijn.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3006', 'Geef een nieuw wachtwoord.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3007', 'Ongeldige waarde date.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3008', 'Ongeldige datum.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3009', 'Ongeldige periode gespecificeerd.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3010', 'Ongeldige kantoor id.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3011', 'Ongeldige kantoor.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3012', 'Ongeldige winkel.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3013', 'Ongeldige contant repository.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3050', 'Ongeldige partij.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3051', 'Ongeldig artikel.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3052', 'Ongeldige unit.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3053', 'Ongeldige of niet-compatibele apparaat.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3054', 'Het bestelnummer unit is onverenigbaar met het basisstation.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3055', 'Ongeldige wisselkoers.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3101', 'Ongeldige loginid.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3105', 'Uw huidige wachtwoord is onjuist.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3201', 'Item / eenheid mismatch.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3202', 'Belastingformulier mismatch.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3301', 'Ongeldige hoeveelheid.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3302', 'Ongeldige transactie id.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P3501', 'De kolom account_id kan niet null zijn.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P4010', 'Wisselkoers tussen de valuta is niet gevonden.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P4020', 'Dit item is niet geassocieerd met deze transactie.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P4030', 'Geen verificatie beleid gevonden voor deze gebruiker.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P4031', 'Vraag dan iemand anders om uw transactie te controleren.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5000', 'Verwijzen kanten zijn niet gelijk.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5001', 'Negatieve voorraad is niet toegestaan.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5002', 'Het plaatsen van deze transactie zou een negatief kassaldo produceren.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5010', 'Verleden gedateerd transacties zijn niet toegestaan.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5100', 'Dit etablissement staat niet toe dat de transactie posting.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5101', 'Kan transactie niet posten tijdens beperkte transactie mode.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5102', 'Einde van de dag operatie werd reeds uitgevoerd.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5103', 'Verleden gedateerd transacties in verificatie wachtrij.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5104', 'Controleert transacties voordat eind van de dag gebruik.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5110', 'U kunt omzetbelasting informatie voor niet belastbare omzet niet bieden.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5111', 'Ongeldige bank transactie-informatie verstrekt.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5112', 'Ongeldige betaalkaart informatie.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5113', 'Kon een account aan handelaar vergoeding kosten te posten niet vinden.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5201', 'Een voorraad aanpassing item kan debet artikel (en) bevatten.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5202', 'Een item kan slechts één keer in een winkel verschijnen.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5203', 'De geretourneerde hoeveelheid niet groter dan de werkelijke hoeveelheid.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5204', 'De geretourneerde bedrag kan niet hoger zijn dan de werkelijke waarde.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5301', 'Ongeldig of afgewezen transactie.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5500', 'Onvoldoende punt hoeveelheid.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5800', 'Een transactie het verwijderen is niet toegestaan. Markeren de transactie plaats afgewezen.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5901', 'Vraag dan iemand anders om de transactie u op de hoogte te controleren.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5910', 'Zelfcontrole limiet overschreden. De transactie werd niet geverifieerd.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5911', 'Sales verificatie limiet overschreden. De transactie werd niet geverifieerd.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5912', 'Aankoop verificatie limiet overschreden. De transactie werd niet geverifieerd.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P5913', 'GL verificatie limiet overschreden. De transactie werd niet geverifieerd.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P6010', 'Ongeldige configuratie: COGS methode.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P8001', 'Kan geen P / L verklaring van het kantoor (s) met verschillende basisvaluta''s.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P8002', 'Kan geen saldibalans van het kantoor (s) met verschillende basisvaluta''s.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P8003', 'Je kunt niet een andere valuta op afgebeelde GL rekening.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P8101', 'EOD operatie werd reeds geïnitialiseerd.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P8501', 'Slechts één kolom vereist.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P8502', 'Kan kolom niet bijwerken.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P8990', 'U bent niet toegestaan om het systeem accounts te veranderen.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P8991', 'U bent niet toegestaan om het systeem accounts toevoegen.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P8992', 'Een sys gebruiker kan geen wachtwoord.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P9001', 'Toegang is geweigerd.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P9010', 'Toegang is geweigerd. U bent niet bevoegd om deze transactie te posten.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P9011', 'Toegang is geweigerd. Ongeldige waarden geleverd.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P9012', 'Toegang is geweigerd! Een voorraad aanpassing transactie niet kan referenties meerdere vestigingen.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P9013', 'Toegang is geweigerd! Een voorraad tijdschrift transactie niet kan referenties meerdere vestigingen.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P9014', 'Toegang is geweigerd. U kunt een transactie van een ander kantoor niet controleren.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P9015', 'Toegang is geweigerd. U kunt het verleden of futuer gedateerd transactie niet controleren.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P9016', 'Toegang is geweigerd. Je don''''t hebben het recht om de transactie te controleren.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P9017', 'Toegang is geweigerd. Je don''''t hebben het recht om de transactie terug te trekken.');
    PERFORM localization.add_localized_resource('DbErrors', 'nl', 'P9201', 'Acess wordt ontkend. U kunt de "transaction_details" table niet bijwerken.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P1301', 'Não é possível calcular os juros. Não foi fornecido o número de dias em um ano.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3000', 'Dados inválidos.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3001', 'Nome de usuário inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3005', 'A senha não pode estar vazio.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3006', 'Por favor, forneça uma nova senha.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3007', 'Data-valor inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3008', 'Data inválida.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3009', 'Período especificado inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3010', 'Id escritório inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3011', 'Escritório inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3012', 'Loja inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3013', 'Repositório de caixa inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3050', 'Partido inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3051', 'Item inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3052', 'Unidade inválida.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3053', 'Unidade inválida ou incompatível.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3054', 'A unidade de reabastecimento é incompatível com a unidade base.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3055', 'Taxa de câmbio inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3101', 'LoginID inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3105', 'Sua senha atual está incorreto.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3201', 'Item / incompatibilidade unidade.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3202', 'Imposto de forma incompatibilidade.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3301', 'Quantidade inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3302', 'Id de transação inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P3501', 'O account_id coluna não pode ser nulo.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P4010', 'Taxa de câmbio entre as moedas não foi encontrado.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P4020', 'Este item não está associado a essa transação.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P4030', 'Nenhuma política de verificação encontrado para esse usuário.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P4031', 'Por favor, peça a alguém para verificar sua transação.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5000', 'Referenciando os lados não são iguais.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5001', 'Estoque negativo não é permitido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5002', 'Postando esta transação iria produzir um saldo de caixa negativo.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5010', 'Transações datadas últimos não são permitidos.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5100', 'Este estabelecimento não permite postagem transação.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5101', 'Não é possível postar transação durante o modo de operação restrito.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5102', 'Fim da operação do dia já foi realizada.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5103', 'Passado transações datado em fila de verificação.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5104', 'Por favor, verifique antes de realizar transações final da operação do dia.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5110', 'Você não pode fornecer informações de imposto sobre vendas para vendas não tributáveis.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5111', 'Informações sobre a transação bancária fornecido é inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5112', 'Informações de cartão de pagamento inválido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5113', 'Não foi possível encontrar uma conta para postar despesas de taxa de comerciante.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5201', 'Uma entrada de ajustamento não pode conter item (s) débito.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5202', 'Um item pode aparecer apenas uma vez em uma loja.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5203', 'A quantidade devolvida não pode ser maior do que a quantidade real.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5204', 'O valor devolvido não pode ser maior do que a quantidade real.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5301', 'De transação inválido ou rejeitado.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5500', 'Quantidade do item insuficiente.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5800', 'Excluindo uma transação não é permitido. Marque a transação como indeferido e não.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5901', 'Por favor, peça a alguém para verificar a transação que você postou.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5910', 'Limite de verificação Auto ultrapassado. A transação não foi verificada.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5911', 'Limite de verificação de Vendas ultrapassado. A transação não foi verificada.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5912', 'Limite de verificação de Compra ultrapassado. A transação não foi verificada.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P5913', 'Limite de verificação GL ultrapassado. A transação não foi verificada.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P6010', 'Configuração inválida: método CPV.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P8001', 'Não é possível produzir P / L declaração de escritório (s) com moedas base diferentes.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P8002', 'Não é possível produzir balancete de escritório (s) com moedas base diferentes.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P8003', 'Você não pode ter uma moeda diferente da conta GL mapeada.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P8101', 'EOD operação já foi inicializado.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P8501', 'Apenas uma coluna é necessária.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P8502', 'Não é possível atualizar a coluna.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P8990', 'Você não tem permissão para alterar as contas do sistema.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P8991', 'Você não tem permissão para adicionar contas do sistema.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P8992', 'Um usuário sys não pode ter uma senha.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P9001', 'Acesso negado.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P9010', 'Acesso negado. Você não está autorizado a colocar esta transação.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P9011', 'Acesso negado. Valores inválidos fornecido.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P9012', 'Acesso negado! A transação de ajuste de ações não pode referências múltiplas ramificações.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P9013', 'Acesso negado! A transação de ações revista não pode referências múltiplas ramificações.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P9014', 'Acesso negado. Você não pode verificar uma transação de outro escritório.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P9015', 'Acesso negado. Você não pode verificar transação passado ou futuer datado.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P9016', 'Acesso negado. Você don ''t tem o direito de verificar a transação.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P9017', 'Acesso negado. Você don ''t tem o direito de retirar a transação.');
    PERFORM localization.add_localized_resource('DbErrors', 'pt', 'P9201', 'Acess é negado. Você não pode atualizar a tabela "transaction_details".');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P1301', 'Не можете начислять проценты.Количество дней в году не было.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3000', 'Неверные данные.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3001', 'Неверное имя пользователя.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3005', 'Пароль не может быть пустым.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3006', 'Пожалуйста, укажите новый пароль.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3007', 'Неверный дата валютирования.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3008', 'Неправильная дата.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3009', 'Неверный указанный период.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3010', 'Неверный офис ID.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3011', 'Неверный офис.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3012', 'Неверный магазин.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3013', 'Неверный хранилище наличными.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3050', 'Неверный партия.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3051', 'Неверный пункта.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3052', 'Неверный блок.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3053', 'Неверный или несовместимый блок.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3054', 'Блок повторного заказа несовместимо с базовым блоком.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3055', 'Неверный курс.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3101', 'Неверный LoginID.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3105', 'Ваш текущий пароль неверен.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3201', 'Пункт / блок несоответствие.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3202', 'Форма налоговой несоответствие.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3301', 'Неверный количество.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3302', 'Неверный идентификатор транзакции.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P3501', 'Колонка account_id не может быть пустым.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P4010', 'Скорость обмена между валютами не был найден.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P4020', 'Этот пункт не связан с этой сделкой.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P4030', 'Нет проверка политики нашли для этого пользователя.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P4031', 'Пожалуйста, попросите кого-нибудь еще, чтобы проверить вашу сделку.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5000', 'Ссылки на стороны не равны.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5001', 'Отрицательный акции, не допускается.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5002', 'Размещение этой сделки будет производить отрицательный денежный баланс.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5010', 'Прошедшие датированные операции не допускаются.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5100', 'Это учреждение не позволяет объявление транзакций.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5101', 'Не можете прикреплять сделки в режиме ограниченного сделки.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5102', 'Конец дня работы уже была выполнена.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5103', 'Прошедшие датированные операции в очереди проверки.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5104', 'Пожалуйста, проверьте сделок перед выполнением конце дня работы.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5110', 'Вы не можете предоставить налога с продаж информации для не облагаемых продаж.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5111', 'Информация Неверный банковская транзакция предусмотрено.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5112', 'Неправильная информация платежной карты.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5113', 'Не удалось найти аккаунт для расходов купец плату.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5201', 'Запись регулировка акции не могут содержать дебетовой товар (ов).');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5202', 'Элемент может появляться только один раз в магазине.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5203', 'Возвращенное количество не может быть больше, чем фактическое количество.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5204', 'Возвращенная сумма не может быть больше, чем фактическое количество.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5301', 'Неверный или отклонено транзакций.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5500', 'Недостаточное количество элемента.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5800', 'Удаление сделка не допускается. Отметить сделку отклоненным вместо этого.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5901', 'Пожалуйста, попросите кого-нибудь еще, чтобы проверить сделку вас в курсе.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5910', 'Само ограничение подтверждение превышен.Сделка не была подтверждена.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5911', 'Ограничение подтверждение по продажам превышен.Сделка не была подтверждена.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5912', 'Покупка ограничение подтверждение превышен.Сделка не была подтверждена.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P5913', 'GL проверка предел превышен.Сделка не была подтверждена.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P6010', 'Недопустимая конфигурация: Метод себестоимости.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P8001', 'Невозможно сформировать P / L заявления о кабинете (акционер), имеющие разные базовые валюты.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P8002', 'Не можете произвести пробный баланс полномочий (акционер), имеющие разные базовые валюты.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P8003', 'Вы не можете иметь различную валюту на ленточном внимание GL.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P8101', 'Операция саперов уже был инициализирован.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P8501', 'Только один столбец не требуется.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P8502', 'Не можете колонку обновить.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P8990', 'Вы не можете изменить системные учетные записи.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P8991', 'Вы не можете добавить системные учетные записи.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P8992', 'Пользователь SYS не может иметь пароль.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P9001', 'Отказано в доступе.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P9010', 'Отказано в доступе. Вы не авторизованы, чтобы разместить этот сделку.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P9011', 'Отказано в доступе. Недопустимые значения в комплект поставки.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P9012', 'Отказано в доступе!Сделка регулировка акции не могут ссылки несколько филиалов.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P9013', 'Отказано в доступе!Сделка акции журнала не может ссылки несколько филиалов.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P9014', 'Отказано в доступе. Вы не можете проверить сделку другую должность.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P9015', 'Отказано в доступе. Вы не можете проверить в прошлом или futuer датированный сделки.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P9016', 'Отказано в доступе. Вы don''''t имеют право проверять сделки.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P9017', 'Отказано в доступе. Вы don''''t имеют право отозвать сделку.');
    PERFORM localization.add_localized_resource('DbErrors', 'ru', 'P9201', 'Acess отказано. Вы не можете обновлять "transaction_details" стол.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P1301', 'Kan inte räkna ränta. Antalet dagar på ett år angavs inte.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3000', 'Ogiltiga data.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3001', 'Ogiltigt användarnamn.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3005', 'Lösenord kan inte vara tomt.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3006', 'Ange ett nytt lösenord.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3007', 'Ogiltigt värde dagen.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3008', 'Ogiltigt datum.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3009', 'Ogiltig angivna perioden.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3010', 'Ogiltig kontors id.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3011', 'Ogiltig kontor.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3012', 'Ogiltigt butik.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3013', 'Ogiltig kontant slutförvar.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3050', 'Ogiltig part.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3051', 'Ogiltig post.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3052', 'Ogiltig enhet.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3053', 'Ogiltig eller inkompatibel enhet.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3054', 'Beställningsenheten är oförenligt med basenheten.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3055', 'Ogiltig växelkurs.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3101', 'Ogiltigt LoginId.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3105', 'Din nuvarande lösenord är felaktigt.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3201', 'Punkt / enhet mismatch.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3202', 'Skattsedel obalans.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3301', 'Ogiltigt kvantitet.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3302', 'Ogiltig transaktions id.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P3501', 'Kolonnen konto-kan inte vara null.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P4010', 'Växelkursen mellan valutorna hittades inte.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P4020', 'Denna punkt är inte associerad med denna transaktion.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P4030', 'Ingen verifiering policy hittades för denna användare.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P4031', 'Vänligen be någon annan att verifiera din transaktion.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5000', 'Hänvisning sidor är inte lika.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5001', 'Negativ lager är inte tillåtet.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5002', 'Posta denna transaktion skulle ge en negativ kassa.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5010', 'Tidigare daterad transaktioner är inte tillåtna.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5100', 'Denna anläggning tillåter inte transaktions utstationering.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5101', 'Kan inte posta transaktion under transaktionsläget begränsad.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5102', 'Slutet av dagen operation redan utförts.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5103', 'Tidigare daterad transaktioner i verifierings kö.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5104', 'Vänligen kontrollera transaktioner innan du utför dagens slut drift.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5110', 'Du kan inte ge moms informationen för icke skattepliktiga försäljning.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5111', 'Transaktionsinformation Ogiltig bank tillhandahålls.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5112', 'Ogiltig informations betalkort.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5113', 'Kunde inte hitta ett konto för att posta handelsfartyg avgift kostnader.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5201', 'Ett lager justering posten kan inte innehålla debetpost (er).');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5202', 'Ett objekt kan visas bara en gång i en butik.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5203', 'Den returnerade kvantiteten kan inte vara större än den faktiska kvantiteten.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5204', 'Den returnerade beloppet kan inte vara större än faktiska beloppet.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5301', 'Ogiltigt eller avvisas transaktionen.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5500', 'Otillräcklig post kvantitet.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5800', 'Ta bort en transaktion är inte tillåtet. Markera transaktionen som avvisade istället.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5901', 'Vänligen be någon annan att verifiera transaktionen du postat.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5910', 'Självverifieringsgränsen överskridits. Affären var inte verifieras.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5911', 'Försäljningsverifieringsgränsen överskrids. Affären var inte verifieras.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5912', 'Inköpsverifieringsgränsen överskridits. Affären var inte verifieras.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P5913', 'GL verifieringsgränsen överskridits. Affären var inte verifieras.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P6010', 'Ogiltig konfiguration: KSV metod.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P8001', 'Kan inte producera P / L uttalande av kontors (er) som har olika grund valutor.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P8002', 'Kan inte producera balansomslutningen av kontors (er) som har olika grund valutor.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P8003', 'Du kan inte ha en annan valuta på mappade GL-konto.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P8101', 'EOD operation redan initierats.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P8501', 'Endast en kolonn erfordras.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P8502', 'Kan inte uppdatera kolumn.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P8990', 'Du får inte ändra systemkonton.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P8991', 'Du får inte lägga systemkonton.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P8992', 'En SYS användare kan inte ha ett lösenord.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P9001', 'Åtkomst nekad.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P9010', 'Åtkomst nekad. Du har inte behörighet att posta denna transaktion.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P9011', 'Åtkomst nekad. Ogiltiga värden levereras.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P9012', 'Åtkomst nekad! Ett lager justering transaktion kan inte referenser flera grenar.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P9013', 'Åtkomst nekad! Ett lager journal transaktion kan inte referenser flera grenar.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P9014', 'Åtkomst nekad. Du kan inte kontrollera en transaktion av ett annat kontor.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P9015', 'Åtkomst nekad. Du kan inte verifiera tidigare eller futuer daterad transaktionen.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P9016', 'Åtkomst nekad. Du don '''' t har rätt att verifiera transaktionen.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P9017', 'Åtkomst nekad. Du don '''' t har rätt att återkalla transaktionen.');
    PERFORM localization.add_localized_resource('DbErrors', 'sv', 'P9201', 'Acess nekas. Du kan inte uppdatera "transaction_details" bord.');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P1301', '无法计算利息。未提供在一年的天数。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3000', '无效数据。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3001', '用户名无效。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3005', '密码不能为空。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3006', '请提供一个新的密码。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3007', '值无效日期。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3008', '无效的日期。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3009', '指定无效时段。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3010', '无效的办公ID。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3011', '无效的办公室。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3012', '无效的商店。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3013', '无效的现金库。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3050', '无效的一方。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3051', '无效的项目。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3052', '无效的单元。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3053', '无效或不兼容的设备。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3054', '重排部是与基站单元不兼容。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3055', '无效的汇率。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3101', '无效的登录ID。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3105', '您当前密码不正确。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3201', '项目/单位不匹配。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3202', '税收的形式不匹配。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3301', '无效的数量。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3302', '无效的事务ID。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P3501', '列ACCOUNT_ID不能为空。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P4010', '未找到货币之间的汇率。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P4020', '此产品没有与此交易相关。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P4030', '无验证策略找到此用户。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P4031', '请让别人来验证您的交易。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5000', '引用双方是不相等的。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5001', '负库存是不允许的。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5002', '发布本次交易将产生负现金余额。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5010', '过去陈旧的交易是不允许的。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5100', '这个成立不允许交易张贴。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5101', '在限制交易模式不能发布交易。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5102', '已经进行的日常运作结束。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5103', '近月交易验证队列。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5104', '执行日常运作结束前请核实交易。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5110', '你不能提供营业税的信息非应税销售。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5111', '提供了无效的银行交易的信息。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5112', '无效的支付卡信息。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5113', '找不到一个帐户后商家手续费支出。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5201', 'A股进入调整，不能包含借记项目（S）。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5202', '一个项目可以在商店里只出现一次。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5203', '返回的量不能大于实际数量。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5204', '返回的量不能大于实际数额。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5301', '无效或拒绝交易。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5500', '不足的项目数量。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5800', '删除交易是不允许的。标记交易被否决代替。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5901', '请让别人来验证您发布的交易。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5910', '自我验证超限。本次交易不验证。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5911', '超过销售限额核实。本次交易不验证。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5912', '购买验证超限。本次交易不验证。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P5913', 'GL认证超限。本次交易不验证。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P6010', '无效的配置：主营业务成本的方法。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P8001', '不能生产办公室（S）具有不同的基础货币P/ L的声明。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P8002', '不能生产办公室（S）具有不同的基础货币试算表。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P8003', '你不能对映射GL帐户不同的货币。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P8101', 'EOD操作已经初始化。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P8501', '只有一列是必需的。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P8502', '无法更新列。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P8990', '你不能改变系统帐户。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P8991', '你不能添加系统帐户。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P8992', '一个sys用户不能有密码。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P9001', '访问被拒绝。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P9010', '访问被拒绝。你无权发布此交易。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P9011', '访问被拒绝。无效值提供。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P9012', '访问被拒绝！ A股调整的事务不能引用多个分支机构。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P9013', '访问被拒绝！ A股杂志事务不能引用多个分支机构。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P9014', '访问被拒绝。你无法验证的另一个办公室的事务。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P9015', '访问被拒绝。你无法验证过去或futuer日交易。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P9016', '访问被拒绝。你不太需要核实交易的权利。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P9017', '访问被拒绝。你不太有撤回该交易的权利。');
    PERFORM localization.add_localized_resource('DbErrors', 'zh', 'P9201', '阿塞斯被拒绝。你无法更新“transaction_details”表。');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'actions', 'acties');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'amount', 'bedrag');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'currency', 'Währung');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'flag_background_color', 'Flag Hintergrundfarbe');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'flag_foreground_color', 'Flag Hintergrundfarbe');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'id', 'Identifier');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'office', 'Büro');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'party', 'Party');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'reference_number', 'Referenznummer');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'statement_reference', 'Anweisungsreferenz');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'transaction_ts', 'Transaktionszeitstempel');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'user', 'Benutzer');
    PERFORM localization.add_localized_resource('DbResource', 'de', 'value_date', 'Wert Datum');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'actions', 'acciones');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'amount', 'cantidad');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'currency', 'moneda');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'flag_background_color', 'Fondo de la bandera del color');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'flag_foreground_color', 'Bandera Color de primer plano');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'id', 'identificador');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'office', 'oficina');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'party', 'partido');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'reference_number', 'Número de referencia');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'statement_reference', 'Declaración de Referencia');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'transaction_ts', 'Marca de tiempo de transacción');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'user', 'usuario');
    PERFORM localization.add_localized_resource('DbResource', 'es', 'value_date', 'Fecha Valor');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'actions', 'saping-puhunan');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'amount', 'dami');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'currency', 'pera');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'flag_background_color', 'Kulay ng Background I-flag');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'flag_foreground_color', 'Kulay Foreground I-flag');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'id', 'tagatukoy');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'office', 'opisina');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'party', 'partido');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'reference_number', 'Sanggunian sa Numero');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'statement_reference', 'Sanggunian ng statement');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'transaction_ts', 'Timestamp ng Transaksyon');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'user', 'gumagamit');
    PERFORM localization.add_localized_resource('DbResource', 'fil', 'value_date', 'Petsa halaga');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'actions', 'actes');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'amount', 'montant');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'currency', 'monnaie');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'flag_background_color', 'Drapeau Couleur de fond');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'flag_foreground_color', 'Drapeau Couleur de premier plan');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'id', 'identifiant');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'office', 'bureau');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'party', 'partie');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'reference_number', 'Numéro de référence');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'statement_reference', 'déclaration de référence');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'transaction_ts', 'transaction Timestamp');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'user', 'utilisateur');
    PERFORM localization.add_localized_resource('DbResource', 'fr', 'value_date', 'date de valeur');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'actions', 'tindakan');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'amount', 'jumlah');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'currency', 'Mata Uang');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'flag_background_color', 'Flag Background Color');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'flag_foreground_color', 'Flag Background Color');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'id', 'identifier');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'office', 'kantor');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'party', 'partai');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'reference_number', 'Nomor Surat');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'statement_reference', 'pernyataan Referensi');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'transaction_ts', 'Timestamp transaksi');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'user', 'pemakai');
    PERFORM localization.add_localized_resource('DbResource', 'id', 'value_date', 'nilai Tanggal');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'actions', '株式');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'amount', '額');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'currency', '通貨');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'flag_background_color', '旗の背景色');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'flag_foreground_color', '旗前景色');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'id', '識別する');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'office', 'オフィス');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'party', 'パーティー');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'reference_number', '参照番号');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'statement_reference', 'ステートメントリファレンス');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'transaction_ts', 'トランザクションタイムスタンプ');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'user', 'ユーザー');
    PERFORM localization.add_localized_resource('DbResource', 'ja', 'value_date', '実行日');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'actions', 'tindakan');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'amount', 'jumlah');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'currency', 'mata Wang');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'flag_background_color', 'Warna bendera Latar Belakang');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'flag_foreground_color', 'Flag Latar Depan Warna');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'id', 'pengecam');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'office', 'Pejabat');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'party', 'parti');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'reference_number', 'Nombor Rujukan');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'statement_reference', 'penyata Rujukan');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'transaction_ts', 'transaksi Cap Masa');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'user', 'pengguna');
    PERFORM localization.add_localized_resource('DbResource', 'ms', 'value_date', 'nilai Tarikh');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'actions', 'acties');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'amount', 'bedrag');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'currency', 'valuta');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'flag_background_color', 'Vlag Achtergrond Kleur');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'flag_foreground_color', 'Vlag Voorgrondkleur');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'id', 'Identifier');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'office', 'kantoor');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'party', 'partij');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'reference_number', 'Referentienummer');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'statement_reference', 'verklaring Reference');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'transaction_ts', 'transactie Tijdstempel');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'user', 'gebruiker');
    PERFORM localization.add_localized_resource('DbResource', 'nl', 'value_date', 'Value Date');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'actions', 'ações');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'amount', 'quantidade');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'currency', 'moeda');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'flag_background_color', 'Cor de fundo da bandeira');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'flag_foreground_color', 'Bandeira foregroundcolor');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'id', 'identificar');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'office', 'escritório');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'party', 'partido');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'reference_number', 'Número de Referência');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'statement_reference', 'declaração de Referência');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'transaction_ts', 'Timestamp transação');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'user', 'usuário');
    PERFORM localization.add_localized_resource('DbResource', 'pt', 'value_date', 'valor Data');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'actions', 'акции');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'amount', 'количество');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'currency', 'валюта');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'flag_background_color', 'Цвет флаг фон');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'flag_foreground_color', 'Флаг цвет переднего плана');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'id', 'идентифицировать');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'office', 'офис');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'party', 'партия');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'reference_number', 'номер для ссылок');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'statement_reference', 'О себе Ссылка');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'transaction_ts', 'сделка Отметка времени');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'user', 'пользователь');
    PERFORM localization.add_localized_resource('DbResource', 'ru', 'value_date', 'Дата валютирования');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'actions', 'lager');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'amount', 'Mängd');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'currency', 'valuta');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'flag_background_color', 'Flagga Bakgrundsfärg');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'flag_foreground_color', 'Flag Förgrundsfärg');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'id', 'identifiera');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'office', 'Kontors');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'party', 'fest');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'reference_number', 'referensnummer');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'statement_reference', 'Uttalande Referens');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'transaction_ts', 'Transaktionstidsstämpel');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'user', 'Användare');
    PERFORM localization.add_localized_resource('DbResource', 'sv', 'value_date', 'värde Datum');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'actions', '行动');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'amount', '量');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'currency', '货币');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'flag_background_color', '旗背景颜色');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'flag_foreground_color', '标志前景色');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'id', '登录');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'office', '办公室');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'party', '党');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'reference_number', '参考号码');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'statement_reference', '声明参考');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'transaction_ts', '交易时间戳');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'user', '用户');
    PERFORM localization.add_localized_resource('DbResource', 'zh', 'value_date', '起息日');
    PERFORM localization.add_localized_resource('Errors', 'de', 'BothSidesCannotHaveValue', 'Sowohl Soll- und kann keine Werte.');
    PERFORM localization.add_localized_resource('Errors', 'de', 'CompoundUnitOfMeasureErrorMessage', 'Die Basiseinheit und vergleichen Gerät kann nicht gleich sein.');
    PERFORM localization.add_localized_resource('Errors', 'de', 'InsufficientStockWarning', 'Nur {0} {1} von {2} auf Lager.');
    PERFORM localization.add_localized_resource('Errors', 'de', 'InvalidSubTranBookPurchaseDelivery', 'Ungültige Tochtergesellschaft Transaktionen Buch "Kauf Lieferung"');
    PERFORM localization.add_localized_resource('Errors', 'de', 'InvalidSubTranBookPurchaseQuotation', 'Ungültige Tochtergesellschaft Transaktionen Buch "Kauf Zitat"');
    PERFORM localization.add_localized_resource('Errors', 'de', 'InvalidSubTranBookPurchaseReceipt', 'Ungültige Tochtergesellschaft Transaktionen Buch "Kaufbeleg"');
    PERFORM localization.add_localized_resource('Errors', 'de', 'InvalidSubTranBookSalesPayment', 'Ungültige Tochtergesellschaft Transaktionen Buch "Sales Vergütung"');
    PERFORM localization.add_localized_resource('Errors', 'de', 'InvalidUserId', 'Ungültige Benutzer-ID.');
    PERFORM localization.add_localized_resource('Errors', 'de', 'KeyValueMismatch', 'Es gibt eine unpassende Anzahl der Schlüssel / Wert-Elemente in diesem Listcontrol.');
    PERFORM localization.add_localized_resource('Errors', 'de', 'NoTransactionToPost', 'Keine Transaktion zu veröffentlichen.');
    PERFORM localization.add_localized_resource('Errors', 'de', 'ReferencingSidesNotEqual', 'Die referenzierenden Seiten sind nicht gleich.');
    PERFORM localization.add_localized_resource('Errors', 'es', 'BothSidesCannotHaveValue', 'Tanto débito y crédito no pueden tener valores.');
    PERFORM localization.add_localized_resource('Errors', 'es', 'CompoundUnitOfMeasureErrorMessage', 'La unidad base y la unidad de comparación no pueden ser iguales.');
    PERFORM localization.add_localized_resource('Errors', 'es', 'InsufficientStockWarning', 'Sólo {0} {1} de {2} dejados en la acción.');
    PERFORM localization.add_localized_resource('Errors', 'es', 'InvalidSubTranBookPurchaseDelivery', 'Inválido Transacciones Subsidiarios libro "Compra de Entrega"');
    PERFORM localization.add_localized_resource('Errors', 'es', 'InvalidSubTranBookPurchaseQuotation', 'Transacciones Subsidiarios no válidos libro "Cita de Compra"');
    PERFORM localization.add_localized_resource('Errors', 'es', 'InvalidSubTranBookPurchaseReceipt', 'Inválido Transacciones Subsidiarios libro "recibo de compra"');
    PERFORM localization.add_localized_resource('Errors', 'es', 'InvalidSubTranBookSalesPayment', 'Transacciones Subsidiarios válida libro "de venta"');
    PERFORM localization.add_localized_resource('Errors', 'es', 'InvalidUserId', 'ID de usuario válido.');
    PERFORM localization.add_localized_resource('Errors', 'es', 'KeyValueMismatch', 'Hay un recuento de una mala adaptación de los elementos clave / valor en esta lista de control.');
    PERFORM localization.add_localized_resource('Errors', 'es', 'NoTransactionToPost', 'Ninguna transacción para enviar.');
    PERFORM localization.add_localized_resource('Errors', 'es', 'ReferencingSidesNotEqual', 'Los lados que hacen referencia no son iguales.');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'BothSidesCannotHaveValue', 'Ang parehong pag-debit at credit ay hindi maaaring magkaroon halaga.');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'CompoundUnitOfMeasureErrorMessage', 'Ang batayang yunit at ihambing ang yunit ay hindi maaring pareho.');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'InsufficientStockWarning', 'Tanging {0} {1} ng {2} naiwan sa stock.');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'InvalidSubTranBookPurchaseDelivery', 'Di-wastong Transaksyon subsidiary ng Libro "ng Paghahatid Pagbili ''."');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'InvalidSubTranBookPurchaseQuotation', 'Di-wastong subsidiary Transaksyon Book "Bumili marks ''."');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'InvalidSubTranBookPurchaseReceipt', 'Di-wastong Transaksyon subsidiary ng Libro "Bumili Resibo ''."');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'InvalidSubTranBookSalesPayment', 'Di-wastong subsidiary Transaksyon Book "Benta ng Pagbabayad."');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'InvalidUserId', 'Di-wastong user id.');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'KeyValueMismatch', 'May mismatching bilang ng key / halaga ng mga item sa Control List na ito.');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'NoTransactionToPost', 'Walang mga transaksyon na mag-post.');
    PERFORM localization.add_localized_resource('Errors', 'fil', 'ReferencingSidesNotEqual', 'Ang tumutukoy sa gilid ay hindi katumbas.');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'BothSidesCannotHaveValue', 'Les deux débit et de crédit ne peuvent pas avoir des valeurs.');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'CompoundUnitOfMeasureErrorMessage', 'L''unité de base et comparez appareil ne peut pas être la même.');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'InsufficientStockWarning', 'Seulement {0} {1} {2} gauche en stock.');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'InvalidSubTranBookPurchaseDelivery', 'Transactions non valide subsidiaires livre "Achat Livraison"');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'InvalidSubTranBookPurchaseQuotation', 'Transactions subsidiaires invalides livre "Achat Citation"');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'InvalidSubTranBookPurchaseReceipt', 'Transactions non valide subsidiaires livre "reçu d''achat"');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'InvalidSubTranBookSalesPayment', 'Transactions non valide subsidiaires livre «Paiement des ventes"');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'InvalidUserId', 'ID utilisateur non valide.');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'KeyValueMismatch', 'Il ya un nombre désadaptation des éléments clé / valeur dans ce contrôle Liste.');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'NoTransactionToPost', 'Aucune opération d''afficher.');
    PERFORM localization.add_localized_resource('Errors', 'fr', 'ReferencingSidesNotEqual', 'Les côtés de référencement sont pas égaux.');
    PERFORM localization.add_localized_resource('Errors', 'id', 'BothSidesCannotHaveValue', 'Kedua debit dan kredit tidak dapat memiliki nilai.');
    PERFORM localization.add_localized_resource('Errors', 'id', 'CompoundUnitOfMeasureErrorMessage', 'Unit dasar dan membandingkan unit yang tidak bisa sama.');
    PERFORM localization.add_localized_resource('Errors', 'id', 'InsufficientStockWarning', 'Hanya {0} {1} {2} ditinggalkan dalam stok.');
    PERFORM localization.add_localized_resource('Errors', 'id', 'InvalidSubTranBookPurchaseDelivery', 'Transaksi tidak sah Subsidiari Buku "Penghantaran Pembelian"');
    PERFORM localization.add_localized_resource('Errors', 'id', 'InvalidSubTranBookPurchaseQuotation', 'Transaksi tidak sah Tempah Subsidiari "Pembelian Sebutharga"');
    PERFORM localization.add_localized_resource('Errors', 'id', 'InvalidSubTranBookPurchaseReceipt', 'Transaksi tidak sah Subsidiari Buku "Resit Pembelian"');
    PERFORM localization.add_localized_resource('Errors', 'id', 'InvalidSubTranBookSalesPayment', 'Transaksi tidak sah Tempah Subsidiari "Pembayaran Jualan"');
    PERFORM localization.add_localized_resource('Errors', 'id', 'InvalidUserId', 'User id tidak valid.');
    PERFORM localization.add_localized_resource('Errors', 'id', 'KeyValueMismatch', 'Terdapat kiraan tidak sepadan barangan utama / nilai dalam Senarai Kawalan ini.');
    PERFORM localization.add_localized_resource('Errors', 'id', 'NoTransactionToPost', 'Tidak ada transaksi untuk memposting.');
    PERFORM localization.add_localized_resource('Errors', 'id', 'ReferencingSidesNotEqual', 'Sisi referensi tidak sama.');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'BothSidesCannotHaveValue', 'どちらの借方と貸方値を持つことができません。');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'CompoundUnitOfMeasureErrorMessage', 'ベースユニット及び比較ユニットを同じにすることができない。');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'InsufficientStockWarning', '唯一の{0}{1}{2}在庫の。');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'InvalidSubTranBookPurchaseDelivery', '無効な子会社との取引ブック」」...');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'InvalidSubTranBookPurchaseQuotation', '無効な子会社との取引帳「購入配信」」');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'InvalidSubTranBookPurchaseReceipt', '無効な子会社との取引帳」購入時の領収書」」');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'InvalidSubTranBookSalesPayment', '無効な子会社との取引帳「販売支払い」');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'InvalidUserId', '無効なユーザ識別子。');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'KeyValueMismatch', 'このリストコントロール内のキー/値の項目の不一致カウントがあります。');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'NoTransactionToPost', 'トランザクションは投稿しないように。');
    PERFORM localization.add_localized_resource('Errors', 'ja', 'ReferencingSidesNotEqual', '参照辺が等しくない。');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'BothSidesCannotHaveValue', 'Kedua-dua debit dan kredit tidak boleh mempunyai nilai-nilai.');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'CompoundUnitOfMeasureErrorMessage', 'Unit asas dan bandingkan unit tidak boleh sama.');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'InsufficientStockWarning', 'Hanya {0} {1} {2} ditinggalkan dalam stok.');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'InvalidSubTranBookPurchaseDelivery', 'Transaksi tidak sah Subsidiari Buku "Penghantaran Pembelian"');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'InvalidSubTranBookPurchaseQuotation', 'Transaksi tidak sah Tempah Subsidiari "Pembelian Sebutharga"');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'InvalidSubTranBookPurchaseReceipt', 'Transaksi tidak sah Subsidiari Buku "Resit Pembelian"');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'InvalidSubTranBookSalesPayment', 'Transaksi tidak sah Tempah Subsidiari "Pembayaran Jualan"');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'InvalidUserId', 'Pengecam pengguna tidak sah.');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'KeyValueMismatch', 'Terdapat kiraan tidak sepadan barangan utama / nilai dalam Senarai Kawalan ini.');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'NoTransactionToPost', 'Tiada urus niaga untuk mencatat.');
    PERFORM localization.add_localized_resource('Errors', 'ms', 'ReferencingSidesNotEqual', 'Sisi rujukan tidak sama.');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'BothSidesCannotHaveValue', 'Zowel debet en credit kunt geen waarden hebben.');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'CompoundUnitOfMeasureErrorMessage', 'De basiseenheid en vergelijk toestel kan niet hetzelfde zijn.');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'InsufficientStockWarning', 'Alleen {0} {1} van {2} op voorraad.');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'InvalidSubTranBookPurchaseDelivery', 'ongeldige Dochteronderneming Transacties Boek "Aankoop Delivery"');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'InvalidSubTranBookPurchaseQuotation', 'ongeldige Dochteronderneming Transacties Boek "Aankoop Offerte"');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'InvalidSubTranBookPurchaseReceipt', 'ongeldige Dochteronderneming Transacties Book "Kwitantie"');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'InvalidSubTranBookSalesPayment', 'ongeldige Dochteronderneming Transacties Book "Sales Betaling"');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'InvalidUserId', 'Ongeldige gebruikers-id.');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'KeyValueMismatch', 'Er is een mismatches telling van key / value items in deze lijst Controle.');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'NoTransactionToPost', 'Geen transactie te plaatsen.');
    PERFORM localization.add_localized_resource('Errors', 'nl', 'ReferencingSidesNotEqual', 'De verwijzingen zijkanten zijn niet gelijk.');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'BothSidesCannotHaveValue', 'Ambos de débito e de crédito não podem ter valores.');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'CompoundUnitOfMeasureErrorMessage', 'A unidade de base e comparar unidade não pode ser o mesmo.');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'InsufficientStockWarning', 'Só {0} {1} de {2} deixou em estoque.');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'InvalidSubTranBookPurchaseDelivery', 'inválido Transações Subsidiários Book "Entrega Comprar ''"');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'InvalidSubTranBookPurchaseQuotation', 'Transações Subsidiários inválidos Book "Cotação de Compra"');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'InvalidSubTranBookPurchaseReceipt', 'Transações Subsidiários inválidos Book "recibo de compra ''"');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'InvalidSubTranBookSalesPayment', 'inválido Transações Subsidiários Book "Pagamento de Vendas"');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'InvalidUserId', 'Identificador de usuário inválido.');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'KeyValueMismatch', 'Há uma contagem de descasamento de itens de chave / valor neste ListControl.');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'NoTransactionToPost', 'Nenhuma transação para postar.');
    PERFORM localization.add_localized_resource('Errors', 'pt', 'ReferencingSidesNotEqual', 'Os lados que fazem referência não são iguais.');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'BothSidesCannotHaveValue', 'И дебет и кредит не может иметь значения.');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'CompoundUnitOfMeasureErrorMessage', 'Базовый блок и сравнить устройство не может быть таким же.');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'InsufficientStockWarning', 'Только {0} {1} {2} оставил в запасе.');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'InvalidSubTranBookPurchaseDelivery', 'Неверный Вспомогательные Сделки Книга "Покупка Доставка"');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'InvalidSubTranBookPurchaseQuotation', 'Недействительные сделки Вспомогательные Книга "Покупка цитаты"');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'InvalidSubTranBookPurchaseReceipt', 'Неверный Вспомогательные Сделки Книга "Покупка Получение"');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'InvalidSubTranBookSalesPayment', 'Неверный Вспомогательные Сделки Книга "Оплата по продажам"');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'InvalidUserId', 'Неверный идентификатор пользователя.');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'KeyValueMismatch', 'Существует несоответствия кол-во ключ / значение пунктов в этом списке контроля.');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'NoTransactionToPost', 'Сделка не чтобы оставлять сообщения.');
    PERFORM localization.add_localized_resource('Errors', 'ru', 'ReferencingSidesNotEqual', 'Ссылающейся стороны не равны.');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'BothSidesCannotHaveValue', 'Både debet och kredit kan inte ha värden.');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'CompoundUnitOfMeasureErrorMessage', 'Basenheten och jämför enheten kan inte vara detsamma.');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'InsufficientStockWarning', 'Endast {0} {1} av {2} kvar i lager.');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'InvalidSubTranBookPurchaseDelivery', 'Ogiltig Dotterbolag Transaktioner Bok "Purchase Delivery"');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'InvalidSubTranBookPurchaseQuotation', 'Ogiltiga Dotterbolag Transaktioner Bok "Purchase Offert"');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'InvalidSubTranBookPurchaseReceipt', 'Ogiltig Dotterbolag Transaktioner Bok "inköpskvitto"');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'InvalidSubTranBookSalesPayment', 'Ogiltig Dotterbolag Transaktioner Bok "Försäljning Payment"');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'InvalidUserId', 'Ogiltig användaridentifieraren.');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'KeyValueMismatch', 'Det finns en duplexnivÃ räkna av nyckel / värde poster i denna lista Control.');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'NoTransactionToPost', 'Ingen transaktion för att posta.');
    PERFORM localization.add_localized_resource('Errors', 'sv', 'ReferencingSidesNotEqual', 'De refererar sidorna är inte lika.');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'BothSidesCannotHaveValue', '双方借贷不能有值。');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'CompoundUnitOfMeasureErrorMessage', '基本单元和比较单元不能相同。');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'InsufficientStockWarning', '只有{0}{1}{2}留在股市。');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'InvalidSubTranBookPurchaseDelivery', '无效的子公司交易书“购机送”');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'InvalidSubTranBookPurchaseQuotation', '无效的子公司交易书“购买报价”');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'InvalidSubTranBookPurchaseReceipt', '无效的子公司交易书“外购入库单”');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'InvalidSubTranBookSalesPayment', '无效的子公司交易书“销售支付”');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'InvalidUserId', '无效的用户标识符。');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'KeyValueMismatch', '有一个在这个列表控制键/值项的数量不匹配。');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'NoTransactionToPost', '后无交易。');
    PERFORM localization.add_localized_resource('Errors', 'zh', 'ReferencingSidesNotEqual', '引用双方不相等。');
    PERFORM localization.add_localized_resource('Labels', 'de', 'AllFieldsRequired', 'Alle Felder sind erforderlich.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'CannotWithdrawNotValidGLTransaction', 'Kann nicht zurücktreten Transaktion. Dies ist ein nicht gültiger Hauptbuch-Transaktion.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'CannotWithdrawTransaction', 'Kann nicht zurücktreten Transaktion.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'ClickHereToDownload', 'Klicken Sie hier zum Download.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'ConfirmedPasswordDoesNotMatch', 'Das bestätigen Kennwort nicht übereinstimmt.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'DatabaseBackupSuccessful', 'Der Datenbank-Backup war erfolgreich.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'DaysLowerCase', 'Tage');
    PERFORM localization.add_localized_resource('Labels', 'de', 'EmailBody', '<h2> Hallo, </ h2> <p> Hier finden Sie das angehängte Dokument. </ p> <p> Danke. <br /> MixERP </ p>');
    PERFORM localization.add_localized_resource('Labels', 'de', 'EmailSentConfirmation', 'Eine E-Mail an {0} gesendet.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'FlagLabel', 'Sie können diese Transaktion mit einem Flag markieren, aber Sie werden nicht in der Lage, die Flaggen von anderen Benutzern zu sehen.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'GoToChecklistWindow', 'Zum Fenster Checkliste.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'GoToTop', 'zurück nach oben');
    PERFORM localization.add_localized_resource('Labels', 'de', 'JustAMomentPlease', 'Einen Augenblick bitte!');
    PERFORM localization.add_localized_resource('Labels', 'de', 'NumRowsAffected', '{0} Zeilen betroffen.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'OpeningInventoryAlreadyEntered', 'Anfangsbestand bereits für dieses Amt eingetragen.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'PartyDescription', 'Parteien kollektiv zu Lieferanten, Kunden, Agenten und Händler beziehen.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'SelectAFlag', 'Wählen Sie eine Flagge.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'TaskCompletedSuccessfully', 'Die Aufgabe wurde erfolgreich abgeschlossen.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'ThankYouForYourBusiness', 'Vielen Dank für Ihr Unternehmen.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'ThisFieldIsRequired', 'Dieses Feld ist erforderlich.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'TransactionApprovedDetails', 'Diese Transaktion wurde von {0} um {1} zugelassen.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'TransactionAutoApprovedDetails', 'Diese Transaktion wurde automatisch von {0} um {1} zugelassen.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'TransactionAwaitingVerification', 'Diese Transaktion wird wartet auf Bestätigung eines Administrators.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'TransactionClosedDetails', 'Diese Transaktion wurde von {0} um {1} geschlossen. Grund: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'de', 'TransactionPostedSuccessfully', 'Die Transaktion wurde erfolgreich gebucht.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'TransactionRejectedDetails', 'Diese Transaktion wurde von {0} um {1} abgelehnt. Grund: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'de', 'TransactionWithdrawalInformation', 'Wenn Sie eine Transaktion zurückziehen, wird es nicht in die Workflow-Modul weitergeleitet. Das bedeutet, dass Sie Ihre Transaktionen zurückgenommen werden abgelehnt und bedürfen keiner weiteren Überprüfung. Allerdings werden Sie nicht in der Lage, diese Transaktion später unwithdraw sein.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'TransactionWithdrawnDetails', 'Diese Transaktion wurde von {0} um {1} zurückgezogen. Grund: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'de', 'TransactionWithdrawnMessage', 'Die Transaktion wurde erfolgreich zurückgezogen. Darüber hinaus wird diese Aktion die alle am und nach dem "{0}" erstellten Berichte beeinflussen.');
    PERFORM localization.add_localized_resource('Labels', 'de', 'UserGreeting', 'Hallo {0}!');
    PERFORM localization.add_localized_resource('Labels', 'de', 'YourPasswordWasChanged', 'Uw wachtwoord is gewijzigd.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'AllFieldsRequired', 'Todos los campos son obligatorios.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'CannotWithdrawNotValidGLTransaction', 'No se puede retirar transacción. Esto es un no una transacción de libro mayor validez.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'CannotWithdrawTransaction', 'No se puede retirar transacción.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'ClickHereToDownload', 'Haga clic aquí para descargar.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'ConfirmedPasswordDoesNotMatch', 'La confirmación de contraseña no coincide.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'DatabaseBackupSuccessful', 'La copia de Seguridad de Base de Datos se ha Realizado correctamente.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'DaysLowerCase', 'días');
    PERFORM localization.add_localized_resource('Labels', 'es', 'EmailBody', 'h2> Hola, </ h2> <p> Por favor, encontrar el documento adjunto. </ p> <p> Gracias. <br /> MixERP </ p>');
    PERFORM localization.add_localized_resource('Labels', 'es', 'EmailSentConfirmation', 'Un correo electrónico fue enviado a {0}.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'FlagLabel', 'Puede marcar esta transacción con una bandera, sin embargo usted no será capaz de ver las banderas creadas por otros usuarios.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'GoToChecklistWindow', 'Ir a la ventana Lista de comprobación.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'GoToTop', 'Ir a la parte superior.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'JustAMomentPlease', 'Un momento, por favor!');
    PERFORM localization.add_localized_resource('Labels', 'es', 'NumRowsAffected', '{0} filas afectadas.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'OpeningInventoryAlreadyEntered', 'Inventario de apertura ya se ha introducido para esta función.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'PartyDescription', 'Partes se refieren colectivamente a los proveedores, clientes, agentes y distribuidores.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'SelectAFlag', 'Seleccione una bandera.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'TaskCompletedSuccessfully', 'Tarea completada con éxito.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'ThankYouForYourBusiness', 'Gracias por su compra.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'ThisFieldIsRequired', 'Este campo es obligatorio.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'TransactionApprovedDetails', 'Esta operación fue aprobada por {0} del {1}.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'TransactionAutoApprovedDetails', 'Esta operación fue aprobada automáticamente por {0} del {1}.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'TransactionAwaitingVerification', 'Esta transacción está pendiente de verificación por parte de un administrador.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'TransactionClosedDetails', 'Esta operación se ha cerrado por {0} del {1}. Motivo: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'es', 'TransactionPostedSuccessfully', 'La transacción se registró con éxito.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'TransactionRejectedDetails', 'Esta transacción fue rechazada por {0} del {1}. Motivo: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'es', 'TransactionWithdrawalInformation', 'Cuando usted retira una transacción, no se enviará al módulo de flujo de trabajo. Esto significa que sus transacciones retirados son rechazados y no requieren mayor verificación. Sin embargo, usted no será capaz de unwithdraw esta transacción después.');
    PERFORM localization.add_localized_resource('Labels', 'es', 'TransactionWithdrawnDetails', 'Esta transacción fue retirado por {0} del {1}. Motivo: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'es', 'TransactionWithdrawnMessage', 'La transacción fue retirado con éxito. Además, esta acción afectará a los todos los informes producidos en y después de "{0}".');
    PERFORM localization.add_localized_resource('Labels', 'es', 'UserGreeting', 'Hola {0}!');
    PERFORM localization.add_localized_resource('Labels', 'es', 'YourPasswordWasChanged', 'Su contraseña ha sido cambiada.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'AllFieldsRequired', 'Lahat ng mga patlang ay kinakailangan.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'CannotWithdrawNotValidGLTransaction', 'Hindi ma-withdraw ng transaksyon. Ito ay isang hindi wastong transaksyon Pangkalahatang Ledger.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'CannotWithdrawTransaction', 'Hindi ma-withdraw ng transaksyon.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'ClickHereToDownload', 'Mag-click dito upang i-download.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'ConfirmedPasswordDoesNotMatch', 'Ang kumpirmahin password ay hindi tumutugma.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'DatabaseBackupSuccessful', 'Ang backup database ay matagumpay.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'DaysLowerCase', 'Mga Araw');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'EmailBody', '<h2> Hi, </ h2> <p> Mangyaring hanapin ang nakalakip na dokumento. </ p> <p> Salamat sa iyo. <br /> MixERP </ p>');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'EmailSentConfirmation', 'Ang isang email ay ipinadala sa {0}.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'FlagLabel', 'Maaari mong markahan ang transaksyong ito sa isang flag, gayunpaman, hindi mo magagawang makita ang mga flag na nilikha ng iba pang mga gumagamit.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'GoToChecklistWindow', 'Pumunta sa checklist window.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'GoToTop', 'Pumunta sa tuktok.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'JustAMomentPlease', 'Sandali lamang, mangyaring!');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'NumRowsAffected', '{0} hilera apektado.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'OpeningInventoryAlreadyEntered', 'Pagbubukas ng imbentaryo na ang ipinasok ay para sa opisina na ito.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'PartyDescription', 'Partido ng sama-sama-refer sa mga supplier, mga customer, mga ahente, at dealers.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'SelectAFlag', 'Pumili ng isang flag.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'TaskCompletedSuccessfully', 'Gawain ay matagumpay na nakumpleto.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'ThankYouForYourBusiness', 'Salamat sa iyo para sa iyong negosyo.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'ThisFieldIsRequired', 'Ang patlang na ito ay kinakailangan.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'TransactionApprovedDetails', 'Transaksyon na ito ay inaprubahan ng {0} sa {1}.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'TransactionAutoApprovedDetails', 'Transaksyong ito Awtomatikong naaprubahan sa pamamagitan ng {0} sa {1}.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'TransactionAwaitingVerification', 'Transaksyon na ito ay naghihintay ng pag-verify mula sa isang administrator.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'TransactionClosedDetails', 'Transaksyon na ito ay sarado sa pamamagitan ng {0} sa {1}. Dahilan: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'TransactionPostedSuccessfully', 'Ang transaksiyon ay matagumpay na nai-post.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'TransactionRejectedDetails', 'Transaksyon na ito ay tinanggihan ng {0} sa {1}. Dahilan: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'TransactionWithdrawalInformation', 'Kapag withdraw ka ng isang transaksyon, hindi ito ipapasa sa module workflow. Ito ay nangangahulugan na ang iyong kinuha transaksyon ay tinanggihan at nangangailangan ng mga karagdagang pag-verify. Gayunpaman, hindi mo magagawang i-unwithdraw sa transaksyong ito sa ibang pagkakataon.');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'TransactionWithdrawnDetails', 'Transaksyon na ito ay kinuha sa pamamagitan ng {0} sa {1}. Dahilan: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'TransactionWithdrawnMessage', 'Ang transaksiyon ay matagumpay na-withdraw. Dagdag pa rito, ang pagkilos na ito ay makakaapekto sa lahat ng mga ulat na ginawa sa at pagkatapos "{0}".');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'UserGreeting', 'Hi {0}!');
    PERFORM localization.add_localized_resource('Labels', 'fil', 'YourPasswordWasChanged', 'Ba ang iyong password nagbago.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'AllFieldsRequired', 'Tous les champs sont requis.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'CannotWithdrawNotValidGLTransaction', 'Vous ne pouvez pas retirer transaction. Ce est un pas une transaction General Ledger valide.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'CannotWithdrawTransaction', 'Vous ne pouvez pas retirer transaction.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'ClickHereToDownload', 'Cliquez ici pour télécharger.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'ConfirmedPasswordDoesNotMatch', 'Le mot de passe de confirmation ne correspond pas.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'DatabaseBackupSuccessful', 'La sauvegarde de base de données a réussi.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'DaysLowerCase', 'journées');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'EmailBody', '<h2> Salut, </ h2> <p> Se il vous plaît trouver le document ci-joint. </ p> <p> Merci. <br /> MixERP </ p>');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'EmailSentConfirmation', 'Un e-mail a été envoyé à {0}.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'FlagLabel', 'Vous pouvez marquer cette transaction avec un drapeau, mais vous ne serez pas en mesure de voir les drapeaux créés par d''autres utilisateurs.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'GoToChecklistWindow', 'Aller à la liste de vérification fenêtre.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'GoToTop', 'Aller en haut de page.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'JustAMomentPlease', 'Juste un instant, se il vous plaît!');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'NumRowsAffected', '{0} lignes affectées.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'OpeningInventoryAlreadyEntered', 'Stock d''ouverture a déjà été saisi pour cette fonction.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'PartyDescription', 'Parties désignent collectivement les fournisseurs, les clients, les agents et les courtiers.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'SelectAFlag', 'Choisissez un drapeau.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'TaskCompletedSuccessfully', 'La tâche a été achevée avec succès.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'ThankYouForYourBusiness', 'Nous vous remercions de votre entreprise.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'ThisFieldIsRequired', 'Ce champ est obligatoire.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'TransactionApprovedDetails', 'Cette transaction a été approuvée par {0} sur {1}.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'TransactionAutoApprovedDetails', 'Cette transaction a été automatiquement approuvé par {0} sur {1}.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'TransactionAwaitingVerification', 'Cette transaction est en attente de la vérification d''un administrateur.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'TransactionClosedDetails', 'Cette transaction a été finalisée par {0} sur {1}. Motif: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'TransactionPostedSuccessfully', 'La transaction a été publié avec succès.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'TransactionRejectedDetails', 'Cette transaction a été rejetée par {0} sur {1}. Motif: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'TransactionWithdrawalInformation', 'Lorsque vous retirez une transaction, il ne sera pas transmise au module de workflow. Cela signifie que vos transactions retirés sont rejetées et ne nécessitent pas de vérification supplémentaire. Toutefois, vous ne serez pas en mesure de unwithdraw cette opération plus tard.');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'TransactionWithdrawnDetails', 'Cette transaction a été retirée par {0} sur {1}. Motif: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'TransactionWithdrawnMessage', 'La transaction a été retirée avec succès. En outre, cette action aura une incidence sur les tous les rapports produits sur et après "{0}".');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'UserGreeting', 'Salut {0}!');
    PERFORM localization.add_localized_resource('Labels', 'fr', 'YourPasswordWasChanged', 'Votre mot de passe a été changé.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'AllFieldsRequired', 'Semua bidang yang diperlukan.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'CannotWithdrawNotValidGLTransaction', 'Tidak dapat menarik transaksi. Ini adalah bukan merupakan transaksi General Ledger valid.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'CannotWithdrawTransaction', 'Tidak dapat menarik transaksi.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'ClickHereToDownload', 'Klik di sini untuk men-download.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'ConfirmedPasswordDoesNotMatch', 'Sandi konfirmasi tidak cocok.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'DatabaseBackupSuccessful', 'Database backup berhasil.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'DaysLowerCase', 'hari Hari');
    PERFORM localization.add_localized_resource('Labels', 'id', 'EmailBody', '<h2> Hi, </ h2> <p> Silakan menemukan dokumen yang dilampirkan. </ p> <p> Terima kasih. <br /> MixERP </ p>');
    PERFORM localization.add_localized_resource('Labels', 'id', 'EmailSentConfirmation', 'Sebuah email dikirim ke {0}.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'FlagLabel', 'Anda boleh menandakan urus niaga ini dengan bendera, tetapi anda tidak akan dapat melihat bendera yang dibuat oleh pengguna lain.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'GoToChecklistWindow', 'Pergi ke Senarai Semak tetingkap');
    PERFORM localization.add_localized_resource('Labels', 'id', 'GoToTop', 'Pergi Ke Atas');
    PERFORM localization.add_localized_resource('Labels', 'id', 'JustAMomentPlease', 'Hanya seketika, sila!');
    PERFORM localization.add_localized_resource('Labels', 'id', 'NumRowsAffected', '{0}  baris terpengaruh.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'OpeningInventoryAlreadyEntered', 'Membuka persediaan telah dimasukkan untuk kantor ini.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'PartyDescription', 'Pihak kolektif merujuk kepada pemasok, pelanggan, agen, dan dealer.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'SelectAFlag', 'Pilih bendera.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'TaskCompletedSuccessfully', 'Tugas itu selesai dengan sukses.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'ThankYouForYourBusiness', 'Terima kasih untuk bisnis Anda.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'ThisFieldIsRequired', 'This field is required.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'TransactionApprovedDetails', 'Transaksi ini telah disetujui oleh {0} pada {1}.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'TransactionAutoApprovedDetails', 'Transaksi ini secara otomatis disetujui oleh {0} pada {1}.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'TransactionAwaitingVerification', 'Transaksi ini sedang menunggu verifikasi dari administrator.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'TransactionClosedDetails', 'Transaksi ini ditutup oleh {0} pada {1}. Alasan: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'id', 'TransactionPostedSuccessfully', 'Transaksi telah diposting berhasil.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'TransactionRejectedDetails', 'Transaksi ini ditolak oleh {0} pada {1}. Alasan: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'id', 'TransactionWithdrawalInformation', 'Ketika Anda menarik transaksi, tidak akan diteruskan ke modul alur kerja. Ini berarti bahwa transaksi Anda ditarik ditolak dan tidak memerlukan verifikasi lebih lanjut. Namun, Anda tidak akan dapat unwithdraw transaksi ini nanti.');
    PERFORM localization.add_localized_resource('Labels', 'id', 'TransactionWithdrawnDetails', 'Transaksi ini ditarik oleh {0} pada {1}. Alasan: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'id', 'TransactionWithdrawnMessage', 'Transaksi tersebut telah ditarik berhasil. Selain itu, tindakan ini akan mempengaruhi semua laporan yang dihasilkan dan setelah "{0}".');
    PERFORM localization.add_localized_resource('Labels', 'id', 'UserGreeting', 'Hi Juga{0}!');
    PERFORM localization.add_localized_resource('Labels', 'id', 'YourPasswordWasChanged', 'Your password was changed.');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'AllFieldsRequired', '全て必須項目です。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'CannotWithdrawNotValidGLTransaction', 'トランザクションを撤回することはできません。これはいない有効なGLトランザクションである。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'CannotWithdrawTransaction', 'トランザクションを撤回することはできません。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'ClickHereToDownload', 'ダウンロードするにはここをクリックしてください。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'ConfirmedPasswordDoesNotMatch', '確認パスワードが一致しません。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'DatabaseBackupSuccessful', 'データベースのバックアップが成功しました。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'DaysLowerCase', '日数');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'EmailBody', '<h2>こんにちは、</ h2><p>添付文書を見つけてくださいます。</ p> <p>/> MixERPます。</ p><br。ありがとうございます');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'EmailSentConfirmation', '電子メールは{0}に送られました。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'FlagLabel', 'ただし、他のユーザーが作成したフラグを参照することはできません、フラグでこのトランザクションをマークすることができます。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'GoToChecklistWindow', 'ウィンドウをチェックリストに進みます。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'GoToTop', 'ページのトップへ');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'JustAMomentPlease', 'ちょっと待って、してください！');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'NumRowsAffected', '{0}の行が影響を受けた。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'OpeningInventoryAlreadyEntered', '在庫を開くがすでにこのオフィスのために入力されています。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'PartyDescription', '締約国は、集合的にサプライヤー、顧客、エージェント、およびディーラーを参照してください。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'SelectAFlag', 'フラグを選択します。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'TaskCompletedSuccessfully', 'タスクが正常に完了した。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'ThankYouForYourBusiness', 'あなたのビジネスをありがとうございました。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'ThisFieldIsRequired', 'この項目は必須です。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'TransactionApprovedDetails', 'この取引は、{1}に{0}によって承認された。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'TransactionAutoApprovedDetails', 'このトランザクションは自動的に{1}に{0}によって承認された。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'TransactionAwaitingVerification', 'このトランザクションは、管理者からの確認を待っている。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'TransactionClosedDetails', 'この取引は、{1}に{0}によって閉鎖された。理由："{2}"。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'TransactionPostedSuccessfully', 'トランザクションは正常に投稿されました。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'TransactionRejectedDetails', 'このトランザクションは、{0}{1}上によって拒否されました。理由："{2}"。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'TransactionWithdrawalInformation', 'あなたが取引を撤回した場合、それは、ワークフローモジュールに転送されません。これはあなたの撤退取引が拒否され、それ以上の検証を必要としないことを意味します。ただし、国連に後でこのトランザクションを撤回することはできません。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'TransactionWithdrawnDetails', 'この取引は、{1}に{0}によって撤回された。理由："{2}"。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'TransactionWithdrawnMessage', 'トランザクションは正常に撤回された。また、このアクションは、上と"{0}"の後に生成されたすべてのレポートに影響します。');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'UserGreeting', 'こんにちは{0}！');
    PERFORM localization.add_localized_resource('Labels', 'ja', 'YourPasswordWasChanged', 'あなたのパスワードが変更されました。');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'AllFieldsRequired', 'Semua medan yang diperlukan.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'CannotWithdrawNotValidGLTransaction', 'Transaksi tidak boleh ditarik balik. Ini bukan transaksi Lejar Am yang sah.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'CannotWithdrawTransaction', 'Transaksi tidak boleh ditarik balik.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'ClickHereToDownload', 'Klik di sini untuk memuat turun.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'ConfirmedPasswordDoesNotMatch', 'Kata laluan yang mengesahkan tidak sama.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'DatabaseBackupSuccessful', 'Sandaran pangkalan data berjaya.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'DaysLowerCase', 'hari');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'EmailBody', '<h2> Hello </ h2> <p> Sila mencari dokumen yang dilampirkan. </ p> <p> Terima kasih. <br /> MixERP </ p>');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'EmailSentConfirmation', 'Satu e-mel telah dihantar kepada {0}.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'FlagLabel', 'Anda boleh menandakan urus niaga ini dengan bendera, tetapi anda tidak akan dapat melihat bendera yang dibuat oleh pengguna lain.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'GoToChecklistWindow', 'Pergi ke Senarai Semak tetingkap');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'GoToTop', 'Pergi Ke Atas');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'JustAMomentPlease', 'Hanya seketika, sila!');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'NumRowsAffected', '{0} baris terjejas.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'OpeningInventoryAlreadyEntered', 'Membuka inventori telah pun terjalin untuk jawatan ini.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'PartyDescription', 'Pihak kolektif merujuk kepada pembekal, pelanggan, ejen, dan para peniaga.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'SelectAFlag', 'Pilih bendera.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'TaskCompletedSuccessfully', 'Tugas tersebut telah diselesaikan dengan jayanya.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'ThankYouForYourBusiness', 'Terima kasih untuk perniagaan anda.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'ThisFieldIsRequired', 'Medan ini dikehendaki.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'TransactionApprovedDetails', 'Urus niaga ini telah diluluskan oleh {0} pada {1}.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'TransactionAutoApprovedDetails', 'Urus niaga ini telah secara automatik diluluskan oleh {0} pada {1}.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'TransactionAwaitingVerification', 'Urus niaga ini sedang menunggu pengesahan daripada pentadbir.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'TransactionClosedDetails', 'Urus niaga ini telah ditutup oleh {0} pada {1}. Sebab: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'TransactionPostedSuccessfully', 'Mencatatkan urus niaga berjaya.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'TransactionRejectedDetails', 'Urus niaga ini telah ditolak oleh {0} pada {1}. Sebab: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'TransactionWithdrawalInformation', 'Apabila anda menarik balik urus niaga, ia tidak akan dikemukakan kepada modul aliran kerja. Ini bermakna bahawa transaksi ditarik balik anda ditolak dan tidak memerlukan pengesahan lanjut. Walau bagaimanapun, anda tidak akan dapat unwithdraw transaksi ini kemudian.');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'TransactionWithdrawnDetails', 'Urus niaga ini telah ditarik balik oleh {0} pada {1}. Sebab: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'TransactionWithdrawnMessage', 'Transaksi ini telah ditarik balik dengan jayanya. Selain itu, tindakan ini akan memberi kesan kepada semua laporan yang dikeluarkan pada dan selepas "{0}".');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'UserGreeting', 'Hi {0}!');
    PERFORM localization.add_localized_resource('Labels', 'ms', 'YourPasswordWasChanged', 'Kata laluan anda telah ditukar.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'AllFieldsRequired', 'Alle velden zijn verplicht.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'CannotWithdrawNotValidGLTransaction', 'Kan niet terug te trekken transactie. Dit is een niet geldige grootboek transactie.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'CannotWithdrawTransaction', 'Kan niet terug te trekken transactie.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'ClickHereToDownload', 'Klik hier om te downloaden.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'ConfirmedPasswordDoesNotMatch', 'Het bevestigen wachtwoord komt niet overeen.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'DatabaseBackupSuccessful', 'De database back-up was succesvol.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'DaysLowerCase', 'dagen');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'EmailBody', '<h2> Hallo, </ h2> <p> Hieronder vindt u het bijgevoegde document. </ p> <p> Bedankt. <br /> MixERP </ p>');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'EmailSentConfirmation', 'Een e-mail is verzonden naar {0}.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'FlagLabel', 'U kunt deze transactie markeren met een vlag, maar u zult niet in staat zijn om de vlaggen die door andere gebruikers zien.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'GoToChecklistWindow', 'Ga naar venster checklist.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'GoToTop', 'Ga naar de top.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'JustAMomentPlease', 'Gewoon een geduld!');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'NumRowsAffected', '{0} rijen beïnvloed.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'OpeningInventoryAlreadyEntered', 'Het openen van de inventaris heeft al voor deze functie is ingevoerd.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'PartyDescription', 'Partijen gezamenlijk verwijzen naar leveranciers, klanten, agenten en dealers.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'SelectAFlag', 'Selecteer een vlag.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'TaskCompletedSuccessfully', 'De taak werd met succes afgerond.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'ThankYouForYourBusiness', 'Dank u voor uw bedrijf.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'ThisFieldIsRequired', 'Dit veld is verplicht.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'TransactionApprovedDetails', 'Deze transactie werd goedgekeurd door {0} op {1}.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'TransactionAutoApprovedDetails', 'Deze transactie werd automatisch goedgekeurd door {0} op {1}.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'TransactionAwaitingVerification', 'Deze transactie is in afwachting van de verificatie van een beheerder.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'TransactionClosedDetails', 'Deze transactie werd gesloten door {0} op {1}. Reden: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'TransactionPostedSuccessfully', 'De transactie werd met succes geplaatst.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'TransactionRejectedDetails', 'Deze transactie werd verworpen door {0} op {1}. Reden: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'TransactionWithdrawalInformation', 'Wanneer u een transactie in te trekken, zal het niet worden doorgestuurd naar de workflow module. Dit betekent dat uw ingetrokken transacties worden afgewezen en vereisen geen verdere controle. Maar, zult u niet in staat zijn om deze transactie later unwithdraw.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'TransactionWithdrawnDetails', 'Deze transactie werd ingetrokken door {0} op {1}. Reden: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'TransactionWithdrawnMessage', 'De transactie werd succesvol ingetrokken. Bovendien zal deze actie invloed op de productie van en na "{0}" alle rapporten.');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'UserGreeting', 'Hallo {0}!');
    PERFORM localization.add_localized_resource('Labels', 'nl', 'YourPasswordWasChanged', 'Uw wachtwoord is gewijzigd.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'AllFieldsRequired', 'Todos os campos são necessários.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'CannotWithdrawNotValidGLTransaction', 'Não é possível retirar transação. Este um não é uma operação General Ledger válido.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'CannotWithdrawTransaction', 'Não é possível retirar transação.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'ClickHereToDownload', 'Clique aqui para baixar.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'ConfirmedPasswordDoesNotMatch', 'A senha de confirmação não corresponde.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'DatabaseBackupSuccessful', 'O backup do banco de dados foi bem-sucedida.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'DaysLowerCase', 'dias');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'EmailBody', 'h2> Oi, </ h2> <p> Por favor, encontrar o documento em anexo. </ p> <p> Obrigado. <br /> MixERP </ p>');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'EmailSentConfirmation', 'Um e-mail foi enviado para {0}.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'FlagLabel', 'Você pode marcar esta transação com uma bandeira, no entanto, você não será capaz de ver as bandeiras criadas por outros usuários.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'GoToChecklistWindow', 'Ir para a lista de verificação janela.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'GoToTop', 'Ir para o topo.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'JustAMomentPlease', 'Um momento por favor!');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'NumRowsAffected', '{0} linhas afetadas.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'OpeningInventoryAlreadyEntered', 'A abertura de inventário já tenha sido inscrito para este cargo.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'PartyDescription', 'Partes se referem coletivamente a fornecedores, clientes, agentes e concessionários.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'SelectAFlag', 'Selecione uma bandeira.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'TaskCompletedSuccessfully', 'A tarefa foi concluída com sucesso.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'ThankYouForYourBusiness', 'Obrigado por seu negócio.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'ThisFieldIsRequired', 'Este campo é obrigatório.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'TransactionApprovedDetails', 'Esta operação foi aprovada por {0} de {1}.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'TransactionAutoApprovedDetails', 'Esta operação foi automaticamente aprovado por {0} de {1}.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'TransactionAwaitingVerification', 'Esta transação está aguardando verificação de um administrador.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'TransactionClosedDetails', 'Esta operação foi fechada por {0} em {1}. Motivo: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'TransactionPostedSuccessfully', 'A transação foi publicado com sucesso.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'TransactionRejectedDetails', 'Esta operação foi rejeitada por {0} em {1}. Motivo: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'TransactionWithdrawalInformation', 'Quando você retirar uma transação, não serão encaminhados para o módulo de workflow. Isso significa que suas transações retirados são rejeitadas e não requerem uma verificação mais aprofundada. No entanto, você não será capaz de unwithdraw esta operação mais tarde.');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'TransactionWithdrawnDetails', 'Esta operação foi retirada por {0} em {1}. Motivo: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'TransactionWithdrawnMessage', 'A operação foi retirada com sucesso. Além disso, esta ação irá afetar os todos os relatórios produzidos sobre e depois de "{0}".');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'UserGreeting', 'Oi {0}!');
    PERFORM localization.add_localized_resource('Labels', 'pt', 'YourPasswordWasChanged', 'Sua senha foi alterada.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'AllFieldsRequired', 'Все поля обязательны для заполнения.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'CannotWithdrawNotValidGLTransaction', 'Не можете отозвать сделку. Это не действует общее сделки Леджер.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'CannotWithdrawTransaction', 'Не можете отозвать сделку.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'ClickHereToDownload', 'Нажмите здесь, чтобы загрузить.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'ConfirmedPasswordDoesNotMatch', 'Подтверждение пароля не совпадают.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'DatabaseBackupSuccessful', 'Резервное копирование базы данных было успешным.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'DaysLowerCase', 'дней');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'EmailBody', '<h2> Привет, </ h2> <p> Вы можете найти в прикрепленном документе. </ p> <p> Спасибо. <br /> MixERP </ p>');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'EmailSentConfirmation', 'Письмо было отправлено на адрес {0}.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'FlagLabel', 'Вы можете отметить эту сделку с флагом, однако вы не сможете увидеть флажки созданные другими пользователями.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'GoToChecklistWindow', 'Перейти к контрольный список окно.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'GoToTop', 'Перейти к началу');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'JustAMomentPlease', 'Минуту, пожалуйста!');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'NumRowsAffected', '{0} строк, затронутых.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'OpeningInventoryAlreadyEntered', 'Открытие запасов уже были введены на эту должность.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'PartyDescription', 'Стороны совместно обратиться к поставщиков, клиентов, агентов и дилеров.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'SelectAFlag', 'Выберите флаг.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'TaskCompletedSuccessfully', 'Задача была успешно завершена.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'ThankYouForYourBusiness', 'Спасибо для вашего бизнеса.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'ThisFieldIsRequired', 'Это поле обязательно к заполнению.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'TransactionApprovedDetails', 'Эта сделка была одобрена {0} на {1}.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'TransactionAutoApprovedDetails', 'Данная сделка была автоматически одобрена {0} на {1}.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'TransactionAwaitingVerification', 'Эта сделка ожидает проверки от имени администратора.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'TransactionClosedDetails', 'Эта сделка была закрыта через {0} на {1}. Причина: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'TransactionPostedSuccessfully', 'Сделка была успешно размещена.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'TransactionRejectedDetails', 'Эта сделка была отклонена {0} {1}. Причина: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'TransactionWithdrawalInformation', 'Когда вы снимаете транзакции, он не будет направлен к модулю рабочего процесса. Это означает, что ваши изъятые сделки, отклоняются и не требуют дополнительной проверки. Тем не менее, вы не сможете unwithdraw эту сделку позже.');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'TransactionWithdrawnDetails', 'Данная сделка была отозвана {0} на {1}. Причина: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'TransactionWithdrawnMessage', 'Сделка была успешно снята. Кроме того, это действие будет влиять на все отчеты, полученные после "{0}".');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'UserGreeting', 'Привет {0}!');
    PERFORM localization.add_localized_resource('Labels', 'ru', 'YourPasswordWasChanged', 'Был ли ваш пароль изменен.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'AllFieldsRequired', 'Alla fält är obligatoriska.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'CannotWithdrawNotValidGLTransaction', 'Kan inte återkalla transaktionen. Detta är ett inte ett giltigt huvudbok transaktion.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'CannotWithdrawTransaction', 'Kan inte återkalla transaktionen.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'ClickHereToDownload', 'Klicka här för att ladda ner.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'ConfirmedPasswordDoesNotMatch', 'Bekräfta lösenord matchar inte.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'DatabaseBackupSuccessful', 'Den databas backup lyckades.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'DaysLowerCase', 'dagar');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'EmailBody', '<h2> Hej, </ h2> <p> Här hittar det bifogade dokumentet. </ p> <p> Tack. <br /> MixERP </ p>');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'EmailSentConfirmation', 'Ett e-postmeddelande skickades till {0}.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'FlagLabel', 'Du kan markera denna transaktion med en flagga, men du kommer inte att kunna se flaggorna skapats av andra användare.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'GoToChecklistWindow', 'Gå till checklistan fönster.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'GoToTop', 'Gå till toppen.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'JustAMomentPlease', 'Bara ett ögonblick, tack!');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'NumRowsAffected', '{0} rader påverkas.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'OpeningInventoryAlreadyEntered', 'Öppning inventering har redan skrivit för detta ämbete.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'PartyDescription', 'Parterna kollektivt hänvisa till leverantörer, kunder, agenter och återförsäljare.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'SelectAFlag', 'Välj en flagga.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'TaskCompletedSuccessfully', 'Uppgiften slutfördes med framgång.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'ThankYouForYourBusiness', 'Tack för din verksamhet.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'ThisFieldIsRequired', 'Detta fält är obligatoriskt.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'TransactionApprovedDetails', 'Affären godkändes av {0} på {1}.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'TransactionAutoApprovedDetails', 'Denna transaktion automatiskt godkänd av {0} på {1}.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'TransactionAwaitingVerification', 'Denna transaktion väntar verifiering från en administratör.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'TransactionClosedDetails', 'Affären stängdes av {0} på {1}. Anledning: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'TransactionPostedSuccessfully', 'Transaktionen var postat framgångsrikt.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'TransactionRejectedDetails', 'Denna transaktion avvisades av {0} på {1}. Anledning: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'TransactionWithdrawalInformation', 'När du tar ut en transaktion, kommer det inte att vidarebefordras till arbetsflödet modulen. Detta innebär att dina indragna transaktioner avvisas och kräver ingen ytterligare kontroll. Men du kommer inte att kunna unwithdraw denna transaktion senare.');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'TransactionWithdrawnDetails', 'Affären drogs tillbaka av {0} på {1}. Anledning: "{2}".');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'TransactionWithdrawnMessage', 'Transaktionen drogs tillbaka framgångsrikt. Dessutom kommer denna åtgärd påverkar alla rapporter som produceras på och efter "{0}".');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'UserGreeting', 'Hej {0}!');
    PERFORM localization.add_localized_resource('Labels', 'sv', 'YourPasswordWasChanged', 'Var ditt lösenord förändrats.');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'AllFieldsRequired', '所有字段是必需的。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'CannotWithdrawNotValidGLTransaction', '不能撤回交易。这是不是一个有效的总帐交易。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'CannotWithdrawTransaction', '不能撤回交易。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'ClickHereToDownload', '点击这里下载。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'ConfirmedPasswordDoesNotMatch', '确认密码不匹配。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'DatabaseBackupSuccessful', '数据库备份是成功的。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'DaysLowerCase', '天');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'EmailBody', '<h2>嗨，</ h2><p>请参考附件文件。</ p> <p>谢谢。<br/> MixERP</ P>');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'EmailSentConfirmation', '一封电子邮件被发送到{0}。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'FlagLabel', '你可以用一个标志纪念这个交易，但是你将无法看到其他用户创建的标志。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'GoToChecklistWindow', '去检查表的窗口。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'GoToTop', '返回首页');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'JustAMomentPlease', '请稍等片刻！');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'NumRowsAffected', '{0}行受到影响。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'OpeningInventoryAlreadyEntered', '期初库存已经为这个办公室输入。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'PartyDescription', '缔约方统称为供应商，客户，代理商，和经销商。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'SelectAFlag', '选择的标记。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'TaskCompletedSuccessfully', '任务成功完成。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'ThankYouForYourBusiness', '感谢您为您的企业。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'ThisFieldIsRequired', '这是必填栏。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'TransactionApprovedDetails', '此项交易已于{1}批准{0}。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'TransactionAutoApprovedDetails', '此项交易已于{1}自动批准{0}。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'TransactionAwaitingVerification', '这宗交易是由管理员等待验证。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'TransactionClosedDetails', '此项交易已于{1}关闭了{0}。原因：“{2}”。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'TransactionPostedSuccessfully', '本次交易已成功发布。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'TransactionRejectedDetails', '本次交易由{0}在{1}拒绝。原因：“{2}”。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'TransactionWithdrawalInformation', '当撤回事务时，将不被转发到工作流模块。这意味着，你撤回交易被拒绝，不需要进一步验证。但是，您将无法取消后撤销该交易。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'TransactionWithdrawnDetails', '此项交易已于{1}撤回{0}。原因：“{2}”。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'TransactionWithdrawnMessage', '本次交易已成功撤出。此外，这个动作会影响到所有的生产上，并在“{0}”的报告。');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'UserGreeting', '喜{0}！');
    PERFORM localization.add_localized_resource('Labels', 'zh', 'YourPasswordWasChanged', '您的密码已更改。');
    PERFORM localization.add_localized_resource('Messages', 'de', 'AreYouSure', 'Sind Sie sicher, Sie wissen, was du tust?');
    PERFORM localization.add_localized_resource('Messages', 'de', 'CouldNotDetermineVirtualPathError', 'Konnte nicht ermittelt virtuellen Pfad, um ein Bild zu erstellen.');
    PERFORM localization.add_localized_resource('Messages', 'de', 'DuplicateFile', 'Doppelte datei.');
    PERFORM localization.add_localized_resource('Messages', 'de', 'EODDoNotCloseWindow', 'Gelieve niet dit venster te sluiten of het bezoek aan deze pagina tijdens de initialisatie.');
    PERFORM localization.add_localized_resource('Messages', 'de', 'EODElevatedPriviledgeCanLogIn', 'Gedurende de dag-end periode, worden alleen gebruikers die verheven voorrecht toegestaan om in te loggen.');
    PERFORM localization.add_localized_resource('Messages', 'de', 'EODLogsOffUsers', 'Als je dag-end werking initialiseren, de reeds aangemelde applicatie gebruikers, waaronder u bent aangemeld weg op 120 seconden.');
    PERFORM localization.add_localized_resource('Messages', 'de', 'EODProcessIsIrreversible', 'Dit proces is onomkeerbaar.');
    PERFORM localization.add_localized_resource('Messages', 'de', 'EODRoutineTasks', 'Tijdens Einde Dag operatie, zijn routine taken zoals renteberekening, nederzettingen, en het genereren van rapporten uitgevoerd.');
    PERFORM localization.add_localized_resource('Messages', 'de', 'EODTransactionPosting', 'Wanneer u dagafsluiting bediening uitvoert voor een bepaalde datum, kan geen transactie op die datum of eerder worden veranderd, gewijzigd of verwijderd.');
    PERFORM localization.add_localized_resource('Messages', 'de', 'InvalidFile', 'Ungültige Datei!');
    PERFORM localization.add_localized_resource('Messages', 'de', 'TempDirectoryNullError', 'Können Bilder nicht erstellen, wenn der Temp-Verzeichnis ist null.');
    PERFORM localization.add_localized_resource('Messages', 'de', 'UploadFilesDeleted', 'Die hochgeladenen Dateien erfolgreich gelöscht.');
    PERFORM localization.add_localized_resource('Messages', 'es', 'AreYouSure', 'Estás seguro?');
    PERFORM localization.add_localized_resource('Messages', 'es', 'CouldNotDetermineVirtualPathError', 'No se pudo determinar ruta virtual para crear una imagen.');
    PERFORM localization.add_localized_resource('Messages', 'es', 'DuplicateFile', 'Los archivos duplicados!');
    PERFORM localization.add_localized_resource('Messages', 'es', 'EODDoNotCloseWindow', 'Por favor, no cierre esta ventana o salir de esta página durante la inicialización.');
    PERFORM localization.add_localized_resource('Messages', 'es', 'EODElevatedPriviledgeCanLogIn', 'Durante el período de días de extremo, sólo se permiten a los usuarios que tienen privilegios elevados para acceder al sistema.');
    PERFORM localization.add_localized_resource('Messages', 'es', 'EODLogsOffUsers', 'Al inicializar la operación al final del día, el que ya ha iniciado la sesión en los usuarios de aplicaciones incluidas se cierra la sesión en 120 segundos.');
    PERFORM localization.add_localized_resource('Messages', 'es', 'EODProcessIsIrreversible', 'Este proceso es irreversible.');
    PERFORM localization.add_localized_resource('Messages', 'es', 'EODRoutineTasks', 'Durante Fin de la operación el día, se llevan a cabo tareas rutinarias, como el cálculo de intereses, los asentamientos, y la generación de informes.');
    PERFORM localization.add_localized_resource('Messages', 'es', 'EODTransactionPosting', 'Al realizar Fin de la operación el día para una fecha en particular, no hay ninguna transacción en esa fecha o antes de que pueda ser alterado, cambiado o eliminado.');
    PERFORM localization.add_localized_resource('Messages', 'es', 'InvalidFile', 'Archivo no válido!');
    PERFORM localization.add_localized_resource('Messages', 'es', 'TempDirectoryNullError', 'No se puede crear una imagen cuando el directorio temporal es nulo.');
    PERFORM localization.add_localized_resource('Messages', 'es', 'UploadFilesDeleted', 'Los archivos subidos se eliminaron con éxito.');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'AreYouSure', 'Sigurado ka bang alam mo kung ano ang iyong ginagawa?');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'CouldNotDetermineVirtualPathError', 'Hindi malaman virtual landas upang lumikha ng isang imahe.');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'DuplicateFile', 'Nauulit na file!');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'EODDoNotCloseWindow', 'Mangyaring huwag isara ang window na ito o mag-navigate palayo mula sa pahinang ito sa panahon ng pagsisimula.');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'EODElevatedPriviledgeCanLogIn', 'Sa araw-end na panahon, tanging ang mga user pagkakaroon ng mataas pribilehiyo ang pinapayagan upang mag-log-in.');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'EODLogsOffUsers', 'Kapag simulan mo araw-end na operasyon, ang naka-log-in na user ng application kasama mo ay naka-log off sa 120 segundo.');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'EODProcessIsIrreversible', 'Ang prosesong ito ay hindi maaaring pawalang-bisa.');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'EODRoutineTasks', 'Sa panahon ng pagtatapos ng araw pagpapatakbo, routine na gawain katulad ng pagkalkula ng interes, pakikipag-ayos, at pagbuo ng ulat ay ginanap.');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'EODTransactionPosting', 'Kapag nagsagawa ka ng pagtatapos ng araw pagpapatakbo para sa isang partikular na petsa, walang transaksyon sa petsang iyon o bago ma-binago, binago, o tinanggal.');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'InvalidFile', 'Di-wastong file na!');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'TempDirectoryNullError', 'Hindi makalikha ng isang imahe kapag direktoryo temp ay walang bisa.');
    PERFORM localization.add_localized_resource('Messages', 'fil', 'UploadFilesDeleted', 'Ang na-upload na file ay matagumpay na natanggal.');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'AreYouSure', 'Êtes-vous sûr que vous savez ce que vous faites?');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'CouldNotDetermineVirtualPathError', 'Impossible de déterminer le chemin d''accès virtuel pour créer une image.');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'DuplicateFile', 'Fichier en double!');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'EODDoNotCloseWindow', 'Se il vous plaît ne pas fermer cette fenêtre ou naviguer loin de cette page lors de l''initialisation.');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'EODElevatedPriviledgeCanLogIn', 'Pendant la période de fin de journée, seuls les utilisateurs ayant des privilèges élevés sont autorisés à ouvrir une session.');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'EODLogsOffUsers', 'Lorsque vous initialisez opération de fin de journée, déjà connecté utilisateurs de l''application, y compris vous êtes déconnecté sur 120 secondes.');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'EODProcessIsIrreversible', 'Ce processus est irréversible.');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'EODRoutineTasks', 'Au cours de fin de l''opération de jour, les tâches de routine telles que le calcul d''intérêt, les colonies, et la génération de rapport sont effectuées.');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'EODTransactionPosting', 'Lorsque vous effectuez fin de l''opération de jour à une date donnée, aucune transaction à cette date ou avant peut être modifié, modifié ou supprimé.');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'InvalidFile', 'Fichier non valide!');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'TempDirectoryNullError', 'Vous ne pouvez pas créer une image lorsque le répertoire temp est nulle.');
    PERFORM localization.add_localized_resource('Messages', 'fr', 'UploadFilesDeleted', 'Les fichiers téléchargés ont été supprimés avec succès.');
    PERFORM localization.add_localized_resource('Messages', 'id', 'AreYouSure', 'Apakah Anda yakin Anda tahu apa yang Anda lakukan?');
    PERFORM localization.add_localized_resource('Messages', 'id', 'CouldNotDetermineVirtualPathError', 'Tidak dapat menentukan jalur virtual untuk membuat gambar.');
    PERFORM localization.add_localized_resource('Messages', 'id', 'DuplicateFile', 'Berkas duplikat!');
    PERFORM localization.add_localized_resource('Messages', 'id', 'EODDoNotCloseWindow', 'Tolong jangan menutup jendela ini atau menavigasi dari halaman ini selama inisialisasi.');
    PERFORM localization.add_localized_resource('Messages', 'id', 'EODElevatedPriviledgeCanLogIn', 'Selama periode hari-end, hanya pengguna yang memiliki hak istimewa ditinggikan diperbolehkan untuk log-in.');
    PERFORM localization.add_localized_resource('Messages', 'id', 'EODLogsOffUsers', 'Bila Anda menginisialisasi operasi sehari-end, yang sudah log-in pengguna aplikasi termasuk Anda log off pada 120 detik.');
    PERFORM localization.add_localized_resource('Messages', 'id', 'EODProcessIsIrreversible', 'Proses ini tidak dapat diubah.');
    PERFORM localization.add_localized_resource('Messages', 'id', 'EODRoutineTasks', 'Selama akhir hari operasi, tugas-tugas rutin seperti perhitungan bunga, pemukiman, dan pembuatan laporan dilakukan.');
    PERFORM localization.add_localized_resource('Messages', 'id', 'EODTransactionPosting', 'Ketika Anda melakukan akhir hari operasi untuk tanggal tertentu, tidak ada transaksi pada tanggal tersebut atau sebelum dapat diubah, diubah, atau dihapus.');
    PERFORM localization.add_localized_resource('Messages', 'id', 'InvalidFile', 'Fail tidak sah!');
    PERFORM localization.add_localized_resource('Messages', 'id', 'TempDirectoryNullError', 'Tidak dapat membuat gambar ketika direktori temp adalah null.');
    PERFORM localization.add_localized_resource('Messages', 'id', 'UploadFilesDeleted', 'File upload berhasil dihapus.');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'AreYouSure', 'あなたは何をやっている知っているあなたはよろしいですか？');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'CouldNotDetermineVirtualPathError', 'イメージを作成するための仮想パスを決定することができませんでした。');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'DuplicateFile', '重複ファイル！');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'EODDoNotCloseWindow', 'このウィンドウを閉じたり、初期化時にこのページから移動しないでください。');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'EODElevatedPriviledgeCanLogIn', '一日エンドの期間中、上昇権限を持つユーザーのみがログインを許可されます。');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'EODLogsOffUsers', 'あなたが一日エンドの操作を初期化すると、すでにログインしているアプリケーション·ユーザーを使用すると、120秒にログオフしているなど、。');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'EODProcessIsIrreversible', 'このプロセスは不可逆的である。');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'EODRoutineTasks', 'デイ動作の終了時には、そのような利息計算、決済、およびレポート作成などの日常のタスクが実行されます。');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'EODTransactionPosting', 'あなたが特定の日付にデイ操作の終了を実行すると、その日にまたはの前にトランザクションが、変更されていない変更、または削除することができます。');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'InvalidFile', '無効なファイル！');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'TempDirectoryNullError', 'tempディレクトリがnullの場合の画像を作成できません。');
    PERFORM localization.add_localized_resource('Messages', 'ja', 'UploadFilesDeleted', 'アップロードされたファイルが正常に削除されました。');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'AreYouSure', 'Adakah anda pasti anda tahu apa yang anda lakukan?');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'CouldNotDetermineVirtualPathError', 'Tidak dapat menentukan jalan yang maya untuk mewujudkan imej.');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'DuplicateFile', 'Salinan fail!');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'EODDoNotCloseWindow', 'Sila jangan tutup tetingkap ini atau keluar dari halaman ini dalam pengawalan.');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'EODElevatedPriviledgeCanLogIn', 'Dalam tempoh hari-akhirnya, hanya pengguna yang mempunyai keistimewaan tinggi dibenarkan untuk log masuk.');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'EODLogsOffUsers', 'Apabila anda memulakan operasi hari akhir, yang sudah log masuk pengguna termasuk permohonan anda log off pada 120 saat.');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'EODProcessIsIrreversible', 'Proses ini tidak dapat diubah.');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'EODRoutineTasks', 'Semasa Akhir operasi hari, tugas rutin seperti pengiraan faedah, penempatan, dan penjanaan laporan tersebut dilaksanakan.');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'EODTransactionPosting', 'Apabila anda melakukan Akhir operasi Hari untuk suatu tarikh tertentu, tiada urus niaga pada tarikh tersebut atau sebelum boleh diubah, ditukar, atau dipadam.');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'InvalidFile', 'Fail tidak sah!');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'TempDirectoryNullError', 'Tidak dapat mencipta imej apabila Direktori temp itu adalah batal.');
    PERFORM localization.add_localized_resource('Messages', 'ms', 'UploadFilesDeleted', 'Fail-fail yang dimuat naik telah berjaya dipadamkan.');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'AreYouSure', 'Weet je zeker dat je weet wat je aan het doen bent?');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'CouldNotDetermineVirtualPathError', 'Kon virtuele pad om een beeld te creëren niet bepalen.');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'DuplicateFile', 'Duplicate File!');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'EODDoNotCloseWindow', 'Gelieve niet dit venster te sluiten of het bezoek aan deze pagina tijdens de initialisatie.');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'EODElevatedPriviledgeCanLogIn', 'Gedurende de dag-end periode, worden alleen gebruikers die verheven voorrecht toegestaan om in te loggen.');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'EODLogsOffUsers', 'Als je dag-end werking initialiseren, de reeds aangemelde applicatie gebruikers, waaronder u bent aangemeld weg op 120 seconden.');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'EODProcessIsIrreversible', 'Dit proces is onomkeerbaar.');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'EODRoutineTasks', 'Tijdens End Of Day operatie, zijn routine taken zoals renteberekening, nederzettingen, en het genereren van rapporten uitgevoerd.');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'EODTransactionPosting', 'Wanneer u End Of Day bediening uitvoert voor een bepaalde datum, kan geen transactie op die datum of eerder worden veranderd, gewijzigd of verwijderd.');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'InvalidFile', 'Ongeldig bestand!');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'TempDirectoryNullError', 'Kan niet maken van een beeld wanneer de temp directory is null.');
    PERFORM localization.add_localized_resource('Messages', 'nl', 'UploadFilesDeleted', 'De geüploade bestanden zijn succesvol verwijderd.');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'AreYouSure', 'Tem certeza de que sabe o que está fazendo?');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'CouldNotDetermineVirtualPathError', 'Não foi possível determinar caminho virtual para criar uma imagem.');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'DuplicateFile', 'Duplicate File!');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'EODDoNotCloseWindow', 'Por favor, não feche esta janela ou sair desta página durante a inicialização.');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'EODElevatedPriviledgeCanLogIn', 'Durante o período do dia-final, somente os usuários com privilégios elevados são permitidos para log-in.');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'EODLogsOffUsers', 'Quando você inicializa operação do dia-end, o já usuários registrados de aplicação, incluindo você está desconectado em 120 segundos.');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'EODProcessIsIrreversible', 'Este processo é irreversível.');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'EODRoutineTasks', 'Durante a final da operação Dia, tarefas rotineiras como cálculo de juros, pagamentos, e geração de relatório são executadas.');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'EODTransactionPosting', 'Quando você executa fim da Operação Dia para uma determinada data, nenhuma transação nessa data ou antes pode ser alterado, alterada ou excluída.');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'InvalidFile', 'Arquivo inválido!');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'TempDirectoryNullError', 'Não é possível criar uma imagem quando o diretório temporário é nulo.');
    PERFORM localization.add_localized_resource('Messages', 'pt', 'UploadFilesDeleted', 'Os arquivos enviados foram apagados com êxito.');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'AreYouSure', 'Вы уверены, что вы знаете, что вы делаете?');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'CouldNotDetermineVirtualPathError', 'Не удалось определить виртуальный путь, чтобы создать изображение.');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'DuplicateFile', 'Duplicate File!');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'EODDoNotCloseWindow', 'Пожалуйста, не закрывайте это окно или уйдете с этой страницы во время инициализации.');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'EODElevatedPriviledgeCanLogIn', 'В течение дня на конец периода, только пользователи, имеющие повышенными привилегиями разрешено войти в.');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'EODLogsOffUsers', 'При инициализации день окончания работы, уже вошедшего в приложения пользователи том числе Вы выходите на 120 секунд.');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'EODProcessIsIrreversible', 'Этот процесс является необратимым.');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'EODRoutineTasks', 'В конец операционного дня, рутинных задач, таких как расчет процентов, населенных пунктов и создания отчетов выполняются.');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'EODTransactionPosting', 'При выполнении конец операционного дня для определенной даты, никакая транзакция в этот день или до не могут быть изменены, изменены или удалены.');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'InvalidFile', 'Неверный формат файла!');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'TempDirectoryNullError', 'Не удается создать образ, когда временный каталог является недействительным.');
    PERFORM localization.add_localized_resource('Messages', 'ru', 'UploadFilesDeleted', 'Загруженные файлы были успешно удалены.');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'AreYouSure', 'Är du säker på att du vet vad du gör?');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'CouldNotDetermineVirtualPathError', 'Kunde inte avgöra virtuell väg för att skapa en bild.');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'DuplicateFile', 'Dubbletter av filer!');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'EODDoNotCloseWindow', 'Stäng inte fönstret eller navigera bort från denna sida under initieringen.');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'EODElevatedPriviledgeCanLogIn', 'Under dagen slut perioden, är endast användare som har förhöjda privilegier får logga in.');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'EODLogsOffUsers', 'När du initierar dag-end drift redan inloggade applikationsanvändare inklusive du är inloggad iväg på 120 sekunder.');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'EODProcessIsIrreversible', 'Denna process är irreversibel.');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'EODRoutineTasks', 'Under Slut på Dag drift, är rutinuppgifter såsom ränteberäkning, bosättningar, och rapportgenerering utförs.');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'EODTransactionPosting', 'När du utför End Of Day drift för ett visst datum, kan ingen transaktion den dagen eller före förändras, ändras eller tas bort.');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'InvalidFile', 'Ogiltig fil!');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'TempDirectoryNullError', 'Det går inte att skapa en bild när temp katalogen är null.');
    PERFORM localization.add_localized_resource('Messages', 'sv', 'UploadFilesDeleted', 'De uppladdade filer har tagits bort.');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'AreYouSure', '你确定你知道你在做什么？');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'CouldNotDetermineVirtualPathError', '无法确定的虚拟路径来创建图像。');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'DuplicateFile', '重复的文件！');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'EODDoNotCloseWindow', '请不要关闭此窗口或初始化期间离开此页面。');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'EODElevatedPriviledgeCanLogIn', '白天年底期间，只有有提升的权限允许用户登录而定。');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'EODLogsOffUsers', '当你初始化日结束操作时，已登录的应用程序的用户，包括您在120秒注销。');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'EODProcessIsIrreversible', '这个过程是不可逆的。');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'EODRoutineTasks', '这个过程是不可逆的。');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'EODTransactionPosting', '当您为特定日期进行日终操作，在该日期或之前没有交易可以改变，更改或删除。');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'InvalidFile', '无效的文件！');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'TempDirectoryNullError', '无法创建图像时的临时目录为空。');
    PERFORM localization.add_localized_resource('Messages', 'zh', 'UploadFilesDeleted', '上传的文件被成功删除。');
    PERFORM localization.add_localized_resource('Questions', 'de', 'AreYouSure', 'Sind Sie sicher, Sie wissen, was du tust?');
    PERFORM localization.add_localized_resource('Questions', 'de', 'CannotAccessAccount', 'Kein Zugriff auf Ihr Konto?');
    PERFORM localization.add_localized_resource('Questions', 'de', 'ConfirmAnalyze', 'Dies wird Client Zugriff auf die Datenbank während der Ausführung zu sperren. Sind Sie sicher, dass Sie diese Aktion jetzt durchführen möchten?');
    PERFORM localization.add_localized_resource('Questions', 'de', 'ConfirmVacuum', 'Dies wird Client Zugriff auf die Datenbank während der Ausführung zu sperren. Sind Sie sicher, dass Sie diese Aktion jetzt durchführen möchten?');
    PERFORM localization.add_localized_resource('Questions', 'de', 'ConfirmVacuumFull', 'Dies wird Client Zugriff auf die Datenbank während der Ausführung zu sperren. Sind Sie sicher, dass Sie diese Aktion jetzt durchführen möchten?');
    PERFORM localization.add_localized_resource('Questions', 'de', 'WhatIsYourHomeCurrency', 'Was ist Ihre Startseite Umrechnung?');
    PERFORM localization.add_localized_resource('Questions', 'de', 'WithdrawalReason', 'Waarom wil je om deze transactie te trekken?');
    PERFORM localization.add_localized_resource('Questions', 'es', 'AreYouSure', 'Estás seguro?');
    PERFORM localization.add_localized_resource('Questions', 'es', 'CannotAccessAccount', 'No se puede acceder a su cuenta?');
    PERFORM localization.add_localized_resource('Questions', 'es', 'ConfirmAnalyze', 'Esto bloqueará el acceso de base de datos de clientes durante la ejecución. ¿Seguro que deseas ejecutar esta acción en este momento?');
    PERFORM localization.add_localized_resource('Questions', 'es', 'ConfirmVacuum', 'Esto bloqueará el acceso de base de datos de clientes durante la ejecución. ¿Seguro que deseas ejecutar esta acción en este momento?');
    PERFORM localization.add_localized_resource('Questions', 'es', 'ConfirmVacuumFull', 'Esto bloqueará el acceso de base de datos de clientes durante la ejecución. ¿Seguro que deseas ejecutar esta acción en este momento?');
    PERFORM localization.add_localized_resource('Questions', 'es', 'WhatIsYourHomeCurrency', '¿Cuál es su principal moneda?');
    PERFORM localization.add_localized_resource('Questions', 'es', 'WithdrawalReason', '¿Por qué quieres que retire esta transacción?');
    PERFORM localization.add_localized_resource('Questions', 'fil', 'AreYouSure', 'Sigurado ka bang alam mo kung ano ang iyong ginagawa?');
    PERFORM localization.add_localized_resource('Questions', 'fil', 'CannotAccessAccount', 'Hindi ma-access ang iyong account?');
    PERFORM localization.add_localized_resource('Questions', 'fil', 'ConfirmAnalyze', 'Ito ay i-lock ang database ng client access sa panahon ng pagganap. Sigurado ka bang gusto mong upang maisagawa ang aksyon na ito ngayon?');
    PERFORM localization.add_localized_resource('Questions', 'fil', 'ConfirmVacuum', 'Ito ay i-lock ang database ng client access sa panahon ng pagganap. Sigurado ka bang gusto mong upang maisagawa ang aksyon na ito ngayon?');
    PERFORM localization.add_localized_resource('Questions', 'fil', 'ConfirmVacuumFull', 'ay kanyang i-lock ang database ng client access sa panahon ng pagganap. Sigurado ka bang gusto mong upang maisagawa ang aksyon na ito ngayon?');
    PERFORM localization.add_localized_resource('Questions', 'fil', 'WhatIsYourHomeCurrency', 'Ano ba ang iyong Home Pera?');
    PERFORM localization.add_localized_resource('Questions', 'fil', 'WithdrawalReason', 'Bakit gusto mong i-withdraw ang transaksyong ito?');
    PERFORM localization.add_localized_resource('Questions', 'fr', 'AreYouSure', 'Êtes-vous sûr que vous savez ce que vous faites?');
    PERFORM localization.add_localized_resource('Questions', 'fr', 'CannotAccessAccount', 'Vous ne pouvez pas accéder à votre compte?');
    PERFORM localization.add_localized_resource('Questions', 'fr', 'ConfirmAnalyze', 'Ce sera verrouiller l''accès de base de données client lors de l''exécution. Etes-vous sûr que vous voulez exécuter cette action en ce moment?');
    PERFORM localization.add_localized_resource('Questions', 'fr', 'ConfirmVacuum', 'Ce sera verrouiller l''accès de base de données client lors de l''exécution. Etes-vous sûr que vous voulez exécuter cette action en ce moment?');
    PERFORM localization.add_localized_resource('Questions', 'fr', 'ConfirmVacuumFull', 'Ce sera verrouiller l''accès de base de données client lors de l''exécution. Etes-vous sûr que vous voulez exécuter cette action en ce moment?');
    PERFORM localization.add_localized_resource('Questions', 'fr', 'WhatIsYourHomeCurrency', 'Quel est votre Accueil Monnaie?');
    PERFORM localization.add_localized_resource('Questions', 'fr', 'WithdrawalReason', 'Pourquoi voulez-vous de retirer de cette transaction?');
    PERFORM localization.add_localized_resource('Questions', 'id', 'AreYouSure', 'Apakah Anda yakin Anda tahu apa yang Anda lakukan?');
    PERFORM localization.add_localized_resource('Questions', 'id', 'CannotAccessAccount', 'Tidak dapat mengakses akun Anda?');
    PERFORM localization.add_localized_resource('Questions', 'id', 'ConfirmAnalyze', 'Hal ini akan mengunci akses database klien selama eksekusi. Apakah Anda yakin ingin melaksanakan tindakan ini sekarang?');
    PERFORM localization.add_localized_resource('Questions', 'id', 'ConfirmVacuum', 'Hal ini akan mengunci akses database klien selama eksekusi. Apakah Anda yakin ingin melaksanakan tindakan ini sekarang?');
    PERFORM localization.add_localized_resource('Questions', 'id', 'ConfirmVacuumFull', 'Hal ini akan mengunci akses database klien selama eksekusi. Apakah Anda yakin ingin melaksanakan tindakan ini sekarang?');
    PERFORM localization.add_localized_resource('Questions', 'id', 'WhatIsYourHomeCurrency', 'Apa Rumah Anda Mata?');
    PERFORM localization.add_localized_resource('Questions', 'id', 'WithdrawalReason', 'Mengapa Anda ingin menarik transaksi ini?');
    PERFORM localization.add_localized_resource('Questions', 'ja', 'AreYouSure', 'あなたは何をやっている知っているあなたはよろしいですか？');
    PERFORM localization.add_localized_resource('Questions', 'ja', 'CannotAccessAccount', 'あなたのアカウントにアクセスすることはできません？');
    PERFORM localization.add_localized_resource('Questions', 'ja', 'ConfirmAnalyze', 'これは、実行中のクライアント·データベースへのアクセスをロックします。あなたは今、このアクションを実行してもよろしいていますか？');
    PERFORM localization.add_localized_resource('Questions', 'ja', 'ConfirmVacuum', 'これは、実行中のクライアント·データベースへのアクセスをロックします。あなたは今、このアクションを実行してもよろしいていますか？');
    PERFORM localization.add_localized_resource('Questions', 'ja', 'ConfirmVacuumFull', 'これは、実行中のクライアント·データベースへのアクセスをロックします。あなたは今、このアクションを実行してもよろしいていますか？');
    PERFORM localization.add_localized_resource('Questions', 'ja', 'WhatIsYourHomeCurrency', 'ご自宅の通貨は何ですか？');
    PERFORM localization.add_localized_resource('Questions', 'ja', 'WithdrawalReason', 'なぜあなたはこのトランザクションを撤回したいですか？');
    PERFORM localization.add_localized_resource('Questions', 'ms', 'AreYouSure', 'Adakah anda pasti anda tahu apa yang anda lakukan?');
    PERFORM localization.add_localized_resource('Questions', 'ms', 'CannotAccessAccount', 'Tidak boleh mengakses akaun anda?');
    PERFORM localization.add_localized_resource('Questions', 'ms', 'ConfirmAnalyze', 'Ini akan mengunci akses pangkalan data pelanggan semasa pelaksanaan. Adakah anda pasti anda mahu untuk melaksanakan tindakan ini sekarang?');
    PERFORM localization.add_localized_resource('Questions', 'ms', 'ConfirmVacuum', 'Ini akan mengunci akses pangkalan data pelanggan semasa pelaksanaan. Adakah anda pasti anda mahu untuk melaksanakan tindakan ini sekarang?');
    PERFORM localization.add_localized_resource('Questions', 'ms', 'ConfirmVacuumFull', 'Ini akan mengunci akses pangkalan data pelanggan semasa pelaksanaan. Adakah anda pasti anda mahu untuk melaksanakan tindakan ini sekarang?');
    PERFORM localization.add_localized_resource('Questions', 'ms', 'WhatIsYourHomeCurrency', 'Apa Mata Wang Rumah Anda?');
    PERFORM localization.add_localized_resource('Questions', 'ms', 'WithdrawalReason', 'Mengapa anda mahu menarik balik urus niaga ini?');
    PERFORM localization.add_localized_resource('Questions', 'nl', 'AreYouSure', 'Weet je zeker dat je weet wat je aan het doen bent?');
    PERFORM localization.add_localized_resource('Questions', 'nl', 'CannotAccessAccount', 'Heb je geen toegang tot je account?');
    PERFORM localization.add_localized_resource('Questions', 'nl', 'ConfirmAnalyze', 'Dit zal de klant toegang tot de database tijdens de uitvoering te vergrendelen. Bent u zeker dat u deze actie nu uitvoeren?');
    PERFORM localization.add_localized_resource('Questions', 'nl', 'ConfirmVacuum', 'dit zal klantendatabase toegang tijdens de uitvoering te vergrendelen. Bent u zeker dat u deze actie nu uitvoeren?');
    PERFORM localization.add_localized_resource('Questions', 'nl', 'ConfirmVacuumFull', 'Dit zal de klant toegang tot de database tijdens de uitvoering te vergrendelen. Bent u zeker dat u deze actie nu uitvoeren?');
    PERFORM localization.add_localized_resource('Questions', 'nl', 'WhatIsYourHomeCurrency', 'Wat is uw startpagina Valuta?');
    PERFORM localization.add_localized_resource('Questions', 'nl', 'WithdrawalReason', 'Waarom wil je om deze transactie te trekken?');
    PERFORM localization.add_localized_resource('Questions', 'pt', 'AreYouSure', 'Tem certeza de que sabe o que está fazendo?');
    PERFORM localization.add_localized_resource('Questions', 'pt', 'CannotAccessAccount', 'Não consegue acessar sua conta?');
    PERFORM localization.add_localized_resource('Questions', 'pt', 'ConfirmAnalyze', 'Isso irá bloquear o acesso do banco de dados do cliente durante a execução. Tem certeza de que deseja executar esta ação agora?');
    PERFORM localization.add_localized_resource('Questions', 'pt', 'ConfirmVacuum', 'Isso irá bloquear o acesso do banco de dados do cliente durante a execução. Tem certeza de que deseja executar esta ação agora?');
    PERFORM localization.add_localized_resource('Questions', 'pt', 'ConfirmVacuumFull', 'Isso irá bloquear o acesso do banco de dados do cliente durante a execução. Tem certeza de que deseja executar esta ação agora?');
    PERFORM localization.add_localized_resource('Questions', 'pt', 'WhatIsYourHomeCurrency', 'Qual é a sua moeda Home?');
    PERFORM localization.add_localized_resource('Questions', 'pt', 'WithdrawalReason', 'Por que você quer retirar essa transação?');
    PERFORM localization.add_localized_resource('Questions', 'ru', 'AreYouSure', 'Вы уверены, что вы знаете, что вы делаете?');
    PERFORM localization.add_localized_resource('Questions', 'ru', 'CannotAccessAccount', 'Не можете войти в аккаунт?');
    PERFORM localization.add_localized_resource('Questions', 'ru', 'ConfirmAnalyze', 'Это заблокирует доступ к базе данных клиента во время выполнения. Вы уверены, что хотите выполнить это действие прямо сейчас?');
    PERFORM localization.add_localized_resource('Questions', 'ru', 'ConfirmVacuum', 'Это заблокирует доступ к базе данных клиента во время выполнения. Вы уверены, что хотите выполнить это действие прямо сейчас?');
    PERFORM localization.add_localized_resource('Questions', 'ru', 'ConfirmVacuumFull', 'Это заблокирует доступ к базе данных клиента во время выполнения. Вы уверены, что хотите выполнить это действие прямо сейчас?');
    PERFORM localization.add_localized_resource('Questions', 'ru', 'WhatIsYourHomeCurrency', 'Что Является ли ваш дом валюте?');
    PERFORM localization.add_localized_resource('Questions', 'ru', 'WithdrawalReason', 'Почему вы хотите, чтобы снять эту сделку?');
    PERFORM localization.add_localized_resource('Questions', 'sv', 'AreYouSure', 'Är du säker på att du vet vad du gör?');
    PERFORM localization.add_localized_resource('Questions', 'sv', 'CannotAccessAccount', 'Kan inte komma åt ditt konto?');
    PERFORM localization.add_localized_resource('Questions', 'sv', 'ConfirmAnalyze', 'Kan Inte fortsätta uppgiften. Rätta konfigurationsproblem.');
    PERFORM localization.add_localized_resource('Questions', 'sv', 'ConfirmVacuum', 'Detta kommer att låsa klientdatabasåtkomst under exekvering. Är du säker på att du vill köra den här åtgärden just nu?');
    PERFORM localization.add_localized_resource('Questions', 'sv', 'ConfirmVacuumFull', 'Detta kommer att låsa klientdatabasåtkomst under exekvering. Är du säker på att du vill köra den här åtgärden just nu?');
    PERFORM localization.add_localized_resource('Questions', 'sv', 'WhatIsYourHomeCurrency', 'Vad är ditt hem valuta?');
    PERFORM localization.add_localized_resource('Questions', 'sv', 'WithdrawalReason', 'Varför vill du Uttag denna transaktion?');
    PERFORM localization.add_localized_resource('Questions', 'zh', 'AreYouSure', '你确定你知道你在做什么？');
    PERFORM localization.add_localized_resource('Questions', 'zh', 'CannotAccessAccount', '无法访问您的帐户？');
    PERFORM localization.add_localized_resource('Questions', 'zh', 'ConfirmAnalyze', '这将锁定在执行过程中的客户端的数据库访问。你确定你想立即执行此操作？');
    PERFORM localization.add_localized_resource('Questions', 'zh', 'ConfirmVacuum', '这将锁定在执行过程中的客户端的数据库访问。你确定你想立即执行此操作？');
    PERFORM localization.add_localized_resource('Questions', 'zh', 'ConfirmVacuumFull', '这将锁定在执行过程中的客户端的数据库访问。你确定你想立即执行此操作？');
    PERFORM localization.add_localized_resource('Questions', 'zh', 'WhatIsYourHomeCurrency', '什么是您的首页汇率？');
    PERFORM localization.add_localized_resource('Questions', 'zh', 'WithdrawalReason', '为什么你要收回这笔交易？');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'Select', 'wählen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'account', 'rekening');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'account_id', 'account-ID');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'account_master', 'account meester');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'account_master_code', 'Account hoofdcode');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'account_master_id', 'Account meester Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'account_master_name', 'Account meester naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'account_name', 'Accountnaam');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'account_number', 'rekening Nummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'address', 'adres');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'address_line_1', 'Adres Regel 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'address_line_2', 'Adres Regel 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'ageing_slab_id', 'Vergrijzing slab Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'ageing_slab_name', 'Vergrijzing Slab Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'allow_credit', 'laat Credit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'allow_sales', 'laat Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'allow_transaction_posting', 'Laat transactie posting');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'amount', 'bedrag');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'amount_from', 'bedrag in Van');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'amount_to', 'bedrag Aan');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'analyze_count', 'Analyseer graaf');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'api_access_policy_id', 'API-Richtlinien Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'api_access_policy_uix', 'Doppelter Eintrag für API-Richtlinien');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'applied_on_shipping_charge', 'Toegepast op verzending Charge');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'audit_ts', 'audit Tijdstempel');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'audit_user_id', 'Audit Gebruiker Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'auto_trigger_on_sales', 'Automatisch triggeren op de verkoop');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'autoanalyze_count', 'Autoanalyze Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'autovacuum_count', 'Autovacuum graaf');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'background_color', 'achtergrondkleur');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'balance', 'balans');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bank_account_number', 'Bankkontonummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bank_account_type', 'Kontotyp');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bank_accounts_account_id_chk', 'Der gewünschte Artikel ist kein gültiges Bankkonto.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bank_accounts_pkey', 'Dupliceren bankrekening.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bank_address', 'Anschrift der Bank');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bank_branch', 'Bank Branch');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bank_contact_number', 'Bank Kontaktnummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bank_name', 'Name der Bank');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'base_unit_id', 'Base Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'base_unit_name', 'Base Unit Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'based_on_shipping_address', 'Basierend auf Versandadresse');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bonus_rate', 'Bonus bewerten');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bonus_slab_code', 'Bonus Slab Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bonus_slab_detail_id', 'Bonus Slab Details Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bonus_slab_details_amounts_chk', 'Das Feld "Anzahl Um" muss größer als "Betrag Aus" sein.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bonus_slab_id', 'Bonus Slab Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'bonus_slab_name', 'Bonus Slab Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'book', 'Buch');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'brand', 'Marke');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'brand_code', 'Marke Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'brand_id', 'Marke Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'brand_name', 'Markenname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'can_change_password', 'Kann Change Password');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'can_self_verify', 'Kann Selbst Überprüfen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'can_verify_gl_transactions', 'Kann Hauptbuch Transaktionen Überprüfen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'can_verify_purchase_transactions', 'Kann Purchase Transaktionen Überprüfen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'can_verify_sales_transactions', 'Kann Verkaufstransaktionen Überprüfen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'card_type_code', 'Kartentyp-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'card_type_id', 'Card Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'card_type_name', 'Karten-Art-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_flow_heading', 'Cash Flow Heading');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_flow_heading_cash_flow_heading_type_chk', 'Ungültige Cashflow Heading Typ. Erlaubte Werte: O, I, F');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_flow_heading_code', 'Cash Flow Heading Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_flow_heading_id', 'Cash Flow Heading Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_flow_heading_name', 'Cash Flow Heading Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_flow_heading_type', 'Cashflow Heading Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_flow_master_code', 'Cash Flow Master Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_flow_master_id', 'Cash Flow Master Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_flow_master_name', 'Cash Flow Master Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_flow_setup_id', 'Cashflow Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_repositories_cash_repository_code_uix', 'Duplizieren Barzahlung Repository Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_repositories_cash_repository_name_uix', 'Duplizieren Barzahlung Repository Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_repository', 'Barzahlung Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_repository_code', 'Barzahlung Repository Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_repository_id', 'Barzahlung Repository Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cash_repository_name', 'Barzahlung Repository Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cell', 'Zelle');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'charge_interest', 'Laden Sie Interesse');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'check_nexus', 'Controleer Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'checking_frequency', 'Überprüfen Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'checking_frequency_id', 'Überprüfen Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'city', 'City');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'collecting_account', 'Sammeln Konto');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'collecting_account_id', 'Sammeln Konto Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'collecting_tax_authority', 'Sammeln Steuerbehörde');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'collecting_tax_authority_id', 'Sammeln Steuerbehörde Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'commision_rate', 'Kommission bewerten');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'commission_rate', 'Commission Rate');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'company_name', 'Name Der Firma');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compare_unit_id', 'Vergleichen Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compare_unit_name', 'Vergleichen Einheit Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compound_item', 'Compound Artikel');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compound_item_code', 'Verbindung Item Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compound_item_detail_id', 'Verbindung Einzelteil Detail Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compound_item_details_unit_chk', 'Ungültige Einheit vorgesehen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compound_item_id', 'Verbindung Item Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compound_item_name', 'Compound Artikelname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compound_unit_id', 'Verbindung Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compound_units_chk', 'Die Basiseinheit Kennung kann nicht gleich wie Vergleichseinheit Kennung.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'compounding_frequency', 'Compounding Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'confidential', 'vertraulich');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_address_line_1', 'Kontakt Adresszeile 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_address_line_2', 'Kontakt Adresszeile 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_cell', 'Kontakt Zell');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_city', 'Kontakt Stadt');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_country', 'Kontakt Land');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_email', 'Kontakt per EMail');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_number', 'Kontaktnummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_person', 'Gesprächspartner');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_phone', 'Contact Telefoon');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_po_box', 'Kontaktieren Po Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_state', 'Kontakt Staat');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'contact_street', 'Kontakt Straße');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cost_center_code', 'Kostenstellen Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cost_center_id', 'Kostenstellenkennung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cost_center_name', 'Kostenstellennamen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cost_of_goods_sold_account_id', 'Herstellungskosten der verkauften Konto Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cost_price', 'Kostenpreis');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cost_price_includes_tax', 'Kostenpreis mit MwSt');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'counter_code', 'Zähler Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'counter_id', 'Gegen Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'counter_name', 'Zähler Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'country', 'Land');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'country_code', 'Landesvorwahl');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'country_id', 'Land Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'country_name', 'Land Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'county', 'Grafschaft');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'county_code', 'Grafschaft Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'county_id', 'Grafschaft Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'county_name', 'Name County');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'county_sales_tax', 'Grafschaft Umsatzsteuer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'county_sales_tax_code', 'Grafschaft Umsatzsteuer Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'county_sales_tax_id', 'Grafschaft Sales Tax Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'county_sales_tax_name', 'Grafschaft Umsatzsteuer-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'credit', 'Kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'cst_number', 'Zentralumsatzsteuernummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'currency', 'Währung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'currency_code', 'Währungscode');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'currency_name', 'Währungsbezeichnung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'currency_symbol', 'Währungssymbol');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'customer_pays_fee', 'Kunde zahlt Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'date_of_birth', 'Geburtsdatum');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'debit', 'Soll');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'default_cash_account_id', 'Standard Cash Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'default_cash_repository_id', 'Standard Barzahlung Repository Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'department_code', 'Abteilungscode');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'department_id', 'Abteilung Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'department_name', 'Abteilung Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'description', 'Beschreibung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'discount', 'Rabatt');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'due_days', 'aufgrund Tage');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'due_frequency', 'Durch Frequenz');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'due_frequency_id', 'Aufgrund Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'due_on_date', 'Durch auf Datum');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'effective_from', 'Gültig ab');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'elevated', 'erhöht');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'email', 'EMail');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'ends_on', 'endet am');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'entity_id', 'Entity Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'entity_name', 'Unternehmensbezeichnung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'entry_ts', 'Eintrag Timestamp');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'er', 'Wechselkurs');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'exclude_from_purchase', 'Ausschließen Vom Kauf');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'exclude_from_sales', 'Ausschließen Vom Vertrieb');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'external_code', 'Externe Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'factory_address', 'Factory Anschrift');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'fax', 'Fax');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'first_name', 'Vorname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'fiscal_year_code', 'Das Geschäftsjahr Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'fiscal_year_name', 'Das Geschäftsjahr Bezeichnung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'flag_id', 'Flag Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'flag_type_id', 'Flag Typen Identifizierung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'flag_type_name', 'Flag Typ Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'flagged_on', 'Gemeldet On');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'foreground_color', 'Vordergrundfarbe');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'frequency_code', 'Frequency Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'frequency_id', 'requency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'frequency_name', 'Häufigkeit Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'frequency_setup_code', 'Frequenz etup Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'frequency_setup_id', 'Frequency Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'from_days', 'vom Tage');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'full_name', 'Vollständiger Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'gl_head', 'Hauptbuch Leiter');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'gl_verification_limit', 'Hauptbuchprüfung Grenzwert');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'grace_period', 'Grace Period');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'has_child', 'hat Kinder');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'height_in_centimeters', 'Höhe in Zentimetern');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'hot_item', 'Hot Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'http_action_code', 'HTTP Aktionscode');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'hundredth_name', 'hundertsten Namen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'id', 'Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'includes_tax', 'Inklusive Steuern');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'income_tax_rate', 'Ertragsteuersatz');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'industry_id', 'Industry Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'industry_name', 'Industrie Vorname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'interest_compounding_frequency_id', 'Zins Compounding Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'interest_rate', 'Zinssatz');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'inventory_account_id', 'Bestandskonto Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_active', 'ist Aktiv');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_added', 'hinzugefügt');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_admin', 'ist Admin');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_cash', 'ist Barzahlung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_debit', 'ist Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_employee', 'ist der Mitarbeiter');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_exempt', 'ist Exempt');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_exemption', 'ist Exemption');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_flat_amount', 'Ist flach Betrag');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_merchant_account', 'Ist Merchant Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_party', 'ist Partei');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_purchase', 'ist Kauf');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_rectangular', 'rechteckig ist');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_sales', 'ist Vertrieb');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_summary', 'ist Zusammenfassung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_supplier', 'ist Lieferant');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_system', 'ist System-');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_transaction_node', 'Ist Transaction Node');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'is_vat', 'ist Vat');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item', 'Artikel');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_code', 'Item Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_cost_price_id', 'Artikel Kostenpreis Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_cost_prices_unit_chk', 'Ungültige Einheit vorgesehen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_group', 'Artikelgruppe');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_group_code', 'Artikel Gruppe Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_group_id', 'Artikel Gruppe Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_group_name', 'Artikelgruppenname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_id', 'Artikel-Nummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_name', 'Artikelname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_opening_inventory_unit_chk', 'Ungültige Einheit vorgesehen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_selling_price_id', 'Artikel Verkaufspreis Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_selling_prices_unit_chk', 'Ungültige Einheit vorgesehen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_type_code', 'Produkttyp-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_type_id', 'Item Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'item_type_name', 'Einzelteil-Art-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'items_item_code_uix', 'Duplizieren Artikelcode.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'items_item_name_uix', 'Duplizieren Elementname.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'items_reorder_quantity_chk', 'Die Meldemenge muss groß oder gleich der Meldebestand ist.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'last_analyze', 'Letzte Analysieren On');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'last_autoanalyze', 'Letzter Auto analysieren On');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'last_autovacuum', 'Letzter Auto Vakuum auf');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'last_name', 'Nachname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'last_vacuum', 'Letzte Vacuum auf');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'late_fee', 'Späte Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'late_fee_code', 'Späte Fee-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'late_fee_id', 'Späte Fee Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'late_fee_name', 'Späte Fee-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'late_fee_posting_frequency', 'Späte Fee Posting Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'late_fee_posting_frequency_id', 'Späte Fee Posting Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'lc_credit', 'Akkreditiv Kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'lc_debit', 'Akkreditiv Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'lead_source_code', 'Führen Source Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'lead_source_id', 'Führen Quelle Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'lead_source_name', 'Blei Source Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'lead_status_code', 'Lead-Status-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'lead_status_id', 'Lead-Status Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'lead_status_name', 'Lead-Status Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'lead_time_in_days', 'Bearbeitungszeit in Tagen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'length_in_centimeters', 'Körperlänge in cm');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'machinable', 'Machinable');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'maintain_stock', 'pflegen Stok');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'maintained_by_user_id', 'Verwaltet von User Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'maximum_credit_amount', 'Maximaler Kreditbetrag');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'maximum_credit_period', 'Maximale Kreditlaufzeit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'merchant_account_id', 'Merchant Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'merchant_fee_setup_id', 'Händler Fee Setup-Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'middle_name', 'Zweiter Vorname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'nick_name', 'Nickname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'non_gl_stock_details_unit_chk', 'Ungültige Einheit vorgesehen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'normally_debit', 'Normalerweise Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'office', 'Büro');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'office_code', 'Office Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'office_id', 'Office-Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'office_name', 'Büroname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'opportunity_stage_code', 'Gelegenheit Bühnen-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'opportunity_stage_id', 'Gelegenheit Bühnen Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'opportunity_stage_name', 'Gelegenheit Bühnennamen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'pan_number', 'Permanent Account Number Anzahl');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent', 'Elternteil');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_account_id', 'Hauptkonto Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_account_master_id', 'Übergeordnete Firma Master-Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_account_name', 'Eltern-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_account_number', 'Eltern Account Number');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_cash_flow_heading_id', 'Eltern Cashflow Überschrift Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_cash_repository', 'Elterngeld Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_cash_repository_id', 'Elterngeld Repository Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_cr_code', 'Elterngeld Repository-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_cr_name', 'Elterngeld Repository-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_industry_id', 'Eltern Industry Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_industry_name', 'Eltern Industrie Vorname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_item_group_id', 'Eltern Artikel Gruppe Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_office', 'Eltern Amt');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'parent_office_id', 'Eltern Amt Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'party', 'Party');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'party_code', 'Partei-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'party_id', 'Party Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'party_name', 'Name der Partei');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'party_type', 'Party-Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'party_type_code', 'Partei Typ Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'party_type_id', 'Party-Typen Identifizierung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'party_type_name', 'Partei Typ Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'password', 'Passwort');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'payment_card_code', 'Payment Card-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'payment_card_id', 'Payment Card Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'payment_card_name', 'Payment Card-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'payment_term', 'Zahlungs-Ausdruck');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'payment_term_code', 'Zahlungs-Ausdruck-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'payment_term_id', 'Zahlungs-Ausdruck Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'payment_term_name', 'Zahlungs-Ausdruck Bezeichnung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'phone', 'Telefon');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'po_box', 'Postfach');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'poco_type_name', 'Poco Typ Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'policy_id', 'Politik Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'preferred_shipping_mail_type', 'Preferred Lieferung Post Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'preferred_shipping_mail_type_id', 'Preferred Lieferung Post Typen Identifizierung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'preferred_shipping_package_shape', 'Bevorzugte Lieferpaket Form');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'preferred_supplier', 'Preferred Supplier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'preferred_supplier_id', 'Preferred Supplier Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'price', 'Preis');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'price_from', 'Preis ab');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'price_to', 'Preis bis');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'price_type_code', 'Preis Typ Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'price_type_id', 'Preis Art Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'price_type_name', 'Preis Art-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'priority', 'Priorität');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'purchase_account_id', 'Erwerben Konto Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'purchase_discount_account_id', 'Kauf Discount Konto Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'purchase_verification_limit', 'Kaufprüfung Grenzwert');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'quantity', 'Menge');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'rate', 'Preis');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurrence_type_id', 'Serientyp Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurring_amount', 'Wiederkehrende Betrag');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurring_duration', 'Wiederkehrdauer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurring_frequency', 'Wiederkehrfrequenz');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurring_frequency_id', 'Wiederkehrende Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurring_invoice', 'Wiederkehrende Rechnung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurring_invoice_code', 'Wiederkehrende Rechnung Kodex');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurring_invoice_id', 'Wiederkehrende Rechnung Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurring_invoice_name', 'Wiederkehrende Rechnung Namens');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurring_invoice_setup_id', 'Wiederkehrende Rechnung Setup-Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'Sie können nicht mehr als eine Auto-Trigger auf den Umsatz für diesen Artikel.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'recurs_on_same_calendar_date', 'Kehrt am selben Kalendertag');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'registration_date', 'Datum der Registrierung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'registration_number', 'amtliches Kennzeichen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'relationship_officer_name', 'Relationship Officer Namens');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'relname', 'Relation Namens');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'reorder_level', 'Meldebestand');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'reorder_quantity', 'Reorder Menge');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'reorder_unit', 'Reorder Einheit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'reorder_unit_id', 'Reorder Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'reporting_tax_authority', 'Berichterstattung Steuerbehörde');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'reporting_tax_authority_id', 'Berichterstattung Steuerbehörde Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'repository', 'Quelle');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'resource', 'Ressource');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'resource_id', 'Resource Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'resource_key', 'Ressourcen-Key');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'role_code', 'Role-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'role_id', 'Rollen Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'role_name', 'Rollenname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'rounding_decimal_places', 'Abgerundet Dezimalstellen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'rounding_method', 'Rundungsmethode');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'rounding_method_code', 'Abgerundet Method-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'rounding_method_name', 'Abgerundet Methodenname');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_account_id', 'Sales Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_discount_account_id', 'Sonderangebote Kunden Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_return_account_id', 'Absatzertrag Konto Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax', 'Umsatzsteuer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_code', 'Umsatzsteuer-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_detail_code', 'Umsatzsteuer-Detail-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_detail_id', 'Umsatzsteuer-Detail Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_detail_name', 'Umsatzsteuer Detail Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_details_rate_chk', 'Preis sollte nicht leer sein, wenn Sie Staat oder Grafschaft Steuer ausgewählt haben. Ebenso können Sie nicht bieten kann sowohl bewerten und entscheiden, Bundesland oder Landkreis Steuern haben.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_exempt', 'Umsatzsteuer befreit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_exempt_code', 'Sales Tax Exempt-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_exempt_detail_id', 'Umsatzsteuer befreit Details Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_exempt_id', 'Umsatzsteuer befreit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_exempt_name', 'Umsatzsteuer befreit Namens');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_exempts_price_to_chk', 'Das Feld Preis Bis "Preis ab" muss kleiner sein als "."');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_id', 'Umsatzsteuer-Identifikations');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_name', 'Umsatzsteuer-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_type', 'Umsatzsteuer-Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_type_code', 'Umsatzsteuer-Typ Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_type_id', 'Umsatzsteuer-Typen Identifizierung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_tax_type_name', 'Umsatzsteuer-Typ Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_team_code', 'Sales Team-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_team_id', 'Sales Team Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_team_name', 'Sales Team-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sales_verification_limit', 'Verkäufe Verification Grenzwert');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'salesperson_bonus_setup_id', 'Sales Bonus Setup-Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'salesperson_code', 'Verkäufer Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'salesperson_id', 'Verkäufer Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'salesperson_name', 'Verkäufer-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'self_verification_limit', 'Selbstprüfung Grenzwert');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'selling_price', 'Verkaufspreis');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'selling_price_includes_tax', 'Verkaufspreis inklusive Umsatzsteuer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipper_code', 'Shipper-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipper_id', 'Shipper Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipper_name', 'Absender-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipping_address_code', 'Versandadresse-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipping_address_id', 'Versandadresse Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipping_mail_type_code', 'Lieferung Posttypenschlüssel');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipping_mail_type_id', 'Lieferung Post Typen Identifizierung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipping_mail_type_name', 'Lieferung Post Typ Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipping_package_shape_code', 'Verschiffen Paket Form-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipping_package_shape_id', 'Verschiffen Paket Form Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'shipping_package_shape_name', 'Verschiffen Paket Form Namens');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'slab_name', 'Slab-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sst_number', 'State Sales Tax Anzahl');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'starts_from', 'beginnt mit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'state', 'Zustand');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'state_code', 'Staat-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'state_id', 'Staats Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'state_name', 'Staats Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'state_sales_tax', 'State Sales Tax');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'state_sales_tax_code', 'State Sales Tax-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'state_sales_tax_id', 'State Sales Tax Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'state_sales_tax_name', 'State Sales Tax-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'statement_reference', 'Anweisungsreferenz');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'stock_details_unit_chk', 'Ungültige Einheit vorgesehen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'store', 'Speicher');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'store_code', 'Shop-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'store_id', 'Shop Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'store_name', 'Shop-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'store_type', 'Speichertyp');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'store_type_code', 'Shop Typenschlüssel');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'store_type_id', 'Shop Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'store_type_name', 'Shop Typ Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'stores_default_cash_account_id_chk', 'Bitte wählen Sie ein gültiges Zahlungsmittel oder Bank Account Identifier.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'stores_sales_tax_id_chk', 'Die gewählte SalesTax Identifier ist ungültig für dieses Amt.');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'street', 'Straße');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sub_total', 'Zwischensumme');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'sys_type', 'Systemtyp');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax', 'Steuer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_authority_code', 'Finanzamt-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_authority_id', 'Steuerbehörde Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_authority_name', 'Steuerbehörde Namens');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_base_amount', 'Steuerbasisbetrag');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_base_amount_type_code', 'Bemessungsgrundlage summe art-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_base_amount_type_name', 'Bemessungsgrundlage Betrag Typ Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_code', 'Abgabenordnung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_exempt_type', 'Steuerbefreiung Art');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_exempt_type_code', 'Steuerbefreiung Typenschlüssel');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_exempt_type_id', 'Steuerbefreiung Typen Identifizierung');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_exempt_type_name', 'Steuerbefreiung Typ Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_id', 'Steuernummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_master', 'Steuern Meister');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_master_code', 'Steuern Mastercode');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_master_id', 'Steuern Meister Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_master_name', 'Steuern Meister Namens');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_name', 'Tax-Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_rate_type', 'Steuersatz Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_rate_type_code', 'Steuersatz Typ Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_rate_type_name', 'Steuersatz Typ Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_type_code', 'Steuertyp-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_type_id', 'Steuerart Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tax_type_name', 'Tax Type Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'to_days', 'um Tage');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'total', 'gesamt');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'total_duration', 'Gesamtdauer');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'total_sales', 'Gesamtumsatz');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tran_code', 'Tran-Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'tran_type', 'Transaktionsart');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'unit', 'Einheit');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'unit_code', 'Unit Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'unit_id', 'Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'unit_name', 'Einheit Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'url', 'Universal Resource Locator');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'use_tax_collecting_account', 'Verwenden Steuer Sammeln Konto');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'use_tax_collecting_account_id', 'Verwenden Steuer Sammeln Konto Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'user_id', 'User Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'user_name', 'Benutzername');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'vacuum_count', 'Vakuum-Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'valid_from', 'gültig Ab');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'valid_till', 'gültig bis');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'value', 'Wert');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'value_date', 'Wert Datum');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'verify_gl_transactions', 'Stellen Sie sicher, Hauptbuch Transaktionen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'verify_purchase_transactions', 'Stellen Sie sicher, Kauftransaktionen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'verify_sales_transactions', 'Stellen Sie sicher, Verkaufstransaktionen');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'weight_in_grams', 'Gewicht in Gramm');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'width_in_centimeters', 'Breite in cm');
    PERFORM localization.add_localized_resource('ScrudResource', 'de', 'zip_code', 'Postleitzahl');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'Select', 'seleccionar');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'account', 'cuenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'account_id', 'Identificador cuenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'account_master', 'cuenta Maestra');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'account_master_code', 'Cuenta Código Maestro');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'account_master_id', 'Cuenta Maestra identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'account_master_name', 'Cuenta Maestra Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'account_name', 'Nombre De La Cuenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'account_number', 'Número De Cuenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'address', 'dirección');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'address_line_1', 'Dirección Línea 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'address_line_2', 'Dirección Línea 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'ageing_slab_id', 'Envejecimiento Slab identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'ageing_slab_name', 'Envejecimiento Slab Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'allow_credit', 'permitir crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'allow_sales', 'permitir Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'allow_transaction_posting', 'Permitir exponer Transacción');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'amount', 'cantidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'amount_from', 'cantidad De');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'amount_to', 'La cantidad a');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'analyze_count', 'analizar Conde');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'api_access_policy_id', 'API de acceso Id Política');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'api_access_policy_uix', 'Duplicar entrada para API Política de Acceso');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'applied_on_shipping_charge', 'Aplicado en el envío de carga');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'audit_ts', 'Marca de tiempo de Auditoría');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'audit_user_id', 'Auditoría identificador de usuario');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'auto_trigger_on_sales', 'Gatillo automáticamente en Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'autoanalyze_count', 'Conde Autoanalyze');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'autovacuum_count', 'Conde autovacuum');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'background_color', 'color de fondo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'balance', 'equilibrio');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bank_account_number', 'Número de cuenta bancaria');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bank_account_type', 'Tipo de cuenta bancaria');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bank_accounts_account_id_chk', 'El elemento seleccionado no es una cuenta bancaria válida.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bank_accounts_pkey', 'Duplicar cuenta bancaria.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bank_address', 'Dirección del banco');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bank_branch', 'Sucursal del Banco');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bank_contact_number', 'Banco Teléfono de contacto');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bank_name', 'Nombre del banco');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'base_unit_id', 'Base identificador de unidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'base_unit_name', 'Nombre Unidad Base');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'based_on_shipping_address', 'Basado en la dirección de envío');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bonus_rate', 'Bono Calificar');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bonus_slab_code', 'Bono Código losa');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bonus_slab_detail_id', 'Bono Identificador Detalle Losa');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bonus_slab_details_amounts_chk', 'El "equivalen a" campo debe ser mayor que "Cantidad De".');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bonus_slab_id', 'Bono losa identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'bonus_slab_name', 'Bono Nombre losa');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'book', 'libro');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'brand', 'marca');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'brand_code', 'Códigos por Marca');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'brand_id', 'Identificador de Marca');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'brand_name', 'Marca');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'can_change_password', 'Puede cambiar la contraseña');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'can_self_verify', '¿Puede Ser Verificar');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'can_verify_gl_transactions', 'Puede verificar las transacciones libro mayor');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'can_verify_purchase_transactions', 'Se puede verificar Transacciones de Compra');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'can_verify_sales_transactions', 'Puede verificar las transacciones de venta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'card_type_code', 'Tipo de tarjeta Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'card_type_id', 'Tipo de tarjeta de identificación');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'card_type_name', 'Tipo de Tarjeta de Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_flow_heading', 'Flujo de Caja rúbrica');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_flow_heading_cash_flow_heading_type_chk', 'Inválido flujo de caja Tipo de rúbrica. Valores posibles: O, I, F.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_flow_heading_code', 'Flujo de Efectivo Código Literal');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_flow_heading_id', 'Flujo de Caja Identificador Denominación');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_flow_heading_name', 'Flujo de Efectivo Nombre Denominación');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_flow_heading_type', 'El flujo de caja Tipo Rubro');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_flow_master_code', 'Flujo de Caja Código Maestro');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_flow_master_id', 'Flujo de Caja maestro Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_flow_master_name', 'Flujo de Caja maestro Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_flow_setup_id', 'El flujo de caja Identificador de configuración');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_repositories_cash_repository_code_uix', 'Duplicar efectivo Código Repositorio');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_repositories_cash_repository_name_uix', 'Duplicar Nombre efectivo Repositorio');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_repository', 'Repositorio Efectivo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_repository_code', 'efectivo Código Repositorio');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_repository_id', 'Identificador Repositorio Efectivo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cash_repository_name', 'Efectivo Repositorio Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cell', 'célula');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'charge_interest', 'carga interés');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'check_nexus', 'Compruebe Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'checking_frequency', 'Comprobación de frecuencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'checking_frequency_id', 'Comprobación Identificador Frecuencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'city', 'ciudad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'collecting_account', 'Recopilación cuenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'collecting_account_id', 'Recopilación Identificador Cuenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'collecting_tax_authority', 'Recogida de Administración Tributaria');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'collecting_tax_authority_id', 'Recogida de Administración Tributaria identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'commision_rate', 'Comisión de Tarifas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'commission_rate', 'Comisión de Tarifas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'company_name', 'Nombre De Empresa');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compare_unit_id', 'Comparar identificador de unidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compare_unit_name', 'Comparar Unidad Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compound_item', 'Compuesto de artículo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compound_item_code', 'Compuesto Código del artículo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compound_item_detail_id', 'Elemento Compuesto Identificador Detalle');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compound_item_details_unit_chk', 'Unidad no válida siempre.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compound_item_id', 'Compuesto Identificador de artículo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compound_item_name', 'Compuesto Nombre del artículo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compound_unit_id', 'Identificador de la unidad Compuesto');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compound_units_chk', 'El identificador no puede mismo como identificador de la unidad comparar unidad base.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'compounding_frequency', 'Para agravar Frecuencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'confidential', 'confidencial');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_address_line_1', 'Contacto Dirección Línea 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_address_line_2', 'Contacto Dirección Línea 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_cell', 'Contacto celular');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_city', 'Contacto Ciudad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_country', 'Contacto País');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_email', 'Correo electrónico de contacto');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_number', 'Teléfono de contacto');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_person', 'persona De Contacto');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_phone', 'Teléfono de contacto');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_po_box', 'Póngase en contacto con Po Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_state', 'Contacto Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'contact_street', 'Contacto Calle');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cost_center_code', 'Costo Código centro');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cost_center_id', 'Centro de coste identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cost_center_name', 'Costo Nombre del centro');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cost_of_goods_sold_account_id', 'El costo de ventas Cuenta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cost_price', 'Costo Precio');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cost_price_includes_tax', 'Costo precio incluye el IVA');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'counter_code', 'Código Contador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'counter_id', 'Contador identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'counter_name', 'Nombre del contador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'country', 'país');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'country_code', 'código del país');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'country_id', 'país Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'country_name', 'Nombre del país');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'county', 'condado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'county_code', 'Código del Condado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'county_id', 'Condado identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'county_name', 'Nombre del condado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'county_sales_tax', 'Impuesto sobre las Ventas del Condado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'county_sales_tax_code', 'Condado de Ventas Código Tributario');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'county_sales_tax_id', 'Condado de venta Identificador de Impuestos');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'county_sales_tax_name', 'Nombre Impuesto sobre las Ventas del Condado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'credit', 'crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'cst_number', 'Número Impuesto sobre las Ventas Centroamérica');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'currency', 'moneda');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'currency_code', 'Código de moneda');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'currency_name', 'Nombre moneda');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'currency_symbol', 'Símbolo de moneda');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'customer_pays_fee', 'Cliente paga Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'date_of_birth', 'Fecha De Nacimiento');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'debit', 'débito');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'default_cash_account_id', 'Por defecto Efectivo Cuenta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'default_cash_repository_id', 'Por defecto Cash Repositorio identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'department_code', 'Código de departamento');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'department_id', 'Departamento identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'department_name', 'Department Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'description', 'descripción');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'discount', 'descuento');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'due_days', 'debido Días');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'due_frequency', 'debido Frecuencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'due_frequency_id', 'Identificador de la frecuencia debido');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'due_on_date', 'Debido en Fecha');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'effective_from', 'Vigente desde');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'elevated', 'levated');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'email', 'Correo electrónico');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'ends_on', 'termina el');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'entity_id', 'entidad identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'entity_name', 'Nombre entidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'entry_ts', 'Fecha y hora de entrada');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'er', 'Tipo De Cambio');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'exclude_from_purchase', 'Excluir de Compra');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'exclude_from_sales', 'Excluir de Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'external_code', 'Código externo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'factory_address', 'Dirección de Fábrica');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'fax', 'fax');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'first_name', 'Nombre De Pila');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'fiscal_year_code', 'Fiscal Código Año');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'fiscal_year_name', 'Nombre Año Fiscal');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'flag_id', 'Bandera Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'flag_type_id', 'Tipo Bandera Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'flag_type_name', 'Tipo Bandera Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'flagged_on', 'Marcados En');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'foreground_color', 'Foreground Color');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'frequency_code', 'código de frecuencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'frequency_id', 'Identificador de Frecuencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'frequency_name', 'Frecuencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'frequency_setup_code', 'Frecuencia Código de instalación');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'frequency_setup_id', 'Frecuencia Identificador de configuración');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'from_days', 'De Días');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'full_name', 'Nombre Completo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'gl_head', 'Jefe de Contabilidad General');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'gl_verification_limit', 'Libro mayor de Verificación de Límite');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'grace_period', 'Período de gracia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'has_child', 'tiene niño');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'height_in_centimeters', 'Hight En Centímetros');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'hot_item', 'artículo caliente');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'http_action_code', 'Código Acción HTTP');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'hundredth_name', 'centésimo nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'id', 'identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'includes_tax', 'incluye Impuestos');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'income_tax_rate', 'Ingresos Tasa de Impuesto');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'industry_id', 'Industria identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'industry_name', 'Industria de Nombres');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'interest_compounding_frequency_id', 'Interés Identificador capitalización Frecuencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'interest_rate', 'Tasa De Interés');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'inventory_account_id', 'Inventario Cuenta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_active', 'está activo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_added', 'se añade');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_admin', 'es admin');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_cash', '¿Es efectivo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_debit', 'es débito');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_employee', 'es Empleado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_exempt', 'está exento');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_exemption', 'es Exención');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_flat_amount', 'Es de cantidad fija');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_merchant_account', 'Es cuenta de comerciante');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_party', 'es la fiesta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_purchase', 'es Compra');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_rectangular', 'es rectangular');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_sales', 'es Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_summary', 'es Resumen');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_supplier', 'es Proveedor');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_system', 'es sistema');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_transaction_node', 'Es el nodo de transacción');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'is_vat', 'es el IVA');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item', 'artículo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_code', 'Código tem');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_cost_price_id', 'Elemento Precio Costo identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_cost_prices_unit_chk', 'Unidad no válida siempre.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_group', 'Grupo de artículos');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_group_code', 'Artículo Código de grupo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_group_id', 'Tema Grupo Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_group_name', 'Nombre del elemento Grupo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_id', 'Identificador de artículo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_name', 'Item Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_opening_inventory_unit_chk', 'Unidad no válida siempre.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_selling_price_id', 'Item Selling Price Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_selling_prices_unit_chk', 'Unidad no válida siempre.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_type_code', 'Tipo de artículo Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_type_id', 'Tipo de artículo Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'item_type_name', 'Tipo de artículo Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'items_item_code_uix', 'Duplicar código del artículo.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'items_item_name_uix', 'Duplicar nombre del elemento.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'items_reorder_quantity_chk', 'La cantidad de pedido debe ser grande o igual que el nivel de pedido.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'last_analyze', 'Última Analizar On');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'last_autoanalyze', 'Última Auto analizar On');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'last_autovacuum', 'Última vacío Auto On');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'last_name', 'apellido');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'last_vacuum', 'Última vacío en');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'late_fee', 'Cargo por mora');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'late_fee_code', 'Tarde Código de Derechos');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'late_fee_id', 'Identificador cargo por mora');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'late_fee_name', 'Cargo por Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'late_fee_posting_frequency', 'Cargo por desplazamiento de frecuencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'late_fee_posting_frequency_id', 'Cargo por mora Identificador desplazamiento de frecuencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'lc_credit', 'Carta de crédito de crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'lc_debit', 'Carta de débito de crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'lead_source_code', 'Plomo Código Fuente');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'lead_source_id', 'Plomo Fuente identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'lead_source_name', 'El plomo nombre de origen');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'lead_status_code', 'El plomo Código de estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'lead_status_id', 'Identificador Estado del cable');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'lead_status_name', 'Estado del cable Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'lead_time_in_days', 'Plomo tiempo en días');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'length_in_centimeters', 'Longitud en centímetros');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'machinable', 'mecanizable');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'maintain_stock', 'mantener Stock');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'maintained_by_user_id', 'Gestionado Por identificador de usuario');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'maximum_credit_amount', 'Máximo del Crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'maximum_credit_period', 'Período Máximo del Crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'merchant_account_id', 'Identificador de cuenta de comerciante');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'merchant_fee_setup_id', 'Cuota Merchant Identificador de configuración');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'middle_name', 'Segundo Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'nick_name', 'Nombre de Usuario');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'non_gl_stock_details_unit_chk', 'Unidad no válida siempre.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'normally_debit', 'normalmente débito');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'office', 'oficina');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'office_code', 'Código de oficina');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'office_id', 'Oficina Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'office_name', 'Nombre Cargo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'opportunity_stage_code', 'Código Etapa Oportunidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'opportunity_stage_id', 'Oportunidad Etapa identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'opportunity_stage_name', 'Nombre Oportunidad Etapa');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'pan_number', 'Cuenta Permanente Número Número');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent', 'padre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_account_id', 'Identificador cuenta para padres');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_account_master_id', 'Padres cuenta Maestro Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_account_name', 'Cuenta Nombre de los padres');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_account_number', 'Número de cuenta para Padres');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_cash_flow_heading_id', 'Padres Identificador Denominación de Flujos de Efectivo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_cash_repository', 'Repositorio Padre Efectivo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_cash_repository_id', 'Padres Identificador Repositorio Efectivo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_cr_code', 'Efectivo de Padres Código Repositorio');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_cr_name', 'Repositorio Efectivo de Padres Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_industry_id', 'Identificador Industria Padres');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_industry_name', 'Nombre de los padres de la Industria');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_item_group_id', 'Artículo Padre identificador de grupo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_office', 'Oficina de Padres');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'parent_office_id', 'Oficina Identificador de Padres');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'party', 'partido');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'party_code', 'Código Partido');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'party_id', 'Partido Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'party_name', 'Nombre de la parte');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'party_type', 'Tipo Partido');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'party_type_code', 'Partido Código Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'party_type_id', 'Tipo Partido Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'party_type_name', 'Tipo del partido Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'password', 'contraseña');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'payment_card_code', 'Código de Tarjetas de Pago');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'payment_card_id', 'Identificador de Tarjetas de Pago');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'payment_card_name', 'Tarjetas de Pago Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'payment_term', 'Plazo de pago');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'payment_term_code', 'Código Término del pago');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'payment_term_id', 'Identificador Plazo de pago');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'payment_term_name', 'Pago Nombre Plazo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'phone', 'teléfono');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'po_box', 'Apartado de correos');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'poco_type_name', 'Poco Tipo Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'policy_id', 'identificador de política');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'preferred_shipping_mail_type', 'Tipo de envío preferido Correo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'preferred_shipping_mail_type_id', 'Preferidos del envío Tipo de correo identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'preferred_shipping_package_shape', 'Forma preferida de Paquetes Postales');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'preferred_supplier', 'Proveedor preferido');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'preferred_supplier_id', 'Identificador de Proveedor Preferido');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'price', 'precio');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'price_from', 'Precio Desde');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'price_to', 'Precio Para');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'price_type_code', 'Precio Código Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'price_type_id', 'Precio Tipo Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'price_type_name', 'Precio Tipo Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'priority', 'prioridad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'purchase_account_id', 'Compra Cuenta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'purchase_discount_account_id', 'Descuento de Compra Cuenta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'purchase_verification_limit', 'Compra Verificación Límite');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'quantity', 'cantidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'rate', 'tarifa');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurrence_type_id', 'Recurrencia Identificador de Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurring_amount', 'Monto recurrente');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurring_duration', 'Duración recurrente');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurring_frequency', 'Frecuencia recurrente');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurring_frequency_id', 'Identificador Frecuencia recurrente');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurring_invoice', 'factura recurrente');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurring_invoice_code', 'Recurrente Código Factura');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurring_invoice_id', 'Recurrente Factura Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurring_invoice_name', 'Recurrente Nombre Factura');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurring_invoice_setup_id', 'Factura Recurrente Identificador de configuración');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'No se puede tener más de un disparador automático en las ventas de este artículo.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'recurs_on_same_calendar_date', 'Es recurrente en Same Calendario Fecha');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'registration_date', 'Fecha de Registro');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'registration_number', 'matrícula');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'relationship_officer_name', 'Nombre Oficial Relación');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'relname', 'relación Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'reorder_level', 'Nivel de Reabastecimiento');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'reorder_quantity', 'Reordenar Cantidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'reorder_unit', 'Unidad Reordenar');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'reorder_unit_id', 'Reordenar identificador de unidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'reporting_tax_authority', 'Informes de Administración Tributaria');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'reporting_tax_authority_id', 'Informes de Administración Tributaria identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'repository', 'repositorio');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'resource', 'recurso');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'resource_id', 'recurso identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'resource_key', 'clave de Recursos');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'role_code', 'Código Rol');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'role_id', 'Identificador de papel');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'role_name', 'Nombre de función');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'rounding_decimal_places', 'Redondeando decimales');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'rounding_method', 'método de redondeo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'rounding_method_code', 'Completan Código Método');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'rounding_method_name', 'Completan Nombre del método');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_account_id', 'Identificador venta cuenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_discount_account_id', 'Ventas Rebajas Cuenta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_return_account_id', 'Ventas Retorno Cuenta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax', 'impuesto sobre la venta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_code', 'Código Fiscal de Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_detail_code', 'Impuesto sobre las Ventas Código Detalle');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_detail_id', 'Impuesto sobre las Ventas Identificador Detalle');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_detail_name', 'Impuesto a las Ventas Detalle Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_details_rate_chk', 'Tasa no debe estar vacío a menos que haya seleccionado el impuesto estatal o del condado. Del mismo modo, no se puede proporcionar tanto ritmo y puede elegir en impuestos del estado o condado.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_exempt', 'Exentas de Impuestos de Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_exempt_code', 'Impuesto sobre las Ventas Código Exento');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_exempt_detail_id', 'Impuesto sobre las Ventas Identificador Detalle Exento');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_exempt_id', 'Impuesto sobre las Ventas Identificador Exento');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_exempt_name', 'Impuesto sobre las Ventas Nombre Exento');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_exempts_price_to_chk', 'El campo "Desde precio" debe ser inferior "a precio".');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_id', 'Identificador de Impuesto a las Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_name', 'Nombre Impuesto sobre las Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_type', 'Tipo de Impuesto a las Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_type_code', 'Ventas Tipo de impuesto Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_type_id', 'Ventas Tipo de impuesto identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_tax_type_name', 'Ventas Tipo de impuesto Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_team_code', 'Ventas Código Equipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_team_id', 'Identificador de Equipo de Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_team_name', 'Equipo de Ventas Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sales_verification_limit', 'Ventas Verificación Límite');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'salesperson_bonus_setup_id', 'Bono vendedor Identificador de configuración');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'salesperson_code', 'Código vendedor');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'salesperson_id', 'Vendedor identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'salesperson_name', 'Nombre Vendedor');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'self_verification_limit', 'Auto Verificación Límite');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'selling_price', 'Precio de Venta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'selling_price_includes_tax', 'Venta Precio incluye impuesto');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipper_code', 'Código Shipper');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipper_id', 'Shipper identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipper_name', 'Nombre del remitente');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipping_address_code', 'Envios Código Dirección');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipping_address_id', 'Identificador Dirección Envío');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipping_mail_type_code', 'El envío del correo Código Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipping_mail_type_id', 'Envios Tipo de correo identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipping_mail_type_name', 'Tipo del envío Correo Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipping_package_shape_code', 'Envios Código Forma Paquete');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipping_package_shape_id', 'Envios Identificador Forma Paquete');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'shipping_package_shape_name', 'Envío Nombre Forma Paquete');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'slab_name', 'Losa Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sst_number', 'Estado Número Impuesto sobre las Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'starts_from', 'Comienza desde');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'state', 'estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'state_code', 'Código del Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'state_id', 'identificador de estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'state_name', 'Nombre Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'state_sales_tax', 'Impuesto sobre las ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'state_sales_tax_code', 'Ventas Código Fiscal de Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'state_sales_tax_id', 'Estado Identificador Impuesto sobre las Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'state_sales_tax_name', 'Estado Nombre de Impuesto a las Ventas');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'statement_reference', 'Declaración de Referencia');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'stock_details_unit_chk', 'Unidad no válida siempre.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'store', 'tienda');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'store_code', 'Código tienda');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'store_id', 'Identificador tienda');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'store_name', 'Nombre tienda');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'store_type', 'Tipo de tienda');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'store_type_code', 'Tipo tienda Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'store_type_id', 'Tipo tienda Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'store_type_name', 'Tipo Nombre de la tienda');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'stores_default_cash_account_id_chk', 'Por favor seleccione una Efectivo válida o cuenta de identificación del banco.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'stores_sales_tax_id_chk', 'El SalesTax Identificador elegido no es válido para esta función.');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'street', 'calle');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sub_total', 'total parcial');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'sys_type', 'Tipo de sistema');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax', 'impuesto');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_authority_code', 'Impuesto Código Autoridad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_authority_id', 'Administración Tributaria identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_authority_name', 'Nombre de Administración Tributaria');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_base_amount', 'Base imponible');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_base_amount_type_code', 'Base imponible de Código Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_base_amount_type_name', 'Monto Base Imponible Tipo Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_code', 'Código Tributario');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_exempt_type', 'Impuestos Tipo Exento');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_exempt_type_code', 'Impuestos Tipo Exento Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_exempt_type_id', 'Impuestos Tipo Exento identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_exempt_type_name', 'Impuestos Tipo Exento Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_id', 'Identificador de Impuestos');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_master', 'Maestro de Impuestos');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_master_code', 'Impuesto Código Maestro');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_master_id', 'Orgánico Tributario identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_master_name', 'Orgánico Tributario Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_name', 'Nombre de Impuestos');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_rate_type', 'Tasa de Impuesto Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_rate_type_code', 'Tasa de Impuesto  Código Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_rate_type_name', 'Impuesto Tipo Tasa Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_type_code', 'Tasa de Impuesto   Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_type_id', 'Tipo de impuesto identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tax_type_name', 'Tipo de impuesto Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'to_days', 'para Días');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'total', 'entero');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'total_duration', 'Duración total');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'total_sales', 'Ventas totales');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tran_code', 'Código de transacción');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'tran_type', 'Tipo Transacción');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'unit', 'unidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'unit_code', 'Código de Unidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'unit_id', 'identificador de unidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'unit_name', 'Nombre de la unidad');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'url', 'Recursos Localtor universal');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'use_tax_collecting_account', 'Use impuesto cuenta recaudadora');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'use_tax_collecting_account_id', 'Use impuesto Recogida Identificador Cuenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'user_id', 'Identificador de Usuario');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'user_name', 'Nombre de usuario');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'vacuum_count', 'Conde de vacío');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'valid_from', 'Válido desde');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'valid_till', 'Válido Hasta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'value', 'valor');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'value_date', 'Fecha Valor');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'verify_gl_transactions', 'Verificar las transacciones del libro mayor');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'verify_purchase_transactions', 'Verifique Transacciones de Compra');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'verify_sales_transactions', 'Verificar las transacciones de venta');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'weight_in_grams', 'Peso en gramos');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'width_in_centimeters', 'Ancho en cm');
    PERFORM localization.add_localized_resource('ScrudResource', 'es', 'zip_code', 'Código Postal');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'Select', 'piliin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'account', 'account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'account_id', 'kilalanin ang Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'account_master', 'master Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'account_master_code', 'Master Code Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'account_master_id', 'Master Tagatukoy Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'account_master_name', 'Pangalan ng Master Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'account_name', 'Pangalan ng Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'account_number', 'account Number');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'address', 'tirahan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'address_line_1', 'Linya ng Address 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'address_line_2', 'Linya ng Address 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'ageing_slab_id', 'Pagtanda tilad Id...');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'ageing_slab_name', 'Pagtanda Pangalan ng malapad at makapal na tipak');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'allow_credit', 'Payagan ang Credit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'allow_sales', 'Payagan ang mga Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'allow_transaction_posting', 'Payagan ang pag-post ng Transaksyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'amount', 'dami');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'amount_from', 'Halaga Mula sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'amount_to', 'umabot');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'analyze_count', 'Pag-aralan ang Bilang');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'api_access_policy_id', 'I-access ang Id Patakaran API');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'api_access_policy_uix', 'Doblehin Entry para sa API Access Patakaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'applied_on_shipping_charge', 'Inilapat sa Pagpapadala Pagsingil sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'audit_ts', 'Audit Timestamp');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'audit_user_id', 'Pagkikilanlan Gumagamit Audit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'auto_trigger_on_sales', 'Awtomatikong Pag-trigger sa Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'autoanalyze_count', 'Auto-aralan ang Bilang');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'autovacuum_count', 'Bilang ng vacuum Auto');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'background_color', 'Kulay ng Background');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'balance', 'balanse');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bank_account_number', 'Numero ng Bank Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bank_account_type', 'Uri ng Bank Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bank_accounts_account_id_chk', 'Ang mga napiling item ay hindi isang wastong bank account.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bank_accounts_pkey', 'Doblehin bank account.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bank_address', 'bank Address');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bank_branch', 'bank Branch');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bank_contact_number', 'Bilang Makipag-ugnay sa Bangko');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bank_name', 'Pangalan ng Bangko');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'base_unit_id', 'Kilalanin Base Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'base_unit_name', 'Pangalan Base Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'based_on_shipping_address', 'Batay Sa Shipping Address');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bonus_rate', 'rate ng Bonus');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bonus_slab_code', 'Bonus Code tilad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bonus_slab_detail_id', 'Detalye ng Bonus na tilad Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bonus_slab_details_amounts_chk', 'Ang patlang ng "Halaga Upang" ay dapat na mas malaki sa "Halaga Mula sa".');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bonus_slab_id', 'Kilalanin Bonus tilad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'bonus_slab_name', 'Pangalan ng Bonus na tilad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'book', 'aklat');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'brand', 'tatak');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'brand_code', 'Code ng Brand');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'brand_id', 'kilalanin ang mga Brand');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'brand_name', 'Pangalan ng Brand');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'can_change_password', 'Maaari Baguhin ang Password');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'can_self_verify', 'Maaari I-verify ang Sarili');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'can_verify_gl_transactions', 'Maaari I-verify ang General Ledger Transaksyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'can_verify_purchase_transactions', 'Maaari I-verify ang Mga Transaksyon Pagbili');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'can_verify_sales_transactions', 'Maaari I-verify Sales Transaksyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'card_type_code', 'Uri ng Card Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'card_type_id', 'Pagkikilanlan Uri ng Card');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'card_type_name', 'Pangalan Uri ng Card');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_flow_heading', 'Cash Flow Pamagat');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_flow_heading_cash_flow_heading_type_chk', 'Di-wastong Uri ng Cashflow  Pamagat. Ang pinapayagang mga halaga: O, I, F.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_flow_heading_code', 'Cash Flow Pamagat Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_flow_heading_id', 'Pagkikilanlan Cash Flow Pamagat');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_flow_heading_name', 'Cash Flow Pamagat Pangalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_flow_heading_type', 'Cashflow Uri Pamagat');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_flow_master_code', 'Cash Flow Master Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_flow_master_id', 'Cash Flow Master Kilalanin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_flow_master_name', 'Pangalan ng Cash Flow Master');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_flow_setup_id', 'Pagkikilanlan Cashflow Setup');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_repositories_cash_repository_code_uix', 'Doblehin Cash Code imbakan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_repositories_cash_repository_name_uix', 'Doblehin Pangalan ng Cash imbakan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_repository', 'cash sa imbakan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_repository_code', 'Cash Code imbakan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_repository_id', 'Pagkikilanlan Cash imbakan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cash_repository_name', 'Pangalan ng imbakan Cash');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cell', 'silid sa bilangguan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'charge_interest', 'gastos ng Interes');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'check_nexus', 'Tingnan Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'checking_frequency', 'Sinusuri ng Dalas');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'checking_frequency_id', 'Sinusuri ang Tagatukoy Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'city', 'lungsod');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'collecting_account', 'Pagkolekta ng Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'collecting_account_id', 'Pagkolekta ng Tagatukoy Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'collecting_tax_authority', 'Pagkolekta ng Tax Authority');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'collecting_tax_authority_id', 'Pagkolekta ng Tax Authority Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'commision_rate', 'rate ng Komisyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'commission_rate', 'rate ng Komisyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'company_name', 'Pangalan ng Kumpanya');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compare_unit_id', 'Ihambing ang Tagatukoy Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compare_unit_name', 'Ihambing ang Pangalan ng Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compound_item', 'Compound Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compound_item_code', 'Compound Code Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compound_item_detail_id', 'Pagkikilanlan Detalye Compound Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compound_item_details_unit_chk', 'Di-wastong ibinigay unit.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compound_item_id', 'Pagkikilanlan Compound Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compound_item_name', 'Pangalan ng tambalang Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compound_unit_id', 'Unit Tagatukoy Compound');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compound_units_chk', 'Ang batayang yunit ng tagatukoy ay hindi makaka-pareho ihambing yunit ng pantukoy.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'compounding_frequency', 'Compounding Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'confidential', 'lihim');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_address_line_1', 'Linya ng Address 1 contact');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_address_line_2', 'Linya ng Address 2 contact');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_cell', 'Makipag-ugnay sa Cell');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_city', 'Makipag-ugnay sa Lungsod');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_country', 'Makipag-ugnay sa Bansa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_email', 'Makipag-ugnay sa Bansa...');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_number', 'Bilang Makipag-ugnay sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_person', 'Makipag-ugnay Tao');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_phone', 'Makipag-ugnay sa Telepono');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_po_box', 'Makipag-ugnay sa Po Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_state', 'Makipag-ugnay sa Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'contact_street', 'Makipag-ugnay sa Kalye');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cost_center_code', 'Ng gastos Center Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cost_center_id', 'Ng gastos Center Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cost_center_name', 'Pangalan ng gastos Center');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cost_of_goods_sold_account_id', 'Pagkikilanlan Account Gastos Ng Mga Produktong Nabili');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cost_price', 'presyo Presyo ng Gastos');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cost_price_includes_tax', 'Presyo ng Gastos kasamang Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'counter_code', 'counter Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'counter_id', 'Pagkikilanlan counter');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'counter_name', 'counter Pangalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'country', 'bansa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'country_code', 'country code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'country_id', 'Pagkikilanlan bansa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'country_name', 'Pangalan ng Bansa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'county', 'county');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'county_code', 'county Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'county_id', 'Pagkikilanlan county');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'county_name', 'Pangalan ng county');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'county_sales_tax', 'County ng Sales Tax');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'county_sales_tax_code', 'Sales Tax Code County');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'county_sales_tax_id', 'Sales Tax Tagatukoy ng County');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'county_sales_tax_name', 'Pangalan ng county Sales Tax');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'credit', 'kredito');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'cst_number', 'Numero ng Central Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'currency', 'pera');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'currency_code', 'Ang Code ng Salapi');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'currency_name', 'Pangalan ng pera');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'currency_symbol', 'Simbolo ng pera');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'customer_pays_fee', 'Nagbabayad Customer Bayad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'date_of_birth', 'Petsa ng kapanganakan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'debit', 'debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'default_cash_account_id', 'Default Cash Tagatukoy Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'default_cash_repository_id', 'Default Cash imbakan Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'department_code', 'Kagawaran ng Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'department_id', 'Kagawaran Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'department_name', 'Pangalan ng Kagawaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'description', 'paglalarawan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'discount', 'diskuwento');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'due_days', 'dahil Days');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'due_frequency', 'dahil Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'due_frequency_id', 'Pagkikilanlan Dahil Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'due_on_date', 'Dahil sa Petsa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'effective_from', 'Epektibong Mula sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'elevated', 'malayog');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'email', 'email');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'ends_on', 'Magtatapos Sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'entity_id', 'Pagkikilanlan entity');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'entity_name', 'Pangalan entity');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'entry_ts', 'entry Timestamp');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'er', 'Epektibong Rate');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'exclude_from_purchase', 'Ibukod Mula sa Pagbili');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'exclude_from_sales', 'Ibukod Mula sa Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'external_code', 'Panlabas na Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'factory_address', 'pabrika Address');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'fax', 'fax');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'first_name', 'pangalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'fiscal_year_code', 'Fiscal Code Taon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'fiscal_year_name', 'Pangalan ng Fiscal Taon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'flag_id', 'I-flag Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'flag_type_id', 'Pagkikilanlan Uri I-flag');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'flag_type_name', 'Uri ng Pangalan sa I-flag');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'flagged_on', 'Naka-flag Sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'foreground_color', 'Kulay ng harapan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'frequency_code', 'Dalas ng Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'frequency_id', 'Pagkikilanlan Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'frequency_name', 'Pangalan ng Dalas');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'frequency_setup_code', 'Setup Code Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'frequency_setup_id', 'Pagkikilanlan sa Pag-setup ng Dalas');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'from_days', 'mula sa Days');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'full_name', 'Buong Pangalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'gl_head', 'Pangkalahatang Ledger Head');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'gl_verification_limit', 'Pangkalahatang Ledger Pag-verify sa Limitasyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'grace_period', 'Grace Period');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'has_child', 'may Bata');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'height_in_centimeters', 'Hight Sa Sentimetro');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'hot_item', 'Hot Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'http_action_code', 'HTTP Action Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'hundredth_name', 'pang-isang daan Pangalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'id', 'tagatukoy');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'includes_tax', 'May kasamang Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'income_tax_rate', 'Rate ng Buwis sa Kita');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'industry_id', 'Pagkikilanlan sa industriya');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'industry_name', 'Pangalan ng industriya');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'interest_compounding_frequency_id', 'Pagkikilanlan Compounding Dalas ng Interes');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'interest_rate', 'interest rate');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'inventory_account_id', 'Pagkikilanlan Imbentaryo Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_active', 'Is Aktibo');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_added', 'ay Idinagdag');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_admin', 'ay Admin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_cash', 'ay Cash');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_debit', 'ay Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_employee', 'ay Empleyado');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_exempt', 'ay Hindi Kasali');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_exemption', 'ay Exemption');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_flat_amount', 'Ay Flat na Halaga');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_merchant_account', 'Ay Merchant Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_party', 'ay Party');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_purchase', 'ay Party...');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_rectangular', 'ay Parihabang');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_sales', 'ay Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_summary', 'ay Buod');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_supplier', 'ay Supplier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_system', 'ay System');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_transaction_node', 'Ay Node Transaksyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'is_vat', 'ay Vat');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item', 'aytem');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_code', 'Code ng item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_cost_price_id', 'Pagkikilanlan Presyo ng Gastos Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_cost_prices_unit_chk', 'Di-wastong ibinigay unit.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_group', 'Grupo item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_group_code', 'Grupo item Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_group_id', 'Tagatukoy Grupo item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_group_name', 'Item Pangalan ng Grupo');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_id', 'Pagkikilanlan item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_name', 'Pangalan ng Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_opening_inventory_unit_chk', 'Di-wastong ibinigay unit.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_selling_price_id', 'Pagbebenta Tagatukoy Presyo ng Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_selling_prices_unit_chk', 'Di-wastong ibinigay unit.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_type_code', 'Uri ng Item Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_type_id', 'Uri ng ItenPagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'item_type_name', 'Uri ng Pangalan ng Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'items_item_code_uix', 'Doblehin ang item code.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'items_item_name_uix', 'Doblehin ang pangalan ng item.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'items_reorder_quantity_chk', 'Ang Muling mag-order dami ay dapat na mahusay kaysa sa o katumbas ng antas ng Muling mag-order.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'last_analyze', 'Huling Pag-aralan Sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'last_autoanalyze', 'Huling Auto-aralan Sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'last_autovacuum', 'Huling Auto vacuum Sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'last_name', 'apelyido');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'last_vacuum', 'Huling Vacuum Sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'late_fee', 'late Bayad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'late_fee_code', 'Mga huling Code Bayad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'late_fee_id', 'Pagkikilanlan Late Bayad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'late_fee_name', 'Pangalan Late Bayad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'late_fee_posting_frequency', 'Late Bayad sa Pag-post ng Dalas');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'late_fee_posting_frequency_id', 'Pagkikilanlan sa Pag-post Dalas Late Bayad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'lc_credit', 'Sulat Ng Credit Credit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'lc_debit', 'Sulat Ng Credit Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'lead_source_code', 'Humantong Source Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'lead_source_id', 'Humantong Tagatukoy Pinagmulan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'lead_source_name', 'Lead Pangalan ng Pinagmulan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'lead_status_code', 'Lead Code Katayuan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'lead_status_id', 'Pagkikilanlan Katayuan Lead');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'lead_status_name', 'Lead Pangalan ng Katayuan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'lead_time_in_days', 'Humantong Oras Sa Mga Araw');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'length_in_centimeters', 'Haba Sa Sentimetro');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'machinable', 'Machinable');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'maintain_stock', 'Panatilihin Stock');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'maintained_by_user_id', 'Pinananatili Sa pamamagitan ng Tagatukoy Gumagamit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'maximum_credit_amount', 'Maximum na Halaga ng Credit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'maximum_credit_period', 'Maximum na Panahon ng Credit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'merchant_account_id', 'Pagkikilanlan Merchant Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'merchant_fee_setup_id', 'Pagkikilanlan Bayad Merchant Setup');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'middle_name', 'gitnang pangalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'nick_name', 'Pangalan ng Nick');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'non_gl_stock_details_unit_chk', 'Di-wastong ibinigay unit.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'normally_debit', 'Karaniwan Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'office', 'opisina');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'office_code', 'Opisina Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'office_id', 'Opisina Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'office_name', 'Pangalan ng Opisina');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'opportunity_stage_code', 'Pagkakataon Stage ng Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'opportunity_stage_id', 'Pagkakataon Stage Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'opportunity_stage_name', 'Pangalan ng pagkakataon Stage');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'pan_number', 'Pribadong Account Number Numero');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent', 'magulang');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_account_id', 'Pagkikilanlan magulang Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_account_master_id', 'Master Tagatukoy ng Magulang Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_account_name', 'Magulang Pangalan ng Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_account_number', 'Magulang Account Number');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_cash_flow_heading_id', 'Magulang Cash Flow Pamagat Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_cash_repository', 'Magulang Cash imbakan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_cash_repository_id', 'Magulang Cash imbakan Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_cr_code', 'Magulang Cash imbakan Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_cr_name', 'Magulang Pangalan ng Cash imbakan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_industry_id', 'Pagkikilanlan Magulang Industriya');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_industry_name', 'Magulang Pangalan ng Industriya');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_item_group_id', 'Grupo ng Tagatukoy Magulang Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_office', 'Opisina Magulang');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'parent_office_id', 'Magulang Office Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'party', 'partido');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'party_code', 'partido code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'party_id', 'Pagkikilanlan Partido');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'party_name', 'Pangalan ng Party');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'party_type', 'Uri ng Party');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'party_type_code', 'Code Uri ng Party');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'party_type_id', 'Uri ng Pantukoy Party');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'party_type_name', 'Uri ng Pangalan sa Party');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'password', 'password');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'payment_card_code', 'Code ng Pagbabayad Card');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'payment_card_id', 'Pagkikilanlan sa Pagbabayad Card');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'payment_card_name', 'Pangalan ng Pagbabayad Card');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'payment_term', 'Kataga ng pagbabayad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'payment_term_code', 'Kataga ng Kodigo sa Pagbabayad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'payment_term_id', 'Pagkikilanlan Termino sa Pagbabayad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'payment_term_name', 'Pangalan ng Kataga ng Pagbabayad');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'phone', 'telepono');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'po_box', 'Apartado');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'poco_type_name', 'Uri ng Pangalan sa Poco');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'policy_id', 'tagatukoy patakaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'preferred_shipping_mail_type', 'Uri ng Ginustong Pagpapadala ng Mail');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'preferred_shipping_mail_type_id', 'Pagpapadala Uri ng Pantukoy Mail Ginustong');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'preferred_shipping_package_shape', 'Hugis Ginustong Pagpapadala ng Package');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'preferred_supplier', 'Ginustong Supplier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'preferred_supplier_id', 'Ginustong Supplier ng Tagatukoy');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'price', 'presyo');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'price_from', 'presyo Mula sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'price_to', 'presyo Upang');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'price_type_code', 'Uri ng Presyo Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'price_type_id', 'Pagkikilanlan Uri ng Presyo');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'price_type_name', 'Pangalan Uri ng Presyo');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'priority', 'kaunahan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'purchase_account_id', 'Bumili ng Tagatukoy Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'purchase_discount_account_id', 'Bumili ng Discount Tagatukoy Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'purchase_verification_limit', 'Bumili ng Pag-verify sa Limitasyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'quantity', 'dami');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'rate', 'singil');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurrence_type_id', 'Uri ng Pantukoy sa pag-ulit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurring_amount', 'umuulit na Halaga');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurring_duration', 'umuulit na Tagal');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurring_frequency', 'umuulit na Dalas');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurring_frequency_id', 'Umuulit na Tagatukoy ng Dalas');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurring_invoice', 'umuulit na Invoice');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurring_invoice_code', 'Umuulit na Kodigo ng Invoice');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurring_invoice_id', 'Umuulit na Tagatukoy ng Invoice');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurring_invoice_name', 'Umuulit na Pangalan ng Invoice');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurring_invoice_setup_id', 'Pagkikilanlan sa Pag-setup ang umuulit na Invoice');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'Hindi ka maaaring magkaroon ng higit sa isang auto trigger sa mga benta para sa item na ito.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'recurs_on_same_calendar_date', 'Recurs sa Parehong Petsa ng Calendar');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'registration_date', 'Petsa ng Pagpaparehistro');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'registration_number', 'Numero ng Pagpaparehistro');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'relationship_officer_name', 'Pangalan Relasyon Officer');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'relname', 'Pangalan ng Relasyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'reorder_level', 'Muling mag-order ng Antas');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'reorder_quantity', 'Muling mag-order Dami');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'reorder_unit', 'Muling mag-order ng Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'reorder_unit_id', 'Pagkikilanlan Muling mag-order ng Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'reporting_tax_authority', 'Pag-uulat ng Tax Authority');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'reporting_tax_authority_id', 'Tax Authority Id Pag-uulat');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'repository', 'repositoryo');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'resource', 'mapagkukunan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'resource_id', 'Pagkikilanlan Resource');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'resource_key', 'Resource Key');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'role_code', 'Tungkulin Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'role_id', 'Pagkikilanlan Tungkulin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'role_name', 'Pangalan ng Tungkulin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'rounding_decimal_places', 'Rounding Decimal Lugar');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'rounding_method', 'Rounding Pamamaraan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'rounding_method_code', 'Rounding Code Pamamaraan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'rounding_method_name', 'Pangalan Rounding Pamamaraan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_account_id', 'Pagkikilanlan Sales Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_discount_account_id', 'Benta ng Discount Tagatukoy Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_return_account_id', 'Sales Return Tagatukoy Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax', 'Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_code', 'Buwis sa Pagbebenta Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_detail_code', 'Detalye ng Kodigo sa Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_detail_id', 'Pagkikilanlan Detalye ng Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_detail_name', 'Sales Tax Detail Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_details_rate_chk', 'Rate ay hindi dapat walang laman maliban kung iyong pinili sa buwis ng estado o county. Katulad nito, hindi ka maaaring magbigay ng parehong mga rate at piliin na buwis ng estado o county.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_exempt', 'Tax Exempt Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_exempt_code', 'Buwis sa Pagbebenta Exempt Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_exempt_detail_id', 'Pagkikilanlan Exempt Detalye ng Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_exempt_id', 'Buwis sa Pagbebenta Exempt Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_exempt_name', 'Exempt Pangalan ng Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_exempts_price_to_chk', 'Ang field na "Presyo Mula sa ''ay dapat na mas mababa sa" Presyo Upang. "');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_id', 'Pagkikilanlan Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_name', 'Pangalan ng Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_type', 'Uri ng Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_type_code', 'Uri ng Buwis sa Pagbebenta Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_type_id', 'Pagkikilanlan Uri ng Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_tax_type_name', 'Uri ng Pangalan sa Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_team_code', 'Sales Koponan ng Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_team_id', 'Pagkikilanlan Team Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_team_name', 'Pangalan ng Koponan ng Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sales_verification_limit', 'Pag-verify ng Sales sa Limitasyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'salesperson_bonus_setup_id', 'Pagkikilanlan sa Pag-setup ng Salesperson Bonus');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'salesperson_code', 'Code ng Salesperson');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'salesperson_id', 'Pagkikilanlan ng Salesperson');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'salesperson_name', 'Pangalan ng Salesperson');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'self_verification_limit', 'Sariling Pag-verify sa Limitasyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'selling_price', 'Pagbebenta ng Presyo');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'selling_price_includes_tax', 'Pagbebenta ng Presyo kasamang Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipper_code', 'embarkador Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipper_id', 'embarkador Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipper_name', 'Pangalan ng embarkador');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipping_address_code', 'Code Shipping Address');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipping_address_id', 'Pagkikilanlan Shipping Address');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipping_mail_type_code', 'Uri ng Kodigo sa Pagpapadala ng Mail');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipping_mail_type_id', 'Uri ng Pantukoy Pagpapadala ng Mail');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipping_mail_type_name', 'Uri ng Pangalan sa pagpapadala ng Mail');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipping_package_shape_code', 'Pagpapadala ng Package Hugis Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipping_package_shape_id', 'Hugis Package Tagatukoy ng pagpapadala');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'shipping_package_shape_name', 'Pagpapadala Pangalan Hugis Package');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'slab_name', 'Pangalan ng malapad at makapal na tipak');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sst_number', 'Numero ng Estado Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'starts_from', 'Magsisimula Mula sa');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'state', 'estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'state_code', 'Code ng Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'state_id', 'Pagkikilanlan ng Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'state_name', 'Pangalan estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'state_sales_tax', 'Buwis sa Pagbebenta ng Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'state_sales_tax_code', 'Estado ng Sales Tax Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'state_sales_tax_id', 'Buwis sa Pagbebenta Tagatukoy ng Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'state_sales_tax_name', 'Estado Buwis sa Pagbebenta Pangalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'statement_reference', 'Sanggunian ng statement');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'stock_details_unit_chk', 'Di-wastong ibinigay unit.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'store', 'tindahan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'store_code', 'Code ng Tindahan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'store_id', 'Pagkikilanlan Store');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'store_name', 'Pangalan ng Store');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'store_type', 'Uri ng Store');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'store_type_code', 'Uri ng Store Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'store_type_id', 'Pagkikilanlan Uri ng Store');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'store_type_name', 'Uri ng Pangalan sa Tindahan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'stores_default_cash_account_id_chk', 'Mangyaring pumili ng wastong Cash o Account Tagatukoy Bank.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'stores_sales_tax_id_chk', 'Ang napili SalesTax Tagatukoy ay hindi wasto para sa opisina na ito.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'street', 'kalye');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sub_total', 'sub Kabuuang');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'sys_type', 'Uri ng System');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax', 'buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_authority_code', 'buwis Authority Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_authority_id', 'buwis  Authority Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_authority_name', 'buwis Authority pangalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_base_amount', 'Halaga ng Buwis Base');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_base_amount_type_code', 'Uri ng Code Tax Base Halaga');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_base_amount_type_name', 'Pangalan ng Buwis Base Uri ng Halaga');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_code', 'buwis code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_exempt_type', 'Tax Exempt Uri');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_exempt_type_code', 'Tax Exempt Uri ng Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_exempt_type_id', 'Exempt Uri ng Pantukoy sa Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_exempt_type_name', 'Exempt Uri ng Pangalan sa Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_id', 'Pagkikilanlan sa Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_master', 'Buwis Master');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_master_code', 'Buwis Master Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_master_id', 'Buwis Master Pagkikilanlan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_master_name', 'Master Pangalan ng Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_name', 'Pangalan ng Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_rate_type', 'Uri ng Rate ng Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_rate_type_code', 'Uri ng Kodigo Rate ng Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_rate_type_name', 'Pangalan ng Tax Rate Uri');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_type_code', 'Uri ng Buwis Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_type_id', 'Pagkikilanlan Uri ng Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tax_type_name', 'Uri ng Pangalan sa Buwis');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'to_days', 'upang Days');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'total', 'kabuuan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'total_duration', 'kabuuang Tagal ng');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'total_sales', 'kabuuang Mga Benta');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tran_code', 'Code ng Transaksyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'tran_type', 'Uri ng Transaksyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'unit', 'yunit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'unit_code', 'Code Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'unit_id', 'Pagkikilanlan Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'unit_name', 'Pangalan ng Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'url', 'Uniform Resource Locator');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'use_tax_collecting_account', 'Gamitin Buwis Pagkolekta ng Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'use_tax_collecting_account_id', 'Gamitin Buwis Pagkolekta ng Tagatukoy Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'user_id', 'Pagkikilanlan Gumagamit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'user_name', 'Pangalan ng User');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'vacuum_count', 'Bilang ng vacuum');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'valid_from', 'Wastong Mula');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'valid_till', 'Wastong Bago');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'value', 'halaga');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'value_date', 'Petsa halaga');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'verify_gl_transactions', 'I-verify ang General Ledger Transaksyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'verify_purchase_transactions', 'I-verify ang Mga Transaksyon Pagbili');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'verify_sales_transactions', 'I-verify Sales Transaksyon');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'weight_in_grams', 'Timbang Sa gramo');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'width_in_centimeters', 'Lapad Sa Sentimetro');
    PERFORM localization.add_localized_resource('ScrudResource', 'fil', 'zip_code', 'zip-kowd');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'Select', 'sélectionner');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'account', 'compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'account_id', 'identificateur de compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'account_master', 'compte principal');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'account_master_code', 'Compte code maître');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'account_master_id', 'Compte principal identificateur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'account_master_name', 'Nom du compte de Maître');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'account_name', 'Nom Du Compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'account_number', 'Numéro de compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'address', 'adresse');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'address_line_1', 'Adresse 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'address_line_2', 'Adresse 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'ageing_slab_id', 'Vieillissement Slab Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'ageing_slab_name', 'Vieillissement Slab Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'allow_credit', 'Autoriser crédit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'allow_sales', 'Autoriser ventes');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'allow_transaction_posting', 'Autoriser Transaction affichage');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'amount', 'montant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'amount_from', 'montant De');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'amount_to', 'montant à');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'analyze_count', 'analyser comte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'api_access_policy_id', 'Politique d''accès aux API Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'api_access_policy_uix', 'Dupliquer entrée pour API Stratégie d''accès');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'applied_on_shipping_charge', 'Appliquée sur Frais de livraison');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'audit_ts', 'Timestamp de vérification');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'audit_user_id', 'Audit identifiant utilisateur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'auto_trigger_on_sales', 'Déclencher automatiquement sur les ventes');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'autoanalyze_count', 'comte Autoanalyze');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'autovacuum_count', 'Comte de vide Auto');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'background_color', 'Couleur de fond');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'balance', 'balance');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bank_account_number', 'Numéro de compte bancaire');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bank_account_type', 'Bank Type compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bank_accounts_account_id_chk', 'L''élément sélectionné ne est pas un compte bancaire valide.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bank_accounts_pkey', 'Dupliquer compte bancaire.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bank_address', 'Adresse de la banque');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bank_branch', 'Direction de la Banque');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bank_contact_number', 'Banque Numéro de contact');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bank_name', 'Nom de la banque');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'base_unit_id', 'Base de Identifier Unité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'base_unit_name', 'Nom de l''unité de base');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'based_on_shipping_address', 'Basé sur l''adresse de livraison');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bonus_rate', 'à taux bonifié');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bonus_slab_code', 'Code Bonus Slab');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bonus_slab_detail_id', 'Bonus Identifier Dalle de Détail');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bonus_slab_details_amounts_chk', 'Le champ "Nombre Pour" doit être supérieure à "Montant De".');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bonus_slab_id', 'Bonus Slab Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'bonus_slab_name', 'Bonus Nom Slab');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'book', 'livre');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'brand', 'marque');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'brand_code', 'Code Marque');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'brand_id', 'Marque Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'brand_name', 'Marque nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'can_change_password', 'Peut Changer mot de passe');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'can_self_verify', 'Peut se auto Vérifiez');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'can_verify_gl_transactions', 'Pouvez vérifier General Ledger Transactions');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'can_verify_purchase_transactions', 'Pouvez vérifier Achat Transactions');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'can_verify_sales_transactions', 'Peut vérifier les transactions de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'card_type_code', 'Type de carte code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'card_type_id', 'Type de carte Identificateur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'card_type_name', 'Type de carte Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_flow_heading', 'Cash Flow rubrique');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_flow_heading_cash_flow_heading_type_chk', 'NVALID Cashflow Intitulé Type. Valeurs autorisées: O, I, F.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_flow_heading_code', 'Cash Flow Code rubrique');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_flow_heading_id', 'Flux de trésorerie Identifier Rubrique');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_flow_heading_name', 'Flux de trésorerie vedette de nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_flow_heading_type', 'Cashflow Type de rubrique');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_flow_master_code', 'Cash Flow code maître');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_flow_master_id', 'Flux de trésorerie Maître Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_flow_master_name', 'Nom trésorerie Maître');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_flow_setup_id', 'Identifiant de configuration Cashflow');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_repositories_cash_repository_code_uix', 'Dupliquer trésorerie dépôt de code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_repositories_cash_repository_name_uix', 'Dupliquer Nom du référentiel de trésorerie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_repository', 'Référentiel de trésorerie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_repository_code', 'Trésorerie référentiel de code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_repository_id', 'Référentiel de trésorerie Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cash_repository_name', 'Trésorerie référentiel Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cell', 'cellule');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'charge_interest', 'charge d''intérêts');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'check_nexus', 'Vérifiez Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'checking_frequency', 'Vérification Fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'checking_frequency_id', 'Vérification Identifier Fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'city', 'ville');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'collecting_account', 'collecte compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'collecting_account_id', 'Collecte identificateur de compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'collecting_tax_authority', 'Collecte administration fiscale');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'collecting_tax_authority_id', 'Perception de la taxe Identificateur Autorité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'commision_rate', 'Taux de commission');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'commission_rate', 'Taux de commission');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'company_name', 'Nom de l''entreprise');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compare_unit_id', 'Comparer Identificateur d''unité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compare_unit_name', 'Comparer Nom de l''unité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compound_item', 'composé Point');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compound_item_code', 'Composé Code de l''article');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compound_item_detail_id', 'Point composé Identifier Détail');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compound_item_details_unit_chk', 'Unité fourni invalide.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compound_item_id', 'Composé Identifiant d''objet');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compound_item_name', 'Nom du composé d''objet');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compound_unit_id', 'Composé identifiant d''unité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compound_units_chk', 'L''identifiant ne peut pas même que comparer identifiant d''unité de l''unité de base.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'compounding_frequency', 'Fréquence compoundage');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'confidential', 'confidentiel');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_address_line_1', 'Coordonnées Adresse Ligne 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_address_line_2', 'Coordonnées Adresse Ligne 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_cell', 'Contactez cellulaire');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_city', 'Contactez-Ville');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_country', 'contact Pays');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_email', 'contact Email');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_number', 'Contactez Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_person', 'personne De Contact');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_phone', 'contact Téléphone');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_po_box', 'Contactez-Po Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_state', 'Contactez État');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'contact_street', 'Contactez rue');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cost_center_code', 'Coût Centre de code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cost_center_id', 'Centre de coûts Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cost_center_name', 'Coût Nom Centre');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cost_of_goods_sold_account_id', 'Coût des marchandises vendues identificateur de compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cost_price', 'coût Prix');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cost_price_includes_tax', 'Coût prix inclut les taxes');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'counter_code', 'code de compteur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'counter_id', 'contre Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'counter_name', 'Nom du compteur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'country', 'pays');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'country_code', 'code du pays');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'country_id', 'pays Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'country_name', 'pays Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'county', 'comté');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'county_code', 'code de comté');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'county_id', 'Comté Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'county_name', 'Nom  Comté');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'county_sales_tax', 'La taxe de vente du comté');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'county_sales_tax_code', 'Comté vente Code général des impôts');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'county_sales_tax_id', 'Comté de vente Identifier impôt');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'county_sales_tax_name', 'Nom taxe de vente Comté');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'credit', 'crédit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'cst_number', 'Nombre de taxe de vente central');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'currency', 'monnaie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'currency_code', 'code de devise');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'currency_name', 'Nom de la devise');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'currency_symbol', 'Symbole monétaire');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'customer_pays_fee', 'Le client paie Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'date_of_birth', 'Date De Naissance');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'debit', 'débit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'default_cash_account_id', 'Par défaut trésorerie Identificateur compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'default_cash_repository_id', 'Par défaut Identifiant Cash repsoitory');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'department_code', 'code de département');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'department_id', 'Département Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'department_name', 'Nom Département');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'description', 'Description');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'discount', 'rabais');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'due_days', 'jours en raison');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'due_frequency', 'En raison Fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'due_frequency_id', 'En raison Identificateur de fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'due_on_date', 'En raison le Date');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'effective_from', 'vigueur du');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'elevated', 'élevé');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'email', 'email');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'ends_on', 'Ends On');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'entity_id', 'entité Identificateur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'entity_name', 'Nom entité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'entry_ts', 'Entrée Timestamp');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'er', 'Taux en vigueur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'exclude_from_purchase', 'Exclure de l''achat');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'exclude_from_sales', 'Exclure de ventes');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'external_code', 'Le code externe');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'factory_address', 'Adresse usine');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'fax', 'fax');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'first_name', 'prénom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'fiscal_year_code', 'Année fiscale code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'fiscal_year_name', 'Nom Exercice');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'flag_id', 'Drapeau Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'flag_type_id', 'Type Drapeau Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'flag_type_name', 'Type de Drapeau Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'flagged_on', 'Signalé Sur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'foreground_color', 'Couleur de premier plan');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'frequency_code', 'Code de fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'frequency_id', 'Identificateur de fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'frequency_name', 'Fréquence Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'frequency_setup_code', 'Code de configuration de fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'frequency_setup_id', 'Identifiant de configuration de fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'from_days', 'De Jours');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'full_name', 'Nom Et Prénom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'gl_head', 'General Ledger Head');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'gl_verification_limit', 'Limite General Ledger vérification');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'grace_period', 'Délai de grâce');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'has_child', 'L''enfant at-');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'height_in_centimeters', 'Hight en centimètres');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'hot_item', 'Hot Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'http_action_code', 'HTTP Code d''action');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'hundredth_name', 'Nom centième');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'id', 'identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'includes_tax', 'comprend impôt');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'income_tax_rate', 'Le taux d''imposition');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'industry_id', 'Industrie Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'industry_name', 'Nom de l''Industrie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'interest_compounding_frequency_id', 'Identificateur d''intérêts Compounding Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'interest_rate', 'Taux d''intérêt');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'inventory_account_id', 'Inventaire identificateur de compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_active', 'est active');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_added', 'est ajouté');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_admin', 'est admin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_cash', 'est trésorerie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_debit', 'est-débit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_employee', 'est employé');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_exempt', 'est exonérée');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_exemption', 'est exemption');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_flat_amount', 'Montant est plat');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_merchant_account', 'Est compte marchand');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_party', 'est Parti');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_purchase', 'est-Achat');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_rectangular', 'rectangulaire');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_sales', 'est-Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_summary', 'est Résumé');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_supplier', 'est-Fournisseur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_system', 'est-système');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_transaction_node', 'Est-Node Transaction');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'is_vat', 'est-Vat');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item', 'article');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_code', 'Code de l''article');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_cost_price_id', 'Article Coût Prix Identificateur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_cost_prices_unit_chk', 'Unité fourni invalide.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_group', 'Groupe d''articles');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_group_code', 'Code article Groupe');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_group_id', 'Point Identifier Groupe');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_group_name', 'Point Nom du groupe');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_id', 'Item Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_name', 'Item nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_opening_inventory_unit_chk', 'Unité fourni invalide.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_selling_price_id', 'Item Prix de vente Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_selling_prices_unit_chk', 'Unité fourni invalide.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_type_code', 'Type Code article');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_type_id', 'Type d''élément identificateur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'item_type_name', 'Item Type Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'items_item_code_uix', 'Dupliquer code article.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'items_item_name_uix', 'Dupliquer nom de l''élément.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'items_reorder_quantity_chk', 'La quantité de réapprovisionnement doit être grand ou égal au niveau de réapprovisionnement.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'last_analyze', 'Dernière Analyser Sur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'last_autoanalyze', 'Dernière Auto analyser Sur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'last_autovacuum', 'Dernière vide Auto Sur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'last_name', 'Nom De Famille');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'last_vacuum', 'Dernière vide sur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'late_fee', 'Frais de retard');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'late_fee_code', 'Code frais de retard');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'late_fee_id', 'Identifier frais de retard');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'late_fee_name', 'Nom fin de Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'late_fee_posting_frequency', 'Frais de retard affichage Fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'late_fee_posting_frequency_id', 'Frais de retard Identifier Offre d''Fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'lc_credit', 'Lettre de crédit de crédit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'lc_debit', 'Lettre de crédit de débit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'lead_source_code', 'Plomb Source Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'lead_source_id', 'Plomb Source Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'lead_source_name', 'Plomb Identificateur Source');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'lead_status_code', 'Lead Status Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'lead_status_id', 'Lead Identificateur du statut');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'lead_status_name', 'Statut plomb Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'lead_time_in_days', 'Plomb temps en jours');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'length_in_centimeters', 'Longueur en centimètres');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'machinable', 'usinables');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'maintain_stock', 'maintenir Stok');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'maintained_by_user_id', 'Maintenu par identifiant utilisateur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'maximum_credit_amount', 'Montant maximal de crédit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'maximum_credit_period', 'Période de crédit maximal');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'merchant_account_id', 'Merchant Account Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'merchant_fee_setup_id', 'Identifiant de configuration du droit de commerçant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'middle_name', 'Deuxième Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'nick_name', 'Nom Nick');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'non_gl_stock_details_unit_chk', 'Unité fourni invalide.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'normally_debit', 'normalement débit');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'office', 'bureau');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'office_code', 'code de bureau');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'office_id', 'Bureau Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'office_name', 'Nom du bureau');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'opportunity_stage_code', 'Opportunité des codes d''étape');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'opportunity_stage_id', 'Opportunité Identifier étape');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'opportunity_stage_name', 'Opportunity Stage Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'pan_number', 'Compte privé Nombre Nombre');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent', 'mère');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_account_id', 'Parent identificateur de compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_account_master_id', 'Compte Parent identificateur de Maître');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_account_name', 'Parent Nom du compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_account_number', 'Parent Numéro de compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_cash_flow_heading_id', 'Parent trésorerie Identifier rubrique');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_cash_repository', 'Référentiel de trésorerie Parent');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_cash_repository_id', 'Parent identificateur de référentiel de trésorerie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_cr_code', 'Parent Cashh dépôt de code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_cr_name', 'Parent Nom du référentiel Cashh');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_industry_id', 'Parent Identifier Industrie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_industry_name', 'Parent Nom de l''Industrie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_item_group_id', 'Parent Item Identifier Groupe');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_office', 'Bureau de Parent');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'parent_office_id', 'Bureau Parent Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'party', 'partie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'party_code', 'code du Parti');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'party_id', 'Party Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'party_name', 'Nom Parti');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'party_type', 'type de partie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'party_type_code', 'Parti code Tpye');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'party_type_id', 'Type de Party Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'party_type_name', 'Type de Nom de la partie');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'password', 'mot de passe');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'payment_card_code', 'Code des cartes de paiement');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'payment_card_id', 'Identifier des cartes de paiement');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'payment_card_name', 'Paiement par carte Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'payment_term', 'Limite de paiement');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'payment_term_code', 'Paiement Code durée');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'payment_term_id', 'Paiement Identifier terme');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'payment_term_name', 'Paiement nom du terme');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'phone', 'téléphone');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'po_box', 'Post Office Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'poco_type_name', 'Poco Type Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'policy_id', 'Identificateur de politique');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'preferred_shipping_mail_type', 'Type préféré livraison Poste');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'preferred_shipping_mail_type_id', 'Frais de port préféré mail Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'preferred_shipping_package_shape', 'Preferred Colis Postaux Forme');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'preferred_supplier', 'Fournisseur préféré');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'preferred_supplier_id', 'Préféré identificateur du fournisseur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'price', 'prix');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'price_from', 'Prix à partir de');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'price_to', 'Prix Pour');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'price_type_code', 'Prix Code de type');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'price_type_id', 'Prix Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'price_type_name', 'Prix Type Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'priority', 'priorité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'purchase_account_id', 'Achetez identificateur de compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'purchase_discount_account_id', 'Achetez Remise Identificateur compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'purchase_verification_limit', 'Limite d''achat de vérification');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'quantity', 'quantité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'rate', 'taux');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurrence_type_id', 'Type de récidive Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurring_amount', 'Montant récurrent');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurring_duration', 'Durée récurrent');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurring_frequency', 'Fréquence récurrent');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurring_frequency_id', 'Identifier récurrent de fréquence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurring_invoice', 'facture récurrente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurring_invoice_code', 'Facture récurrente code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurring_invoice_id', 'Facture récurrente Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurring_invoice_name', 'Nom courant de la facture');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurring_invoice_setup_id', 'Identifiant de configuration de facture récurrente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'Vous ne pouvez pas avoir plus d''un déclenchement automatique sur les ventes pour ce produit.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'recurs_on_same_calendar_date', 'Revient sur la même Date du calendrier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'registration_date', 'Date d''inscription');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'registration_number', 'Numéro d''enregistrement');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'relationship_officer_name', 'Nom Relationship Officer');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'relname', 'Nom de la relation');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'reorder_level', 'Réorganiser Niveau');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'reorder_quantity', 'Réorganiser Quantité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'reorder_unit', 'Réorganiser Unité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'reorder_unit_id', 'Réorganiser Identifier Unité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'reporting_tax_authority', 'Rapports administration fiscale');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'reporting_tax_authority_id', 'Rapports impôt Identificateur Autorité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'repository', 'dépôt');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'resource', 'ressource');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'resource_id', 'Resource Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'resource_key', 'clé de ressource');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'role_code', 'Code Rôle');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'role_id', 'rôle Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'role_name', 'rôle Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'rounding_decimal_places', 'Arrondir Décimales');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'rounding_method', 'arrondi Méthode');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'rounding_method_code', 'Code de la méthode d''arrondi');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'rounding_method_name', 'Arrondir Nom Méthode');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_account_id', 'Sales Account Idenetifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_discount_account_id', 'Vente Discount Identificateur compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_return_account_id', 'Ventes Retour Identificateur compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax', 'La taxe de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_code', 'Code de la taxe de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_detail_code', 'Taxe de vente Code d''identification');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_detail_id', 'Taxe de vente Identifier Détail');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_detail_name', 'La taxe de vente Détail Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_details_rate_chk', 'Taux ne doit pas être vide, sauf si vous avez sélectionné Etat ou du comté impôt. De même, vous ne pouvez pas fournir à la fois le taux et choisir d''avoir Etat ou du comté impôt.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_exempt', 'Taxe de vente exonéré');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_exempt_code', 'La taxe de vente de code exonéré');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_exempt_detail_id', 'Taxe de vente Identifier Détail exonéré');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_exempt_id', 'Taxe de vente Identifiant exonéré');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_exempt_name', 'Taxe de vente Nom exonéré');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_exempts_price_to_chk', 'Le champ "Prix à partir de" doit être inférieure à "Prix Pour."');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_id', 'Identifier la taxe de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_name', 'Nom de la taxe de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_type', 'Type de la taxe de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_type_code', 'Ventes Type d''impôt code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_type_id', 'Ventes Type d''impôt Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_tax_type_name', 'Ventes Type d''impôt Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_team_code', 'Ventes code équipe');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_team_id', 'Identifiant de l''équipe des ventes');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_team_name', 'Équipe des ventes Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sales_verification_limit', 'Limite de vérification des ventes');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'salesperson_bonus_setup_id', 'Identifiant de configuration du Bonus Salesperson');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'salesperson_code', 'code Salesperson');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'salesperson_id', 'vendeur Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'salesperson_name', 'Nom Salesperson');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'self_verification_limit', 'Limite auto vérification');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'selling_price', 'Prix de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'selling_price_includes_tax', 'Prix de vente comprend la taxe');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipper_code', 'code Expéditeur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipper_id', 'Expéditeur Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipper_name', 'Nom de l''expéditeur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipping_address_code', 'Adresse Frais de port code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipping_address_id', 'Expédition identifiant d''adresse');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipping_mail_type_code', 'Type d''expédition Courrier code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipping_mail_type_id', 'Type d''expédition courrier Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipping_mail_type_name', 'Type d''expédition Mail Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipping_package_shape_code', 'Expédition code de forme de l''emballage');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipping_package_shape_id', 'Expédition Identifier Forme du package');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'shipping_package_shape_name', 'Expédition Forme du package Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'slab_name', 'Slab Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sst_number', 'État Nombre de taxe de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'starts_from', 'commence à partir de');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'state', 'état');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'state_code', 'code de l''État');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'state_id', 'État Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'state_name', 'Nom de l''État');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'state_sales_tax', 'La taxe de vente de l''État');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'state_sales_tax_code', 'État des ventes Code général des impôts');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'state_sales_tax_id', 'État Identifier la taxe de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'state_sales_tax_name', 'Etat Nom de la taxe de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'statement_reference', 'déclaration de référence');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'stock_details_unit_chk', 'Unité fourni invalide.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'store', 'magasin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'store_code', 'Code magasin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'store_id', 'Identificateur de magasin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'store_name', 'Nom de magasin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'store_type', 'Type de magasin');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'store_type_code', 'Type de magasin code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'store_type_id', 'Type de magasin Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'store_type_name', 'Type de magasin Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'stores_default_cash_account_id_chk', 'Se il vous plaît sélectionner une trésorerie valide ou Bank Identifier compte.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'stores_sales_tax_id_chk', 'Le SalesTaxId choisi ne est pas valide pour cette fonction.');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'street', 'rue');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sub_total', 'sous-total');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'sys_type', 'Type de système');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax', 'impôt');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_authority_code', 'Tax Code d''autorisation');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_authority_id', 'Identifier impôt Autorité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_authority_name', 'Nom administration fiscale');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_base_amount', 'Montant assiette fiscale');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_base_amount_type_code', 'Type de l''assiette fiscale Montant code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_base_amount_type_name', 'L''assiette fiscale Montant en Type de Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_code', 'code général des impôts');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_exempt_type', 'Type de l''impôt exonéré');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_exempt_type_code', 'Exonérés de taxe Code de type');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_exempt_type_id', 'Exempt type de taxe Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_exempt_type_name', 'Type de l''impôt exonéré Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_id', 'impôt Identifieri');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_master', 'Maître impôt');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_master_code', 'Impôt code maître');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_master_id', 'Maître impôt Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_master_name', 'Nom impôt Master');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_name', 'Nom d''impôt');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_rate_type', 'Taux d''imposition de type');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_rate_type_code', 'Type de Taux de l''impôt sur le code');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_rate_type_name', 'Taux d''imposition Type Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_type_code', 'Type de code de l''impôt');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_type_id', 'Type d''impôt Identifiant');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tax_type_name', 'Type d''impôt Nom');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'to_days', 'Days');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'total', 'total');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'total_duration', 'Durée totale');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'total_sales', 'total des ventes');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tran_code', 'Code de transaction');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'tran_type', 'Code de transaction');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'unit', 'unité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'unit_code', 'code d''unité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'unit_id', 'Identificateur d''unité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'unit_name', 'Nom de l''unité');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'url', 'Universal Resource Locator');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'use_tax_collecting_account', 'Utilisez Account Tax Collecte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'use_tax_collecting_account_id', 'Utilisez perception de la taxe identificateur de compte');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'user_id', 'Identifiant utilisateur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'user_name', 'Nom d''utilisateur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'vacuum_count', 'Nombre de vide');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'valid_from', 'Applicable à partir du');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'valid_till', 'valable Till');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'value', 'valeur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'value_date', 'date de valeur');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'verify_gl_transactions', 'Vérifier les transactions du grand livre général');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'verify_purchase_transactions', 'Vérifiez Achat Transactions');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'verify_sales_transactions', 'Vérifier les transactions de vente');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'weight_in_grams', 'Poids en grammes');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'width_in_centimeters', 'Largeur en centimètres');
    PERFORM localization.add_localized_resource('ScrudResource', 'fr', 'zip_code', 'Code postal');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'Select', 'memilih');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'account', 'rekening');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'account_id', 'akun Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'account_master', 'Master Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'account_master_code', 'Master Account Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'account_master_id', 'Master Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'account_master_name', 'Master Account Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'account_name', 'Nama Akun');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'account_number', 'Nomor Rekening');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'address', 'alamat');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'address_line_1', 'Alamat Baris 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'address_line_2', 'Alamat Baris 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'ageing_slab_id', 'Penuaan Slab Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'ageing_slab_name', 'Ageing Slab Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'allow_credit', 'Biarkan Kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'allow_sales', 'Izinkan Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'allow_transaction_posting', 'Izinkan Transaksi Posting');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'amount', 'jumlah');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'amount_from', 'jumlah Dari');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'amount_to', 'jumlah Untuk');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'analyze_count', 'menganalisis Hitungan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'api_access_policy_id', 'API Access Kebijakan Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'api_access_policy_uix', 'Duplikat Masuk untuk API Kebijakan Access');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'applied_on_shipping_charge', 'Diaplikasikan pada Pengiriman Biaya');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'audit_ts', 'Audit Timestamp');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'audit_user_id', 'Audit Pengguna Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'auto_trigger_on_sales', 'Secara otomatis Pemicu Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'autoanalyze_count', 'Autoanalyze Hitungan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'autovacuum_count', 'Auto vakum Hitungan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'background_color', 'Warna Latar Belakang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'balance', 'keseimbangan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bank_account_number', 'Nomor Rekening Bank');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bank_account_type', 'Bank Account Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bank_accounts_account_id_chk', 'Item yang dipilih bukan rekening bank yang valid.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bank_accounts_pkey', 'Gandakan rekening bank.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bank_address', 'Bank Alamat');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bank_branch', 'Bank Cabang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bank_contact_number', 'Bank Hubungi Nomor');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bank_name', 'Nama Bank');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'base_unit_id', 'Base Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'base_unit_name', 'Nama Base Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'based_on_shipping_address', 'Berdasarkan Alamat Pengiriman');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bonus_rate', 'Tingkat bonus');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bonus_slab_code', 'Bonus Slab Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bonus_slab_detail_id', 'Bonus Slab Detil Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bonus_slab_details_amounts_chk', 'Bidang "Jumlah Untuk" harus lebih besar dari "Jumlah Dari".');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bonus_slab_id', 'Bonus Slab Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'bonus_slab_name', 'Bonus Nama Slab');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'book', 'buku');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'brand', 'merek');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'brand_code', 'Kode merek');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'brand_id', 'merek Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'brand_name', 'Nama Merek');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'can_change_password', 'Bisa Ubah Password');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'can_self_verify', 'Dapatkah Diri Verifikasi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'can_verify_gl_transactions', 'Bisa Verifikasi Transaksi buku Umum');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'can_verify_purchase_transactions', 'Bisa Verifikasi Transaksi Pembelian');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'can_verify_sales_transactions', 'Bisa Verifikasi Transaksi Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'card_type_code', 'Jenis Kartu Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'card_type_id', 'Jenis Kartu Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'card_type_name', 'Jenis Kartu Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_flow_heading', 'Arus Kas Pos');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_flow_heading_cash_flow_heading_type_chk', 'Valid arus kas Jenis Pos. Diizinkan nilai: O, I, F.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_flow_heading_code', 'Arus Kas Pos Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_flow_heading_id', 'Arus Kas Pos Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_flow_heading_name', 'Arus Kas Pos Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_flow_heading_type', 'Arus Kas Pos jenis');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_flow_master_code', 'Arus Kas Master Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_flow_master_id', 'Arus Kas Guru Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_flow_master_name', 'Nama Arus Kas Guru');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_flow_setup_id', 'Arus kas Pengaturan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_repositories_cash_repository_code_uix', 'Gandakan Cash Repository Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_repositories_cash_repository_name_uix', 'Duplikat Nama Kas Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_repository', 'Repository kas');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_repository_code', 'Kas Repository Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_repository_id', 'Repository kas Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cash_repository_name', 'Kas Nama Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cell', 'sel');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'charge_interest', 'Mengisi Bunga');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'check_nexus', 'periksa Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'checking_frequency', 'memeriksa Frekuensi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'checking_frequency_id', 'Memeriksa Frekuensi Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'city', 'kota');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'collecting_account', 'mengumpulkan Akun');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'collecting_account_id', 'Mengumpulkan Identifier Akun');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'collecting_tax_authority', 'Mengumpulkan Otoritas Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'collecting_tax_authority_id', 'Mengumpulkan Otoritas Pajak Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'commision_rate', 'Komisi Tingkat');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'commission_rate', 'Komisi Tingkat');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'company_name', 'Nama Perusahaan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compare_unit_id', 'Bandingkan Satuan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compare_unit_name', 'Bandingkan Nama Satuan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compound_item', 'senyawa Barang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compound_item_code', 'Senyawa Item Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compound_item_detail_id', 'Senyawa Barang Detil Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compound_item_details_unit_chk', 'Unit yang diberikan tidak valid.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compound_item_id', 'Senyawa Barang Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compound_item_name', 'Senyawa Nama Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compound_unit_id', 'Senyawa Satuan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compound_units_chk', 'Unit dasar identifier tidak bisa sama dengan identifier unit yang dibandingkan.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'compounding_frequency', 'peracikan Frekuensi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'confidential', 'Confidential');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_address_line_1', 'Kontak Alamat Baris 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_address_line_2', 'Kontak Alamat Baris 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_cell', 'Hubungi Sel');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_city', 'Hubungi Kota');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_country', 'kontak Negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_email', 'Email kontak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_number', 'Hubungi Nomor');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_person', 'kontak Person');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_phone', 'kontak Telepon');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_po_box', 'Hubungi Po Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_state', 'kontak Negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'contact_street', 'Hubungi jalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cost_center_code', 'Biaya Kode Pusat');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cost_center_id', 'Biaya Pusat Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cost_center_name', 'Biaya Nama Pusat');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cost_of_goods_sold_account_id', 'Biaya Pokok Penjualan Identifier Akun');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cost_price', 'biaya Harga');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cost_price_includes_tax', 'Biaya Harga Termasuk Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'counter_code', 'kontra Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'counter_id', 'kontra Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'counter_name', 'kontra Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'country', 'negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'country_code', 'Kode Negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'country_id', 'negara Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'country_name', 'Nama Negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'county', 'daerah');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'county_code', 'daerah Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'county_id', 'daerah Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'county_name', 'daerah Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'county_sales_tax', 'Pajak Penjualan daerah');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'county_sales_tax_code', 'daerah Penjualan Kode Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'county_sales_tax_id', 'daerah Pajak Penjualan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'county_sales_tax_name', 'Nama Pajak Penjualan daerah');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'credit', 'kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'cst_number', 'Nomor Pajak Penjualan Central');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'currency', 'Mata Uang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'currency_code', 'Kode Mata Uang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'currency_name', 'Nama Mata Uang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'currency_symbol', 'Mata Simbol');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'customer_pays_fee', 'Pelanggan Pays Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'date_of_birth', 'Tanggal Lahir');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'debit', 'debet');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'default_cash_account_id', 'Standar Cash Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'default_cash_repository_id', 'Standar Kas Repository Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'department_code', 'Departemen Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'department_id', 'Departemen Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'department_name', 'Nama Departemen');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'description', 'deskripsi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'discount', 'diskon');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'due_days', 'Hari karena');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'due_frequency', 'karena Frekuensi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'due_frequency_id', 'Karena Frekuensi Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'due_on_date', 'Jatuh tempo pada tanggal');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'effective_from', 'efektif Dari');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'elevated', 'tinggi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'email', 'email');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'ends_on', 'berakhir Pada');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'entity_id', 'badan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'entity_name', 'Nama Entity');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'entry_ts', 'masuk Timestamp');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'er', 'Tingkat efektif');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'exclude_from_purchase', 'Kecualikan Dari Pembelian');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'exclude_from_sales', 'Kecualikan Dari Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'external_code', 'Kode eksternal');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'factory_address', 'pabrik Alamat');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'fax', 'fax');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'first_name', 'Nama Depan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'fiscal_year_code', 'Fiskal Kode Tahun');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'fiscal_year_name', 'Nama Tahun Fiskal');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'flag_id', 'Flag Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'flag_type_id', 'Bendera Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'flag_type_name', 'Bendera Jenis Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'flagged_on', 'Ditandai On');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'foreground_color', 'foreground Color');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'frequency_code', 'frekuensi Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'frequency_id', 'frekuensi Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'frequency_name', 'frekuensi Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'frequency_setup_code', 'Frekuensi Pengaturan Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'frequency_setup_id', 'Frekuensi Pengaturan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'from_days', 'dari Hari');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'full_name', 'Nama Lengkap');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'gl_head', 'General Ledger Kepala');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'gl_verification_limit', 'General Ledger Verifikasi Batas');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'grace_period', 'tenggang Waktu');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'has_child', 'memiliki anak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'height_in_centimeters', 'Hight Dalam Sentimeter');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'hot_item', 'item Hot');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'http_action_code', 'HTTP Kode Aksi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'hundredth_name', 'keseratus Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'id', 'identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'includes_tax', 'termasuk Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'income_tax_rate', 'Penghasilan Tarif Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'industry_id', 'industri Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'industry_name', 'Nama industri');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'interest_compounding_frequency_id', 'Bunga Peracikan Frekuensi Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'interest_rate', 'Suku Bunga');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'inventory_account_id', 'nventory Akun Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_active', 'aktif');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_added', 'Apakah Ditambahkan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_admin', 'Apakah Admin');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_cash', 'Apakah Kas');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_debit', 'Apakah Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_employee', 'Apakah Karyawan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_exempt', 'Apakah Bebaskan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_exemption', 'Apakah Pembebasan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_flat_amount', 'Apakah Jumlah datar');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_merchant_account', 'Apakah Merchant Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_party', 'Apakah Partai');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_purchase', 'Apakah Pembelian');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_rectangular', 'Apakah Rectangular');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_sales', 'Apakah Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_summary', 'Apakah Ringkasan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_supplier', 'Apakah Pemasok');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_system', 'Apakah Sistem');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_transaction_node', 'Apakah Node Transaksi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'is_vat', 'Apakah Vat');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item', 'barang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_code', 'Item Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_cost_price_id', 'Item Biaya Harga Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_cost_prices_unit_chk', 'Unit yang diberikan tidak valid.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_group', 'Item Grup');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_group_code', 'Item Kelompok Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_group_id', 'Item Grup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_group_name', 'Nama Item Grup');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_id', 'barang identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_name', 'barang Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_opening_inventory_unit_chk', 'Unit yang diberikan tidak valid.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_selling_price_id', 'Item Harga Jual Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_selling_prices_unit_chk', 'Unit yang diberikan tidak valid.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_type_code', 'barang type Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_type_id', 'barang type identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'item_type_name', 'barang type Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'items_item_code_uix', 'Gandakan kode barang.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'items_item_name_uix', 'Gandakan nama barang.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'items_reorder_quantity_chk', 'Jumlah pemesanan ulang harus menjadi besar dari atau sama dengan tingkat pemesanan ulang.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'last_analyze', 'Terakhir Menganalisis On');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'last_autoanalyze', 'Auto lalu menganalisis On');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'last_autovacuum', 'Terakhir Auto vakum On');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'last_name', 'Nama Belakang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'last_vacuum', 'Terakhir Vacuum On');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'late_fee', 'akhir Biaya');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'late_fee_code', 'Akhir Biaya Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'late_fee_id', 'Akhir Biaya Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'late_fee_name', 'Akhir Nama Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'late_fee_posting_frequency', 'Akhir Biaya Pasang Frekuensi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'late_fee_posting_frequency_id', 'Akhir Biaya Pasang Frekuensi identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'lc_credit', 'Surat kredit kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'lc_debit', 'Surat kredit debet');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'lead_source_code', 'Sumber utama kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'lead_source_id', 'Memimpin Sumber Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'lead_source_name', 'Memimpin Sumber Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'lead_status_code', 'Memimpin Kode Status');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'lead_status_id', 'Memimpin Status Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'lead_status_name', 'Memimpin Nama Status');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'lead_time_in_days', 'Memimpin Waktu Dalam Hari');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'length_in_centimeters', 'Panjang Di Sentimeter');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'machinable', 'machinable');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'maintain_stock', 'menjaga Bursa');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'maintained_by_user_id', 'Dipelihara oleh Identifier Pengguna');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'maximum_credit_amount', 'Jumlah Kredit Maksimum');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'maximum_credit_period', 'Jangka Waktu Kredit Maksimum');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'merchant_account_id', 'Merchant Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'merchant_fee_setup_id', 'Merchant Fee Pengaturan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'middle_name', 'Nama Tengah');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'nick_name', 'Nama Panggilan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'non_gl_stock_details_unit_chk', 'Unit yang diberikan tidak valid.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'normally_debit', 'biasanya Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'office', 'kantor');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'office_code', 'kantor kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'office_id', 'kantor identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'office_name', 'kantor Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'opportunity_stage_code', 'Peluang Tahap Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'opportunity_stage_id', 'Peluang Tahap Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'opportunity_stage_name', 'Nama Peluang Tahap');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'pan_number', 'Rekening pribadi Nomor Nomor');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent', 'induk');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_account_id', 'Akun Induk Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_account_master_id', 'Akun Induk Guru Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_account_name', 'Induk Nama Akun');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_account_number', 'Nomor Rekening Induk');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_cash_flow_heading_id', 'Induk Arus Kas Pos Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_cash_repository', 'Induk Repository Cash');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_cash_repository_id', 'Induk Repository Cash Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_cr_code', 'Induk Kas Repository Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_cr_name', 'Induk Nama Repository Cash');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_industry_id', 'Industri Induk Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_industry_name', 'Induk Nama Industri');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_item_group_id', 'Induk Barang Grup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_office', 'Kantor  induk');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'parent_office_id', 'Kantor induk identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'party', 'partai');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'party_code', 'Kode Partai');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'party_id', 'Partai identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'party_name', 'Nama Partai');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'party_type', 'Partai Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'party_type_code', 'Partai Type Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'party_type_id', 'Partai Type identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'party_type_name', 'Jenis Partai Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'password', 'Kata Sandi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'payment_card_code', 'Kartu Pembayaran Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'payment_card_id', 'Kartu Pembayaran Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'payment_card_name', 'Pembayaran Kartu Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'payment_term', 'Term Pembayaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'payment_term_code', 'Term Pembayaran kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'payment_term_id', 'Term Pembayara identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'payment_term_name', 'Pembayaran Nama Term');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'phone', 'telepon');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'po_box', 'Kotak Pos');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'poco_type_name', 'Poco Jenis Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'policy_id', 'identifier kebijakan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'preferred_shipping_mail_type', 'Preferred Pengiriman Mail Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'preferred_shipping_mail_type_id', 'Preferred Pengiriman Mail Type identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'preferred_shipping_package_shape', 'Preferred Pengiriman Paket Shape');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'preferred_supplier', 'Pemasok yang dipilih');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'preferred_supplier_id', 'Pemasok yang dipilih identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'price', 'harga');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'price_from', 'Harga Dari');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'price_to', 'Harga Untuk');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'price_type_code', 'Harga Type Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'price_type_id', 'Harga Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'price_type_name', 'Jenis Harga Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'priority', 'prioritas');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'purchase_account_id', 'Pembelian Akun Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'purchase_discount_account_id', 'Pembelian Diskon Akun Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'purchase_verification_limit', 'Pembelian Verifikasi Batas');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'quantity', 'kuantitas');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'rate', 'laju');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurrence_type_id', 'Kekambuhan Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurring_amount', 'Jumlah berulang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurring_duration', 'berulang Durasi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurring_frequency', 'Frekuensi berulang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurring_frequency_id', 'Frekuensi berulang identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurring_invoice', 'Faktur berulang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurring_invoice_code', 'Faktur berulang kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurring_invoice_id', 'Faktur berulang identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurring_invoice_name', 'Berulang Nama Faktur');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurring_invoice_setup_id', 'Faktur Berulang Pengaturan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'Anda tidak dapat memiliki lebih dari satu pemicu auto penjualan untuk item ini.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'recurs_on_same_calendar_date', 'Sama terjadi lagi pada Kalender Tanggal');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'registration_date', 'Tanggal Pendaftaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'registration_number', 'Nomor Induk');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'relationship_officer_name', 'Relationship Officer Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'relname', 'hubungan Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'reorder_level', 'Susun ulang Tingkat');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'reorder_quantity', 'Susun ulang Kuantitas');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'reorder_unit', 'Susun ulang Satuan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'reorder_unit_id', 'Susun ulang Satuan identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'reporting_tax_authority', 'Pelaporan Otoritas Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'reporting_tax_authority_id', 'Pelaporan Otoritas Pajak Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'repository', 'gudang');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'resource', 'sumber Daya');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'resource_id', 'sumber Daya identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'resource_key', 'sumber Key');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'role_code', 'Kode peran');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'role_id', 'peran identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'role_name', 'peran nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'rounding_decimal_places', 'Pembulatan desimal Tempat');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'rounding_method', 'Metode Pembulatan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'rounding_method_code', 'Pembulatan Metode Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'rounding_method_name', 'Pembulatan Metode Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_account_id', 'Akun Penjualan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_discount_account_id', 'Penjualan Diskon Akun Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_return_account_id', 'Penjualan Kembali Akun Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax', 'Pajak Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_code', 'Kode Pajak Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_detail_code', 'Pajak Penjualan Detil Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_detail_id', 'Pajak Penjualan Detil Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_detail_name', 'Pajak Penjualan Detil Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_details_rate_chk', 'Tingkat tidak boleh kosong kecuali Anda telah memilih pajak negara atau daerah. Demikian pula, Anda tidak dapat memberikan baik tingkat dan memilih untuk memiliki pajak negara atau daerah.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_exempt', 'Pajak Bebaskan Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_exempt_code', 'Pajak Penjualan Kode Bebaskan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_exempt_detail_id', 'Pajak Penjualan Detil Bebaskan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_exempt_id', 'Pajak Penjualan Identifier Bebaskan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_exempt_name', 'Pajak Penjualan Nama Bebaskan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_exempts_price_to_chk', 'Lapangan "Harga Dari ''harus kurang dari" Harga Untuk. "');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_id', 'Identifier Pajak Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_name', 'Nama Pajak Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_type', 'Jenis Pajak Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_type_code', 'Jenis Pajak Penjualan kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_type_id', 'Jenis Pajak Penjualan identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_tax_type_name', 'Penjualan Jenis Pajak Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_team_code', 'Penjualan Tim Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_team_id', 'Tim penjualan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_team_name', 'Tim penjualan Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sales_verification_limit', 'Penjualan Verifikasi Batas');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'salesperson_bonus_setup_id', 'Bonus Salesperson Pengaturan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'salesperson_code', 'Tenaga penjual Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'salesperson_id', 'Tenaga penjual Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'salesperson_name', 'Nama salesperson');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'self_verification_limit', 'Verifikasi Diri Batas');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'selling_price', 'Harga Jual');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'selling_price_includes_tax', 'Harga Jual Termasuk Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipper_code', 'pengirim Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipper_id', 'pengirim Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipper_name', 'pengirim Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipping_address_code', 'Pengiriman Alamat Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipping_address_id', 'Alamat Pengiriman Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipping_mail_type_code', 'Pengiriman Mail Type Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipping_mail_type_id', 'Pengiriman Mail Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipping_mail_type_name', 'Pengiriman Mail Jenis Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipping_package_shape_code', 'Pengiriman Paket Shape Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipping_package_shape_id', 'Pengiriman Paket Shape identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'shipping_package_shape_name', 'Pengiriman Nama Paket Shape');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'slab_name', 'slab Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sst_number', 'Negara Nomor Pajak Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'starts_from', 'mulai Dari');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'state', 'negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'state_code', 'Kode negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'state_id', 'negara identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'state_name', 'Nama negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'state_sales_tax', 'Pajak Penjualan Negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'state_sales_tax_code', 'Negara Penjualan Kode Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'state_sales_tax_id', 'Negara Identifier Pajak Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'state_sales_tax_name', 'Negara Nama Pajak Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'statement_reference', 'pernyataan Referensi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'stock_details_unit_chk', 'Unit yang diberikan tidak valid.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'store', 'toko');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'store_code', 'toko kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'store_id', 'toko Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'store_name', 'toko nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'store_type', 'toko Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'store_type_code', 'toko type kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'store_type_id', 'toko type identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'store_type_name', 'toko type nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'stores_default_cash_account_id_chk', 'Silakan pilih Cash valid atau Rekening Bank Identi....');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'stores_sales_tax_id_chk', 'Yang dipilih SalesTax Identifier tidak valid untuk kantor ini.');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'street', 'jalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sub_total', 'sub Total');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'sys_type', 'sistem Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax', 'pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_authority_code', 'Kode Otoritas Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_authority_id', 'Otoritas Pajak Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_authority_name', 'Otoritas Pajak Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_base_amount', 'Basis Pajak Jumlah');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_base_amount_type_code', 'Basis Pajak Jumlah Jenis Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_base_amount_type_name', 'Basis Pajak Jumlah Jenis Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_code', 'Kode pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_exempt_type', 'Pajak Bebaskan Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_exempt_type_code', 'Pajak Bebaskan Type Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_exempt_type_id', 'Pajak Bebaskan Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_exempt_type_name', 'Jenis Pajak Bebaskan Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_id', 'pajak identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_master', 'pajak Guru');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_master_code', 'Guru pajak kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_master_id', 'Guru pajak identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_master_name', 'Guru pajak nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_name', 'pajak nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_rate_type', 'Tingkat Jenis Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_rate_type_code', 'Tarif Pajak Type Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_rate_type_name', 'Tarif Pajak Jenis Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_type_code', 'Jenis Pajak Kode');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_type_id', 'Jenis pajak Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tax_type_name', 'Jenis pajak Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'to_days', 'untuk Hari');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'total', 'total');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'total_duration', 'total Durasi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'total_sales', 'total Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tran_code', 'Kode transaksi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'tran_type', 'type transaksi');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'unit', 'satuan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'unit_code', 'Kode Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'unit_id', 'unit identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'unit_name', 'nama unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'url', 'Universal Resource Locator');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'use_tax_collecting_account', 'Gunakan Akun Mengumpulkan Pajak');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'use_tax_collecting_account_id', 'Gunakan Akun Mengumpulkan Pajak identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'user_id', 'pemakai identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'user_name', 'Nama Pengguna');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'vacuum_count', 'Vacuum Hitungan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'valid_from', 'Hari Dari');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'valid_till', 'Hari Sampai');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'value', 'nilai');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'value_date', 'nilai Tanggal');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'verify_gl_transactions', 'Verifikasi Transaksi General Ledger');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'verify_purchase_transactions', 'Verifikasi Transaksi Pembelian');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'verify_sales_transactions', 'Verifikasi Transaksi Penjualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'weight_in_grams', 'Berat Di Grams');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'width_in_centimeters', 'Lebar Di Sentimeter');
    PERFORM localization.add_localized_resource('ScrudResource', 'id', 'zip_code', 'Kode Pos');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'Select', '選択する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'account', 'アカウント');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'account_id', 'アカウントを識別');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'account_master', 'マスターアカウント');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'account_master_code', 'マスターアカウントコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'account_master_id', 'マスターアカウント識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'account_master_name', 'マスターアカウント名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'account_name', 'アカウント名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'account_number', '口座番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'address', 'アドレス');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'address_line_1', '住所1');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'address_line_2', '住所2');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'ageing_slab_id', '高齢化は、スラブを特定');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'ageing_slab_name', '高齢スラブ名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'allow_credit', 'クレジットを許可する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'allow_sales', '販売を許可する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'allow_transaction_posting', 'トランザクションの転記を許可する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'amount', '額');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'amount_from', 'の量');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'amount_to', '額に');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'analyze_count', 'カウントを分析');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'api_access_policy_id', 'APIアクセスポリシーのId');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'api_access_policy_uix', 'APIのアクセスポリシーのエントリを重複');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'applied_on_shipping_charge', '送料無料に適用');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'audit_ts', '監査タイムスタンプ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'audit_user_id', '監査ユーザー識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'auto_trigger_on_sales', 'セールス上で自動的にトリガ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'autoanalyze_count', '自動カウントを分析');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'autovacuum_count', '自動バキュームカウント');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'background_color', '背景色');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'balance', 'バランス');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bank_account_number', '銀行口座番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bank_account_type', '銀行口座の種類');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bank_accounts_account_id_chk', '選択した項目は、有効な銀行口座ではありません。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bank_accounts_pkey', '銀行口座を複製します。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bank_address', '銀行所在地');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bank_branch', '銀行支店');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bank_contact_number', '銀行お問い合わせ番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bank_name', '銀行名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'base_unit_id', 'ベースユニットを特定');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'base_unit_name', 'ベースユニット名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'based_on_shipping_address', '配送先住所に基づいて、');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bonus_rate', 'レートボーナス');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bonus_slab_code', 'スラブボーナスコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bonus_slab_detail_id', 'ボーナススラブの詳細を特定');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bonus_slab_details_amounts_chk', 'フィールド「量を ""の量」よりも大きくなければなりません。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bonus_slab_id', 'ボーナススラブを特定');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'bonus_slab_name', 'スラブ名前ボーナス');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'book', 'ブック');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'brand', 'ブランド');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'brand_code', 'ブランドコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'brand_id', 'ブランドを特定');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'brand_name', '商標名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'can_change_password', 'パスワードを変更することができます');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'can_self_verify', '自己を確認することができます');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'can_verify_gl_transactions', '総勘定元帳トランザクションを確認することができます');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'can_verify_purchase_transactions', '購入取引を確認することができます');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'can_verify_sales_transactions', '販売取引を確認することができます');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'card_type_code', 'カードタイプコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'card_type_id', 'カードタイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'card_type_name', 'カードタイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_flow_heading', '見出しキャッシュフロー');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_flow_heading_cash_flow_heading_type_chk', '無効なキャッシュフロータイプの見出し。許可された値：O、I、F。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_flow_heading_code', 'キャッシュ·フローは、コードを見出し');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_flow_heading_id', '見出しキャッシュフロー識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_flow_heading_name', 'キャッシュフロー見出し名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_flow_heading_type', 'キャッシュフロー見出しの種類');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_flow_master_code', 'キャッシュフローマスターコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_flow_master_id', 'キャッシュフローマスター識別します');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_flow_master_name', 'キャッシュフローマスターの名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_flow_setup_id', 'キャッシュフローのセットアップ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_repositories_cash_repository_code_uix', '現金コードリポジトリを複製');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_repositories_cash_repository_name_uix', '現金リポジトリ名が重複しています');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_repository', '現金リポジトリ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_repository_code', '現金コードリポジトリ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_repository_id', '現金リポジトリID');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cash_repository_name', '現金リポジトリ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cell', 'セル');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'charge_interest', '支払利息');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'check_nexus', 'ネクサスを確認してください');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'checking_frequency', '周波数の確認');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'checking_frequency_id', '周波数識別子をチェックする');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'city', 'シティ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'collecting_account', 'アカウントの収集');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'collecting_account_id', '収集アカウント識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'collecting_tax_authority', '税務当局の収集');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'collecting_tax_authority_id', '税務当局識別子の収集');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'commision_rate', 'レート委員会');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'commission_rate', 'レート委員会');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'company_name', '会社名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compare_unit_id', 'ユニット識別子の比較');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compare_unit_name', 'ユニット名を比較');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compound_item', '複合アイテム');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compound_item_code', '複合商品コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compound_item_detail_id', '複合アイテムの詳細を確認します');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compound_item_details_unit_chk', '無効なユニットを提供した。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compound_item_id', '複合アイテム識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compound_item_name', '複合項目名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compound_unit_id', '複合ユニット識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compound_units_chk', 'サミ比較部が識別されるようにベースユニットを識別することができない。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'compounding_frequency', '配合頻度');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'confidential', '秘密の');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_address_line_1', '連絡先のアドレス行1');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_address_line_2', '連絡先のアドレス行2');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_cell', 'コンタクトセル');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_city', 'お問合せ市');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_country', 'お問い合わせ国');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_email', '連絡先メールアドレス');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_number', '連絡先の番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_person', '連絡窓口');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_phone', '連絡先電話番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_po_box', '私書箱にお問い合わせください');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_state', 'お問い合わせ州');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'contact_street', 'お問い合わせ·ストリート');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cost_center_code', 'コストセンターコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cost_center_id', 'コストセンターを識別');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cost_center_name', 'コストセンターの名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cost_of_goods_sold_account_id', 'アカウント識別子売上原価');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cost_price', '原価');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cost_price_includes_tax', 'コストの価格には税金が含まれています');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'counter_code', 'カウンターのコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'counter_id', 'カウンターを特定');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'counter_name', 'カウンタ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'country', 'カントリー');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'country_code', '国コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'country_id', '国を特定');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'country_name', '国名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'county', '郡');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'county_code', '郡コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'county_id', '郡を特定');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'county_name', '郡名は、');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'county_sales_tax', '郡売上税');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'county_sales_tax_code', '郡売上税コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'county_sales_tax_id', '郡売上税識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'county_sales_tax_name', '郡売上税名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'credit', 'クレジット');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'cst_number', '中央売上税番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'currency', '通貨');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'currency_code', '通貨コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'currency_name', '通貨の名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'currency_symbol', '通貨記号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'customer_pays_fee', 'お客様は料金を支払う');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'date_of_birth', '生年月日');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'debit', '借方');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'default_cash_account_id', 'デフォルト現金アカウント識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'default_cash_repository_id', 'デフォルトのキャッシュリポジトリID');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'department_code', '部門コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'department_id', '部門の識別');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'department_name', '部署名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'description', '説明');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'discount', '割引');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'due_days', '原因日数');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'due_frequency', '周波数による');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'due_frequency_id', 'による周波数識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'due_on_date', '期日は、');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'effective_from', 'からも有効');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'elevated', '高い');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'email', 'メール');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'ends_on', 'それは終わる');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'entity_id', '実体識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'entity_name', 'エンティティ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'entry_ts', 'エントリータイムスタンプ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'er', '実効レート');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'exclude_from_purchase', '購入から除外');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'exclude_from_sales', '販売から除外');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'external_code', '外部コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'factory_address', '工場住所');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'fax', 'ファックス');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'first_name', 'ファーストネーム');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'fiscal_year_code', '会計年度コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'fiscal_year_name', '会計年度の名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'flag_id', '旗識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'flag_type_id', '旗タイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'flag_type_name', 'フラグタイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'flagged_on', 'フラグ付きで');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'foreground_color', '文字表示色');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'frequency_code', '周波数コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'frequency_id', '周波数識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'frequency_name', '頻度名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'frequency_setup_code', '周波数設定コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'frequency_setup_id', '周波数設定識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'from_days', '日から');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'full_name', 'フルネーム');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'gl_head', '総勘定元帳ヘッド');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'gl_verification_limit', '総勘定元帳の検証の制限');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'grace_period', '猶予期間');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'has_child', '子供を持っています');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'height_in_centimeters', 'センチメートルで高さ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'hot_item', '人気商品');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'http_action_code', 'HTTPアクションコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'hundredth_name', '百名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'id', '識別する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'includes_tax', '税を含みます');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'income_tax_rate', '所得税率');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'industry_id', '業界を特定');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'industry_name', '業界の名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'interest_compounding_frequency_id', '複利周波数識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'interest_rate', '金利');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'inventory_account_id', '在庫アカウント識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_active', 'アクティブです');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_added', '追加される');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_admin', '管理者は、');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_cash', '現金はありますか');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_debit', 'デビットはありますか');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_employee', '従業員は、');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_exempt', '免除されている');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_exemption', '免除はありますか');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_flat_amount', 'フラットな量である');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_merchant_account', 'マーチャントアカウントはありますか');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_party', 'パーティーはありますか');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_purchase', '購入はありますか');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_rectangular', '長方形はありますか');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_sales', '販売です');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_summary', '要約です');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_supplier', 'サプライヤです');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_system', 'システムです');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_transaction_node', 'トランザクションのノードである');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'is_vat', 'バットはありますか');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item', 'アイテム');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_code', '商品コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_cost_price_id', '項目について価格を特定');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_cost_prices_unit_chk', '無効なユニットを提供した。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_group', 'アイテムのグループ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_group_code', 'グループコード項目');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_group_id', 'アイテムのグループを識別');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_group_name', '項目群名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_id', '項目識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_name', '項目名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_opening_inventory_unit_chk', '無効なユニットが提供さ。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_selling_price_id', 'アイテム販売価格識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_selling_prices_unit_chk', '無効なユニットが提供さ。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_type_code', 'アイテムの種類コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_type_id', 'アイテムタイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'item_type_name', 'アイテム·タイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'items_item_code_uix', 'アイテムコードを複製します。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'items_item_name_uix', '項目名が重複しています。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'items_reorder_quantity_chk', '再注文量がより大きなまたは再注文レベルに等しくなければなりません。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'last_analyze', 'ラストでは分析する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'last_autoanalyze', '最後に自動で分析する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'last_autovacuum', '最後の自動バキュームオン...');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'last_name', '苗字');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'last_vacuum', '上の最後の真空');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'late_fee', '延滞料');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'late_fee_code', '延滞料コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'late_fee_id', '延滞料識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'late_fee_name', '延滞料名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'late_fee_posting_frequency', '延滞料転記頻度');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'late_fee_posting_frequency_id', '延滞料転記頻度識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'lc_credit', 'クレジット信用状');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'lc_debit', 'クレジットデビット状');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'lead_source_code', 'ソースコードの鉛');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'lead_source_id', 'ソース識別子をリード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'lead_source_name', 'リードソース名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'lead_status_code', 'リードステータスコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'lead_status_id', 'リードステータス識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'lead_status_name', 'リードステータス名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'lead_time_in_days', '時間の日数をリード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'length_in_centimeters', 'センチメートルの長さ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'machinable', '機械加工できる');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'maintain_stock', '株価を維持');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'maintained_by_user_id', 'ユーザ識別子によって維持');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'maximum_credit_amount', '最大信用額');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'maximum_credit_period', '最大与信期間');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'merchant_account_id', 'マーチャントアカウント識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'merchant_fee_setup_id', '加盟店手数料のセットアップ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'middle_name', 'ミドルネーム');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'nick_name', 'ニックネーム');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'non_gl_stock_details_unit_chk', '無効なユニットが提供さ。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'normally_debit', '通常、デビット');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'office', 'オフィス');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'office_code', 'オフィスコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'office_id', 'オフィス識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'office_name', 'オフィス名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'opportunity_stage_code', 'オポチュニティステージコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'opportunity_stage_id', 'オポチュニティステージ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'opportunity_stage_name', 'オポチュニティ芸名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'pan_number', 'プライベートアカウント番号番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent', '親');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_account_id', '親アカウント識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_account_master_id', '親アカウントマスター識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_account_name', '親アカウント名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_account_number', '親アカウント番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_cash_flow_heading_id', '親キャッシュフロー見出し識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_cash_repository', '親現金リポジトリ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_cash_repository_id', '親現金リポジトリ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_cr_code', '親現金リポジトリコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_cr_name', '親現金リポジトリ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_industry_id', '親業界の識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_industry_name', '親業界の名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_item_group_id', '親アイテムのグループ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_office', '親オフィス');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'parent_office_id', '親オフィス識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'party', 'パーティー');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'party_code', 'パーティーコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'party_id', 'パーティー識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'party_name', '側の名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'party_type', 'パーティーの種類');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'party_type_code', 'パーティータイプコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'party_type_id', 'パーティータイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'party_type_name', 'パーティータイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'password', 'パスワード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'payment_card_code', '支払カードのコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'payment_card_id', '支払カード識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'payment_card_name', '支払カード名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'payment_term', '支払条件');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'payment_term_code', '支払条件コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'payment_term_id', '支払言葉識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'payment_term_name', '支払の言葉の名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'phone', '電話');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'po_box', '私書箱');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'poco_type_name', 'ポコタイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'policy_id', 'ポリシー識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'preferred_shipping_mail_type', '好まれた出荷メールの種類');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'preferred_shipping_mail_type_id', '優先配送メールタイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'preferred_shipping_package_shape', '好まれた出荷パッケージ形状');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'preferred_supplier', '優先サプライヤー');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'preferred_supplier_id', '優先サプライヤー識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'price', 'プライス');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'price_from', 'ユーロからの価格');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'price_to', 'へ価格');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'price_type_code', '価格タイプコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'price_type_id', '価格タイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'price_type_name', '価格タイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'priority', '優先');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'purchase_account_id', 'アカウント識別子を購入');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'purchase_discount_account_id', 'ディスカウントアカウント識別子を購入');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'purchase_verification_limit', '購入検証リミット');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'quantity', '数量');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'rate', 'レート');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurrence_type_id', '再発タイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurring_amount', '定期的な金額');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurring_duration', '定期的な時間');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurring_frequency', '繰り返し周波数');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurring_frequency_id', '繰り返し周波数識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurring_invoice', '定期的な請求書');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurring_invoice_code', '定期的な請求書コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurring_invoice_id', '定期的な請求書識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurring_invoice_name', '経常請求書の名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurring_invoice_setup_id', '経常請求書のセットアップ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'このアイテムの販売に複数の自動トリガを持つことはできません。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'recurs_on_same_calendar_date', '同じカレンダ日に再発する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'registration_date', '登録日');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'registration_number', '登録番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'relationship_officer_name', '関係役員名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'relname', 'リレーション名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'reorder_level', '再注文レベル');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'reorder_quantity', '再注文数量');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'reorder_unit', '再注文単位');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'reorder_unit_id', 'の並べ替えユニット識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'reporting_tax_authority', '税務当局の報告');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'reporting_tax_authority_id', '税務当局識別子の報告');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'repository', 'リポジトリー');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'resource', 'リソース');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'resource_id', 'リソース識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'resource_key', 'リソースキー');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'role_code', 'ロールのコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'role_id', '役割の識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'role_name', '役割名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'rounding_decimal_places', '小数点以下の桁数を丸め');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'rounding_method', '丸め方法');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'rounding_method_code', 'メソッドのコードを丸め');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'rounding_method_name', '丸めメソッドの名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_account_id', 'セールスアカウント識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_discount_account_id', '販売ディスカウントアカウント識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_return_account_id', 'セールスリターンアカウント識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax', '消費税');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_code', '売上税コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_detail_code', '消費税詳細コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_detail_id', '消費税の詳細識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_detail_name', '消費税の詳細名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_details_rate_chk', 'あなたは状態または郡税を選択していない限り、レートは空であってはならない。同様に、両方の速度を提供し、状態または郡税を持つように選択することはできません。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_exempt', '売上税免除を');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_exempt_code', '売上税免除コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_exempt_detail_id', '売上税免除詳細識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_exempt_id', '売上税免除識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_exempt_name', '売上税免除名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_exempts_price_to_chk', 'フィールド価格へ」」からの価格未満でなければなりません"。"');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_id', '売上税識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_name', '売上税名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_type', '売上税タイプ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_type_code', '売上税タイプコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_type_id', '売上税タイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_tax_type_name', '売上税タイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_team_code', '営業チームコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_team_id', 'セールスチーム識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_team_name', 'セールスチーム名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sales_verification_limit', 'セールス検証リミット');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'salesperson_bonus_setup_id', '営業担当者ボーナスのセットアップ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'salesperson_code', '営業担当者コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'salesperson_id', '営業担当者識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'salesperson_name', '営業担当者名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'self_verification_limit', '自己検証の制限');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'selling_price', '販売価格');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'selling_price_includes_tax', '販売価格は税を含みます');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipper_code', '荷主コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipper_id', '荷主識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipper_name', '荷主名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipping_address_code', '配送先住所コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipping_address_id', '配送先住所識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipping_mail_type_code', '送料メールタイプコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipping_mail_type_id', '送料メールタイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipping_mail_type_name', '送料メールタイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipping_package_shape_code', '配送パッケージの形状コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipping_package_shape_id', '配送パッケージの形状識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'shipping_package_shape_name', '配送パッケージのシェイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'slab_name', 'スラブ名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sst_number', '州売上税番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'starts_from', 'から始まる');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'state', '状態');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'state_code', '状態コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'state_id', 'ステート識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'state_name', '状態名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'state_sales_tax', '州の消費税');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'state_sales_tax_code', '州売上税コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'state_sales_tax_id', '州売上税識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'state_sales_tax_name', '州売上税名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'statement_reference', 'ステートメントリファレンス');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'stock_details_unit_chk', '無効なユニットが提供さ。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'store', '店舗');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'store_code', '店舗コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'store_id', 'ストア識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'store_name', '店名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'store_type', 'ストアタイプ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'store_type_code', 'ストアタイプコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'store_type_id', 'ストアタイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'store_type_name', 'ストアタイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'stores_default_cash_account_id_chk', '有効な現金または銀行口座識別子を選択してください。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'stores_sales_tax_id_chk', '選ばれた消費税識別子は、このオフィスには無効です。');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'street', 'ストリート');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sub_total', '小計');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'sys_type', 'システムタイプ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax', '税');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_authority_code', '税務当局コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_authority_id', '税務当局識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_authority_name', '税務機関名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_base_amount', '課税基準額');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_base_amount_type_code', '課税標準額タイプコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_base_amount_type_name', '課税額タイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_code', '税コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_exempt_type', '税免除タイプ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_exempt_type_code', '非課税タイプコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_exempt_type_id', '非課税タイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_exempt_type_name', '非課税タイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_id', '税識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_master', '税マスター');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_master_code', '税マスターコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_master_id', '税務マスター識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_master_name', '税マスターネーム');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_name', '税名前');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_rate_type', '税率タイプ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_rate_type_code', '税率タイプコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_rate_type_name', '税率タイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_type_code', '税タイプコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_type_id', '税タイプ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tax_type_name', '税タイプ名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'to_days', '日まで');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'total', '合計');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'total_duration', '全持続時間');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'total_sales', '総売上高');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tran_code', 'トランザクションコード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'tran_type', '取引形態');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'unit', 'ユニット');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'unit_code', '単位コード');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'unit_id', 'ユニット識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'unit_name', '装置名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'url', 'ユニバーサルリソースロケータ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'use_tax_collecting_account', '税の収集のアカウントを使用する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'use_tax_collecting_account_id', '税の収集アカウント識別子を使用して、');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'user_id', 'ユーザ識別子');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'user_name', 'ユーザー名');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'vacuum_count', '真空カウント');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'valid_from', 'から有効');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'valid_till', 'ティル有効');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'value', '値');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'value_date', '実行日');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'verify_gl_transactions', '総勘定元帳の取引を検証');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'verify_purchase_transactions', '購入取引を確認する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'verify_sales_transactions', '販売取引を確認する');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'weight_in_grams', 'グラム量');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'width_in_centimeters', 'センチメートルの幅');
    PERFORM localization.add_localized_resource('ScrudResource', 'ja', 'zip_code', '郵便番号');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'Select', 'Pilih');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'account', 'Akaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'account_id', 'Pengecam Akaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'account_master', 'Master Akaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'account_master_code', 'Akaun Master Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'account_master_id', 'Akaun Master Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'account_master_name', 'Master Akaun Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'account_name', 'Nama Akaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'account_number', 'Nombor Akaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'address', 'Alamat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'address_line_1', 'Alamat Baris 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'address_line_2', 'Alamat Baris 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'ageing_slab_id', 'Penuaan Slab Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'ageing_slab_name', 'Penuaan Nama Slab');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'allow_credit', 'Benarkan Kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'allow_sales', 'Benarkan Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'allow_transaction_posting', 'Benarkan Transaksi Penempatan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'amount', 'jumlah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'amount_from', 'amaun Dari');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'amount_to', 'amaun Untuk');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'analyze_count', 'menganalisis Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'api_access_policy_id', 'API Akses Id Dasar');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'api_access_policy_uix', 'Pendua Entry Dasar Akses API');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'applied_on_shipping_charge', 'Dikenakan ke atas Caj Penghantaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'audit_ts', 'Cap Masa Audit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'audit_user_id', 'Audit pengguna Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'auto_trigger_on_sales', 'Trigger secara automatik pada Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'autoanalyze_count', 'Auto menganalisis Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'autovacuum_count', 'Auto vakum Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'background_color', 'Auto vakum Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'balance', 'Baki');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bank_account_number', 'Nombor Akaun Bank');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bank_account_type', 'Bank Jenis Akaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bank_accounts_account_id_chk', 'Item yang dipilih bukan akaun bank yang sah.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bank_accounts_pkey', 'Pendua akaun bank.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bank_address', 'Alamat Bank');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bank_branch', 'Cawangan Bank');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bank_contact_number', 'Bank Nombor Telefon');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bank_name', 'Nama Bank');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'base_unit_id', 'Unit Pangkalan dikenalpasti...');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'base_unit_name', 'Nama Unit Pangkalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'based_on_shipping_address', 'Berdasarkan Alamat Penghantaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bonus_rate', 'Kadar bonus');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bonus_slab_code', 'Bonus Slab Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bonus_slab_detail_id', 'Bonus Detail Slab Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bonus_slab_details_amounts_chk', 'Medan "Jumlah Untuk" mesti lebih besar daripada "Jumlah Daripada".');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bonus_slab_id', 'Bonus Slab Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'bonus_slab_name', 'Bonus Nama Slab');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'book', 'buku');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'brand', 'jenama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'brand_code', 'Kod jenama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'brand_id', 'jenama Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'brand_name', 'Nama jenama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'can_change_password', 'Bolehkah Tukar Kata Laluan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'can_self_verify', 'Boleh sendiri Sahkan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'can_verify_gl_transactions', 'Boleh Sahkan Ketua Transaksi lejar');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'can_verify_purchase_transactions', 'Boleh Sahkan Transaksi Pembelian');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'can_verify_sales_transactions', 'Boleh Sahkan Transaksi Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'card_type_code', 'Jenis Kad Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'card_type_id', 'Jenis Kad Pengenalan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'card_type_name', 'Jenis Kad Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_flow_heading', 'Aliran Tunai Tajuk');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_flow_heading_cash_flow_heading_type_chk', 'Tidak sah Jenis Aliran Tunai Kepala. Nilai dibenarkan: O, I, F.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_flow_heading_code', 'Aliran Tunai Kod Tajuk');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_flow_heading_id', 'Aliran Tunai Tajuk Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_flow_heading_name', 'Aliran Tunai Tajuk Tanda Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_flow_heading_type', 'Jenis Tajuk aliran tunai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_flow_master_code', 'Aliran Tunai Master Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_flow_master_id', 'Aliran Tunai Master Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_flow_master_name', 'Nama Aliran Tunai Master');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_flow_setup_id', 'Aliran tunai Persediaan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_repositories_cash_repository_code_uix', 'Pendua Tunai Repository Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_repositories_cash_repository_name_uix', 'Pendua Nama Repository Tunai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_repository', 'Repository tunai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_repository_code', 'Tunai Repository Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_repository_id', 'Repository Tunai Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cash_repository_name', 'Tunai Repository Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cell', 'Cell');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'charge_interest', 'caj Faedah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'check_nexus', 'Semak Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'checking_frequency', 'Semakan Kekerapan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'checking_frequency_id', 'Semakan Kekerapan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'city', 'City');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'collecting_account', 'mengumpul Akaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'collecting_account_id', 'Mengumpul Identifier Akaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'collecting_tax_authority', 'Mengumpul Berkuasa Cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'collecting_tax_authority_id', 'Mengumpul Berkuasa Cukai Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'commision_rate', 'Kadar Suruhanjaya');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'commission_rate', 'Kadar Suruhanjaya');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'company_name', 'Nama Syarikat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compare_unit_id', 'Bandingkan Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compare_unit_name', 'Bandingkan Nama Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compound_item', 'kompaun Perkara');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compound_item_code', 'Kompaun Kod Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compound_item_detail_id', 'Perkara Kompaun Detail Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compound_item_details_unit_chk', 'Unit tidak sah disediakan.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compound_item_id', 'Kompaun Perkara Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compound_item_name', 'Kompaun Nama Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compound_unit_id', 'Kompaun Id Unit...');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compound_units_chk', 'Unit asas pengecam tidak boleh sama dengan membandingkan unit pengecam.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'compounding_frequency', 'Pengkompaunan Kekerapan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'confidential', 'sulit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_address_line_1', 'Hubungi Alamat Baris 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_address_line_2', 'Hubungi Alamat Baris 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_cell', 'Hubungi Cell');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_city', 'Hubungi City');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_country', 'Hubungi Negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_email', 'Hubungi E-mel');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_number', 'Nombor Telefon');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_person', 'dihubungi');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_phone', 'Hubungi Telefon');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_po_box', 'Hubungi Po Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_state', 'Hubungi Negeri');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'contact_street', 'Hubungi Negeri');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cost_center_code', 'Kos Kod Pusat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cost_center_id', 'Kos Pusat Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cost_center_name', 'Kos Nama Pusat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cost_of_goods_sold_account_id', 'Kos Barang Dijual Identifier Akaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cost_price', 'kos Harga');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cost_price_includes_tax', 'Kos Harga Termasuk Cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'counter_code', 'Kod kaunter');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'counter_id', 'kaunter Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'counter_name', 'Nama kaunter');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'country', 'negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'country_code', 'Kod Negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'country_id', 'negara Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'country_name', 'Nama negara');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'county', 'County');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'county_code', 'County Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'county_id', 'County Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'county_name', 'Nama County');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'county_sales_tax', 'County Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'county_sales_tax_code', 'County Jualan Kod Cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'county_sales_tax_id', 'Jualan County Cukai Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'county_sales_tax_name', 'Nama County Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'credit', 'kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'cst_number', 'Nombor pusat Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'currency', 'mata Wang');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'currency_code', 'Kod mata Wang');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'currency_name', 'Nama mata Wang');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'currency_symbol', 'Simbol mata wang');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'customer_pays_fee', 'Pelanggan Membayar Yuran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'date_of_birth', 'Tarikh Lahir');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'debit', 'debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'default_cash_account_id', 'Akaun Identifier Tunai Default');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'default_cash_repository_id', 'Tunai Repository Identifier Default');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'department_code', 'Kod Jabatan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'department_id', 'Id Jabatan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'department_name', 'Nama Jabatan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'description', 'Penerangan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'discount', 'diskaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'due_days', 'Hari disebabkan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'due_frequency', 'Kekerapan kerana');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'due_frequency_id', 'Kekerapan Disebabkan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'due_on_date', 'Oleh kerana pada Tarikh');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'effective_from', 'berkesan Dari');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'elevated', 'berkesan Dari');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'email', 'E-mel');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'ends_on', 'tamat Pada');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'entity_id', 'entiti Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'entity_name', 'Nama entiti');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'entry_ts', 'Entry Cap Masa');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'er', 'Kadar berkesan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'exclude_from_purchase', 'Tidak termasuk Dari Pembelian');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'exclude_from_sales', 'Tidak termasuk Daripada Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'external_code', 'Kod luar');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'factory_address', 'Alamat kilang');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'fax', 'faks');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'first_name', 'Nama Pertama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'fiscal_year_code', 'Nama Pertama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'fiscal_year_name', 'Nama Tahun Anggaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'flag_id', 'Flag Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'flag_type_id', 'Jenis bendera Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'flag_type_name', 'Jenis bendera Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'flagged_on', 'Telah ditanda Pada');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'foreground_color', 'Warna latar depan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'frequency_code', 'Kod kekerapan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'frequency_id', 'kekerapan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'frequency_name', 'Nama kekerapan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'frequency_setup_code', 'Frequency Setup Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'frequency_setup_id', 'Kekerapan Persediaan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'from_days', 'dari Hari');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'full_name', 'Nama Penuh');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'gl_head', 'Genral Lejar Ketua');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'gl_verification_limit', 'Genral Lejar Had Pengesahan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'grace_period', 'Tempoh');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'has_child', 'mempunyai Anak');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'height_in_centimeters', 'Tinggi Dalam Sentimeter');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'hot_item', 'item panas');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'http_action_code', 'HTTP Kod Tindakan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'hundredth_name', 'Nama seratus');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'id', 'pengecam');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'includes_tax', 'termasuk Cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'income_tax_rate', 'Kadar Cukai Pendapatan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'industry_id', 'industri Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'industry_name', 'Nama industri');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'interest_compounding_frequency_id', 'Faedah Pengkompaunan Kekerapan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'interest_rate', 'Kadar Faedah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'inventory_account_id', 'Inventori Identifier Akaun');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_active', 'adalah aktif');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_added', 'Apakah Ditambah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_admin', 'adalah Admin');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_cash', 'adalah Tunai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_debit', 'adalah Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_employee', 'adalah Pekerja');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_exempt', 'adalah dikecualikan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_exemption', 'Pengecualian adalah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_flat_amount', 'Adalah Jumlah Flat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_merchant_account', 'Adakah Akaun Saudagar');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_party', 'adalah Parti');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_purchase', 'adalah Parti');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_rectangular', 'adalah segi empat tepat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_sales', 'adalah Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_summary', 'adalah Ringkasan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_supplier', 'adalah Pembekal');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_system', 'adalah Sistem');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_transaction_node', 'Adalah Transaksi Nod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'is_vat', 'adalah Vat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item', 'adalah Vat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_code', 'Kod item');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_cost_price_id', 'Perkara Kos Harga Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_cost_prices_unit_chk', 'Unit tidak sah disediakan.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_group', 'Perkara Kumpulan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_group_code', 'Perkara Kod Kumpulan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_group_id', 'Perkara Identiti Kumpulan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_group_name', 'Perkara Kumpulan Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_id', 'Perkara Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_name', 'Nama Perkara');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_opening_inventory_unit_chk', 'Unit tidak sah disediakan.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_selling_price_id', 'Perkara Harga Jualan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_selling_prices_unit_chk', 'Unit tidak sah disediakan.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_type_code', 'Perkara Taip Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_type_id', 'Perkara Jenis Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'item_type_name', 'Perkara Taip Nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'items_item_code_uix', 'Pendua kod perkara.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'items_item_name_uix', 'Pendua nama item.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'items_reorder_quantity_chk', 'Kuantiti pesanan semula mestilah besar daripada atau sama dengan tahap pesanan semula.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'last_analyze', 'Lepas Analisis Mengenai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'last_autoanalyze', 'Auto lepas menganalisis Pada');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'last_autovacuum', 'Vakum Auto Terakhir');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'last_name', 'Nama Akhir');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'last_vacuum', 'Vacuum Terakhir');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'late_fee', 'Bayaran Lewat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'late_fee_code', 'Lewat Kod Bayaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'late_fee_id', 'Lewat Identifier Bayaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'late_fee_name', 'Lewat Nama Bayaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'late_fee_posting_frequency', 'Bayaran Lewat Penempatan Kekerapan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'late_fee_posting_frequency_id', 'Bayaran Lewat Penempatan Kekerapan identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'lc_credit', 'Surat Kredit Kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'lc_debit', 'Surat Debit Kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'lead_source_code', 'Membawa Kod Sumber');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'lead_source_id', 'Lead Sumber Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'lead_source_name', 'Lead Nama Sumber');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'lead_status_code', 'Lead Kod Status');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'lead_status_id', 'Lead Status Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'lead_status_name', 'Lead Nama Status');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'lead_time_in_days', 'Lead Time Di Days');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'length_in_centimeters', 'Panjang Dalam Sentimeter');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'machinable', 'Machinable');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'maintain_stock', 'mengekalkan Saham');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'maintained_by_user_id', 'Diselenggara oleh Pengecam pengguna');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'maximum_credit_amount', 'Jumlah kredit maksimum');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'maximum_credit_period', 'Tempoh Kredit Maksimum');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'merchant_account_id', 'Pengecam Akaun Saudagar');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'merchant_fee_setup_id', 'Bayaran Merchant Persediaan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'middle_name', 'Nama Tengah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'nick_name', 'Nama Nick');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'non_gl_stock_details_unit_chk', 'Unit tidak sah disediakan.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'normally_debit', 'biasanya Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'office', 'Pejabat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'office_code', 'Kod Pejabat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'office_id', 'Pejabat Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'office_name', 'Nama Pejabat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'opportunity_stage_code', 'Peluang Peringkat Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'opportunity_stage_id', 'Peluang Peringkat Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'opportunity_stage_name', 'Nama Peringkat Peluang');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'pan_number', 'Akaun swasta Jumlah Jumlah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent', 'Ibu Bapa');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_account_id', 'Pengecam Akaun Ibu Bapa');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_account_master_id', 'Master Akaun Ibu Bapa Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_account_name', 'Nama Akaun ibu bapa');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_account_number', 'Nombor Akaun Ibu Bapa');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_cash_flow_heading_id', 'Ibu Bapa Aliran Tunai Tajuk Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_cash_repository', 'Ibu Bapa Repository Tunai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_cash_repository_id', 'Ibu Bapa Repository Tunai identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_cr_code', 'Ibu Bapa Tunai Repository Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_cr_name', 'Ibu Bapa Nama Repository Tunai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_industry_id', 'Industri Ibu Bapa Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_industry_name', 'Ibu Bapa Nama Industri');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_item_group_id', 'Perkara Ibu Bapa Identiti Kumpulan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_office', 'Ibu Bapa Pejabat');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'parent_office_id', 'Ibu Bapa Pejabat identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'party', 'parti');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'party_code', 'Kod parti');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'party_id', 'parti identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'party_name', 'parti nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'party_type', 'Jenis parti');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'party_type_code', 'Parti Taip Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'party_type_id', 'Parti Taip identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'party_type_name', 'Jenis Nama Parti');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'password', 'kata laluan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'payment_card_code', 'Kod Kad Pembayaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'payment_card_id', 'Pengecam Kad Pembayaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'payment_card_name', 'Pembayaran Nama Kad');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'payment_term', 'Jangka pembayaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'payment_term_code', 'Jangka pembayaran kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'payment_term_id', 'Jangka pembayaran identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'payment_term_name', 'Jangka pembayaran nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'phone', 'telefon');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'po_box', 'Post Box Office');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'poco_type_name', 'Nama Poco Jenis');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'policy_id', 'pengecam Dasar');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'preferred_shipping_mail_type', 'Jenis pilihan Penghantaran Mail');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'preferred_shipping_mail_type_id', 'Jenis pilihan Penghantaran Mail idenetifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'preferred_shipping_package_shape', 'Pilihan Pakej Penghantaran Bentuk');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'preferred_supplier', 'Pembekal yang dipilih');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'preferred_supplier_id', 'Pembekal yang dipilih identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'price', 'Harga');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'price_from', 'Harga Dari');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'price_to', 'Harga Untuk');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'price_type_code', 'Harga Taip Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'price_type_id', 'Harga Taip identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'price_type_name', 'Harga Taip nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'priority', 'keutamaan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'purchase_account_id', 'Membeli Akaun Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'purchase_discount_account_id', 'Membeli Akaun Diskaun Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'purchase_verification_limit', 'Pembelian Had Pengesahan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'quantity', 'kuantiti');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'rate', 'kadar');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurrence_type_id', 'Perulangan Jenis Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurring_amount', 'Jumlah berulang');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurring_duration', 'Tempoh berulang');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurring_frequency', 'Kekerapan berulang');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurring_frequency_id', 'Kekerapan berulang identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurring_invoice', 'Invois berulang');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurring_invoice_code', 'Invois berulang kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurring_invoice_id', 'Berulang Invois Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurring_invoice_name', 'Berulang Nama Invois');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurring_invoice_setup_id', 'Invois berulang Persediaan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'Anda tidak boleh mempunyai lebih daripada satu pencetus auto jualan untuk item ini.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'recurs_on_same_calendar_date', 'Berulang pada Sama Kalendar Tarikh');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'registration_date', 'Tarikh pendaftaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'registration_number', 'Nombor Pendaftaran');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'relationship_officer_name', 'Nama Pegawai Perhubungan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'relname', 'Nama Perhubungan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'reorder_level', 'pesanan semula Aras');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'reorder_quantity', 'Kuantiti pesanan semula');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'reorder_unit', 'Unit pesanan semula');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'reorder_unit_id', 'Pesanan semula Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'reporting_tax_authority', 'Laporan Lembaga Cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'reporting_tax_authority_id', 'Laporan Lembaga Cukai identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'repository', 'repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'resource', 'Sumber');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'resource_id', 'Sumber idenetifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'resource_key', 'Sumber Utama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'role_code', 'Kod peranan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'role_id', 'peranan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'role_name', 'Nama Peranan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'rounding_decimal_places', 'Penggenapan Decimal Places');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'rounding_method', 'Penggenapan Kaedah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'rounding_method_code', 'Penggenapan Kaedah Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'rounding_method_name', 'Penggenapan Nama Kaedah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_account_id', 'Pengecam Akaun Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_discount_account_id', 'Jualan Akaun Diskaun Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_return_account_id', 'Pulangan Jualan Akaun Idenetifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax', 'Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_code', 'Cukai Jualan kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_detail_code', 'Detail Kod Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_detail_id', 'Detail Cukai Jualan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_detail_name', 'Detail Cukai Jualan nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_details_rate_chk', 'Kadar tidak sepatutnya kosong melainkan jika anda telah memilih negeri atau daerah cukai. Begitu juga, anda tidak boleh menyediakan kadar kedua-duanya dan memilih untuk mempunyai negeri atau daerah cukai.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_exempt', 'Dikecualikan Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_exempt_code', 'Dikecualikan Cukai Jualan kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_exempt_detail_id', 'Detail Dikecualikan Cukai Jualan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_exempt_id', 'Cukai Jualan Identifier Dikecualikan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_exempt_name', 'Cukai Jualan Nama Dikecualikan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_exempts_price_to_chk', 'Bidang "Harga Dari ''mesti kurang daripada" Harga Untuk. "');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_id', 'Pengecam Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_name', 'Nama Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_type', 'Jenis Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_type_code', 'Jenis Cukai Jualan kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_type_id', 'Jenis Cukai Jualan identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_tax_type_name', 'Jenis Cukai Jualan nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_team_code', 'Pasukan Jualan Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_team_id', 'Pasukan Jualan identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_team_name', 'Pasukan Jualan nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sales_verification_limit', 'Had Pengesahan Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'salesperson_bonus_setup_id', 'Bonus Jurujual Persediaan Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'salesperson_code', 'jurujual Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'salesperson_id', 'jurujual Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'salesperson_name', 'Nama jurujual');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'self_verification_limit', 'Had Pengesahan Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'selling_price', 'Harga Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'selling_price_includes_tax', 'Jualan Harga Termasuk Cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipper_code', 'pengirim Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipper_id', 'pengirim Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipper_name', 'pengirim Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipping_address_code', 'Alamat Penghantaran Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipping_address_id', 'Alamat Penghantaran Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipping_mail_type_code', 'Penghantaran Mail Kod Jenis');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipping_mail_type_id', 'Penghantaran Mail Jenis Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipping_mail_type_name', 'Penghantaran Mail Jenis nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipping_package_shape_code', 'Penghantaran Kod Pakej Bentuk');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipping_package_shape_id', 'Penghantaran identifier Pakej Bentuk');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'shipping_package_shape_name', 'Penghantaran nama Pakej Bentuk');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'slab_name', 'Nama papak');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sst_number', 'Negeri Nombor Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'starts_from', 'Dari Mula Dibina');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'state', 'Negeri');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'state_code', 'Negeri kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'state_id', 'Negeri Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'state_name', 'Negeri nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'state_sales_tax', 'Cukai Jualan Negeri');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'state_sales_tax_code', 'Cukai Jualan Negeri kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'state_sales_tax_id', 'Cukai Jualan Negeri identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'state_sales_tax_name', 'Negeri Nama Cukai Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'statement_reference', 'penyata Rujukan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'stock_details_unit_chk', 'Unit tidak sah disediakan.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'store', 'kedai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'store_code', 'kedai kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'store_id', 'kedai identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'store_name', 'kedai nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'store_type', 'Jenis kedai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'store_type_code', 'Jenis kedai kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'store_type_id', 'Jenis kedai identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'store_type_name', 'Jenis kedai nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'stores_default_cash_account_id_chk', 'Sila pilih Tunai yang sah atau Bank Akaun Identifier.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'stores_sales_tax_id_chk', 'Yang dipilih Jualan Cukai Identifier tidak sah untuk jawatan ini.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'street', 'Street');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sub_total', 'Jumlah Kecil');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'sys_type', 'sistem Jenis');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax', 'cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_authority_code', 'Lembaga Cukai Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_authority_id', 'Lembaga Cukai identifider');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_authority_name', 'Lembaga Cukai nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_base_amount', 'Cukai Pangkalan Jumlah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_base_amount_type_code', 'Cukai Pangkalan Jumlah Jenis Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_base_amount_type_name', 'Cukai Pangkalan Jumlah Jenis nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_code', 'Kod cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_exempt_type', 'Jenis Cukai yang dikecualikan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_exempt_type_code', 'Jenis Cukai yang dikecualikan kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_exempt_type_id', 'Jenis Cukai yang dikecualikan identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_exempt_type_name', 'Jenis Cukai yang dikecualikan nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_id', 'Pengecam cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_master', 'Master cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_master_code', 'Master cukai kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_master_id', 'Master cukai identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_master_name', 'Master cukai nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_name', 'Nama cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_rate_type', 'Kadar Cukai Jenis');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_rate_type_code', 'Kadar Cukai Jenis kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_rate_type_name', 'Kadar Cukai Jenis nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_type_code', 'Jenis Cukai Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_type_id', 'Jenis Cukai identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tax_type_name', 'Jenis Cukai nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'to_days', 'untuk Hari');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'total', 'jumlah');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'total_duration', 'jumlah Tempoh');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'total_sales', 'jumlah Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tran_code', 'Kod transaksi');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'tran_type', 'transaksi Jenis');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'unit', 'Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'unit_code', 'Unit kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'unit_id', 'Unit identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'unit_name', 'Unit nama');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'url', 'Pengesan Sumber Seragam');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'use_tax_collecting_account', 'Gunakan Akaun Mengumpul Cukai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'use_tax_collecting_account_id', 'Gunakan Akaun Mengumpul Cukai identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'user_id', 'pengguna identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'user_name', 'Nama pengguna');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'vacuum_count', 'Vacuum Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'valid_from', 'sah Dari');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'valid_till', 'sah Hingga');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'value', 'nilai');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'value_date', 'nilai Tarikh');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'verify_gl_transactions', 'Sahkan Transaksi Lejar Am');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'verify_purchase_transactions', 'Sahkan Transaksi Pembelian');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'verify_sales_transactions', 'Sahkan Transaksi Jualan');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'weight_in_grams', 'Berat Dalam Gram');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'width_in_centimeters', 'Lebar Di Sentimeter');
    PERFORM localization.add_localized_resource('ScrudResource', 'ms', 'zip_code', 'Kod ZIP');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'Select', 'kiezen');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'account', 'rekening');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'account_id', 'account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'account_master', 'account Master');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'account_master_code', 'Account Master Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'account_master_id', 'Account Master Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'account_master_name', 'Account Master Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'account_name', 'Accountnaam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'account_number', 'rekening Nummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'address', 'adres');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'address_line_1', 'Adres Regel 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'address_line_2', 'Adres Regel 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'ageing_slab_id', 'Vergrijzing Slab Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'ageing_slab_name', 'Vergrijzing Slab Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'allow_credit', 'laat Credit');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'allow_sales', 'laat Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'allow_transaction_posting', 'Laat Transaction Posting');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'amount', 'bedrag');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'amount_from', 'bedrag in Van');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'amount_to', 'bedrag Aan');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'analyze_count', 'Analyseer graaf');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'api_access_policy_id', 'API Access Policy Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'api_access_policy_uix', 'Dupliceren Entry voor API Access Policy');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'applied_on_shipping_charge', 'Toegepast op verzending Charge');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'audit_ts', 'audit Tijdstempel');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'audit_user_id', 'Audit Gebruiker Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'auto_trigger_on_sales', 'Automatisch Trigger on Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'autoanalyze_count', 'Autoanalyze graaf');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'autovacuum_count', 'Autovacuum graaf');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'background_color', 'achtergrondkleur');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'balance', 'balans');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bank_account_number', 'Bank Account Number');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bank_account_type', 'Bankrekening Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bank_accounts_account_id_chk', 'Het geselecteerde item is geen geldige bankrekening.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bank_accounts_pkey', 'Dupliceren bankrekening.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bank_address', 'Bank Adres');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bank_branch', 'Bank Branch');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bank_contact_number', 'Bank Contact nummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bank_name', 'Naam van de bank');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'base_unit_id', 'Basiseenheid Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'base_unit_name', 'Naam basisstation');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'based_on_shipping_address', 'Basis van de scheepvaart-adres');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bonus_rate', 'bonus Rate');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bonus_slab_code', 'Bonus Slab Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bonus_slab_detail_id', 'Bonus Slab Detail Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bonus_slab_details_amounts_chk', 'Het veld "Bedrag Ter" moet groter zijn dan "Bedrag Van" zijn.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bonus_slab_id', 'Bonus Slab Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'bonus_slab_name', 'Bonus Slab Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'book', 'boek');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'brand', 'merk');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'brand_code', 'merk code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'brand_id', 'Brand Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'brand_name', 'Merknaam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'can_change_password', 'Kan wachtwoord wijzigen');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'can_self_verify', 'Kan Zelf controleren');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'can_verify_gl_transactions', 'Kan Controleer grootboekmutaties');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'can_verify_purchase_transactions', 'Kan Controleer Aankoop Transacties');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'can_verify_sales_transactions', 'Kan Controleer Sales Transacties');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'card_type_code', 'Card Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'card_type_id', 'Card Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'card_type_name', 'Card Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_flow_heading', 'Cash Flow rubriek');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_flow_heading_cash_flow_heading_type_chk', 'Ongeldige Kasstroom Heading Type. Toegestane waarden: O, I, F.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_flow_heading_code', 'Cash Flow rubriek Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_flow_heading_id', 'Kasstroom Heading Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_flow_heading_name', 'Cash Flow Rubriek Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_flow_heading_type', 'Kasstroom  Rubriek Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_flow_master_code', 'Cash Flow Master Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_flow_master_id', 'Cash Flow Master Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_flow_master_name', 'Cash Flow Master Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_flow_setup_id', 'Cashflow Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_repositories_cash_repository_code_uix', 'Dupliceren Cash Repository Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_repositories_cash_repository_name_uix', 'Dupliceren Cash Repository Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_repository', 'Cash Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_repository_code', 'Cash Repository Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_repository_id', 'Cash Repository Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cash_repository_name', 'Cash Repository Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cell', 'cel');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'charge_interest', 'rente in rekening brengen');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'check_nexus', 'Controleer Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'checking_frequency', 'controleren Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'checking_frequency_id', 'Controleren Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'city', 'City');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'collecting_account', 'verzamelen account');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'collecting_account_id', 'Verzamelen Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'collecting_tax_authority', 'Verzamelen Belastingdienst');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'collecting_tax_authority_id', 'Verzamelen Belastingdienst Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'commision_rate', 'Commissie Rate');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'commission_rate', 'Commissie Rate');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'company_name', 'Bedrijfsnaam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compare_unit_id', 'Vergelijk Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compare_unit_name', 'Vergelijk Naam Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compound_item', 'verbinding Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compound_item_code', 'Verbinding Item Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compound_item_detail_id', 'Verbinding Itemdetail Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compound_item_details_unit_chk', 'Ongeldige eenheid ontvangen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compound_item_id', 'Verbinding Item Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compound_item_name', 'verbinding Item naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compound_unit_id', 'Verbinding Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compound_units_chk', 'De basiseenheid identifier kan niet hetzelfde als te vergelijken unit identifier.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'compounding_frequency', 'compounding Frequentie');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'confidential', 'vertrouwelijk');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_address_line_1', 'Contact Adres Lijn 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_address_line_2', 'Contact Adres Lijn 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_cell', 'contact  cel');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_city', 'Contact Stad');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_country', 'Contact Land');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_email', 'Contact E-mail');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_number', 'Contact Nummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_person', 'contactpersoon');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_phone', 'Contact Telefoon');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_po_box', 'Neem contact op met Po Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_state', 'Contact Stat');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'contact_street', 'Contact Straat');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cost_center_code', 'Kostenplaats');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cost_center_id', 'Kostenplaats Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cost_center_name', 'Kostenplaats Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cost_of_goods_sold_account_id', 'Kosten van verkochte goederen Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cost_price', 'kostprijs');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cost_price_includes_tax', 'Kostprijs bevat de Belastingdienst');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'counter_code', 'Counter Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'counter_id', 'Counter Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'counter_name', 'Counter Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'country', 'land');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'country_code', 'landcode');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'country_id', 'land Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'country_name', 'Naam van het land');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'county', 'provincie');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'county_code', 'provincie code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'county_id', 'provincie Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'county_name', 'provincie Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'county_sales_tax', 'provincie Sales Tax');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'county_sales_tax_code', 'provincie Sales Tax Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'county_sales_tax_id', 'provincie Sales Tax Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'county_sales_tax_name', 'provincie Sales Tax Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'credit', 'krediet');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'cst_number', 'Central Sales Tax Aantal');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'currency', 'valuta');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'currency_code', 'valuta Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'currency_name', 'valuta Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'currency_symbol', 'valutasymbool');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'customer_pays_fee', 'Klant betaalt Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'date_of_birth', 'Geboortedatum');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'debit', 'debet');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'default_cash_account_id', 'Default Cash Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'default_cash_repository_id', 'Default Cash Repository Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'department_code', 'afdeling Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'department_id', 'afdeling Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'department_name', 'afdeling Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'description', 'beschrijving');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'discount', 'korting');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'due_days', 'vanwege dagen');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'due_frequency', 'vanwege Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'due_frequency_id', 'Vanwege Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'due_on_date', 'Verschuldigd op Date');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'effective_from', 'effectieve Van');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'elevated', 'verheven');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'email', 'e-mail');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'ends_on', 'eindigt op');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'entity_id', 'entiteit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'entity_name', 'entiteit Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'entry_ts', 'entiteit Tijdstempel');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'er', 'effectief tarief');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'exclude_from_purchase', 'Uitsluiten van Aankoop');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'exclude_from_sales', 'Uitsluiten van Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'external_code', 'externe code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'factory_address', 'Factory Adres');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'fax', 'fax');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'first_name', 'Voornaam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'fiscal_year_code', 'Fiscale Jaar Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'fiscal_year_name', 'Fiscale Jaar Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'flag_id', 'vlag Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'flag_type_id', 'Vlag Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'flag_type_name', 'Vlag Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'flagged_on', 'markeerde On');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'foreground_color', 'voorgrondkleur');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'frequency_code', 'frequentie Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'frequency_id', 'frequentie Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'frequency_name', 'frequentie Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'frequency_setup_code', 'Frequentie Setup Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'frequency_setup_id', 'Frequentie Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'from_days', 'van dagen');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'full_name', 'volledige Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'gl_head', 'General Ledger Head');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'gl_verification_limit', 'General Ledger Verificatie Limit');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'grace_period', 'Grace Period');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'has_child', 'heeft Child');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'height_in_centimeters', 'Hoogte in centimeters');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'hot_item', 'Hot Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'http_action_code', 'HTTP Actie Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'hundredth_name', 'honderdste Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'id', 'Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'includes_tax', 'inclusief BTW');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'income_tax_rate', 'Income Tax Rate');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'industry_id', 'industrie Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'industry_name', 'industrie Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'interest_compounding_frequency_id', 'Interesse Compounding Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'interest_rate', 'Rentevoet');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'inventory_account_id', 'Inventaris Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_active', 'is Actief');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_added', 'wordt toegevoegd');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_admin', 'is Admin');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_cash', 'is Cash');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_debit', 'is Debet');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_employee', 'is Werknemer');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_exempt', 'is vrijgesteld');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_exemption', 'is Vrijstelling');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_flat_amount', 'Is Flat Bedrag');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_merchant_account', 'Is Merchant Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_party', 'is Party');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_purchase', 'is Aankoop');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_rectangular', 'is Rechthoekige');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_sales', 'is Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_summary', 'is Samenvatting');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_supplier', 'is Leverancier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_system', 'is System');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_transaction_node', 'Is Transaction Node');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'is_vat', 'is Vat');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item', 'item');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_code', 'Item Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_cost_price_id', 'Item Kostprijs Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_cost_prices_unit_chk', 'Ongeldige eenheid ontvangen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_group', 'Item Group');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_group_code', 'Item Group Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_group_id', 'Item Group Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_group_name', 'Item groepsnaam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_id', 'Item Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_name', 'Naam van het punt');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_opening_inventory_unit_chk', 'Ongeldige eenheid ontvangen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_selling_price_id', 'Item verkoopprijs Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_selling_prices_unit_chk', 'Ongeldige eenheid ontvangen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_type_code', 'Item Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_type_id', 'Item Type kenmerk');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'item_type_name', 'Item Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'items_item_code_uix', 'Dupliceren artikelcode.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'items_item_name_uix', 'Dupliceren punt naam.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'items_reorder_quantity_chk', 'Het bestelnummer hoeveelheid moet groot zijn dan of gelijk aan het bestelnummer niveau.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'last_analyze', 'Laatste Analyseer On');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'last_autoanalyze', 'Laatst Auto analyseren On');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'last_autovacuum', 'Laatst Auto vacuüm Aan');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'last_name', 'achternaam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'last_vacuum', 'Laatste Vacuum On');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'late_fee', 'late Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'late_fee_code', 'Late Fee Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'late_fee_id', 'Late Fee Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'late_fee_name', 'Late Fee Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'late_fee_posting_frequency', 'Late Fee Posting Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'late_fee_posting_frequency_id', 'Late Fee Posting Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'lc_credit', 'Letter of Credit Credit');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'lc_debit', 'Letter of Credit Debet');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'lead_source_code', 'Source Code leiden');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'lead_source_id', 'Bron Identifier leiden');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'lead_source_name', 'Lead Naam bron');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'lead_status_code', 'Lead Status Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'lead_status_id', 'Leadstatus Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'lead_status_name', 'Leadstatus Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'lead_time_in_days', 'Doorlooptijd in dagen');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'length_in_centimeters', 'Lengte in centimeters');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'machinable', 'machinaal');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'maintain_stock', 'onderhouden Stok');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'maintained_by_user_id', 'Onderhouden door Gebruiker Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'maximum_credit_amount', 'Maximale Credit Bedrag');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'maximum_credit_period', 'Maximale Credit Periode');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'merchant_account_id', 'Merchant Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'merchant_fee_setup_id', 'Merchant Fee Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'middle_name', 'middelste Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'nick_name', 'Nick Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'non_gl_stock_details_unit_chk', 'Ongeldige eenheid ontvangen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'normally_debit', 'normaal Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'office', 'kantoor');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'office_code', 'Office Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'office_id', 'Office Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'office_name', 'Vestiging Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'opportunity_stage_code', 'Gelegenheid Stage Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'opportunity_stage_id', 'Gelegenheid Stage Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'opportunity_stage_name', 'Gelegenheid artiestennaam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'pan_number', 'Private Account Number Aantal');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent', 'ouder');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_account_id', 'Ouderaccount Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_account_master_id', 'Ouderaccount Master Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_account_name', 'Ouderaccount Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_account_number', 'Parent Account Number');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_cash_flow_heading_id', 'Ouder Cash Flow rubriek Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_cash_repository', 'Ouder Cash Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_cash_repository_id', 'Ouder Cash Repository Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_cr_code', 'Ouder Cash Repository Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_cr_name', 'Ouder Cash Repository Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_industry_id', 'Ouder Industry Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_industry_name', 'Ouder Industry Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_item_group_id', 'Ouder Item Group Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_office', 'ouder Office');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'parent_office_id', 'Ouder Office Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'party', 'partij');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'party_code', 'partij Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'party_id', 'partij Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'party_name', 'Naam van de Partij');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'party_type', 'partij Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'party_type_code', 'Partij Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'party_type_id', 'Partij Type kenmerk');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'party_type_name', 'Partij Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'password', 'wachtwoord');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'payment_card_code', 'Payment Card Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'payment_card_id', 'Payment Card Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'payment_card_name', 'Payment Card Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'payment_term', 'betaling Term');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'payment_term_code', 'Betaling Term Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'payment_term_id', 'Betaling Term Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'payment_term_name', 'Betaling Term Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'phone', 'telefoon');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'po_box', 'Postbus');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'poco_type_name', 'Poco Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'policy_id', 'beleid identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'preferred_shipping_mail_type', 'Preferred Shipping mail Soort');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'preferred_shipping_mail_type_id', 'Preferred Verzending Post Type kenmerk');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'preferred_shipping_package_shape', 'Preferred Shipping Pakket Vorm');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'preferred_supplier', 'Preferred Supplier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'preferred_supplier_id', 'Preferred Supplier Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'price', 'prijs');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'price_from', 'Prijs Van');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'price_to', 'Prijs tot');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'price_type_code', 'Prijs Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'price_type_id', 'Prijs Type Idenetifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'price_type_name', 'Prijs Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'priority', 'prioriteit');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'purchase_account_id', 'Aanschaffen Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'purchase_discount_account_id', 'Kopen korting Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'purchase_verification_limit', 'Aankoop Verificatie Limit');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'quantity', 'hoeveelheid');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'rate', 'tarief');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurrence_type_id', 'Herhalingstype Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurring_amount', 'terugkerende Bedrag');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurring_duration', 'terugkerende Duur');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurring_frequency', 'terugkerende Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurring_frequency_id', 'Terugkerende Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurring_invoice', 'terugkerende Factuur');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurring_invoice_code', 'Terugkerende Factuur Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurring_invoice_id', 'Terugkerende Factuur Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurring_invoice_name', 'Terugkerende Factuur Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurring_invoice_setup_id', 'Terugkerende Invoice Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'U kunt niet meer dan één auto trekker op de verkoop voor dit item.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'recurs_on_same_calendar_date', 'Terugkeert op dezelfde kalenderdag Date');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'registration_date', 'Registratiedatum');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'registration_number', 'registratie Nummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'relationship_officer_name', 'Relatie Officer Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'relname', 'relatie Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'reorder_level', 'Reorder niveau');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'reorder_quantity', 'Reorder Hoeveelheid');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'reorder_unit', 'Reorder Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'reorder_unit_id', 'Reorder Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'reporting_tax_authority', 'Rapportage Belastingdienst');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'reporting_tax_authority_id', 'Rapportage Belastingdienst Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'repository', 'opslagplaats');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'resource', 'hulpbron');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'resource_id', 'Resource Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'resource_key', 'Resource Key');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'role_code', 'rol Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'role_id', 'rol Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'role_name', 'Rolnaam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'rounding_decimal_places', 'Afronding decimalen');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'rounding_method', 'afronding Methode');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'rounding_method_code', 'Afronding Methode Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'rounding_method_name', 'Afronding Methode Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_account_id', 'Sales Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_discount_account_id', 'Sales Discount Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_return_account_id', 'Sales Return Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax', 'Sales Tax');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_code', 'Sales Tax Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_detail_code', 'Sales Tax Detail Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_detail_id', 'Sales Tax Detail Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_detail_name', 'Sales Tax Detail Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_details_rate_chk', 'Tarief mag niet leeg zijn, tenzij je staat of county belasting hebt geselecteerd. Op dezelfde manier kan je niet bieden zowel snelheid en kiezen voor de staat of provincie belasting hebben.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_exempt', 'Sales Tax Vrijgesteld');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_exempt_code', 'Sales Tax Vrijgesteld Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_exempt_detail_id', 'Sales Tax Vrijgesteld Detail Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_exempt_id', 'Sales Tax Vrijgesteld Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_exempt_name', 'Sales Tax Vrijgesteld Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_exempts_price_to_chk', 'Het veld Prijs tot "Prijs Van ''moet kleiner zijn dan". "');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_id', 'Sales Tax Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_name', 'Sales Tax Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_type', 'Sales Tax Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_type_code', 'Sales Tax Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_type_id', 'Sales Tax Type Idenetifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_tax_type_name', 'Sales Tax Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_team_code', 'Sales Team Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_team_id', 'Sales Team Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_team_name', 'Sales Team Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sales_verification_limit', 'Sales Verificatie Limit');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'salesperson_bonus_setup_id', 'Winkelbediende Bonus Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'salesperson_code', 'winkelbediende Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'salesperson_id', 'winkelbediende Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'salesperson_name', 'winkelbediende Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'self_verification_limit', 'Zelf Verificatie Limit');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'selling_price', 'Verkoopprijs');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'selling_price_includes_tax', 'Verkoopprijs inclusief belastingen');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipper_code', 'verlader Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipper_id', 'verlader Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipper_name', 'verzender Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipping_address_code', 'Verzenden Adres Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipping_address_id', 'Verzenden Adres Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipping_mail_type_code', 'Verzending Mail Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipping_mail_type_id', 'Verzending Mail Type kenmerk');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipping_mail_type_name', 'Verzending Mail Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipping_package_shape_code', 'Verzending Pakket Vorm Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipping_package_shape_id', 'Verzending Pakket Vorm Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'shipping_package_shape_name', 'Verzending Pakket Vorm Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'slab_name', 'slab Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sst_number', 'State Sales Tax Aantal');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'starts_from', 'Begint Van');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'state', 'staat');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'state_code', 'Staat Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'state_id', 'Staat Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'state_name', 'Staat Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'state_sales_tax', 'State Sales Tax');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'state_sales_tax_code', 'State Sales Tax Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'state_sales_tax_id', 'State Sales Tax Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'state_sales_tax_name', 'State Sales Tax Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'statement_reference', 'verklaring Reference');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'stock_details_unit_chk', 'Ongeldige eenheid ontvangen.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'store', 'winkel');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'store_code', 'Store Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'store_id', 'Store Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'store_name', 'store Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'store_type', 'Store Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'store_type_code', 'Store Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'store_type_id', 'Store Type identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'store_type_name', 'Store Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'stores_default_cash_account_id_chk', 'Selecteer een geldige Cash of bankrekening Identifier.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'stores_sales_tax_id_chk', 'De gekozen Btw Identifier is ongeldig voor deze functie.');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'street', 'straat');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sub_total', 'Subtotaal');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'sys_type', 'Systeemtype');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax', 'belasting');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_authority_code', 'Belastingdienst Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_authority_id', 'Belastingdienst Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_authority_name', 'Naam Belastingdienst');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_base_amount', 'Tax Base Bedrag');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_base_amount_type_code', 'Tax Base Bedrag Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_base_amount_type_name', 'Tax Base Bedrag Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_code', 'tax Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_exempt_type', 'Vrijgesteld van belasting Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_exempt_type_code', 'Vrijgesteld van belasting Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_exempt_type_id', 'Vrijgesteld van belasting Type kenmerk');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_exempt_type_name', 'Vrijgesteld van belasting Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_id', 'belasting Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_master', 'belasting Master');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_master_code', 'Belasting Master Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_master_id', 'Belasting Master Idenetifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_master_name', 'Belasting Master Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_name', 'belasting Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_rate_type', 'Tax Rate Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_rate_type_code', 'Tax Rate Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_rate_type_name', 'Tax Rate Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_type_code', 'Belasting Type Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_type_id', 'Belasting Type kenmerk');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tax_type_name', 'Belasting Type Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'to_days', 'tot dagen');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'total', 'totaal');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'total_duration', 'totale duur');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'total_sales', 'totale Verkoop');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tran_code', 'transactie Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'tran_type', 'transactie Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'unit', 'eenheid');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'unit_code', 'unit Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'unit_id', 'unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'unit_name', 'unit Naam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'url', 'Universal Resource Locator');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'use_tax_collecting_account', 'Gebruik Tax Verzamelen Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'use_tax_collecting_account_id', 'Gebruik Tax Verzamelen Account identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'user_id', 'gebruiker Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'user_name', 'Gebruikersnaam');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'vacuum_count', 'vacuum graaf');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'valid_from', 'geldig Vanaf');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'valid_till', 'geldig tot');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'value', 'waarde');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'value_date', 'Value Date');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'verify_gl_transactions', 'Controleer General Ledger Transacties');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'verify_purchase_transactions', 'Controleer Aankoop Transacties');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'verify_sales_transactions', 'Controleer Sales Transacties');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'weight_in_grams', 'Gewicht in gram');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'width_in_centimeters', 'Breedte in centimeters');
    PERFORM localization.add_localized_resource('ScrudResource', 'nl', 'zip_code', 'postcode');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'Select', 'selecionar');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'account', 'responsabilidade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'account_id', 'conta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'account_master', 'conta Principal');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'account_master_code', 'Conta Código Mestre');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'account_master_id', 'Mestre Conta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'account_master_name', 'Mestre Nome da conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'account_name', 'Nome Da Conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'account_number', 'Número De Conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'address', 'Address');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'address_line_1', 'Endereço Linha 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'address_line_2', 'Endereço Linha 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'ageing_slab_id', 'Envelhecimento Slab Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'ageing_slab_name', 'Envelhecimento Slab Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'allow_credit', 'Allowemail crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'allow_sales', 'permitir Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'allow_transaction_posting', 'Allowemail transação de lançamento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'amount', 'quantidade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'amount_from', 'montante De');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'amount_to', 'montante a');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'analyze_count', 'analisar Contagem');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'api_access_policy_id', 'API Acesso Id Política');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'api_access_policy_uix', 'Duplicate entry de Política de Acesso API');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'applied_on_shipping_charge', 'Aplicado na taxa de envio');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'audit_ts', 'Timestamp Auditoria');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'audit_user_id', 'Auditoria Identificador de Usuário');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'auto_trigger_on_sales', 'Gatilho automaticamente em Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'autoanalyze_count', 'Contagem Autoanalyze');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'autovacuum_count', 'Contagem Vacuum Auto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'background_color', 'Cor de fundo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'balance', 'equilíbrio');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bank_account_number', 'Número de Conta Bancária');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bank_account_type', 'Banco Tipo de Conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bank_accounts_account_id_chk', 'O item selecionado não é uma conta bancária válida.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bank_accounts_pkey', 'Duplicar conta bancária.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bank_address', 'Endereço do banco');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bank_branch', 'Agência Bancária');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bank_contact_number', 'Banco número de contato');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bank_name', 'Nome do banco');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'base_unit_id', 'Unidade Base Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'base_unit_name', 'Unidade Base de Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'based_on_shipping_address', 'Com base no endereço de envio');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bonus_rate', 'lealdade Taxa');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bonus_slab_code', 'Lealdade Código Slab');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bonus_slab_detail_id', 'Lealdade Detalhe Slab Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bonus_slab_details_amounts_chk', '"O montante a" campo deve ser maior que "Valor From".');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bonus_slab_id', 'Lealdade Slab Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'bonus_slab_name', 'Lealdade Nome Slab');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'book', 'livro');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'brand', 'fogo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'brand_code', 'Código Fogo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'brand_id', 'Fogo Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'brand_name', 'marca');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'can_change_password', 'Pode alterar a senha');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'can_self_verify', 'Auto possível verificar');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'can_verify_gl_transactions', 'Pode verificar as transações General Ledger');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'can_verify_purchase_transactions', 'É possível verificar as operações de compra');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'can_verify_sales_transactions', 'Pode verificar as transações de vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'card_type_code', 'Tipo de Cartão de Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'card_type_id', 'Tipo de Cartão de Identificação');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'card_type_name', 'Tipo de cartão de nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_flow_heading', 'Fluxo de Caixa rubrica');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_flow_heading_cash_flow_heading_type_chk', 'Inválido Fluxo de Caixa Tipo rubrica. Os valores permitidos: O, I, F.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_flow_heading_code', 'Fluxo de Caixa Código Posição');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_flow_heading_id', 'Fluxo de Caixa rubrica Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_flow_heading_name', 'Fluxo de Caixa rubrica Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_flow_heading_type', 'Fluxo de Caixa Tipo Designação');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_flow_master_code', 'Fluxo de Caixa Código Mestre');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_flow_master_id', 'Fluxo de Caixa Código Mestre');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_flow_master_name', 'Dinheiro Flowmaster Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_flow_setup_id', 'Fluxo de Caixa Setup Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_repositories_cash_repository_code_uix', 'Duplicar Dinheiro Código Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_repositories_cash_repository_name_uix', 'Nome duplicado Dinheiro Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_repository', 'dinheiro Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_repository_code', 'Dinheiro Código Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_repository_id', 'Dinheiro Repository Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cash_repository_name', 'Dinheiro Repository Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cell', 'célula');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'charge_interest', 'Taxa de Juros');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'check_nexus', 'Verifique Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'checking_frequency', 'Verificando Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'checking_frequency_id', 'Hecking Frequency Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'city', 'cidade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'collecting_account', 'Coletando Conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'collecting_account_id', 'Coleta de identificador de conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'collecting_tax_authority', 'Coletando Autoridade Tributária');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'collecting_tax_authority_id', 'Cobrança do imposto sobre Identificador de Autoridade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'commision_rate', 'Comissão Taxa');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'commission_rate', 'Comissão Taxa');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'company_name', 'Nome Da Empresa');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compare_unit_id', 'Compare Unidade Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compare_unit_name', 'Compare Nome da Unidade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compound_item', 'composto item');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compound_item_code', 'Compondo Código do item');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compound_item_detail_id', 'Composto item Detalhe Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compound_item_details_unit_chk', 'Unidade inválido fornecida.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compound_item_id', 'Composto número identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compound_item_name', 'Para agravar o nome do item');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compound_unit_id', 'Compondo Unidade Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compound_units_chk', 'O identificador da unidade de base não pode Igual ao identificador da unidade comparar.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'compounding_frequency', 'a frequência de composição');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'confidential', 'confidencial');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_address_line_1', 'Contato Endereço Linha 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_address_line_2', 'Contato Endereço Linha 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_cell', 'Contato celular');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_city', 'Contacto Cidade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_country', 'Contate o País');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_email', 'Contato e-mail');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_number', 'Número de contato');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_person', 'Pessoa De Contato');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_phone', 'Telefone para contato');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_po_box', 'Contacte-Po Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_state', 'Contate o Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'contact_street', 'Contacto Rua');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cost_center_code', 'Custo Code Center');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cost_center_id', 'Centro de Custo Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cost_center_name', 'O Nome do Centro de Custo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cost_of_goods_sold_account_id', 'Custo dos Produtos Vendidos Conta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cost_price', 'Cost Online');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cost_price_includes_tax', 'Preço de custo inclui Imposto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'counter_code', 'Código contador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'counter_id', 'contador Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'counter_name', 'Nome do Contador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'country', 'país');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'country_code', 'código do país');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'country_id', 'país Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'country_name', 'Nome País');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'county', 'condado');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'county_code', 'County Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'county_id', 'County Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'county_name', 'Nome County');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'county_sales_tax', 'County Imposto sobre Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'county_sales_tax_code', 'Município de Vendas Código Tributário');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'county_sales_tax_id', 'County Imposto sobre Vendas Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'county_sales_tax_name', 'Nome County Imposto sobre Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'credit', 'crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'cst_number', 'Número Imposto sobre Vendas Central');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'currency', 'moeda');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'currency_code', 'Código da Moeda');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'currency_name', 'Nome da Moeda');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'currency_symbol', 'Símbolo de moeda');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'customer_pays_fee', 'Cliente paga Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'date_of_birth', 'Data de nascimento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'debit', 'débito');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'default_cash_account_id', 'Padrão de caixa Conta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'default_cash_repository_id', 'Padrão de caixa Repository Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'department_code', 'Departamento de Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'department_id', 'Departamento Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'department_name', 'Nome Departamento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'description', 'descrição');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'discount', 'desconto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'due_days', 'devido Dias');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'due_frequency', 'Freqüência devido');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'due_frequency_id', 'Freqüência Devido Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'due_on_date', 'Due Date on');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'effective_from', 'Em vigor a partir');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'elevated', 'elevado');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'email', 'Email');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'ends_on', 'nas extremidades');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'entity_id', 'entidade Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'entity_name', 'nome da entidade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'entry_ts', 'Entrada Timestamp');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'er', 'Taxa Efetiva');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'exclude_from_purchase', 'Excluir da Compra');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'exclude_from_sales', 'Excluir De Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'external_code', 'O código externo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'factory_address', 'Endereço de fábrica');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'fax', 'fax');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'first_name', 'primeiro nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'fiscal_year_code', 'Fiscal Código Ano');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'fiscal_year_name', 'Nome Ano Fiscal');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'flag_id', 'Bandeira Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'flag_type_id', 'Tipo Bandeira Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'flag_type_name', 'Bandeira TypeName');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'flagged_on', 'Marcado On');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'foreground_color', 'ForegroundColor');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'frequency_code', 'Código Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'frequency_id', 'Frequência Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'frequency_name', 'Nome Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'frequency_setup_code', 'Definir código de Frequência');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'frequency_setup_id', 'Setup Frequency Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'from_days', 'A partir Dias');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'full_name', 'Nome Completo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'gl_head', 'General Ledger Cabeça');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'gl_verification_limit', 'Limite de Verificação General Ledger');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'grace_period', 'prazo de carência');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'has_child', 'tem criança');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'height_in_centimeters', 'Hight em centímetros');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'hot_item', 'Hot item');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'http_action_code', 'HTTP Código de Ação');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'hundredth_name', 'Nome Nundredth');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'id', 'identificar');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'includes_tax', 'inclui Imposto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'income_tax_rate', 'Taxa de Imposto de Renda');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'industry_id', 'identificar Indústria');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'industry_name', 'indústria Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'interest_compounding_frequency_id', 'Juros a frequência de composição Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'interest_rate', 'Taxa De Juro');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'inventory_account_id', 'Inventory Conta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_active', 'é Active');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_added', 'é adicionada');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_admin', 'é admin');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_cash', 'é Dinheiro');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_debit', 'é Débito');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_employee', 'é Employee');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_exempt', 'está isento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_exemption', 'é Isenção');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_flat_amount', 'É valor fixo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_merchant_account', 'É Conta Merchant');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_party', 'Partido é');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_purchase', 'é Compra');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_rectangular', 'é retangular');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_sales', 'é Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_summary', 'é Summary');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_supplier', 'é Fornecedor');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_system', 'é o sistema');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_transaction_node', 'É Node Transação');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'is_vat', 'é o IVA');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item', 'item');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_code', 'Código do item');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_cost_price_id', 'Identificar item Preço de custo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_cost_prices_unit_chk', 'Oferecido unidade inválida.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_group', 'Grupo Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_group_code', 'Grupo Código do Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_group_id', 'Identificar item de grupo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_group_name', 'Nome do item Grupo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_id', 'Identificador de Itens');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_name', 'Nome do artigo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_opening_inventory_unit_chk', 'Unidade inválido fornecida.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_selling_price_id', 'Item Preço de Venda Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_selling_prices_unit_chk', 'Unidade inválido fornecida.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_type_code', 'Tipo de Item Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_type_id', 'Tipo de Item Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'item_type_name', 'Tipo de Item Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'items_item_code_uix', 'Duplicar código item.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'items_item_name_uix', 'Duplicar nome do item.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'items_reorder_quantity_chk', 'A quantidade de reabastecimento deve ser grande ou igual ao nível de reabastecimento.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'last_analyze', 'Última Analisar On');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'last_autoanalyze', 'Analisar Última Auto On');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'last_autovacuum', 'Última vácuo Auto On');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'last_name', 'Sobrenome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'last_vacuum', 'No último vácuo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'late_fee', 'taxa de atraso');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'late_fee_code', 'Tarde Código Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'late_fee_id', 'Tarde Fee Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'late_fee_name', 'Tarde Fee Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'late_fee_posting_frequency', 'Taxa tarde publicar Frequency');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'late_fee_posting_frequency_id', 'Taxa tarde publicar Frequency Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'lc_credit', 'Carta de Crédito Crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'lc_debit', 'Carta de Crédito Débito');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'lead_source_code', 'Chumbo Código Fonte');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'lead_source_id', 'Chumbo Fonte Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'lead_source_name', 'Chumbo Fonte Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'lead_status_code', 'Código de status de entrega');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'lead_status_id', 'Identificador de status de entrega');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'lead_status_name', 'Nome Estado Chumbo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'lead_time_in_days', 'Chumbo vez em dias');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'length_in_centimeters', 'Comprimento em centímetros');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'machinable', 'Comprimento centimetros EM');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'maintain_stock', 'manter o estoque');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'maintained_by_user_id', 'Mantido pelo identificador do usuário');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'maximum_credit_amount', 'Montante Máximo de Crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'maximum_credit_period', 'Período máximo de crédito');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'merchant_account_id', 'Conta Merchant Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'merchant_fee_setup_id', 'Taxa Merchant Setup Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'middle_name', 'Nome Do Meio');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'nick_name', 'Nome Nick');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'non_gl_stock_details_unit_chk', 'Unidade inválido fornecida.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'normally_debit', 'normalmente Débito');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'office', 'escritório');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'office_code', 'Código do Escritório');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'office_id', 'Escritório Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'office_name', 'Nome de Agência');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'opportunity_stage_code', 'Oportunidade Código Stage');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'opportunity_stage_id', 'Oportunidade Stage Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'opportunity_stage_name', 'Nome Opportunity Stage');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'pan_number', 'Conta Privada Número Número');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent', 'parente');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_account_id', 'Pai identificador de conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_account_master_id', 'Conta de Pais Mestre Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_account_name', 'Pai Nome da conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_account_number', 'Número de Conta Parent');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_cash_flow_heading_id', 'Pai de Fluxo de Caixa Identificador rubrica');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_cash_repository', 'Pai Repository Dinheiro');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_cash_repository_id', 'Pai Dinheiro Repository Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_cr_code', 'Pai Dinheiro Código Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_cr_name', 'Pai Dinheiro Repository Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_industry_id', 'Pai Indústria Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_industry_name', 'Pai Indústria Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_item_group_id', 'Item pai Grupo Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_office', 'Escritório Parent');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'parent_office_id', 'Pai Escritório Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'party', 'partido');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'party_code', 'Código do partido');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'party_id', 'Parte Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'party_name', 'Nome do partido');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'party_type', 'Tipo de Festa');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'party_type_code', 'Tipo Partido Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'party_type_id', 'Tipo Partido Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'party_type_name', 'Tipo Partido Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'password', 'senha');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'payment_card_code', 'Código de Cartões de Pagamento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'payment_card_id', 'Cartões de Pagamento Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'payment_card_name', 'Cartões de Pagamento Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'payment_term', 'Prazo de Pagamento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'payment_term_code', 'Pagamento Código Term');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'payment_term_id', 'Pagamento Term Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'payment_term_name', 'Pagamento Prazo Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'phone', 'telefone');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'po_box', 'Post Office Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'poco_type_name', 'Poco Type Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'policy_id', 'identificador de Política');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'preferred_shipping_mail_type', 'Tipo preferido de envio de correio');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'preferred_shipping_mail_type_id', 'Preferred transporte do correio Identificação do Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'preferred_shipping_package_shape', 'Forma Preferred Pacote do transporte');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'preferred_supplier', 'Fornecedor preferencial');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'preferred_supplier_id', 'Fornecedor Identificador preferidos');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'price', 'preço');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'price_from', 'Preço a partir de');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'price_to', 'Preço até');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'price_type_code', 'Preço Tipo Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'price_type_id', 'Preço Identificação do Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'price_type_name', 'Preço Type Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'priority', 'prioridade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'purchase_account_id', 'Comprar Conta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'purchase_discount_account_id', 'Comprar Discount Conta Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'purchase_verification_limit', 'Limite de Verificação de Compra');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'quantity', 'quantidade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'rate', 'taxa');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurrence_type_id', 'Recorrência Identificação do Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurring_amount', 'Montante recorrente');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurring_duration', 'recorrente Duração');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurring_frequency', 'Frequência recorrente');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurring_frequency_id', 'Recorrente Frequency Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurring_invoice', 'Fatura recorrente');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurring_invoice_code', 'Recorrente Código Invoice');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurring_invoice_id', 'Recorrente Invoice Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurring_invoice_name', 'Recorrente Invoice Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurring_invoice_setup_id', 'Fatura Recorrente Setup Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'Você não pode ter mais de um gatilho automático sobre as vendas para este item.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'recurs_on_same_calendar_date', 'Reaparece no mesmo calendário Data');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'registration_date', 'Data de Registro');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'registration_number', 'Número de Registro');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'relationship_officer_name', 'Nome Relacionamento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'relname', 'relação Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'reorder_level', 'Reordenar Nível');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'reorder_quantity', 'Reordenar Quantidade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'reorder_unit', 'Unidade de reabastecimento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'reorder_unit_id', 'Reordenar Unidade Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'reporting_tax_authority', 'Reportagem Autoridade Tributária');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'reporting_tax_authority_id', 'Reportagem Imposto Autoridade Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'repository', 'repositório');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'resource', 'recurso');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'resource_id', 'Identificador de Recursos');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'resource_key', 'Recursos Key');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'role_code', 'Código papel');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'role_id', 'papel Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'role_name', 'Nome da Função');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'rounding_decimal_places', 'Arredondando casas decimais');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'rounding_method', 'método de arredondamento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'rounding_method_code', 'Completando Código Método');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'rounding_method_name', 'Completando Nome Método');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_account_id', 'Conta de Vendas Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_discount_account_id', 'Vendas Conta Discount Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_return_account_id', 'Vendas Retorno Id Conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax', 'taxa de vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_code', 'Código do Imposto sobre Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_detail_code', 'Imposto sobre Vendas Código Detalhe');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_detail_id', 'Imposto sobre Vendas Detalhe Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_detail_name', 'Imposto sobre Vendas Detalhe Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_details_rate_chk', 'Rate não deve estar vazio a não ser que você tenha selecionado estado ou município fiscal. Da mesma forma, você não pode fornecer tanto a taxa e optar por ter estado ou município fiscal.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_exempt', 'Imposto sobre Vendas  Isento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_exempt_code', 'Imposto sobre Vendas Código Isento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_exempt_detail_id', 'Imposto sobre Vendas  Isento Detalhe Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_exempt_id', 'Imposto sobre Vendas Identificador Isento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_exempt_name', 'Imposto sobre Vendas Nome Isento');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_exempts_price_to_chk', 'O campo "Preço a partir de ''deve ser menor do que o" Price To. "');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_id', 'Identificador de Imposto sobre Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_name', 'Nome Imposto sobre Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_type', 'Tipo de Imposto sobre Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_type_code', 'Vendas Tipo Código Tributário');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_type_id', 'Vendas tipo de imposto Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_tax_type_name', 'Vendas tipo de imposto Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_team_code', 'Vendas Código Equipe');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_team_id', 'Equipe de Vendas Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_team_name', 'Equipe de Vendas Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sales_verification_limit', 'Limite de Verificação de Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'salesperson_bonus_setup_id', 'Vendedor Bonus Setup Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'salesperson_code', 'Código vendedor');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'salesperson_id', 'vendedor Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'salesperson_name', 'Nome vendedor');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'self_verification_limit', 'Limite de Auto de Verificação');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'selling_price', 'Preço de Venda');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'selling_price_includes_tax', 'Preço de Venda');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipper_code', 'Código shipper');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipper_id', 'shipper Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipper_name', 'Remetente Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipping_address_code', 'Envio Código Endereço');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipping_address_id', 'Endereço para envio Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipping_mail_type_code', 'O envio de correio Tipo Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipping_mail_type_id', 'O envio de correio Identificação do Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipping_mail_type_name', 'O envio de correio Type Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipping_package_shape_code', 'O envio Forma Código Pacote');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipping_package_shape_id', 'O envio Forma Package Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'shipping_package_shape_name', 'Forma de envio Nome do pacote');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'slab_name', 'Slab Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sst_number', 'Estado Número Imposto sobre Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'starts_from', 'começa a partir de');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'state', 'estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'state_code', 'Código do Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'state_id', 'Estado Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'state_name', 'Nome Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'state_sales_tax', 'Sales Tax Estado');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'state_sales_tax_code', 'Estado de Vendas Código Tributário');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'state_sales_tax_id', 'Estado Identificador Imposto sobre Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'state_sales_tax_name', 'Estado Nome Imposto sobre Vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'statement_reference', 'declaração de Referência');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'stock_details_unit_chk', 'Unidade inválido fornecida.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'store', 'loja');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'store_code', 'Código da loja');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'store_id', 'Identificador loja');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'store_name', 'Nome da loja');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'store_type', 'Tipo loja');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'store_type_code', 'Tipo Loja Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'store_type_id', 'Tipo loja Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'store_type_name', 'Tipo Store Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'stores_default_cash_account_id_chk', 'Por favor seleccione um Cash válido ou Conta Bancária Identifier.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'stores_sales_tax_id_chk', 'O escolhido SalesTax Identificador é inválido para este cargo.');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'street', 'rua');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sub_total', 'subtotal');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'sys_type', 'Tipo de sistema');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax', 'imposto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_authority_code', 'imposto autoridade  Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_authority_id', 'imposto autoridade identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_authority_name', 'Nome Autoridade Tributária');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_base_amount', 'Valor Base Tributária');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_base_amount_type_code', 'Base de Imposto de Valor Tipo Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_base_amount_type_name', 'Base de Imposto de Valor Tipo Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_code', 'Código  Imposto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_exempt_type', 'Tax Exempt Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_exempt_type_code', 'Imposto Exempt Tipo Código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_exempt_type_id', 'Imposto Exempt Identificação do Tipo');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_exempt_type_name', 'Imposto Exempt Tipo nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_id', 'Identificador  Imposto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_master', 'Mestre  Imposto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_master_code', 'Imposto Código Mestre');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_master_id', 'Imposto Mestre Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_master_name', 'Imposto Mestre Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_name', 'Nome Imposto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_rate_type', 'Imposto Tipo de Taxa');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_rate_type_code', 'Imposto Tipo de taxa de código');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_rate_type_name', 'Imposto Taxa Tipo Nome');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_type_code', 'Tipo Código Imposto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_type_id', 'Tipo Identificator Imposto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tax_type_name', 'Tipo Nome Imposto');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'to_days', 'para Dias');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'total', 'total');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'total_duration', 'Duração Total');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'total_sales', 'total de vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tran_code', 'Código de transação');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'tran_type', 'Tipo de Transação');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'unit', 'unidade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'unit_code', 'Código Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'unit_id', 'unidade Identificador');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'unit_name', 'Nome da Unidade');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'url', 'Universal Resource Locator');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'use_tax_collecting_account', 'Use Tax Coletando Conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'use_tax_collecting_account_id', 'Use Tax Coletando identificador de conta');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'user_id', 'Identificador de Usuário');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'user_name', 'Nome de Usuário');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'vacuum_count', 'Contagem Vacuum');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'valid_from', 'válido de');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'valid_till', 'válido Até');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'value', 'valor');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'value_date', 'valor Data');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'verify_gl_transactions', 'Verifique Transações General Ledger');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'verify_purchase_transactions', 'Verifique as operações de compra');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'verify_sales_transactions', 'Verifique transações de vendas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'weight_in_grams', 'Peso em gramas');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'width_in_centimeters', 'Largura em centímetros');
    PERFORM localization.add_localized_resource('ScrudResource', 'pt', 'zip_code', 'Cep');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'Select', 'выбрать');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'account', 'счет');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'account_id', 'Определить аккаунт');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'account_master', 'основной счет');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'account_master_code', 'Account Master Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'account_master_id', 'Основной учетной записи Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'account_master_name', 'Мастер Имя счета');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'account_name', 'Имя Учетной Записи');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'account_number', 'Номер Счета');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'address', 'адрес');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'address_line_1', 'Адресная Строка 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'address_line_2', 'Адресная Строка 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'ageing_slab_id', 'Старение Определить перекрытия');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'ageing_slab_name', 'Старение Плиты Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'allow_credit', 'Разрешить кредит');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'allow_sales', 'Разрешить продаж');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'allow_transaction_posting', 'Разрешить сделка проводки');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'amount', 'количество');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'amount_from', 'Количество От');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'amount_to', 'Сумма к');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'analyze_count', 'Анализ графа');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'api_access_policy_id', 'API доступа Политика Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'api_access_policy_uix', 'Дубликат записи по политике доступа API');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'applied_on_shipping_charge', 'Применяют на доставке обязанности');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'audit_ts', 'Аудит Отметка времени');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'audit_user_id', 'Аудит Идентификатор пользователя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'auto_trigger_on_sales', 'Автоматически Запуск по продажам');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'autoanalyze_count', 'Autoanalyze Граф');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'autovacuum_count', 'автовакуумной Граф');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'background_color', 'Цвет фона');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'balance', 'баланс');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bank_account_number', 'Номер банковского счета');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bank_account_type', 'Банк Тип счета');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bank_accounts_account_id_chk', 'Выбранный элемент не действует банковский счет.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bank_accounts_pkey', 'Скопируйте банковский счет.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bank_address', 'Адрес банка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bank_branch', 'филиал банка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bank_contact_number', 'Банк Контактный номер');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bank_name', 'Имя банк');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'base_unit_id', 'Определить базовый блок');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'base_unit_name', 'Имя базового блока');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'based_on_shipping_address', 'Основан на Адрес доставки');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bonus_rate', 'Оценить Бонус');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bonus_slab_code', 'Плиты Бонусный код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bonus_slab_detail_id', 'Бонус Плиты Деталь Определить');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bonus_slab_details_amounts_chk', 'Поле «Сумма по" должно быть больше, чем "сумму Из".');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bonus_slab_id', 'Определить Бонус перекрытия');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'bonus_slab_name', 'Плиты Имя опыту');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'book', 'книга');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'brand', 'марка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'brand_code', 'Брэнд-код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'brand_id', 'Определить Марка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'brand_name', 'бренд');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'can_change_password', 'Может Изменить пароль');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'can_self_verify', 'Может Убедитесь, Я.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'can_verify_gl_transactions', 'Может Убедитесь, главной книги операций');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'can_verify_purchase_transactions', 'Может Убедитесь сделок купли-');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'can_verify_sales_transactions', 'Может Убедитесь, сделки купли-продажи');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'card_type_code', 'Тип карты Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'card_type_id', 'Тип карты Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'card_type_name', 'Тип карты Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_flow_heading', 'О движении денежных средств товарной позиции');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_flow_heading_cash_flow_heading_type_chk', 'Invalid Cash flow Heading Type. Allowed values: O, I, F.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_flow_heading_code', 'О движении денежных средств товарной позиции Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_flow_heading_id', 'Денежный поток Идентификатор Заголовок');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_flow_heading_name', 'О движении денежных средств товарной позиции Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_flow_heading_type', 'Денежный поток Заголовок Тип');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_flow_master_code', 'Денежный поток Мастер-код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_flow_master_id', 'Денежный поток Мастер Определить');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_flow_master_name', 'Денежный поток Магистр Название');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_flow_setup_id', 'Денежный поток Идентификатор Setup');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_repositories_cash_repository_code_uix', 'Скопируйте Cash Code Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_repositories_cash_repository_name_uix', 'Повторяющееся имя Денежные средства Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_repository', 'Денежные средства Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_repository_code', 'Денежные Код Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_repository_id', 'Денежные средства Repository Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cash_repository_name', 'Денежные Имя хранилища');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cell', 'клетка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'charge_interest', 'расходы на уплату процентов');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'check_nexus', 'Проверьте Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'checking_frequency', 'Проверка частоты');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'checking_frequency_id', 'Проверка частоты Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'city', 'город');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'collecting_account', 'Сбор аккаунт');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'collecting_account_id', 'Сбор аккаунт Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'collecting_tax_authority', 'Сбор налогового органа');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'collecting_tax_authority_id', 'Сбор налогового органа идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'commision_rate', 'Оценить Комиссия');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'commission_rate', 'Оценить Комиссия');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'company_name', 'Название Компании');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compare_unit_id', 'Сравните Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compare_unit_name', 'Сравните Имя устройства');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compound_item', 'Соединение Item');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compound_item_code', 'Соединение Код товара');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compound_item_detail_id', 'Определить соединение Подробности предмета');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compound_item_details_unit_chk', 'При условии, Invalid устройства.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compound_item_id', 'Соединение Item Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compound_item_name', 'Соединение Название товара');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compound_unit_id', 'Соединение блока идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compound_units_chk', 'Базовый блок не может определить, как Сами по сравнению блок определены.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'compounding_frequency', 'Усугубляет Частота');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'confidential', 'конфиденциальная');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_address_line_1', 'Контактный адрес Line 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_address_line_2', 'Контактный адрес Line 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_cell', 'Связаться с сотового');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_city', 'Контакты Город');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_country', 'Contact Country');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_email', 'Контактный адрес электронной почты');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_number', 'Контактный телефон');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_person', 'Контактное Лицо');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_phone', 'Контактный телефон');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_po_box', 'Контактный телефон');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_state', 'Связаться с Государственной');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'contact_street', 'Связаться с улицы');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cost_center_code', 'МВЗ Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cost_center_id', 'Определить Центр Стоимость');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cost_center_name', 'Стоимость Имя центр');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cost_of_goods_sold_account_id', 'Себестоимость проданных товаров аккаунт Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cost_price', 'Себестоимость');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cost_price_includes_tax', 'Стоимость Цена включает налог');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'counter_code', 'Код счетчика');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'counter_id', 'Определить счетчик');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'counter_name', 'Имя счетчика');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'country', 'страна');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'country_code', 'Код страны');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'country_id', 'Определить Страна');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'country_name', 'Название страны');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'county', 'графство');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'county_code', 'Графство Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'county_id', 'Определить округ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'county_name', 'Каунти название');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'county_sales_tax', 'Графство налог с продаж');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'county_sales_tax_code', 'Графство Продажи Налоговый кодекс');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'county_sales_tax_id', 'Графство налог с продаж Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'county_sales_tax_name', 'Графство налог с продаж Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'credit', 'кредит');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'cst_number', 'Центральный налог с продаж Количество');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'currency', 'валюта');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'currency_code', 'Код валюты');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'currency_name', 'Название валюты');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'currency_symbol', 'Символ валюты');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'customer_pays_fee', 'Клиент платит взнос');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'date_of_birth', 'Дата Рождения');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'debit', 'дебет');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'default_cash_account_id', 'По умолчанию денежный счет идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'default_cash_repository_id', 'По умолчанию Cash хранилища идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'department_code', 'Код отдела');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'department_id', 'Определение отдел');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'department_name', 'Название отдела');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'description', 'описание');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'discount', 'скидка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'due_days', 'Из-за дня');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'due_frequency', 'Из-за частоты');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'due_frequency_id', 'Из-за частоты Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'due_on_date', 'Due Date является');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'effective_from', 'вступает в силу с');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'elevated', 'высокий');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'email', 'Электронная почта');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'ends_on', 'Она заканчивается');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'entity_id', 'Entity Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'entity_name', 'Имя Entity');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'entry_ts', 'Вступление Отметка времени');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'er', 'Эффективная ставка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'exclude_from_purchase', 'Исключить от покупки');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'exclude_from_sales', 'Исключить от продаж');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'external_code', 'Внешний код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'factory_address', 'Адрес завода');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'fax', 'факс');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'first_name', 'Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'fiscal_year_code', 'Финансовый год Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'fiscal_year_name', 'Имя финансовый год');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'flag_id', 'Флаг Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'flag_type_id', 'Флаг Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'flag_type_name', 'Флаг Тип Название');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'flagged_on', 'Помечено На');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'foreground_color', 'Цвет переднего плана');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'frequency_code', 'Частота код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'frequency_id', 'Частота Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'frequency_name', 'Частота Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'frequency_setup_code', 'Частота код установки');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'frequency_setup_id', 'Частота настройки идентификатора');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'from_days', 'От дней');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'full_name', 'Полное Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'gl_head', 'Главная книга Руководитель');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'gl_verification_limit', 'Главная книга Проверка Limit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'grace_period', 'льготный срок');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'has_child', 'Имеет ребенка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'height_in_centimeters', 'Высота в сантиметрах');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'hot_item', 'Горячий деталь');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'http_action_code', 'HTTP Code Экшн');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'hundredth_name', 'Сотый Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'id', 'идентифицировать');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'includes_tax', 'Включает в себя налог');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'income_tax_rate', 'Ставка налога на прибыль');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'industry_id', 'Identify Industry');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'industry_name', 'Industry Name');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'interest_compounding_frequency_id', 'Interest Compounding Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'interest_rate', 'interest Rate');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'inventory_account_id', 'nventory Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_active', 'является активным');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_added', 'Добавлена');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_admin', 'Есть Админ');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_cash', 'это денежные средства');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_debit', 'Есть Дебет');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_employee', 'Является сотрудником');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_exempt', 'освобождается');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_exemption', 'Это освобождение');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_flat_amount', 'Это фиксированная сумма');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_merchant_account', 'Является Merchant Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_party', 'является участником');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_purchase', 'является покупка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_rectangular', 'прямоугольная');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_sales', 'Есть в продаже');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_summary', 'Является Резюме');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_supplier', 'Есть Поставщик');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_system', 'Это система');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_transaction_node', 'Это узел сделка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'is_vat', 'ИС НДС');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item', 'пункт');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_code', 'Код товара');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_cost_price_id', 'Определяет предметы себестоимости');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_cost_prices_unit_chk', 'При условии, Invalid устройства.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_group', 'Пункт Группа');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_group_code', 'Группа Код товара');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_group_id', 'Определить группу товаров');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_group_name', 'Название товара Группа');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_id', 'Пункт Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_name', 'Название товара');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_opening_inventory_unit_chk', 'Неверный блок предоставляются.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_selling_price_id', 'Пункт Продажа Цена Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_selling_prices_unit_chk', 'Неверный блок предоставляются.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_type_code', 'Тип элемента Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_type_id', 'Пункт Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'item_type_name', 'Тип элемента Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'items_item_code_uix', 'Дубликат кода.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'items_item_name_uix', 'Повторяющееся имя элемента.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'items_reorder_quantity_chk', 'Количество переупор должно быть большим, чем или равен уровню переупор.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'last_analyze', 'Последнее Анализ на');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'last_autoanalyze', 'Последняя авто анализировать На');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'last_autovacuum', 'Последняя авто вакууме на');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'last_name', 'фамилия');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'last_vacuum', 'Последнее вакууме на');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'late_fee', 'штраф за опоздание');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'late_fee_code', 'Штраф за опоздание Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'late_fee_id', 'Штраф за опоздание Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'late_fee_name', 'Штраф за опоздание Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'late_fee_posting_frequency', 'Штраф за опоздание Проводка Частота');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'late_fee_posting_frequency_id', 'Штраф за опоздание Проводка Частота Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'lc_credit', 'Аккредитив кредитов');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'lc_debit', 'Аккредитив дебету');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'lead_source_code', 'Ведущий Исходный код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'lead_source_id', 'Ведущий Источник идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'lead_source_name', 'Ведущий Название источника');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'lead_status_code', 'Ведущий код Статус');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'lead_status_id', 'Ведущий Идентификатор Статус');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'lead_status_name', 'Ведущий Статус Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'lead_time_in_days', 'Время выполнения в днях');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'length_in_centimeters', 'Длина в см');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'machinable', 'механической обработке');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'maintain_stock', 'Поддержание Stock');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'maintained_by_user_id', 'Управляющий Идентификатор пользователя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'maximum_credit_amount', 'Максимальная сумма кредита');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'maximum_credit_period', 'Максимальный размер кредита Период');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'merchant_account_id', 'Merchant Account Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'merchant_fee_setup_id', 'Торговец Стоимость установки идентификатора');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'middle_name', 'Второе Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'nick_name', 'Имя Ник');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'non_gl_stock_details_unit_chk', 'Неверный блок предоставляются.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'normally_debit', 'Обычно Дебет');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'office', 'офис');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'office_code', 'Код офиса');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'office_id', 'Управление Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'office_name', 'Имя офиса');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'opportunity_stage_code', 'Возможность Стадия Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'opportunity_stage_id', 'Возможность Стадия Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'opportunity_stage_name', 'Имя возможность Стадия');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'pan_number', 'Частный счет Количество Количество');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent', 'родитель');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_account_id', 'Родитель идентификатор учетной записи');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_account_master_id', 'Родитель счета Учитель Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_account_name', 'Родитель Имя счета');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_account_number', 'Родитель Номер счета');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_cash_flow_heading_id', 'Родитель движении денежных средств товарной позиции Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_cash_repository', 'Родитель наличными Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_cash_repository_id', 'Идентификатор родительской наличными Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_cr_code', 'Родитель наличными репозиторий кода');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_cr_name', 'Родитель наличными Repository Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_industry_id', 'Родитель Промышленность Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_industry_name', 'Родитель название отрасли');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_item_group_id', 'Родительский элемент Идентификатор Группы');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_office', 'родитель Управление');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'parent_office_id', 'Родитель Управление Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'party', 'партия');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'party_code', 'партия Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'party_id', 'Идентификация стороны');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'party_name', 'Имя партия');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'party_type', 'Тип партия');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'party_type_code', 'Партия введите код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'party_type_id', 'Партия Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'party_type_name', 'Тип партия Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'password', 'пароль');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'payment_card_code', 'Код платежных карт');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'payment_card_id', 'Идентификатор платежных карт');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'payment_card_name', 'Оплата Название карты');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'payment_term', 'срок оплаты');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'payment_term_code', 'Оплата Срок Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'payment_term_id', 'Срок оплаты Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'payment_term_name', 'Срок оплаты Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'phone', 'телефон');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'po_box', 'Почтовый ящик');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'poco_type_name', 'Poco Тип Название');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'policy_id', 'Почтовый ящик...');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'preferred_shipping_mail_type', 'Предпочтительный тип Доставка почты');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'preferred_shipping_mail_type_id', 'Привилегированные Доставка почты Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'preferred_shipping_package_shape', 'Привилегированные Перевозка груза Пакет Форма');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'preferred_supplier', 'предпочтительным поставщиком');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'preferred_supplier_id', 'Предпочтительным поставщиком Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'price', 'цена');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'price_from', 'Цена от');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'price_to', 'Цена до');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'price_type_code', 'Цена Тип Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'price_type_id', 'Цена Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'price_type_name', 'Цена Тип Название');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'priority', 'приоритет');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'purchase_account_id', 'Закупка расходных идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'purchase_discount_account_id', 'Купить со скидкой аккаунта идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'purchase_verification_limit', 'Покупка Проверка Limit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'quantity', 'количество');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'rate', 'ставка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurrence_type_id', 'Повторение Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurring_amount', 'Периодическая Сумма');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurring_duration', 'Период подписки');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurring_frequency', 'Периодическая Частота');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurring_frequency_id', 'Периодическая Частота Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurring_invoice', 'Повторяющиеся счета');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurring_invoice_code', 'Повторяющиеся счета Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurring_invoice_id', 'Повторяющиеся счета Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurring_invoice_name', 'Повторяющиеся счета Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurring_invoice_setup_id', 'Повторяющиеся счета Setup Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'Вы не можете иметь более одного автоматической синхронизации по продажам для этого элемента.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'recurs_on_same_calendar_date', 'Повторяется на том же календарном Дата');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'registration_date', 'Дата регистрации');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'registration_number', 'Регистрационный номер');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'relationship_officer_name', 'Имя Отношения директор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'relname', 'связь Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'reorder_level', 'Изменить порядок Уровень');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'reorder_quantity', 'Изменение порядка Количество');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'reorder_unit', 'Изменение порядка Unit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'reorder_unit_id', 'Изменить порядок Раздел Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'reporting_tax_authority', 'Отчетность налогового органа');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'reporting_tax_authority_id', 'Отчетность налогового органа идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'repository', 'хранилище');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'resource', 'ресурс');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'resource_id', 'идентификатор ресурса');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'resource_key', 'Ресурс Key');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'role_code', 'Роль Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'role_id', 'Роль идентификатора');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'role_name', 'Имя роли');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'rounding_decimal_places', 'Округление десятичных разрядов');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'rounding_method', 'Округление Метод');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'rounding_method_code', 'Округление код метода');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'rounding_method_name', 'Округление Имя метода');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_account_id', 'Счет по продажам Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_discount_account_id', 'Продажи Скидка аккаунт Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_return_account_id', 'Продажи Вернуться аккаунт Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax', 'налог с продаж');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_code', 'Налоговый код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_detail_code', 'Налог с продаж Деталь Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_detail_id', 'Налог с продаж Деталь идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_detail_name', 'Налог с продаж Наименование детали');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_details_rate_chk', 'Ставка не должна быть пустой, если вы не выбрали штата или округа налога. Кроме того, вы не можете предоставить как скорость и выбрать для штата или округа налога.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_exempt', 'Освобождаются от налогообложения по продажам');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_exempt_code', 'Налог с продаж Освобождение Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_exempt_detail_id', 'Налог с продаж Освобождение Деталь идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_exempt_id', 'Налог с продаж Освобождение Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_exempt_name', 'Налог с продаж Освобождение Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_exempts_price_to_chk', 'Поле "Цена от ''должно быть меньше, чем« цена ».');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_id', 'Налог с продаж  Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_name', 'Налог с продаж Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_type', 'Налог с продаж Вид');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_type_code', 'Налог с продаж введите код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_type_id', 'Налог с продаж Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_tax_type_name', 'Налог с продаж Тип Название');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_team_code', 'Отдел продаж Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_team_id', 'Отдел продаж Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_team_name', 'Отдел продаж Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sales_verification_limit', 'Продажи Проверка предел');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'salesperson_bonus_setup_id', 'Salesperson Бонус Идентификатор Setup');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'salesperson_code', 'Salesperson Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'salesperson_id', 'Salesperson Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'salesperson_name', 'Имя Salesperson');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'self_verification_limit', 'Самостоятельная проверка Limit');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'selling_price', 'отпускная цена');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'selling_price_includes_tax', 'Продажа Цена включает налог');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipper_code', 'Грузовладелец Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipper_id', 'Грузовладелец Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipper_name', 'Грузовладелец Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipping_address_code', 'Адрес доставки Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipping_address_id', 'Адрес доставки Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipping_mail_type_code', 'Доставка Тип Почтовый код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipping_mail_type_id', 'Доставка тип почтового идентификатора');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipping_mail_type_name', 'Доставка тип почтового Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipping_package_shape_code', 'Перевозка груза Пакет Форма Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipping_package_shape_id', 'Перевозка груза Пакет Форма Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'shipping_package_shape_name', 'Перевозка груза Пакет Форма Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'slab_name', 'Плиты Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sst_number', 'Государственный налог с продаж Количество');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'starts_from', 'начинается с');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'state', 'государственный');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'state_code', 'код состояния');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'state_id', 'Государственный Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'state_name', 'Государственный Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'state_sales_tax', 'Государственной налоговой продаж');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'state_sales_tax_code', 'Продажи государственного Налоговый кодекс');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'state_sales_tax_id', 'Государственная налоговая Продажи Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'state_sales_tax_name', 'Государственная налоговая продажам Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'statement_reference', 'О себе Ссылка');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'stock_details_unit_chk', 'Неверный блок предоставляются.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'store', 'магазин');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'store_code', 'Код хранения');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'store_id', 'магазин Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'store_name', 'Сохранение имени');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'store_type', 'Тип магазин');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'store_type_code', 'Тип хранения кода');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'store_type_id', 'Тип Магазин  Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'store_type_name', 'Тип название магазина');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'stores_default_cash_account_id_chk', 'Пожалуйста, выберите правильный наличными или банковского счета Идентификатор.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'stores_sales_tax_id_chk', 'Выбрали SalesTax Идентификатор является недопустимым для этой должности.');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'street', 'улица');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sub_total', 'Промежуточный итог');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'sys_type', 'Тип системы');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax', 'налог');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_authority_code', 'Налоговый орган код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_authority_id', 'Налоговый орган Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_authority_name', 'Имя Налоговая инспекция');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_base_amount', 'Налоговая база Сумма');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_base_amount_type_code', 'Налоговая база Сумма введите код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_base_amount_type_name', 'Налоговая база Сумма Тип Название');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_code', 'налоговый кодекс');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_exempt_type', 'Освобождаются от налогообложения Тип');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_exempt_type_code', 'Освобождаются от налогообложения введите код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_exempt_type_id', 'Освобождаются от налогообложения Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_exempt_type_name', 'Освобождаются от налогообложения Тип Название');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_id', 'Налоговый идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_master', 'Налоговый Мастер');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_master_code', 'Налоговый Мастер-код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_master_id', 'Налоговый Мастер Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_master_name', 'Налоговый Магистр Название');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_name', 'Налоговый Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_rate_type', 'Налоговая ставка Тип');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_rate_type_code', 'Налоги Тип Цена Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_rate_type_name', 'Налоговая ставка Тип Название');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_type_code', 'Налоги Тип Код');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_type_id', 'Налоговый Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tax_type_name', 'Налоги Тип Имя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'to_days', 'Для дней');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'total', 'общий');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'total_duration', 'Общая продолжительность');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'total_sales', 'Всего продаж');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tran_code', 'код транзакции');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'tran_type', 'тип операции');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'unit', 'блок');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'unit_code', 'значным кодом');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'unit_id', 'блок Идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'unit_name', 'Имя единицы');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'url', 'Унифицированный указатель информационного ресурса');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'use_tax_collecting_account', 'Используйте сбора налогов аккаунт');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'use_tax_collecting_account_id', 'Используйте сбора налогов аккаунта идентификатор');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'user_id', 'Идентификатор пользователя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'user_name', 'Имя пользователя');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'vacuum_count', 'Вакуумный Граф');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'valid_from', 'Действует с');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'valid_till', 'Действительно до');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'value', 'значение');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'value_date', 'Дата валютирования');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'verify_gl_transactions', 'Убедитесь, главной книги операций');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'verify_purchase_transactions', 'Убедитесь, сделок купли-');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'verify_sales_transactions', 'Убедитесь, сделки купли-продажи');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'weight_in_grams', 'Вес в граммах');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'width_in_centimeters', 'Ширина в см');
    PERFORM localization.add_localized_resource('ScrudResource', 'ru', 'zip_code', 'Почтовый Индекс');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'Select', 'Välj');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'account', 'konto');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'account_id', 'Identifiera konto');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'account_master', 'mästare konto');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'account_master_code', 'Mästare kontonummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'account_master_id', 'Mästare Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'account_master_name', 'Mästare Kontonamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'account_name', 'Kontonamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'account_number', 'kontonummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'address', 'adress');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'address_line_1', 'Adress Linje 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'address_line_2', 'Adress Linje 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'ageing_slab_id', 'Åldrande Identifiera Slab');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'ageing_slab_name', 'Åldrande Slab Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'allow_credit', 'Tillåt Kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'allow_sales', 'Tillåt Försäljning');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'allow_transaction_posting', 'Tillåt Transaktions Utstationering');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'amount', 'Mängd');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'amount_from', 'mängd från');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'amount_to', 'Mängd Till');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'analyze_count', 'Analysera Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'api_access_policy_id', 'API Access Policy Id');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'api_access_policy_uix', 'Duplicera Entry för API Access Policy');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'applied_on_shipping_charge', 'Applicerat Shipping Charge');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'audit_ts', 'Revisionstidsstämpel');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'audit_user_id', 'Revisionsanvändaridentifieringen');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'auto_trigger_on_sales', 'Automatiskt Trigger på Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'autoanalyze_count', 'Autoanalysera Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'autovacuum_count', 'Autovakuum Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'background_color', 'Bakgrundsfärg');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'balance', 'Balans');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bank_account_number', 'Bankkonto nummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bank_account_type', 'Bankkonto Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bank_accounts_account_id_chk', 'Det valda alternativet är inte ett giltigt bankkonto.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bank_accounts_pkey', 'Duplicera bankkonto.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bank_address', 'Bank Adress');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bank_branch', 'Bank Branch');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bank_contact_number', 'Bank Kontakta nummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bank_name', 'Bank Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'base_unit_id', 'Identifiera Basenhet');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'base_unit_name', 'Basenhet Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'based_on_shipping_address', 'Baserat på Leveransadress');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bonus_rate', 'Baserat in Leveransadress');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bonus_slab_code', 'Slab Bonuskod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bonus_slab_detail_id', 'Bonus Slab Detalj Identifiera');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bonus_slab_details_amounts_chk', 'Fältet "Antal För att kunna" måste vara större än "Belopp Från".');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bonus_slab_id', 'Identifiera Bonus Slab');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'bonus_slab_name', 'Slab Namn Bonus');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'book', 'Bok');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'brand', 'varumärke');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'brand_code', 'varumärke kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'brand_id', 'Identifiera Märke');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'brand_name', 'varumärke');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'can_change_password', 'Kan Ändra lösenord');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'can_self_verify', 'Kan Verifiera Själv');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'can_verify_gl_transactions', 'Kan Verifiera General Ledger Transaktioner');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'can_verify_purchase_transactions', 'Kan Verifiera köptransaktioner');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'can_verify_sales_transactions', 'Kan Verifiera Försäljningstransaktioner');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'card_type_code', 'Kort kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'card_type_id', 'Card Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'card_type_name', 'Kort Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_flow_heading', 'Cash Flow Rubrik');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_flow_heading_cash_flow_heading_type_chk', 'Ogiltig Kassaflöde Typ Rubrik. Tillåtna värden: O, I, F.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_flow_heading_code', 'Cash Flow Rubrik Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_flow_heading_id', 'Cash Flow Identifier Rubrik');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_flow_heading_name', 'Cash Flow Rubrik Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_flow_heading_type', 'Cashflow Rubrik Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_flow_master_code', 'Cash Flow master kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_flow_master_id', 'Cash Flow Mästare Identifiera');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_flow_master_name', 'Cash Flow master Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_flow_setup_id', 'Cashflow Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_repositories_cash_repository_code_uix', 'Duplicate Cash Code Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_repositories_cash_repository_name_uix', 'Duplicate Cash Repository Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_repository', 'Cash Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_repository_code', 'Cash Code Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_repository_id', 'Cash Repository Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cash_repository_name', 'Cash Repository Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cell', 'Cell');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'charge_interest', 'räntekostnader');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'check_nexus', 'Kontrollera Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'checking_frequency', 'kontroll Frekvens');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'checking_frequency_id', 'Kontroll Frekvens Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'city', 'stad');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'collecting_account', 'Samla konto');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'collecting_account_id', 'Samla Kontots identifierare');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'collecting_tax_authority', 'Samla Skatteverket');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'collecting_tax_authority_id', 'Samla Skatteverket Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'commision_rate', 'Rate kommissionen');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'commission_rate', 'Rate kommissionen');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'company_name', 'Företagsnamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compare_unit_id', 'Jämför Enhet Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compare_unit_name', 'Jämför Enhet Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compound_item', 'Förening Punkt');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compound_item_code', 'Förening Artikelkod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compound_item_detail_id', 'Identifiera Förening Produkt Detalj');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compound_item_details_unit_chk', 'Förutsatt Ogiltig enhet.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compound_item_id', 'Förening Post Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compound_item_name', 'Förening föremålsnamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compound_unit_id', 'Förening Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compound_units_chk', 'Basenheten kan inte identifiera som Sami jämföra enhet identifierades.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'compounding_frequency', 'Compounding Frekvens');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'confidential', 'konfidentiell');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_address_line_1', 'Kontakt Adress Linje 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_address_line_2', 'Kontakt Adress Linje 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_cell', 'Kontakt Cell');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_city', 'Kontakta Stad');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_country', 'Kontakt Land');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_email', 'Kontakta E-post');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_number', 'Kontaktnummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_person', 'Kontaktperson');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_phone', 'Kontakta Phone');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_po_box', 'Kontakt Po Box');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_state', 'Kontakt State');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'contact_street', 'Kontakt Street');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cost_center_code', 'Kostnad Center Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cost_center_id', 'Identifiera kostnadsställe');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cost_center_name', 'Kostnadsställenamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cost_of_goods_sold_account_id', 'Kostnad för sålda varor Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cost_price', 'Kostnad Pris');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cost_price_includes_tax', 'Kostnad Pris Inkluderar skatt');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'counter_code', 'Counter kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'counter_id', 'Identifiera Counter');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'counter_name', 'Counter Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'country', 'land');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'country_code', 'lANDSKOD');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'country_id', 'identifiera Land');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'country_name', 'land Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'county', 'County');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'county_code', 'County kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'county_id', 'Identifiera län');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'county_name', 'län Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'county_sales_tax', 'län Sales Tax');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'county_sales_tax_code', 'län Sales Tax Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'county_sales_tax_id', 'län Sales Tax Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'county_sales_tax_name', 'län Sales Tax Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'credit', 'Credit');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'cst_number', 'Central Moms Nummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'currency', 'valuta');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'currency_code', 'valuta Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'currency_name', 'valuta Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'currency_symbol', 'Valutasymbol');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'customer_pays_fee', 'Kunden betalar Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'date_of_birth', 'Födelsedatum');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'debit', 'Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'default_cash_account_id', 'Standard konto Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'default_cash_repository_id', 'Standard Cash Repository Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'department_code', 'Avdelningskod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'department_id', 'Identifiera Avdelning');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'department_name', 'Avdelningsnamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'description', 'Beskrivning');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'discount', 'rabatt');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'due_days', 'Due Dagar');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'due_frequency', 'Due Frekvens');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'due_frequency_id', 'Due Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'due_on_date', 'Förfallodatum är');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'effective_from', 'effektiv Från');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'elevated', 'Förhöjda');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'email', 'E-post');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'ends_on', 'det slutar');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'entity_id', 'Entity Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'entity_name', 'Entity Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'entry_ts', 'Entry Tidsstämpel');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'er', 'effektiv betyg');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'exclude_from_purchase', 'Uteslut Från Purchase');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'exclude_from_sales', 'Uteslut Från Sales');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'external_code', 'extern kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'factory_address', 'Fabriks Adress');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'fax', 'Fax');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'first_name', 'Förnamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'fiscal_year_code', 'Räkenskapsårets kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'fiscal_year_name', 'Räkenskapsårets Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'flag_id', 'Flag Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'flag_type_id', 'Flagg Typ Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'flag_type_name', 'Flagg Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'flagged_on', 'Flaggad On');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'foreground_color', 'Förgrundsfärg');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'frequency_code', 'Frekvens kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'frequency_id', 'Frekvens Idenifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'frequency_name', 'Frekvens Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'frequency_setup_code', 'Frekvensinställnings Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'frequency_setup_id', 'Frekvensinställnings Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'from_days', 'från Dagar');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'full_name', 'Fullständigt namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'gl_head', 'Huvudbok Head');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'gl_verification_limit', 'Huvudbok Verifiering Limit');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'grace_period', 'respitperioden');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'has_child', 'har barn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'height_in_centimeters', 'Höjd i cm');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'hot_item', 'Hot Post');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'http_action_code', 'HTTP Action Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'hundredth_name', 'hundradel Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'id', 'identifiera');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'includes_tax', 'inkluderar Skatt');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'income_tax_rate', 'Inkomst Skattesats');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'industry_id', 'Identifiera Industry');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'industry_name', 'Bransch Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'interest_compounding_frequency_id', 'Intresset Compounding Frekvens Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'interest_rate', 'rÄNTA');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'inventory_account_id', 'Inventory Kontots identifierare');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_active', 'Är Aktiv');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_added', 'tillsättes');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_admin', 'är Admin');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_cash', 'är Cash');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_debit', 'Är Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_employee', 'är Anställd');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_exempt', 'är undantagen');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_exemption', 'är Undantag');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_flat_amount', 'Är Flat Belopp');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_merchant_account', 'Är Merchant Account');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_party', 'är Party');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_purchase', 'är Inköp');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_rectangular', 'är rektangulär');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_sales', 'är Försäljning');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_summary', 'är Sammanfattning');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_supplier', 'Är Leverantör');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_system', 'är System');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_transaction_node', 'Är Transaktions Nod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'is_vat', 'är Vat');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item', 'Punkt');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_code', 'Post Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_cost_price_id', 'Identifiera Artikel Kostnad Pris');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_cost_prices_unit_chk', 'Förutsatt Ogiltig enhet.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_group', 'Produkt Grupp');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_group_code', 'Grupp Code Punkt');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_group_id', 'Identifiera Produkt Grupp');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_group_name', 'Punkt Gruppnamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_id', 'artikelidentifierare');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_name', 'Produktnamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_opening_inventory_unit_chk', 'Ogiltig enhet tillhandahålls.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_selling_price_id', 'Punkt Selling Pris Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_selling_prices_unit_chk', 'Ogiltig enhet tillhandahålls.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_type_code', 'Post kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_type_id', 'Produkt type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'item_type_name', 'Post Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'items_item_code_uix', 'Duplicera objekt koden.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'items_item_name_uix', 'Duplicera objekt namn.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'items_reorder_quantity_chk', 'Den beställningsantal måste vara stor än eller lika med den beställningsnivå .');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'last_analyze', 'Senast Analyze On');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'last_autoanalyze', 'Senaste Auto analysera On');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'last_autovacuum', 'Förra Auto vakuum On');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'last_name', 'efternamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'last_vacuum', 'Senast Vacuum On');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'late_fee', 'Sen Fee');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'late_fee_code', 'Sen Fee kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'late_fee_id', 'Sen Fee Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'late_fee_name', 'Sen Fee Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'late_fee_posting_frequency', 'Sen Fee Utstationering Frekvens');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'late_fee_posting_frequency_id', 'Sen Fee Utstationering Frekvens Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'lc_credit', 'brev av Kredit Kredit');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'lc_debit', 'brev av Kredit Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'lead_source_code', 'Bly källkod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'lead_source_id', 'Bly Source Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'lead_source_name', 'Bly Källnamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'lead_status_code', 'Bly Status Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'lead_status_id', 'Bly Status Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'lead_status_name', 'Bly Status Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'lead_time_in_days', 'Bly i dagar');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'length_in_centimeters', 'Längd i centimeter');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'machinable', 'maskinbearbetningsbar');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'maintain_stock', 'Bibehåll lager');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'maintained_by_user_id', 'Underhållen av användare Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'maximum_credit_amount', 'Maximal kreditbelopp');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'maximum_credit_period', 'Maximal kredittid');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'merchant_account_id', 'Merchant Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'merchant_fee_setup_id', 'Merchant Fee Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'middle_name', 'mellannamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'nick_name', 'smeknamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'non_gl_stock_details_unit_chk', 'Ogiltig enhet tillhandahålls.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'normally_debit', 'normalt Debit');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'office', 'Kontors');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'office_code', 'Kontros kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'office_id', 'Kontors Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'office_name', 'Kontors Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'opportunity_stage_code', 'Möjlighet Stage Kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'opportunity_stage_id', 'Möjlighet Stage Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'opportunity_stage_name', 'Möjlighet Stage Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'pan_number', 'Privat Account Antal Antal');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent', 'Förälder');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_account_id', 'Förälder Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_account_master_id', 'Moderkonto master Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_account_name', 'Förälder Kontonamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_account_number', 'Förälder kontonummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_cash_flow_heading_id', 'Moderbolaget Kassaflödes Rubrik Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_cash_repository', 'Förälder Cash Repository');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_cash_repository_id', 'Förälder  Cash Repository Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_cr_code', 'Förälder Cash Repository kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_cr_name', 'Förälder Cash Repository Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_industry_id', 'Förälder Industri Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_industry_name', 'Förälder Industri Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_item_group_id', 'Moderbolaget Post Group Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_office', 'Förälder Office');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'parent_office_id', 'Förälder Office Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'party', 'fest');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'party_code', 'fest kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'party_id', 'fest Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'party_name', 'fest Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'party_type', 'fest Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'party_type_code', 'fest Typ kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'party_type_id', 'fest Typ identifer');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'party_type_name', 'fest Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'password', 'lösenord');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'payment_card_code', 'Payment Card kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'payment_card_id', 'Payment Card Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'payment_card_name', 'Payment Card Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'payment_term', 'Betalning Term');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'payment_term_code', 'Betalning Term kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'payment_term_id', 'Betalning Term Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'payment_term_name', 'Betalning Term Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'phone', 'telefon');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'po_box', 'Postbox');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'poco_type_name', 'Poco Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'policy_id', 'Policy identifierare');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'preferred_shipping_mail_type', 'Preferred Shipping Mail Type');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'preferred_shipping_mail_type_id', 'Preferred Shipping Mail Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'preferred_shipping_package_shape', 'Preferred Shipping Package Shape');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'preferred_supplier', 'Preferred Supplier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'preferred_supplier_id', 'Preferred Supplier Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'price', 'pris');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'price_from', 'Pris från');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'price_to', 'Pris till');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'price_type_code', 'Pris Typ kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'price_type_id', 'Pris Typ Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'price_type_name', 'Pris Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'priority', 'Prioritet');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'purchase_account_id', 'Köp Konto Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'purchase_discount_account_id', 'Köp Rabatt Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'purchase_verification_limit', 'Inköps Verifiering Gräns');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'quantity', 'kvantitet');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'rate', 'Betyg');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurrence_type_id', 'Upprepning Typ Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurring_amount', 'Återkommande Belopp');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurring_duration', 'Återkommande Varaktighet');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurring_frequency', 'Återkommande Frekvens');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurring_frequency_id', 'Återkommande Frequency Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurring_invoice', 'Återkommande Faktura');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurring_invoice_code', 'Återkommande Faktura kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurring_invoice_id', 'Återkommande Faktura Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurring_invoice_name', 'Återkommande Faktura Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurring_invoice_setup_id', 'Återkommande Faktura Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', 'Du kan inte ha mer än en auto trigger på försäljningen för objektet.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'recurs_on_same_calendar_date', 'Återkommer på samma kalenderår Datum');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'registration_date', 'Registreringsdatum');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'registration_number', 'Registreringsnummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'relationship_officer_name', 'Förhållande ombudet Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'relname', 'relation Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'reorder_level', 'Ändra ordning Nivå');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'reorder_quantity', 'Beställnings Kvantitet');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'reorder_unit', 'Ändra ordning Enhet');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'reorder_unit_id', 'Ändra ordning Unit Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'reporting_tax_authority', 'Rapportering Skatteverket');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'reporting_tax_authority_id', 'Rapportering Skatteverket Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'repository', 'förvaringsplats');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'resource', 'Resurs');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'resource_id', 'Resurs Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'resource_key', 'Resurs Key');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'role_code', 'Roll kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'role_id', 'Roll Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'role_name', 'Rollnamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'rounding_decimal_places', 'Avrundning decimaler');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'rounding_method', 'Avrundningsmetod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'rounding_method_code', 'Avrundning Metodkod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'rounding_method_name', 'Avrundning Metod Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_account_id', 'Försäljnings Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_discount_account_id', 'Försäljning rabatt Kontots identifierare');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_return_account_id', 'Sales Return Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax', 'oMSÄTTNINGSSKATT');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_code', 'Försäljnings skattelagen');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_detail_code', 'Moms Detalj kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_detail_id', 'Moms Detalj Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_detail_name', 'Moms Detalj Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_details_rate_chk', 'Betyg bör inte vara tomt om du inte har valt statlig eller landstingsskatt. På samma sätt kan du inte ge både takt och väljer att ha tillstånd eller landstingsskatt.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_exempt', 'Försäljningsskattefria');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_exempt_code', 'Moms Undantagen kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_exempt_detail_id', 'Moms Undantagen Detail Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_exempt_id', 'Moms Undantagen Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_exempt_name', 'Moms Undantagen namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_exempts_price_to_chk', 'Fältet "PriceFrom" måste vara mindre än "PriceTo".');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_id', 'Moms Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_name', 'Moms Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_type', 'Moms Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_type_code', 'Moms kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_type_id', 'Moms Typ Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_tax_type_name', 'Moms Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_team_code', 'Sales Team Code');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_team_id', 'Sales Team Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_team_name', 'Sales Team Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sales_verification_limit', 'Försäljnings Verifiering Gräns');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'salesperson_bonus_setup_id', 'Försäljar Bonus Setup Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'salesperson_code', 'Försäljar kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'salesperson_id', 'Försäljar Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'salesperson_name', 'försäljare Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'self_verification_limit', 'Själv Verifiering Gräns');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'selling_price', 'fÖRSÄLJNINGSPRIS');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'selling_price_includes_tax', 'Selling Pris Inkluderar skatt');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipper_code', 'avsändaren kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipper_id', 'Avsändaren Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipper_name', 'avsändaren Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipping_address_code', 'Leveransadress kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipping_address_id', 'Leveransadress Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipping_mail_type_code', 'Frakt Mail kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipping_mail_type_id', 'Frakt Mail Type Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipping_mail_type_name', 'Frakt Mail Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipping_package_shape_code', 'Frakt Paket Shape kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipping_package_shape_id', 'Frakt Paket Shape Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'shipping_package_shape_name', 'Frakt Paket Shape Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'slab_name', 'Slab Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sst_number', 'State omsättningsskatt Number');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'starts_from', 'startar från');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'state', 'Status');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'state_code', 'statskoden');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'state_id', 'State Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'state_name', 'State Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'state_sales_tax', 'Statliga moms');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'state_sales_tax_code', 'State Sales skattelagen');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'state_sales_tax_id', 'State omsättningsskatt Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'state_sales_tax_name', 'State omsättningsskatt Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'statement_reference', 'Uttalande Referens');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'stock_details_unit_chk', 'Ogiltig enhet tillhandahålls.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'store', 'Affär');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'store_code', 'Affär kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'store_id', 'Store Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'store_name', 'Affär Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'store_type', 'Store Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'store_type_code', 'Affär kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'store_type_id', 'Store Typ Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'store_type_name', 'Store Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'stores_default_cash_account_id_chk', 'Välj ett giltigt Kontanter eller bankkonto Identifier.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'stores_sales_tax_id_chk', 'Den valda SalesTax Identifier är ogiltig för detta ämbete.');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'street', 'gata');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sub_total', 'Delsumma');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'sys_type', 'Systemtyp');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax', 'skatt');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_authority_code', 'Skatteverket kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_authority_id', 'Skatteverket Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_authority_name', 'Skatteverket Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_base_amount', 'Skatt basbelopp');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_base_amount_type_code', 'Skatt basbelopp kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_base_amount_type_name', 'Skatt basbelopp Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_code', 'skattelagen');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_exempt_type', 'Skattefri Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_exempt_type_code', 'Skattefri kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_exempt_type_id', 'Skattefri Typ Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_exempt_type_name', 'Skattefri Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_id', 'Skatte Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_master', 'Skatte ledar-');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_master_code', 'Skatt Mästare kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_master_id', 'Tax ledar- Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_master_name', 'Skatte master Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_name', 'Skatte Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_rate_type', 'Skattesats Typ');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_rate_type_code', 'Skattesats kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_rate_type_name', 'Skattesats Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_type_code', 'Skatte kod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_type_id', 'Skatte Typ Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tax_type_name', 'Skatte Typ Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'to_days', 'till Dagar');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'total', 'Totalt');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'total_duration', 'total varaktighet');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'total_sales', 'Total försäljning');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tran_code', 'transaktionskod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'tran_type', 'transaktionskod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'unit', 'Enhet');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'unit_code', 'Enhetskod');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'unit_id', 'Enhet Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'unit_name', 'Enhet Namn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'url', 'Universal Resource Locator');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'use_tax_collecting_account', 'Använd Skatt Samla konto');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'use_tax_collecting_account_id', 'Använd Skatt Samla Account Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'user_id', 'Användar Identifier');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'user_name', 'Användarnamn');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'vacuum_count', 'Vakuum Count');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'valid_from', 'gäller Från');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'valid_till', 'gäller Till');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'value', 'Värde');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'value_date', 'värde Datum');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'verify_gl_transactions', 'Verifiera huvudboks Transaktioner');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'verify_purchase_transactions', 'Verifiera köptransaktioner');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'verify_sales_transactions', 'Verifiera Försäljningstransaktioner');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'weight_in_grams', 'Vikt i gram');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'width_in_centimeters', 'Bredd i centimeter');
    PERFORM localization.add_localized_resource('ScrudResource', 'sv', 'zip_code', 'postnummer');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'Select', '选择');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'account', '帐户');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'account_id', '帐户标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'account_master', '科目主');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'account_master_code', '帐户主码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'account_master_id', '科目主标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'account_master_name', '账户名硕士');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'account_name', '帐户名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'account_number', '帐号');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'address', '地址');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'address_line_1', '地址线 1');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'address_line_2', '地址线 2');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'ageing_slab_id', '老龄板标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'ageing_slab_name', '老龄板名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'allow_credit', '允许信用');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'allow_sales', '允许销售');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'allow_transaction_posting', '允许交易发布');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'amount', '量');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'amount_from', '从量');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'amount_to', '量');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'analyze_count', '分析计数');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'api_access_policy_id', 'API访问策略ID');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'api_access_policy_uix', '重复条目的API访问策略');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'applied_on_shipping_charge', '适用于运费');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'audit_ts', '审计时间戳');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'audit_user_id', '审计用户标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'auto_trigger_on_sales', '自动触发销售');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'autoanalyze_count', '自动计数分析');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'autovacuum_count', '伯爵自动清理');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'background_color', '背景颜色');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'balance', '平衡');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bank_account_number', '银行帐号');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bank_account_type', '银行账户类型');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bank_accounts_account_id_chk', '所选择的项目是不是一个有效的银行帐户。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bank_accounts_pkey', '重复的银行帐户。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bank_address', '银行地址');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bank_branch', '银行分行');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bank_contact_number', '银行联系电话');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bank_name', '银行名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'base_unit_id', '基本单元标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'base_unit_name', '基本单位名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'based_on_shipping_address', '根据送货地址');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bonus_rate', '红利');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bonus_slab_code', '奖励板代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bonus_slab_detail_id', '奖励板详细标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bonus_slab_details_amounts_chk', '现场“数要”必须大于“从量”。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bonus_slab_id', '责任板坯标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'bonus_slab_name', '奖励板名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'book', '书');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'brand', '牌');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'brand_code', '品牌代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'brand_id', '品牌标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'brand_name', '商标名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'can_change_password', '可以更改密码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'can_self_verify', '自可以验证');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'can_verify_gl_transactions', '可以确认总帐交易');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'can_verify_purchase_transactions', '可以确认购买交易');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'can_verify_sales_transactions', '可以确认销售交易');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'card_type_code', '卡类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'card_type_id', '卡类型标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'card_type_name', '卡类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_flow_heading', '现金流标题');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_flow_heading_cash_flow_heading_type_chk', '无效的现金流标题类型。允许值：O，I，F。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_flow_heading_code', '现金流标题代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_flow_heading_id', '现金流标题标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_flow_heading_name', '现金流标题名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_flow_heading_type', '现金流标题类型');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_flow_master_code', '现金流主码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_flow_master_id', '现金流主标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_flow_master_name', '现金流主姓名');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_flow_setup_id', '现金流设置标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_repositories_cash_repository_code_uix', '重复的现金库代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_repositories_cash_repository_name_uix', '重复的现金库名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_repository', '现金库');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_repository_code', '现金库代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_repository_id', '现金库标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cash_repository_name', '现金库名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cell', '细胞');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'charge_interest', '收取利息');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'check_nexus', '检查的Nexus');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'checking_frequency', '检查频率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'checking_frequency_id', '检查频率标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'city', '城市');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'collecting_account', '收集帐户');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'collecting_account_id', '收集客户标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'collecting_tax_authority', '征收税务机关');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'collecting_tax_authority_id', '征收税务机关标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'commision_rate', '佣金率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'commission_rate', '佣金率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'company_name', '公司名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compare_unit_id', '比较单元标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compare_unit_name', '比较单元名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compound_item', '复合项目');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compound_item_code', '复合项目代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compound_item_detail_id', '复方项目详细信息标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compound_item_details_unit_chk', '无效的单位提供的');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compound_item_id', '复合项目标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compound_item_name', '复合项目名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compound_unit_id', '复合单元标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compound_units_chk', '基本单元标识符不能相同，比较单元标识。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'compounding_frequency', '复利频率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'confidential', '机密');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_address_line_1', '联系地址1号线');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_address_line_2', '联系地址2号线');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_cell', '联系方式细胞');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_city', '联系市');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_country', '联系国家');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_email', '联系人电子邮件');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_number', '联系电话');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_person', '联络人');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_phone', '联系电话');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_po_box', '联系邮政信箱');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_state', '联系国家');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'contact_street', '联系街');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cost_center_code', '成本中心代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cost_center_id', '成本中心标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cost_center_name', '成本中心名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cost_of_goods_sold_account_id', '成本销货帐户标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cost_price', '成本价');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cost_price_includes_tax', '成本价格含税');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'counter_code', '计数器代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'counter_id', '计数器标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'counter_name', '计数器名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'country', '国家');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'country_code', '国家代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'country_id', '国家标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'country_name', '国家名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'county', '县');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'county_code', '县代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'county_id', '县标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'county_name', '县名');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'county_sales_tax', '县销售税');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'county_sales_tax_code', '县销售税代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'county_sales_tax_id', '县销售税标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'county_sales_tax_name', '县销售税名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'credit', '信贷');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'cst_number', '中央销售税号码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'currency', '货币');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'currency_code', '货币代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'currency_name', '货币名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'currency_symbol', '货币符号');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'customer_pays_fee', '客户交费');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'date_of_birth', '出生日期');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'debit', '借方');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'default_cash_account_id', '默认现金帐户标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'default_cash_repository_id', '默认的现金库标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'department_code', '部门代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'department_id', '部门标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'department_name', '部门名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'description', '描述');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'discount', '折扣');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'due_days', '由于天');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'due_frequency', '由于频率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'due_frequency_id', '由于频率标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'due_on_date', '到期日');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'effective_from', '从有效');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'elevated', '提高的');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'email', '电子邮件');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'ends_on', '结束在');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'entity_id', '实体标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'entity_name', '实体名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'entry_ts', '进入时间戳');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'er', '汇率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'exclude_from_purchase', '排除购买');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'exclude_from_sales', '排除销售');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'external_code', '外部代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'factory_address', '工厂地址');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'fax', '传真');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'first_name', '名字');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'fiscal_year_code', '财年代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'fiscal_year_name', '会计年度名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'flag_id', '标志标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'flag_type_id', '旗型标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'flag_type_name', '旗型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'flagged_on', '标记在');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'foreground_color', '前景色');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'frequency_code', '频率代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'frequency_id', '频率标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'frequency_name', '频率名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'frequency_setup_code', '频率设置代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'frequency_setup_id', '频率设置标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'from_days', '从天');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'full_name', '全名');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'gl_head', '总帐头');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'gl_verification_limit', '总帐验证限制');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'grace_period', '宽限期');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'has_child', '有子');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'height_in_centimeters', '身高以厘米为单位');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'hot_item', '热门货');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'http_action_code', 'HTTP操作代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'hundredth_name', '百名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'id', '登录');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'includes_tax', '包括税');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'income_tax_rate', '所得税率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'industry_id', '行业标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'industry_name', '行业名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'interest_compounding_frequency_id', '复利频率标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'interest_rate', '利率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'inventory_account_id', '库存帐户标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_active', '为主动');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_added', '添加');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_admin', '为管理员');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_cash', '为现金');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_debit', '是借记卡');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_employee', '是员工');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_exempt', '可免缴');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_exemption', '是豁免');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_flat_amount', '是平量');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_merchant_account', '是商家帐户');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_party', '是党');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_purchase', '是购买');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_rectangular', '是矩形');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_sales', '是销售');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_summary', '为总结');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_supplier', '是供应商');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_system', '是系统');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_transaction_node', '是交易节点');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'is_vat', '为增值税');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item', '项目');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_code', '产品编号');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_cost_price_id', '统成本价格标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_cost_prices_unit_chk', '提供单位无效');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_group', '项目组');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_group_code', '项目组代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_group_id', '项目组标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_group_name', '项目组名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_id', '项目标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_name', '项目名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_opening_inventory_unit_chk', '提供单位无效');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_selling_price_id', '项目售价标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_selling_prices_unit_chk', '无效的单位提供的。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_type_code', '项目类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_type_id', '项目类型标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'item_type_name', '项目类型名称。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'items_item_code_uix', '重复的项目代码。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'items_item_name_uix', '重复的项目名称。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'items_reorder_quantity_chk', '重排序量必须是大于或等于重新排序等级。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'last_analyze', '最后在分析');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'last_autoanalyze', '最后自动分析有关');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'last_autovacuum', '最后自动清理在');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'last_name', '姓');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'last_vacuum', '最后在真空');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'late_fee', '滞纳金');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'late_fee_code', '滞纳金代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'late_fee_id', '滞纳金标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'late_fee_name', '滞纳金名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'late_fee_posting_frequency', '滞纳金发布频率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'late_fee_posting_frequency_id', '滞纳金发帖频率标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'lc_credit', '信用信用证');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'lc_debit', '信用卡借记信');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'lead_source_code', '导致源代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'lead_source_id', '铅源标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'lead_source_name', '铅源名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'lead_status_code', '铅状态代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'lead_status_id', '铅状态标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'lead_status_name', '铅状态名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'lead_time_in_days', '交货时间在天');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'length_in_centimeters', '长度以厘米为单位');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'machinable', '可加工');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'maintain_stock', '维持股票');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'maintained_by_user_id', '维护的用户标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'maximum_credit_amount', '最高信用额');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'maximum_credit_period', '最高优惠期');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'merchant_account_id', '商家帐户标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'merchant_fee_setup_id', '商户手续费设置标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'middle_name', '中间名字');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'nick_name', '昵称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'non_gl_stock_details_unit_chk', '无效的单位提供的。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'normally_debit', '通常借记');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'office', '办公室');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'office_code', '办公代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'office_id', '办公室标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'office_name', '办事处名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'opportunity_stage_code', '机会阶段代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'opportunity_stage_id', '机会阶段标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'opportunity_stage_name', '机会阶段名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'pan_number', '潘号码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent', '亲');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_account_id', '父帐户标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_account_master_id', '父科目主标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_account_name', '父帐户名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_account_number', '家长帐号');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_cash_flow_heading_id', '母公司现金流标题标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_cash_repository', '家长现金库');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_cash_repository_id', '母公司现金库标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_cr_code', '家长的现金库的代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_cr_name', '家长的现金库的名字');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_industry_id', '父业标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_industry_name', '家长行业名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_item_group_id', '父项目组标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_office', '家长办');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'parent_office_id', '家长办标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'party', '党');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'party_code', '党码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'party_id', '党的标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'party_name', '党的名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'party_type', '党的类型');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'party_type_code', '党类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'party_type_id', '党的类型标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'party_type_name', '党的类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'password', '密码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'payment_card_code', '支付卡代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'payment_card_id', '支付卡标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'payment_card_name', '支付卡名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'payment_term', '付款期限');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'payment_term_code', '付款条款代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'payment_term_id', '付款期限标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'payment_term_name', '付款方式名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'phone', '电话');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'po_box', '邮政信箱');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'poco_type_name', 'POCO类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'policy_id', '策略标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'preferred_shipping_mail_type', '优先运送邮件类型');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'preferred_shipping_mail_type_id', '优先运送邮件类型标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'preferred_shipping_package_shape', '首选的运输包装形状');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'preferred_supplier', '首选供应商');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'preferred_supplier_id', '首选供应商标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'price', '价格');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'price_from', '价格从');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'price_to', '价格');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'price_type_code', '价格类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'price_type_id', '价格类型标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'price_type_name', '价格类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'priority', '优先');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'purchase_account_id', '购买帐户标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'purchase_discount_account_id', '购买折扣科目标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'purchase_verification_limit', '购买限价验证');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'quantity', '数量');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'rate', '率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurrence_type_id', '复发类型标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurring_amount', '经常性金额');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurring_duration', '反复出现的持续时间');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurring_frequency', '反复出现的频率');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurring_frequency_id', '反复出现的频率标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurring_invoice', '经常性发票');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurring_invoice_code', '经常性发票代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurring_invoice_id', '经常性发票标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurring_invoice_name', '经常性发票名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurring_invoice_setup_id', '经常性发票设置标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurring_invoices_item_id_auto_trigger_on_sales_uix', '你不能对销售这个项目不止一个自动触发。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'recurs_on_same_calendar_date', '复发的同一个日历日期');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'registration_date', '注册日期');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'registration_number', '注册号');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'relationship_officer_name', '关系官名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'relname', '关系名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'reorder_level', '重新排序级别');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'reorder_quantity', '再订购数量');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'reorder_unit', '重排部');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'reorder_unit_id', '重新排序单元标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'reporting_tax_authority', '报告税务机关');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'reporting_tax_authority_id', '报告税务机关标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'repository', '知识库');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'resource', '资源');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'resource_id', '资源标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'resource_key', '主要资源');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'role_code', '角色代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'role_id', '角色标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'role_name', '角色名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'rounding_decimal_places', '舍去小数位数');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'rounding_method', '四舍五入方法');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'rounding_method_code', '四舍五入方法代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'rounding_method_name', '四舍五入方法名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_account_id', '销售账户标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_discount_account_id', '销售折扣帐户标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_return_account_id', '销售退货账户标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax', '营业税');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_code', '销售税代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_detail_code', '营业税详细信息代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_detail_id', '营业税详细标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_detail_name', '营业税详细名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_details_rate_chk', '利率不应该是空的，除非你选择州或县税。同样的，你不能同时提供速度和选择有州或县税。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_exempt', '销售税豁免');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_exempt_code', '销售免税代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_exempt_detail_id', '销售税豁免详细标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_exempt_id', '销售免税标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_exempt_name', '销售免税名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_exempts_price_to_chk', '本场“价格从”必须小于“以价。”');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_id', '销售税标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_name', '销售税名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_type', '销售税类型');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_type_code', '销售税类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_type_id', '销售税类型标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_tax_type_name', '销售税类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_team_code', '销售团队代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_team_id', '销售团队标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_team_name', '销售团队名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sales_verification_limit', '销售限价验证');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'salesperson_bonus_setup_id', '销售人员奖金设置标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'salesperson_code', '营业员守则');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'salesperson_id', '销售人员标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'salesperson_name', '营业员姓名');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'self_verification_limit', '自我验证限制');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'selling_price', '售价');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'selling_price_includes_tax', '售价含税');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipper_code', '托运人代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipper_id', '发件人标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipper_name', '托运人名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipping_address_code', '送货地址码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipping_address_id', '送货地址标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipping_mail_type_code', '运送邮件类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipping_mail_type_id', '运送邮件类型标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipping_mail_type_name', '运送邮件类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipping_package_shape_code', '运输包装形状代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipping_package_shape_id', '运输包装形状标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'shipping_package_shape_name', '运输包装形状名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'slab_name', '平板名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sst_number', '精干的销售税号');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'starts_from', '从开始');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'state', '状态');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'state_code', '国家代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'state_id', '国家标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'state_name', '国家名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'state_sales_tax', '州销售税');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'state_sales_tax_code', '州销售税代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'state_sales_tax_id', '州销售税标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'state_sales_tax_name', '州销售税名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'statement_reference', '声明参考');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'stock_details_unit_chk', '无效的单位提供的。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'store', '店');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'store_code', '店内码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'store_id', '商店标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'store_name', '店铺名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'store_type', '商铺类型');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'store_type_code', '存储类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'store_type_id', '存储类型标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'store_type_name', '商铺类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'stores_default_cash_account_id_chk', '请选择一个有效的现金或银行账户标识符。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'stores_sales_tax_id_chk', '所选择的销售税标识是这个办公室无效。');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'street', '街头');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sub_total', '小计');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'sys_type', '系统类型');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax', '税');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_authority_code', '税务机关代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_authority_id', '税务机关标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_authority_name', '税务机关名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_base_amount', '税基金额');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_base_amount_type_code', '税基金额类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_base_amount_type_name', '税基金额类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_code', '税法');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_exempt_type', '免税类型');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_exempt_type_code', '免税类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_exempt_type_id', '斧头豁免类型标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_exempt_type_name', '免税类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_id', '税收标识');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_master', '税务硕士');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_master_code', '税务主码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_master_id', '税务硕士标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_master_name', '税务硕士名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_name', '税务名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_rate_type', '税率类型');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_rate_type_code', '税率类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_rate_type_name', '税率类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_type_code', '税收类型代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_type_id', '税务类型标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tax_type_name', '税收类型名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'to_days', '以天');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'total', '总');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'total_duration', '总工期');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'total_sales', '销售总额');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tran_code', '事务代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'tran_type', '交易类型');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'unit', '单元');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'unit_code', '单位代码');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'unit_id', '单位标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'unit_name', '单位名称');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'url', '统一资源定位符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'use_tax_collecting_account', '使用税征收账户');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'use_tax_collecting_account_id', '使用税征收账户标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'user_id', '用户标识符');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'user_name', '用户名');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'vacuum_count', '真空计');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'valid_from', '有效期自');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'valid_till', '有效期至');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'value', '值');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'value_date', '起息日');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'verify_gl_transactions', '验证总帐交易');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'verify_purchase_transactions', '确认购买交易');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'verify_sales_transactions', '确认销售交易');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'weight_in_grams', '重量以克');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'width_in_centimeters', '宽以厘米为单位');
    PERFORM localization.add_localized_resource('ScrudResource', 'zh', 'zip_code', '邮政编码');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AboutInitializingDayEnd', 'Over initialiseren dag einde');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AboutYourOffice', 'Über Ihr Büro');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Access', 'Zugriff');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AccessIsDenied', 'Zugriff wird verweigert.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Account', 'Konto');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AccountId', 'Konto-ID');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AccountMaster', 'Konto Meister');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AccountName', 'Kontobezeichnung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AccountNumber', 'Kontonummer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AccountOverview', 'Kontoübersicht');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AccountStatement', 'Kontoauszug');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Action', 'Aktion');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Actions', 'Aktionen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Actual', 'aktuell');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Add', 'hinzufügen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AddNew', 'Neu hinzufügen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Address', 'Anschrift');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AddressAndContactInfo', 'Adresse und Kontaktinformationen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AgeingSlabs', 'Ageing Brammen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AgentBonusSlabAssignment', 'Bonus Slab Zuordnung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AgentBonusSlabs', 'Bonus Bramme für Aussendienst');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Alerts', 'Benachrichtigungen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Amount', 'Höhe');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AmountInBaseCurrency', 'Betrag (in Basiswährung)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AmountInHomeCurrency', 'Betrag (in der nationalen Währung)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AnalyzeDatabse', 'analysieren Datenbank');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Approve', 'genehmigen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ApproveThisTransaction', 'Genehmigen dieser Transaktion');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ApprovedTransactions', 'genehmigte Transaktionen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AreYouSure', 'Sind Sie sicher, Sie wissen, was du tust?');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AssignCashier', 'Vergeben Kassierer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AttachmentsPlus', 'Anhänge (+)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AutoVerificationPolicy', 'Automatische Überprüfung Politik');
    PERFORM localization.add_localized_resource('Titles', 'de', 'AutomaticallyApprovedByWorkflow', 'Automatisch von Workflow-Zugelassen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Back', 'Der Rücken');
    PERFORM localization.add_localized_resource('Titles', 'de', 'BackToPreviousPage', 'Zurück zur Ausgangsseite');
    PERFORM localization.add_localized_resource('Titles', 'de', 'BackupConsole', 'Backup-Konsole');
    PERFORM localization.add_localized_resource('Titles', 'de', 'BackupDatabase', 'Datenbank sichern');
    PERFORM localization.add_localized_resource('Titles', 'de', 'BackupNow', 'Jetzt sichern');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Balance', 'Balance');
    PERFORM localization.add_localized_resource('Titles', 'de', 'BalanceSheet', 'Bilanz');
    PERFORM localization.add_localized_resource('Titles', 'de', 'BankAccounts', 'Bankkonten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'BankTransactionCode', 'Banktransaktionscode');
    PERFORM localization.add_localized_resource('Titles', 'de', 'BaseCurrency', 'Basiswährung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'BaseUnitName', 'Base Unit-Name');
    PERFORM localization.add_localized_resource('Titles', 'de', 'BonusSlabDetails', 'Bonus Slab Details Aussendienst');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Book', 'Buch');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Brand', 'Marke');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Brands', 'Marke');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Browse', 'blättern');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CSTNumber', 'CST Anzahl');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Cancel', 'Rückgängig Machen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CashFlowHeading', 'Cash Flow Überschrift');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CashFlowHeadings', 'Cash Flow Überschrift');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CashFlowSetup', 'Cash Flow-Setup');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CashRepositories', 'Barzahlung Repositories');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CashRepository', 'Barzahlung Repository');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CashRepositoryBalance', 'Barzahlung Repository Abgleich');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CashTransaction', 'Geldtransaktions');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ChangePassword', 'Passwort Ändern');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ChangeSideWhenNegative', 'Ändern Side Wenn Negative');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ChartOfAccounts', 'Kontenplan');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Check', 'Kreuze An');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CheckAll', 'alle auswählen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Checklists', 'Checklisten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Clear', 'klar');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Close', 'Zu Schließen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ClosedTransactions', 'geschlossen Transaktionen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ClosingBalance', 'Endbestand');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ClosingCredit', 'Schließen Kredit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ClosingDebit', 'Schließen Debit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Comment', 'Kommentar');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CompoundItemDetails', 'Verbindung Einzelteil-Details');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CompoundItems', 'Compound Artikel');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CompoundUnitsOfMeasure', 'Verbindung Maßeinheiten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Confidential', 'vertraulich');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ConfirmPassword', 'Passwort Bestätigen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ConvertedtoBaseCurrency', 'Umgerechnet auf Basiswährung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ConvertedtoHomeCurrency', 'Umgerechnet auf Startseite Umrechnung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CostCenter', 'Kostenstelle');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CostCenters', 'Kostenstellen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Counters', 'Zähler');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Counties', 'Grafschaften');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Countries', 'Die Länder');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CountySalesTaxes', 'Grafschaft Verkaufssteuern');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CreateaUserAccountforYourself', 'Erstellen Sie ein Benutzerkonto für sich selbst');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CreatedOn', 'Erstellt Am');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Credit', 'Kredit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CreditAllowed', 'Kredit erlaubt');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CreditTotal', 'Credit Gesamt');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Currencies', 'Währungen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Currency', 'Währung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CurrencyCode', 'Währungscode');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CurrencyName', 'Währungsbezeichnung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CurrencySymbol', 'Währungssymbol');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CurrentIP', 'aktuelle IP-');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CurrentLoginOn', 'Aktuelle Anmelden On');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CurrentPassword', 'Aktuelles Passwort');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CurrentPeriod', 'Aktueller Zeitraum');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CustomerCode', 'Kundencode');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CustomerName', 'Kundenname');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CustomerPanNumber', 'Kunden PAN #');
    PERFORM localization.add_localized_resource('Titles', 'de', 'CustomerPaysFees', 'Kunde zahlt Gebühren');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DatabaseBackups', 'Datenbanksicherungen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DatabaseStatistics', 'Datenbankstatistik');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Date', 'Datum');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Days', 'Tage');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Debit', 'Soll');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DebitTotal', 'Debitgesamt');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DefaultAddress', 'Standardadresse');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DefaultCurrency', 'Standardwährung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DefaultReorderQuantityAbbreviated', 'Standard Reorder Menge');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Definition', 'Definition');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Delete', 'verwijderen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DeleteSelected', 'Ausgewählte löschen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DeliverTo', 'Sende an');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Department', 'Abteilung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Departments', 'Abteilungen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Difference', 'Unterschied');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DirectPurchase', 'Direktkauf');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DirectSales', 'Der Direktvertrieb');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Discount', 'Rabatt');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Documentation', 'Dokumentation');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Download', 'Download');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DownloadSourceCode', 'Quellcode-Code');
    PERFORM localization.add_localized_resource('Titles', 'de', 'DueDate', 'Due Date');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EODConsole', 'Einde van de dag console');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ER', 'Wechselkurs');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ERToBaseCurrency', 'Wechselkurs (zu Basiswährung)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ERToHomeCurrency', 'Wechselkurs (To Home Währung)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EditSelected', 'Ausgewählte bearbeiten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Email', 'E-Mail');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EmailAddress', 'E-Mail-Addresse');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EmailThisDelivery', 'Email This Lieferung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EmailThisInvoice', 'Email This Rechnung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EmailThisNote', 'Email Hinweis');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EmailThisOrder', 'Email Bestellung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EmailThisQuotation', 'E-Mail an dieses Zitat');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EmailThisReceipt', 'Mailen Receipt');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EmailThisReturn', 'Mail zurückkehren');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EndOfDayOperation', 'Einde van de dag Operatie');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EnterBackupName', 'Geben Sie Sicherungsname');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EnterNewPassword', 'Neues Passwort eingeben');
    PERFORM localization.add_localized_resource('Titles', 'de', 'EnteredBy', 'eingetragen von');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Entities', 'Entities');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ExchangeRate', 'Wechselkurs');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Execute', 'ausführen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ExternalCode', 'Externe-Code');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Factor', 'Faktor');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Fax', 'Fax');
    PERFORM localization.add_localized_resource('Titles', 'de', 'FilePath', 'Dateipfad');
    PERFORM localization.add_localized_resource('Titles', 'de', 'FinalDueAmountinBaseCurrency', 'Schluss Aufgrund Betrag in Basiswährung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'FirstPage', 'erste Seite');
    PERFORM localization.add_localized_resource('Titles', 'de', 'FiscalYear', 'Geschäftsjahr');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Flag', 'Flagge');
    PERFORM localization.add_localized_resource('Titles', 'de', 'FlagBackgroundColor', 'Flag Hintergrundfarbe');
    PERFORM localization.add_localized_resource('Titles', 'de', 'FlagDescription', 'Sie können diese Transaktion mit einem Flag markieren, aber Sie werden nicht in der Lage, die Flaggen von anderen Benutzern zu sehen.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'FlagForegroundColor', 'Flag Vordergrundfarbe');
    PERFORM localization.add_localized_resource('Titles', 'de', 'FlagThisTransaction', 'Dieses Transaktions');
    PERFORM localization.add_localized_resource('Titles', 'de', 'FlaggedTransactions', 'Gemeldet Transaktionen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Flags', 'Flaggen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Frequencies', 'Frequenzen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'From', 'von');
    PERFORM localization.add_localized_resource('Titles', 'de', 'GLAdvice', 'Hauptbuchhaltung Beratung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'GLDetails', 'Hauptbuch Details');
    PERFORM localization.add_localized_resource('Titles', 'de', 'GLHead', 'GL');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Go', 'gehen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'GoToTop', 'zurück nach oben');
    PERFORM localization.add_localized_resource('Titles', 'de', 'GoodsReceiptNote', 'Wareneingang Hinweis');
    PERFORM localization.add_localized_resource('Titles', 'de', 'GrandTotal', 'Gesamtsumme');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Home', 'Nach Hause');
    PERFORM localization.add_localized_resource('Titles', 'de', 'HomeCurrency', 'Startseite Umrechnung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'HundredthName', 'hundertsten Namen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Id', 'Identifikation');
    PERFORM localization.add_localized_resource('Titles', 'de', 'InVerificationStack', 'In Verification Stapel');
    PERFORM localization.add_localized_resource('Titles', 'de', 'IncludeZeroBalanceAccounts', 'Fügen Nullsaldo Konten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Industries', 'Branchen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'InitializeDayEnd', 'Initialiseren dag einde');
    PERFORM localization.add_localized_resource('Titles', 'de', 'InstallMixERP', 'Installieren MixERP');
    PERFORM localization.add_localized_resource('Titles', 'de', 'InstrumentCode', 'Instrument-Code');
    PERFORM localization.add_localized_resource('Titles', 'de', 'InterestApplicable', 'Zins Anwendbar');
    PERFORM localization.add_localized_resource('Titles', 'de', 'InvalidDate', 'Dies ist kein gültiges Datum aus.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'InvalidImage', 'Dies ist kein gültiges Bild.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'InventoryAdvice', 'Inventar Beratung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'InvoiceAmount', 'Rechnungsbetrag');
    PERFORM localization.add_localized_resource('Titles', 'de', 'InvoiceDetails', 'Rechnungsdetails');
    PERFORM localization.add_localized_resource('Titles', 'de', 'IsCash', 'ist Barzahlung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'IsEmployee', 'ist der Mitarbeiter');
    PERFORM localization.add_localized_resource('Titles', 'de', 'IsParty', 'ist Partei');
    PERFORM localization.add_localized_resource('Titles', 'de', 'IsSystemAccount', 'Ist Systemkonto');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemCode', 'Item Code');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemCostPrices', 'Artikelkosten Preise');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemGroup', 'Artikelgruppe');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemGroups', 'Artikelgruppen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemId', 'Artikel-Nummer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemName', 'Artikelname');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemOverview', 'Artikelübersicht');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemSellingPrices', 'Artikel Verkaufs Preise');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemType', 'Produkttyp');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemTypes', 'Elementtypen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Items', 'Angebote');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ItemsBelowReorderLevel', 'Artikel Unten Meldebestand');
    PERFORM localization.add_localized_resource('Titles', 'de', 'JournalVoucher', 'Journal Gutschein');
    PERFORM localization.add_localized_resource('Titles', 'de', 'JournalVoucherEntry', 'Journal Gutschein...');
    PERFORM localization.add_localized_resource('Titles', 'de', 'KeyColumnEmptyExceptionMessage', 'Die Eigenschaft "KeyColumn ''kann nicht leer bleiben.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LCCredit', 'Akkreditiv Kredit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LCDebit', 'Akkreditiv Debit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LastAccessedOn', 'Datum des letzten Zugriffs');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LastLoginIP', 'Letzte Anmeldung IP');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LastLoginOn', 'Letzte Anmeldung On');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LastPage', 'Letzte Seite');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LastPaymentDate', 'Letzte Auszahlung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LastWrittenOn', 'Zuletzt geschrieben auf');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LateFees', 'Späte Gebühren');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LeadSources', 'Lead-Quellen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LeadStatuses', 'Lead-Status');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LeadTime', 'Vorlaufzeit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ListItems', 'Listenelemente');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Load', 'Last');
    PERFORM localization.add_localized_resource('Titles', 'de', 'LoggedInTo', 'Angemeldete Um');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ManageProfile', 'Profil verwalten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MaximumCreditAmount', 'Maximaler Kreditbetrag');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MaximumCreditPeriod', 'Maximale Kreditlaufzeit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MenuAccessPolicy', 'Menü-Richtlinien');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MenuCode', 'Menü-Code');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MenuId', 'MenüIdentifier');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MenuText', 'Menütext');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MerchantFeeInPercent', 'Händlergebühr (in Prozent)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MerchantFeeSetup', 'Händler Fee-Setup');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MergeBatchToGRN', 'Zusammenführen von Batch zu Wareneingang Hinweis');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MergeBatchToSalesDelivery', 'Zusammenführen von Batch zu Vertriebsliefer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MergeBatchToSalesOrder', 'Zusammenführen von Batch auf Kundenauftrag');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MixERPDocumentation', 'MixERP Dokumentation');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MixERPLinks', 'MixERP-Links');
    PERFORM localization.add_localized_resource('Titles', 'de', 'MixERPOnFacebook', 'MixERP auf Facebook');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Name', 'Name');
    PERFORM localization.add_localized_resource('Titles', 'de', 'NewJournalEntry', 'Neuer Journaleintrag');
    PERFORM localization.add_localized_resource('Titles', 'de', 'NewPassword', 'neues Passwort');
    PERFORM localization.add_localized_resource('Titles', 'de', 'NextPage', 'Nächste Seite');
    PERFORM localization.add_localized_resource('Titles', 'de', 'No', 'keine');
    PERFORM localization.add_localized_resource('Titles', 'de', 'NonTaxableSales', 'Nontaxable Vertrieb');
    PERFORM localization.add_localized_resource('Titles', 'de', 'None', 'Die Sonne Geht Auf');
    PERFORM localization.add_localized_resource('Titles', 'de', 'NormallyDebit', 'Normalerweise Debit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'NothingSelected', 'Nichts ausgewählt.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Notifications', 'Benachrichtigungen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'OK', 'OK');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Office', 'Büro');
    PERFORM localization.add_localized_resource('Titles', 'de', 'OfficeCode', 'Büro-Code');
    PERFORM localization.add_localized_resource('Titles', 'de', 'OfficeInformation', 'Office Information');
    PERFORM localization.add_localized_resource('Titles', 'de', 'OfficeName', 'Büroname');
    PERFORM localization.add_localized_resource('Titles', 'de', 'OfficeNickName', 'Office-Nickname');
    PERFORM localization.add_localized_resource('Titles', 'de', 'OfficeSetup', 'Büro Einrichtung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'OnlyNumbersAllowed', 'Bitte geben Sie eine gültige Zahl.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'OpeningInventory', 'Öffnungs Inventar');
    PERFORM localization.add_localized_resource('Titles', 'de', 'OpportunityStages', 'Gelegenheit Stufen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'OtherDetails', 'Weitere Einzelheiten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PANNumber', 'PAN Nummer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PageN', 'Seite {0}');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ParentAccount', 'Hauptkonto');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Parties', 'Parteien');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Party', 'Partei');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PartyCode', 'Partei-Code');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PartyName', 'Name der Partei');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PartySummary', 'Partei Zusammenfassung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PartyType', 'Party-Typ');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PartyTypes', 'Partei-Typen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Password', 'Passwort');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PasswordUpdated', 'Kennwort wurde aktualisiert.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PaymentCards', 'Zahlungskarten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PaymentTerms', 'Zahlungsbedingungen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PerformEODOperation', 'Voeren Einde Dag Operatie');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PerformingEODOperation', 'Uitvoeren Einde Dag Operatie');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Phone', 'Telefon');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PlaceReorderRequests', 'Zeigen Reorder Anfragen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PostTransaction', 'Beitrag Transaktions');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PostedBy', 'Erstellt von');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PostedDate', 'geschrieben am:');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PreferredSupplier', 'Bevorzugter Lieferant');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PreferredSupplierIdAbbreviated', 'Bevorzugter Lieferant Kennung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Prepare', 'bereiten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PreparedOn', 'vorbereitet auf');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Preview', 'Vorschau');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PreviousBalance', 'Vorherige Abgleich');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PreviousCredit', 'Vorherige Kredit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PreviousDebit', 'Vorherige Debit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PreviousPage', 'Vorherige Seite');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PreviousPeriod', 'Vorperiode');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Price', 'Preis');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PriceType', 'Preis Art');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Print', 'drucken');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PrintGlEntry', 'drucken Hauptbucheintrag');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PrintReceipt', 'Quittung drucken');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ProfitAndLossStatement', 'Gewinn- und Verlustrechnung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Progress', 'Fortschritt');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PurchaseInvoice', 'Einkaufsrechnung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PurchaseOrder', 'Auftragsbestätigung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PurchaseReturn', 'Kauf Rückkehr');
    PERFORM localization.add_localized_resource('Titles', 'de', 'PurchaseType', 'Kaufen Haustyp');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Quantity', 'Menge');
    PERFORM localization.add_localized_resource('Titles', 'de', 'QuantityAbbreviated', 'Menge');
    PERFORM localization.add_localized_resource('Titles', 'de', 'QuantityOnHandAbbreviated', 'Menge (auf der Hand)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Rate', 'Preis');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Reason', 'Grund');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Receipt', 'Erhalt');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReceiptAmount', 'Empfang Betrag');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReceiptCurrency', 'Empfang Währungs');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReceiptType', 'Eingang Typ');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReceivedAmountInaboveCurrency', 'Empfangene Menge (In über Währungs)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReceivedCurrency', 'empfangene Währungs');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RecurringInvoiceSetup', 'Wiederkehrende Rechnung einrichten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RecurringInvoices', 'Wiederkehrende Rechnungen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReferenceNumber', 'Referenz-Nr #');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReferenceNumberAbbreviated', 'Referenz-Nr #');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RefererenceNumberAbbreviated', 'Referenz-Nr #');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RegistrationDate', 'Registrierungsdatum');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Reject', 'Ablehnen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RejectThisTransaction', 'Ablehnen dieser Transaktion');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RejectedTransactions', 'Zurückgewiesene Transaktionen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RememberMe', 'mich Erinnern');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReorderLevel', 'Meldebestand');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReorderQuantityAbbreviated', 'Nachbestellung Menge');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReorderUnitName', 'Nachbestellung Einheit Name');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RequiredField', 'Dies ist ein Pflichtfeld.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RequiredFieldDetails', 'Die mit Stern (*) gekennzeichneten Felder sind Pflichtfelder.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Reset', 'rücksetzen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RestrictedTransactionMode', 'Diese Einrichtung erlaubt keine Transaktions Beitrag.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RetainedEarnings', 'Gewinnrücklagen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Return', 'Rückkehr');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ReturnToView', 'Zurück zur Seite anzeigen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Role', 'Rolle');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Roles', 'Rollen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RowNumber', 'Zeilennummer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'RunningTotal', 'Laufende Summe');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SSTNumber', 'SST Anzahl');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesByMonthInThousands', 'Umsätze nach Monat (in Tausend)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesByOfficeInThousands', 'Umsatz nach Geschäftsstelle (in Tausend)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesDelivery', 'Vertrieb Lieferung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesDeliveryNote', 'Lieferschein');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesInvoice', 'Verkaufs Rechnung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesOrder', 'Verkaufs Sortieren');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesPersons', 'Aussendienst');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesQuotation', 'Verkaufsangebot');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesReceipt', 'Kassenbeleg');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesReturn', 'Absatzertrag');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesTaxDetails', 'Umsatzsteuer-Details');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesTaxExemptDetails', 'Umsatzsteuer befreit Einzelheiten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesTaxExempts', 'Umsatzsteuer befreit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesTaxTypes', 'Umsatzsteuerarten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesTaxes', 'Verkäufe Steuern');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesTeams', 'Vertriebsteams');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SalesType', 'Verkaufs-Art');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Salesperson', 'Verkäufer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Save', 'Speichern');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Saving', 'Sparen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Select', 'wählen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectCustomer', 'Wählen Kunden');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectFlag', 'Wählen Sie eine Flagge');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectLanguage', 'Sprache wählen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectOffice', 'Büro Select');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectParty', 'Wählen Partei');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectPaymentCard', 'Wählen Sie die Zahlungskarte');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectStore', 'Wählen Sie Speicher');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectSupplier', 'Wählen Sie Lieferant');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectUnit', 'Wählen Sie die Einheit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectUser', 'Wählen Sie Benutzer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SelectYourBranch', 'Wählen Sie Ihre Branche');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Shipper', 'Absender');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Shippers', 'Verlader');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ShippingAddress', 'Versandadresse');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ShippingAddressMaintenance', 'Versandadresse Wartung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ShippingAddresses', 'Versandadresse');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ShippingCharge', 'Verschiffen-Gebühr');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ShippingCompany', 'Versandunternehmen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Show', 'anzeigen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ShowAll', 'alle anzeigen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ShowCompact', 'Compact anzeigen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SignIn', 'Anmelden');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SignOut', 'Austragen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SigningIn', 'Anmeldung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Start', 'Start');
    PERFORM localization.add_localized_resource('Titles', 'de', 'StateSalesTaxes', 'Bundesstaatlicher Verkaufssteuer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'StatementOfCashFlows', 'Kapitalflussrechnung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'StatementReference', 'Anweisungsreferenz');
    PERFORM localization.add_localized_resource('Titles', 'de', 'States', 'Staaten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Status', 'Status');
    PERFORM localization.add_localized_resource('Titles', 'de', 'StockAdjustment', 'Auf Einstellung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'StockTransaction', 'Auf Transaktions');
    PERFORM localization.add_localized_resource('Titles', 'de', 'StockTransferJournal', 'Umlagerung Blatt');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Store', 'Speicher');
    PERFORM localization.add_localized_resource('Titles', 'de', 'StoreName', 'Shop-Name');
    PERFORM localization.add_localized_resource('Titles', 'de', 'StoreTypes', 'Shop Typen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Stores', 'Shops');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SubTotal', 'Zwischensumme');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SubmitBugs', 'Bugs einreichen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'SupplierName', 'Name des Anbieters');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Support', 'Unterstützung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TableEmptyExceptionMessage', 'Die Eigenschaft "Tabelle" kann nicht leer bleiben.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TableSchemaEmptyExceptionMessage', 'Die Eigenschaft "Table ''kann nicht leer bleiben.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TaskCompletedSuccessfully', 'Die Aufgabe wurde erfolgreich abgeschlossen.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Tax', 'Steuer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TaxAuthorities', 'Steuerbehörden');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TaxExemptTypes', 'Steuerbefreiung Typen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TaxForm', 'Steuererklärung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TaxMaster', 'Steuern Meister');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TaxRate', 'Steuersatz');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TaxSetup', 'Tax-Setup');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TaxTotal', 'MwSt');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TaxTypes', 'Steuerarten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TaxableSales', 'steuerpflichtigen Umsatz');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Tel', 'Telefon');
    PERFORM localization.add_localized_resource('Titles', 'de', 'To', 'bis Zur');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TopSellingProductsOfAllTime', 'Meistverkaufte Produkte aller Zeiten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Total', 'gesamt');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TotalDueAmount', 'Gesamt Restbetrag');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TotalDueAmountCurrentOffice', 'Gesamt Restbetrag (Aktuelle Amt)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TotalDueAmountInBaseCurrency', 'Gesamt Restbetrag (in Basiswährung)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TotalSales', 'Gesamtverkäufe:');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TranCode', 'Transaktionscode');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TranId', 'Transaction-Identifier');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TranIdParameter', 'Transaction-Identifier: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TransactionDate', 'Transaktionsdatum');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TransactionDetails', 'Details der Transaktion');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TransactionStatement', 'Transaktionserklärung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TransactionStatus', 'Transaktionsstatus');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TransactionSummary', 'Transaktionsübersicht');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TransactionTimestamp', 'Transaktionszeitstempel');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TransactionType', 'Transaktionsart');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TransactionValue', 'Transaktionswert');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TransferDetails', 'Überweisung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'TrialBalance', 'Rohbilanz');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Type', 'Art');
    PERFORM localization.add_localized_resource('Titles', 'de', 'UncheckAll', 'Alle deaktivieren');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Undo', 'rückgängig machen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Unit', 'Einheit');
    PERFORM localization.add_localized_resource('Titles', 'de', 'UnitId', 'Einheiten- kennung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'UnitName', 'Einheit Name');
    PERFORM localization.add_localized_resource('Titles', 'de', 'UnitsOfMeasure', 'Maßeinheiten');
    PERFORM localization.add_localized_resource('Titles', 'de', 'UnknownError', 'Operation fehlgeschlagen aufgrund eines unbekannten Fehlers.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Update', 'Aktualisierung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Upload', 'hochladen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'UploadAttachments', 'Anhänge hochladen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'UploadAttachmentsForThisTransaction', 'Anhänge hochladen für diese Transaktion');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Url', 'Uniform Resource Locator');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Use', 'Verwendung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'User', 'Benutzer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'UserId', 'Benutzerkennung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Username', 'Benutzername');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Users', 'Benutzer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'VacuumDatabase', 'Vakuum-Datenbank');
    PERFORM localization.add_localized_resource('Titles', 'de', 'VacuumFullDatabase', 'Vakuum-Datenbank (voll)');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ValueDate', 'Wert Datum');
    PERFORM localization.add_localized_resource('Titles', 'de', 'VerificationReason', 'Überprüfung Begründung');
    PERFORM localization.add_localized_resource('Titles', 'de', 'VerifiedBy', 'indem überprüft');
    PERFORM localization.add_localized_resource('Titles', 'de', 'VerifiedOn', 'überprüft auf');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Verify', 'prüfen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'View', 'uitzicht');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewAttachments', 'Bekijk Bijlagen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewBackups', 'Bekijk Backups');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewCustomerCopy', 'Bekijk Klant kopie');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewEmptyExceptionMessage', 'Het pand ''View'' kan niet leeg worden gelaten.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewSalesInovice', 'Bekijk verkoopfactuur');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewSchemaEmptyExceptionMessage', 'Het pand ''ViewSchema'' kan niet leeg worden gelaten.');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewThisAdjustment', 'Bekijk deze aanpassing');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewThisDelivery', 'Bekijk deze levering');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewThisInvoice', 'Bekijk deze factuur');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewThisNote', 'Bekijk deze Nota');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewThisOrder', 'Bekijk dit Bestel');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewThisQuotation', 'Bekijk dit citaat');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewThisReturn', 'Bekijk deze terugkeer');
    PERFORM localization.add_localized_resource('Titles', 'de', 'ViewThisTransfer', 'Bekijk deze overdracht');
    PERFORM localization.add_localized_resource('Titles', 'de', 'VoucherVerification', 'voucher Verificatie');
    PERFORM localization.add_localized_resource('Titles', 'de', 'VoucherVerificationPolicy', 'Voucher Verificatie Beleid');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Warning', 'waarschuwing');
    PERFORM localization.add_localized_resource('Titles', 'de', 'WhichBank', 'Welcher Bank?');
    PERFORM localization.add_localized_resource('Titles', 'de', 'WithdrawTransaction', 'intrekken transactie');
    PERFORM localization.add_localized_resource('Titles', 'de', 'WithdrawnTransactions', 'zurückgezogen Transaktionen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Workflow', 'Workflow-');
    PERFORM localization.add_localized_resource('Titles', 'de', 'WorldSalesStatistics', 'Wereld verkoop Statistieken');
    PERFORM localization.add_localized_resource('Titles', 'de', 'Yes', 'ja');
    PERFORM localization.add_localized_resource('Titles', 'de', 'YourName', 'Ihren Namen');
    PERFORM localization.add_localized_resource('Titles', 'de', 'YourOffice', 'Ihr Büro');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AboutInitializingDayEnd', 'Acerca del Día Inicializando final');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AboutYourOffice', 'Acerca de su oficina');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Access', 'acceso');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AccessIsDenied', 'Acceso denegado.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Account', 'cuenta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AccountId', 'Identificador cuenta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AccountMaster', 'cuenta Maestra');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AccountName', 'Nombre De La Cuenta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AccountNumber', 'Número De Cuenta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AccountOverview', 'Descripción de cuenta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AccountStatement', 'Estado de Cuenta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Action', 'acción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Actions', 'acciones');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Actual', 'real');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Add', 'añadir');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AddNew', 'Agregar nuevo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Address', 'dirección');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AddressAndContactInfo', 'Dirección e información de contacto');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AgeingSlabs', 'Losas Envejecimiento');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AgentBonusSlabAssignment', 'Bono losa Asignación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AgentBonusSlabs', 'Losa bonificación sobre los Vendedores');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Alerts', 'alertas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Amount', 'cantidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AmountInBaseCurrency', 'Importe (Divisa Base)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AmountInHomeCurrency', 'Importe (Inicio moneda)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AnalyzeDatabse', 'analizar base de datos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Approve', 'aprobar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ApproveThisTransaction', 'Aprobar esta transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ApprovedTransactions', 'Transacciones aprobados');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AreYouSure', 'Estás seguro?');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AssignCashier', 'asignar Cajero');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AttachmentsPlus', 'Adjuntos (+)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AutoVerificationPolicy', 'Política de verificación Auto');
    PERFORM localization.add_localized_resource('Titles', 'es', 'AutomaticallyApprovedByWorkflow', 'Aprobado automáticamente Por Workflow');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Back', 'espalda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'BackToPreviousPage', 'Volver a la página anterior');
    PERFORM localization.add_localized_resource('Titles', 'es', 'BackupConsole', 'Consola de reserva');
    PERFORM localization.add_localized_resource('Titles', 'es', 'BackupDatabase', 'Base de datos de copia de seguridad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'BackupNow', 'copia de seguridad ahora');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Balance', 'equilibrio');
    PERFORM localization.add_localized_resource('Titles', 'es', 'BalanceSheet', 'equilibrio hoja');
    PERFORM localization.add_localized_resource('Titles', 'es', 'BankAccounts', 'Cuentas bancarias');
    PERFORM localization.add_localized_resource('Titles', 'es', 'BankTransactionCode', 'Banco Código de transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'BaseCurrency', 'moneda de Cuenta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'BaseUnitName', 'Nombre Unidad Base');
    PERFORM localization.add_localized_resource('Titles', 'es', 'BonusSlabDetails', 'Bono losa Detalles para Vendedores');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Book', 'libro');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Brand', 'marca');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Brands', 'Marcas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Browse', 'Explorar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CSTNumber', 'Número CST');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Cancel', 'cancelar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CashFlowHeading', 'Rubro de Flujo de Caja');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CashFlowHeadings', 'Las partidas de flujo de caja');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CashFlowSetup', 'Configuración Cashflow');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CashRepositories', 'Repositorios efectivo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CashRepository', 'Repositorio Efectivo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CashRepositoryBalance', 'Equilibrio Repositorio Efectivo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CashTransaction', 'transacción en efectivo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ChangePassword', 'Cambiar La Contraseña');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ChangeSideWhenNegative', 'Cambio Side Cuando Negativo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ChartOfAccounts', 'Plan General de Contabilidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Check', 'Comprobar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CheckAll', 'Seleccionar Todos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Checklists', 'Las listas de verificación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Clear', 'claro');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Close', 'cerca');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ClosedTransactions', 'Transacciones cerradas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ClosingBalance', 'Saldo final');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ClosingCredit', 'crédito de Clausura');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ClosingDebit', 'débito clausura');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Comment', 'comentario');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CompoundItemDetails', 'Compuesto Detalles del artículo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CompoundItems', 'compuesto Artículos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CompoundUnitsOfMeasure', 'Unidades compuestas de Medida');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Confidential', 'confidencial');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ConfirmPassword', 'confirmar Contraseña');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ConvertedtoBaseCurrency', 'Convierten a la moneda base');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ConvertedtoHomeCurrency', 'Convertido a Inicio moneda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CostCenter', 'Centro de Costo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CostCenters', 'Centros de costes');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Counters', 'Contadores');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Counties', 'condados');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Countries', 'Países');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CountySalesTaxes', 'Impuestos del Condado de venta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CreateaUserAccountforYourself', 'Crear una cuenta de usuario para usted mismo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CreatedOn', 'Creado el');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Credit', 'crédito');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CreditAllowed', 'animales de crédito');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CreditTotal', 'crédito total');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Currencies', 'Monedas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Currency', 'moneda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CurrencyCode', 'Código De Moneda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CurrencyName', 'Nombre moneda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CurrencySymbol', 'Símbolo de moneda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CurrentIP', 'IP actual');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CurrentLoginOn', 'Actual Entrar En');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CurrentPassword', 'Contraseña Actual');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CurrentPeriod', 'Período actual');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CustomerCode', 'Código de Cliente');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CustomerName', 'Nombre del cliente');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CustomerPanNumber', 'Cliente Cuenta Permanente Número #');
    PERFORM localization.add_localized_resource('Titles', 'es', 'CustomerPaysFees', 'Cliente paga Honorarios');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DatabaseBackups', 'Las copias de seguridad de bases de datos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DatabaseStatistics', 'Base de Estadísticas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Date', 'fecha');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Days', 'días');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Debit', 'débito');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DebitTotal', 'débito total');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DefaultAddress', 'Dirección predeterminada');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DefaultCurrency', 'moneda predeterminada');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DefaultReorderQuantityAbbreviated', 'Por defecto Reordenar Cantidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Definition', 'definición');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Delete', 'borrar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DeleteSelected', 'eliminar seleccionados');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DeliverTo', 'entregar a');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Department', 'departamento');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Departments', 'Departamentos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Difference', 'diferencia');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DirectPurchase', 'Compra Directa');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DirectSales', 'Venta Directa');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Discount', 'descuento');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Documentation', 'documentación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Download', 'descargar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DownloadSourceCode', 'Descargar Código Fuente');
    PERFORM localization.add_localized_resource('Titles', 'es', 'DueDate', 'Fecha De Vencimiento');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EODConsole', 'Al final del día Consola Operación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ER', 'Tasa Efectiva');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ERToBaseCurrency', 'Tipo de Cambio (Para Base moneda)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ERToHomeCurrency', 'Tipo de cambio (a la inicio moneda)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EditSelected', 'Editar seleccionado');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Email', 'Correo electrónico');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EmailAddress', 'Dirección De Correo Electrónico');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EmailThisDelivery', 'Enlaces a esta entrega');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EmailThisInvoice', 'Enviar esta factura');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EmailThisNote', 'Enlaces a esta Nota');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EmailThisOrder', 'Enlaces a esta Orden');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EmailThisQuotation', 'Enviar esta cita');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EmailThisReceipt', 'Enlaces a esta Recibo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EmailThisReturn', 'Enviar esto Volver');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EndOfDayOperation', 'Al final del día de operación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EnterBackupName', 'Introduzca el nombre de copia de seguridad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EnterNewPassword', 'Introduzca una nueva contraseña');
    PERFORM localization.add_localized_resource('Titles', 'es', 'EnteredBy', 'Entró Por');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Entities', 'entidades');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ExchangeRate', 'Tipo De Cambio');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Execute', 'ejecutar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ExternalCode', 'Código externo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Factor', 'factor');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Fax', 'fax');
    PERFORM localization.add_localized_resource('Titles', 'es', 'FilePath', 'Ruta del archivo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'FinalDueAmountinBaseCurrency', 'Final Monto a pagar en moneda Base');
    PERFORM localization.add_localized_resource('Titles', 'es', 'FirstPage', 'primera Página');
    PERFORM localization.add_localized_resource('Titles', 'es', 'FiscalYear', 'Año Fiscal');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Flag', 'bandera');
    PERFORM localization.add_localized_resource('Titles', 'es', 'FlagBackgroundColor', 'Fondo de la bandera del color');
    PERFORM localization.add_localized_resource('Titles', 'es', 'FlagDescription', 'Puede marcar esta transacción con una bandera, sin embargo usted no será capaz de ver las banderas creadas por otros usuarios.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'FlagForegroundColor', 'Bandera Color de primer plano');
    PERFORM localization.add_localized_resource('Titles', 'es', 'FlagThisTransaction', 'Bandera de esta transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'FlaggedTransactions', 'Transacciones de bandera');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Flags', 'Banderas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Frequencies', 'frecuencias');
    PERFORM localization.add_localized_resource('Titles', 'es', 'From', 'desde');
    PERFORM localization.add_localized_resource('Titles', 'es', 'GLAdvice', 'Jefe de Contabilidad General...');
    PERFORM localization.add_localized_resource('Titles', 'es', 'GLDetails', 'Contabilidad General Detalles');
    PERFORM localization.add_localized_resource('Titles', 'es', 'GLHead', 'GL Head');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Go', 'ir');
    PERFORM localization.add_localized_resource('Titles', 'es', 'GoToTop', 'Ir a la parte superior.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'GoodsReceiptNote', 'Entrada de mercancías Nota');
    PERFORM localization.add_localized_resource('Titles', 'es', 'GrandTotal', 'Gran Total');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Home', 'casa');
    PERFORM localization.add_localized_resource('Titles', 'es', 'HomeCurrency', 'Inicio moneda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'HundredthName', 'centésimo nombre');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Id', 'identificación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'InVerificationStack', 'En Verificación Pila');
    PERFORM localization.add_localized_resource('Titles', 'es', 'IncludeZeroBalanceAccounts', 'Incluya cuentas de saldo cero');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Industries', 'Industrias');
    PERFORM localization.add_localized_resource('Titles', 'es', 'InitializeDayEnd', 'Inicialice Día Final');
    PERFORM localization.add_localized_resource('Titles', 'es', 'InstallMixERP', 'Instale MixERP');
    PERFORM localization.add_localized_resource('Titles', 'es', 'InstrumentCode', 'Código Instrumento');
    PERFORM localization.add_localized_resource('Titles', 'es', 'InterestApplicable', 'interés Aplicable');
    PERFORM localization.add_localized_resource('Titles', 'es', 'InvalidDate', 'Fecha no válida.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'InvalidImage', 'Esto no es una imagen válida.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'InventoryAdvice', 'Consejos Inventario');
    PERFORM localization.add_localized_resource('Titles', 'es', 'InvoiceAmount', 'Importe de la factura');
    PERFORM localization.add_localized_resource('Titles', 'es', 'InvoiceDetails', 'detalles de la factura');
    PERFORM localization.add_localized_resource('Titles', 'es', 'IsCash', '¿Es efectivo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'IsEmployee', 'es Empleado');
    PERFORM localization.add_localized_resource('Titles', 'es', 'IsParty', 'es la fiesta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'IsSystemAccount', 'Es Cuenta del sistema');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemCode', 'Código del artículo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemCostPrices', 'Los precios de coste de artículos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemGroup', 'Grupo de artículos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemGroups', 'los grupos de artículos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemId', 'Identificador de artículo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemName', 'Nombre del artículo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemOverview', 'Resumen de posiciones');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemSellingPrices', 'Artículo vendedor precios');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemType', 'Tipo de artículo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemTypes', 'Tipos de Elementos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Items', 'Artículos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ItemsBelowReorderLevel', 'Artículos abajo Nivel de Reabastecimiento');
    PERFORM localization.add_localized_resource('Titles', 'es', 'JournalVoucher', 'Comprobante de Diario');
    PERFORM localization.add_localized_resource('Titles', 'es', 'JournalVoucherEntry', 'Entrada Comprobante de Diario');
    PERFORM localization.add_localized_resource('Titles', 'es', 'KeyColumnEmptyExceptionMessage', 'La propiedad ''Columna de clave'' no se puede dejar vacío.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LCCredit', 'Carta de crédito de crédito');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LCDebit', 'Carta de débito de crédito');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LastAccessedOn', 'Último acceso el');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LastLoginIP', 'Último ingreso IP');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LastLoginOn', 'Último ingreso On');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LastPage', 'última Página');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LastPaymentDate', 'Última Fecha de Pago');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LastWrittenOn', 'Última Escrito En');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LateFees', 'Recargos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LeadSources', 'Fuentes de plomo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LeadStatuses', 'Los estados de plomo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LeadTime', 'Tiempo De Espera');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ListItems', 'Elementos de lista');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Load', 'carga');
    PERFORM localization.add_localized_resource('Titles', 'es', 'LoggedInTo', 'Logado para');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ManageProfile', 'administrar perfil');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MaximumCreditAmount', 'Máximo del Crédito');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MaximumCreditPeriod', 'Período Máximo del Crédito');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MenuAccessPolicy', 'Menú política de acceso');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MenuCode', 'Menú Código');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MenuId', 'Menú Identificador');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MenuText', 'Texto Menú');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MerchantFeeInPercent', 'Cuota Merchant (Porcentaje)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MerchantFeeSetup', 'Configuración Fee Merchant');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MergeBatchToGRN', 'Fusionar lotes de mercancías Nota');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MergeBatchToSalesDelivery', 'Fusionar lotes para entrega Ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MergeBatchToSalesOrder', 'Fusionar lotes para órdenes de venta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MixERPDocumentation', 'MixERP Documentación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MixERPLinks', 'Enlaces MixERP');
    PERFORM localization.add_localized_resource('Titles', 'es', 'MixERPOnFacebook', 'MixERP En Facebook');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Name', 'nombre');
    PERFORM localization.add_localized_resource('Titles', 'es', 'NewJournalEntry', 'Nueva entrada del diario');
    PERFORM localization.add_localized_resource('Titles', 'es', 'NewPassword', 'nueva Contraseña');
    PERFORM localization.add_localized_resource('Titles', 'es', 'NextPage', 'Siguiente Página');
    PERFORM localization.add_localized_resource('Titles', 'es', 'No', 'no');
    PERFORM localization.add_localized_resource('Titles', 'es', 'NonTaxableSales', 'Ventas Tributables');
    PERFORM localization.add_localized_resource('Titles', 'es', 'None', 'ninguno');
    PERFORM localization.add_localized_resource('Titles', 'es', 'NormallyDebit', 'normalmente débito');
    PERFORM localization.add_localized_resource('Titles', 'es', 'NothingSelected', 'Nada seleccionado.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Notifications', 'Notificaciones');
    PERFORM localization.add_localized_resource('Titles', 'es', 'OK', 'Okay');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Office', 'oficina');
    PERFORM localization.add_localized_resource('Titles', 'es', 'OfficeCode', 'Código de oficina');
    PERFORM localization.add_localized_resource('Titles', 'es', 'OfficeInformation', 'Oficina de Información');
    PERFORM localization.add_localized_resource('Titles', 'es', 'OfficeName', 'Nombre Cargo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'OfficeNickName', 'Nombre Oficina Nick');
    PERFORM localization.add_localized_resource('Titles', 'es', 'OfficeSetup', 'Configuración oficina');
    PERFORM localization.add_localized_resource('Titles', 'es', 'OnlyNumbersAllowed', 'Por favor, escriba un número válido.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'OpeningInventory', 'Inventario de apertura');
    PERFORM localization.add_localized_resource('Titles', 'es', 'OpportunityStages', 'Etapas de la oportunidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'OtherDetails', 'otros detalles');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PANNumber', 'Número PAN');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PageN', 'Página {0}');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ParentAccount', 'cuenta primaria');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Parties', 'Partes');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Party', 'partido');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PartyCode', 'Código Partido');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PartyName', 'Nombre de la parte');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PartySummary', 'Resumen del partido');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PartyType', 'Tipo Partido');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PartyTypes', 'Tipos partido');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Password', 'contraseña');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PasswordUpdated', 'Contraseña se ha actualizado.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PaymentCards', 'Tarjetas de pago');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PaymentTerms', 'Condiciones de pago');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PerformEODOperation', 'Realice Al final del día de operación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PerformingEODOperation', 'Realización de Fin de Día Operación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Phone', 'teléfono');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PlaceReorderRequests', 'Coloque Solicitudes Reordenar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PostTransaction', 'Publicar Transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PostedBy', 'publicado Por');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PostedDate', 'Fecha de publicación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PreferredSupplier', 'Proveedor preferido');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PreferredSupplierIdAbbreviated', 'Identificador de proveedor preferido');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Prepare', 'preparar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PreparedOn', 'Elaborado sobre');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Preview', 'preestreno');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PreviousBalance', 'Saldo Anterior');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PreviousCredit', 'crédito Anterior');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PreviousDebit', 'débito Anterior');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PreviousPage', 'Página Anterior');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PreviousPeriod', 'Periodo Anterior');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Price', 'precio');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PriceType', 'Precio Tipo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Print', 'impresión');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PrintGlEntry', 'Imprimir Entrada libro mayor');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PrintReceipt', 'Imprimir recibo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ProfitAndLossStatement', 'Ganancias y Pérdidas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Progress', 'progreso');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PurchaseInvoice', 'Compra factura');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PurchaseOrder', 'Orden De Compra');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PurchaseReturn', 'Compra de Retorno');
    PERFORM localization.add_localized_resource('Titles', 'es', 'PurchaseType', 'Compra Tipo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Quantity', 'cantidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'QuantityAbbreviated', 'cantidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'QuantityOnHandAbbreviated', 'Cantidad (en la mano)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Rate', 'tarifa');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Reason', 'razón');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Receipt', 'recibo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReceiptAmount', 'Recibo Importe');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReceiptCurrency', 'Recibo moneda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReceiptType', 'Tipo de Recibo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReceivedAmountInaboveCurrency', 'Recibió Importe (anteriormente moneda)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReceivedCurrency', 'recibido moneda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RecurringInvoiceSetup', 'Configuración Factura Recurrente');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RecurringInvoices', 'facturas recurrentes');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReferenceNumber', 'Número de referencia');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReferenceNumberAbbreviated', 'Referencia #');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RefererenceNumberAbbreviated', 'Referencia #');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RegistrationDate', 'Fecha De Registro');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Reject', 'rechazar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RejectThisTransaction', 'Rechazar esta transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RejectedTransactions', 'Transacciones rechazadas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RememberMe', 'Acuérdate De Mí');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReorderLevel', 'Nivel de Reabastecimiento');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReorderQuantityAbbreviated', 'Reordenar Cantidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReorderUnitName', 'Nombre Unidad Reordenar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RequiredField', 'Este es un campo obligatorio.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RequiredFieldDetails', 'Los campos marcados con asterisco (*) son obligatorios.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Reset', 'reajustar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RestrictedTransactionMode', 'Este establecimiento no permite la publicación de transacciones.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RetainedEarnings', 'ganancias Retenidas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Return', 'retorno');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ReturnToView', 'Volver a la vista');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Role', 'papel');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Roles', 'papeles');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RowNumber', 'Número de fila');
    PERFORM localization.add_localized_resource('Titles', 'es', 'RunningTotal', 'Asistente de total');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SSTNumber', 'Número SST');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesByMonthInThousands', 'Ventas por mes (en miles)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesByOfficeInThousands', 'Ventas por oficina (en miles)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesDelivery', 'Entrega Ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesDeliveryNote', 'Nota de entrega');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesInvoice', 'factura de ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesOrder', 'Orden de Venta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesPersons', 'vendedores');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesQuotation', 'Cita Ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesReceipt', 'Recibo de Venta');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesReturn', 'Volver Ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesTaxDetails', 'Detalles de impuesto sobre las ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesTaxExemptDetails', 'Impuestos a la venta Detalles Exentos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesTaxExempts', 'Exime de impuestos de ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesTaxTypes', 'Tipos de Impuestos de Ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesTaxes', 'impuestos a las Ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesTeams', 'Equipos de Ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SalesType', 'Tipo de las ventas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Salesperson', 'Vendedor');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Save', 'Guardar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Saving', 'ahorro');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Select', 'seleccionar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectCustomer', 'Seleccione cliente');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectFlag', 'Seleccione una bandera');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectLanguage', 'Selecciona Idioma de la');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectOffice', 'Seleccione Oficina');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectParty', 'Seleccionar partido');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectPaymentCard', 'Seleccionar Tarjetas de Pago');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectStore', 'Seleccionar tienda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectSupplier', 'Seleccionar proveedor');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectUnit', 'Seleccionar unidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectUser', 'Seleccionar usuario');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SelectYourBranch', 'Seleccione su sucursal');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Shipper', 'expedidor');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Shippers', 'Transportistas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ShippingAddress', 'Dirección De Envío');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ShippingAddressMaintenance', 'Dirección de envío Mantenimiento');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ShippingAddresses', 'Dirección De Envío');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ShippingCharge', 'La carga de envío');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ShippingCompany', 'compañía naviera');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Show', 'Mostrar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ShowAll', 'Mostrar todo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ShowCompact', 'Mostrar compacto');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SignIn', 'Registrarse');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SignOut', 'Desconectar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SigningIn', 'Inicio de sesión en');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Start', 'comienzo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'StateSalesTaxes', 'Impuestos estatales');
    PERFORM localization.add_localized_resource('Titles', 'es', 'StatementOfCashFlows', 'Flujo de Efectivo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'StatementReference', 'Declaración de Referencia');
    PERFORM localization.add_localized_resource('Titles', 'es', 'States', 'Unidos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Status', 'estado');
    PERFORM localization.add_localized_resource('Titles', 'es', 'StockAdjustment', 'Valores de ajuste');
    PERFORM localization.add_localized_resource('Titles', 'es', 'StockTransaction', 'Transacción de acciones');
    PERFORM localization.add_localized_resource('Titles', 'es', 'StockTransferJournal', 'Diario de transferencia de acciones');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Store', 'Tienda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'StoreName', 'Nombre tienda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'StoreTypes', 'Tipos Tienda');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Stores', 'Tiendas');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SubTotal', 'Total parcial');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SubmitBugs', 'informar sobre fallos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'SupplierName', 'Nombre del proveedor');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Support', 'apoyo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TableEmptyExceptionMessage', 'La propiedad ''Tabla'' no se puede dejar vacío.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TableSchemaEmptyExceptionMessage', 'La propiedad ''esquema de tabla'' no se puede dejar vacío.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TaskCompletedSuccessfully', 'Tarea completada con éxito.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Tax', 'impuesto');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TaxAuthorities', 'Agencia Tributaria');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TaxExemptTypes', 'Impuestos Tipos Exentos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TaxForm', 'Formulario de impuestos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TaxMaster', 'Maestro de Impuestos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TaxRate', 'Tasa de Impuesto');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TaxSetup', 'Configuración de Impuestos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TaxTotal', 'Impuesto Total');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TaxTypes', 'Tipos de Impuestos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TaxableSales', 'Ventas tributables');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Tel', 'teléfono');
    PERFORM localization.add_localized_resource('Titles', 'es', 'To', 'a');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TopSellingProductsOfAllTime', 'Top productos más vendidos de todos los tiempos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Total', 'Total');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TotalDueAmount', 'La cantidad total debida');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TotalDueAmountCurrentOffice', 'La cantidad total debida (Oficina actual)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TotalDueAmountInBaseCurrency', 'La cantidad total debida (En Base moneda)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TotalSales', 'Ventas totales:');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TranCode', 'Código de transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TranId', 'identificador de transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TranIdParameter', 'Identificador de Transacción: # {0}');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TransactionDate', 'Fecha de Transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TransactionDetails', 'Detalles de transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TransactionStatement', 'Declaración de Transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TransactionStatus', 'situación de la operación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TransactionSummary', 'Resumen de transacciones');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TransactionTimestamp', 'Marca de tiempo de transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TransactionType', 'Tipo Transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TransactionValue', 'Valor de Transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TransferDetails', 'detalles de la transferencia');
    PERFORM localization.add_localized_resource('Titles', 'es', 'TrialBalance', 'balance de comprobación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Type', 'tipo');
    PERFORM localization.add_localized_resource('Titles', 'es', 'UncheckAll', 'Deseleccionar Todos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Undo', 'deshacer');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Unit', 'unidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'UnitId', 'identificador de la unidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'UnitName', 'Nombre de la unidad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'UnitsOfMeasure', 'Unidades de Medida');
    PERFORM localization.add_localized_resource('Titles', 'es', 'UnknownError', 'Error en la operación debido a un error desconocido.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Update', 'actualización');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Upload', 'Subir');
    PERFORM localization.add_localized_resource('Titles', 'es', 'UploadAttachments', 'Sube Adjuntos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'UploadAttachmentsForThisTransaction', 'Sube Adjuntos para esta transacción.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Url', 'Localizador de recursos uniforme');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Use', 'uso');
    PERFORM localization.add_localized_resource('Titles', 'es', 'User', 'usuario');
    PERFORM localization.add_localized_resource('Titles', 'es', 'UserId', 'Identificador de Usuario');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Username', 'Nombre de usuario');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Users', 'Usuarios');
    PERFORM localization.add_localized_resource('Titles', 'es', 'VacuumDatabase', 'Base de datos de vacío');
    PERFORM localization.add_localized_resource('Titles', 'es', 'VacuumFullDatabase', 'Base de datos de vacío (Completo)');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ValueDate', 'Fecha Valor');
    PERFORM localization.add_localized_resource('Titles', 'es', 'VerificationReason', 'Verificación Razón');
    PERFORM localization.add_localized_resource('Titles', 'es', 'VerifiedBy', 'Por  verificado');
    PERFORM localization.add_localized_resource('Titles', 'es', 'VerifiedOn', 'verificado en');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Verify', 'verificar');
    PERFORM localization.add_localized_resource('Titles', 'es', 'View', 'vista');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewAttachments', 'Ver archivos adjuntos');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewBackups', 'Ver copias de seguridad');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewCustomerCopy', 'Ver Copia Cliente');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewEmptyExceptionMessage', 'La propiedad "Ver" no se puede dejar vacío.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewSalesInovice', 'Ver Factura');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewSchemaEmptyExceptionMessage', 'La propiedad ''Ver esquema'' no se puede dejar vacío.');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewThisAdjustment', 'Ver este ajuste');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewThisDelivery', 'Ver este Entrega');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewThisInvoice', 'Ver este Factura');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewThisNote', 'Ver Esta Nota');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewThisOrder', 'Ver Esta Orden');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewThisQuotation', 'Ver esta cita');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewThisReturn', 'Ver esto Volver');
    PERFORM localization.add_localized_resource('Titles', 'es', 'ViewThisTransfer', 'Ver este Transferencia');
    PERFORM localization.add_localized_resource('Titles', 'es', 'VoucherVerification', 'Verificación Voucher');
    PERFORM localization.add_localized_resource('Titles', 'es', 'VoucherVerificationPolicy', 'Vale Política de Verificación');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Warning', 'advertencia');
    PERFORM localization.add_localized_resource('Titles', 'es', 'WhichBank', 'Qué Banco?');
    PERFORM localization.add_localized_resource('Titles', 'es', 'WithdrawTransaction', 'retirar Transacción');
    PERFORM localization.add_localized_resource('Titles', 'es', 'WithdrawnTransactions', 'Transacciones retirados');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Workflow', 'Workflow');
    PERFORM localization.add_localized_resource('Titles', 'es', 'WorldSalesStatistics', 'Estadísticas de Ventas Mundiales');
    PERFORM localization.add_localized_resource('Titles', 'es', 'Yes', 'sí');
    PERFORM localization.add_localized_resource('Titles', 'es', 'YourName', 'Su Nombre');
    PERFORM localization.add_localized_resource('Titles', 'es', 'YourOffice', 'Su Oficina');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AboutInitializingDayEnd', 'Tungkol sa Pagtatapos Sinisimulan Araw');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AboutYourOffice', 'Tungkol sa Iyong Opisina');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Access', 'daan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AccessIsDenied', 'Tinanggihan ang access.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Account', 'account');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AccountId', 'Pagkikilanlan account');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AccountMaster', 'master account');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AccountName', 'Pangalan ng Account');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AccountNumber', 'Account Number');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AccountOverview', 'Pangkalahatang-ideya ng account');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AccountStatement', 'Statement ng Account');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Action', 'aksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Actions', 'Pagkilos');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Actual', 'tunay');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Add', 'magdagdag');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AddNew', 'Magdagdag ng Bagong');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Address', 'tirahan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AddressAndContactInfo', 'Address at Impormasyon ng Contact');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AgeingSlabs', 'Pagtanda Slabs');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AgentBonusSlabAssignment', 'Bonus tilad Pagtatalaga');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AgentBonusSlabs', 'Bonus laha para sa Salesperson');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Alerts', 'Mga Alerto');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Amount', 'dami');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AmountInBaseCurrency', 'Halaga (Sa Base Pera)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AmountInHomeCurrency', 'Halaga (Sa Home Pera)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AnalyzeDatabse', 'Pag-aralan ang Database');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Approve', 'sang-ayunan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ApproveThisTransaction', 'aprubahan ng Transaksyon na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ApprovedTransactions', 'Naaprubahan Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AreYouSure', 'Sigurado ka bang alam mo kung ano ang iyong ginagawa?');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AssignCashier', 'magtalaga ng cashier');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AttachmentsPlus', 'mga attachment (+)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AutoVerificationPolicy', 'Patakaran sa Auto na pag-verify');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'AutomaticallyApprovedByWorkflow', 'Awtomatikong Naaprubahan Sa pamamagitan ng daloy ng trabaho');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Back', 'likod');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'BackToPreviousPage', 'Bumalik sa Nakaraang Pahina');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'BackupConsole', 'backup console');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'BackupDatabase', 'backup Database');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'BackupNow', 'backup na Ngayon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Balance', 'balanse');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'BalanceSheet', 'balanse');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'BankAccounts', 'bank accounts');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'BankTransactionCode', 'Code ng Transaksyon Bank');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'BaseCurrency', 'Base Pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'BaseUnitName', 'Base pangalan yunit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'BonusSlabDetails', 'Mga Detalye ng Bonus na tilad para sa Salesperson');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Book', 'aklat');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Brand', 'tatak');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Brands', 'Mga Tatak');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Browse', 'Mag-browse');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CSTNumber', 'Bilang CST');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Cancel', 'kanselahin');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CashFlowHeading', 'Cashflow Heading');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CashFlowHeadings', 'Cashflow Mga Heading');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CashFlowSetup', 'Cashflow pag-setup');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CashRepositories', 'cash Imbakan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CashRepository', 'cash sa imbakan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CashRepositoryBalance', 'Balanse Cash imbakan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CashTransaction', 'cash Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ChangePassword', 'Baguhin ang Password');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ChangeSideWhenNegative', 'Baguhin ang Side Kapag Negatibong');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ChartOfAccounts', 'Tsart ng Account');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Check', 'check');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CheckAll', 'Tingnan lahat');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Checklists', 'checklist');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Clear', 'malinaw');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Close', 'malapit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ClosedTransactions', 'closed Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ClosingBalance', 'Ang pagsasara ng Balanse');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ClosingCredit', 'Ang pagsasara ng Credit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ClosingDebit', 'Ang pagsasara Debit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Comment', 'puna');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CompoundItemDetails', 'Mga Detalye Compound Item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CompoundItems', 'Compound Item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CompoundUnitsOfMeasure', 'Compound Unit ng Pagsukat');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Confidential', 'lihim');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ConfirmPassword', 'kumpirmahin ang Password');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ConvertedtoBaseCurrency', '-Convert sa Base Pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ConvertedtoHomeCurrency', '-Convert sa Home Pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CostCenter', 'Gastos Center');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CostCenters', 'Sentro ng Gastos');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Counters', 'counter');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Counties', 'county');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Countries', 'Mga Bansa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CountySalesTaxes', 'Benta sa County ng Buwis');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CreateaUserAccountforYourself', 'Lumikha ng User Account para sa Iyong Sarili');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CreatedOn', 'nilikha Sa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Credit', 'kredito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CreditAllowed', 'Pinapayagang credit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CreditTotal', 'Kabuuang credit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Currencies', 'Mga Pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Currency', 'pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CurrencyCode', 'Ang Code ng Salapi');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CurrencyName', 'Pangalan ng pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CurrencySymbol', 'Simbolo ng pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CurrentIP', 'kasalukuyang IP');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CurrentLoginOn', 'Kasalukuyang Sa Pag-login');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CurrentPassword', 'Kasalukuyang Password');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CurrentPeriod', 'kasalukuyang panahon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CustomerCode', 'Code ng Customer');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CustomerName', 'Pangalan ng Customer');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CustomerPanNumber', 'Customer Permanenteng Account Number #');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'CustomerPaysFees', 'Nagbabayad Customer Mga Bayarin');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DatabaseBackups', 'Ang mga backup database');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DatabaseStatistics', 'Istatistika ng Database');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Date', 'petsa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Days', 'Mga Araw');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Debit', 'debit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DebitTotal', 'Kabuuang debit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DefaultAddress', 'default Address');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DefaultCurrency', 'default Pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DefaultReorderQuantityAbbreviated', 'Default Muling mag-order Dami');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Definition', 'pakahulugan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Delete', 'alisin');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DeleteSelected', 'Tanggalin ang Pinili');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DeliverTo', 'dalhan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Department', 'kagawaran');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Departments', 'mga kagawaran');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Difference', 'pagkakaiba');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DirectPurchase', 'Direktang pagbili');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DirectSales', 'Direktang Benta');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Discount', 'diskuwento');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Documentation', 'dokumentasyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Download', 'I-download ang');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DownloadSourceCode', 'I-download ang Source Code');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'DueDate', 'Takdang Petsa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EODConsole', 'pagtatapos ng araw console');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ER', 'Epektibong Rate');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ERToBaseCurrency', 'Exchange Rate (Upang Base Pera)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ERToHomeCurrency', 'Exchange Rate (Upang Home Pera)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EditSelected', 'I-edit ang Napiling');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Email', 'email');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EmailAddress', 'email Address');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EmailThisDelivery', 'Mag-email sa Paghahatid na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EmailThisInvoice', 'Mag-email sa Invoice na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EmailThisNote', 'Mag-email sa Tandaan ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EmailThisOrder', 'I-email ang order na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EmailThisQuotation', 'Mag-email sa quotation na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EmailThisReceipt', 'Mag-email sa Resibo na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EmailThisReturn', 'I-email Return ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EndOfDayOperation', 'Katapusan ng Araw ng operasyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EnterBackupName', 'Ipasok ang Backup Pangalan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EnterNewPassword', 'Magpasok ng isang Bagong Password');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'EnteredBy', 'ipinasok Sa pamamagitan ng');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Entities', 'Entity');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ExchangeRate', 'Rate ng palitan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Execute', 'pumugot ng ulo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ExternalCode', 'Panlabas na Code');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Factor', 'factor');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Fax', 'fax');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'FilePath', 'Path ng file');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'FinalDueAmountinBaseCurrency', 'Final Dahil Halaga sa Base Pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'FirstPage', 'unang Pahina');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'FiscalYear', 'Fiscal Taon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Flag', 'bandila');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'FlagBackgroundColor', 'Kulay ng Background I-flag');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'FlagDescription', 'Maaari mong markahan ang transaksyong ito sa isang flag, gayunpaman, hindi mo magagawang makita ang mga flag na nilikha ng iba pang mga gumagamit.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'FlagForegroundColor', 'Kulay Foreground-flag');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'FlagThisTransaction', 'I-flag Transaksyon na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'FlaggedTransactions', 'Naka-flag Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Flags', 'Ang Flag');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Frequencies', 'mga frequency');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'From', 'mula sa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'GLAdvice', 'Pangkalahatang Ledger Payo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'GLDetails', 'Pangkalahatang Detalye Ledger');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'GLHead', 'GL Head');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Go', 'pumunta');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'GoToTop', 'Pumunta sa tuktok.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'GoodsReceiptNote', 'Goods Resibo Tandaan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'GrandTotal', 'Grand Kabuuang');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Home', 'tahanan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'HomeCurrency', 'Pera Home');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'HundredthName', 'pang-isang daan Pangalan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Id', 'Pagkikilanlan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'InVerificationStack', 'Sa Pag-verify ng stack');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'IncludeZeroBalanceAccounts', 'Isama Zero Balanse Account');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Industries', 'Industriya');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'InitializeDayEnd', 'Initialize Araw ng Pagtatapos');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'InstallMixERP', 'I-install ang MixERP');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'InstrumentCode', 'Instrumento Code');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'InterestApplicable', 'Naaangkop Interes');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'InvalidDate', 'Ito ay hindi isang wastong petsa.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'InvalidImage', 'Ito ay hindi isang wastong larawan.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'InventoryAdvice', 'Payo ng Imbentaryo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'InvoiceAmount', 'Halaga ng Invoice');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'InvoiceDetails', 'Mga Detalye ng invoice');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'IsCash', 'ay Cash');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'IsEmployee', 'ay Empleyado');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'IsParty', 'ay Party');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'IsSystemAccount', 'Ay system ng account');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemCode', 'Code ng item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemCostPrices', 'Mga presyo ng cost Item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemGroup', 'Grupo item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemGroups', 'Mga Pangkat item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemId', 'Pagkikilanlan item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemName', 'Pangalan ng Item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemOverview', 'Pangkalahatang-ideya ng item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemSellingPrices', 'Mga Presyo Item Pagbebenta');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemType', 'Mga Uri ng item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemTypes', 'Mga Uri ng item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Items', 'Item');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ItemsBelowReorderLevel', 'Mga item sa ibaba Muling mag-order Antas');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'JournalVoucher', 'Journal voucher');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'JournalVoucherEntry', 'Journal voucher entry');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'KeyColumnEmptyExceptionMessage', 'Ang ari-arian ''Key Haligi'' ay hindi maaaring iwanang walang laman.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LCCredit', 'Sulat Ng Credit Credit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LCDebit', 'Sulat Ng Credit Debit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LastAccessedOn', 'Huling na-access Sa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LastLoginIP', 'Huling Pag-login IP');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LastLoginOn', 'Huling Pag-login Sa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LastPage', 'Huling Pahina');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LastPaymentDate', 'Huling Petsa ng Pagbabayad');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LastWrittenOn', 'Huling Nakasulat Sa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LateFees', 'Mga huling Bayarin');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LeadSources', 'nangunguna pinagmumulan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LeadStatuses', 'nangunguna Mga katayuang');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LeadTime', 'ng lead oras');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ListItems', 'mga item sa listahan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Load', 'ikarga');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'LoggedInTo', '-Log Sa Upang');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ManageProfile', 'pamahalaan profile');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MaximumCreditAmount', 'Maximum na Halaga ng Credit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MaximumCreditPeriod', 'Maximum na Panahon ng Credit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MenuAccessPolicy', 'patakaran ng access menu');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MenuCode', 'menu ng code');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MenuId', 'Pagkikilanlan menu');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MenuText', 'menu ng teksto');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MerchantFeeInPercent', 'Bayad sa Merchant (Sa porsiyento)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MerchantFeeSetup', 'Setup Bayarin sa Merchant');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MergeBatchToGRN', 'Pagsamahin ang batch sa mga kalakal resibo tala');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MergeBatchToSalesDelivery', 'Pagsamahin ang batch sa paghahatid ng mga benta');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MergeBatchToSalesOrder', 'Pagsamahin ang batch sa mga benta ng order');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MixERPDocumentation', 'dokumentasyon MixERP');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MixERPLinks', 'MixERP Link');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'MixERPOnFacebook', 'MixERP Sa Facebook');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Name', 'pangalan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'NewJournalEntry', 'Bagong journal entry');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'NewPassword', 'bagong Password');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'NextPage', 'Susunod na Pahina');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'No', 'hindi');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'NonTaxableSales', 'Di taxable sales');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'None', 'wala');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'NormallyDebit', 'Karaniwan Debit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'NothingSelected', 'Wala napili.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Notifications', 'Mga Abiso');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'OK', 'OK');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Office', 'opisina');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'OfficeCode', 'Opisina ng code');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'OfficeInformation', 'Impormasyon Office');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'OfficeName', 'Pangalan ng Office');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'OfficeNickName', 'Pangalan ng Office Nick');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'OfficeSetup', 'pag-setup ng opisina');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'OnlyNumbersAllowed', 'Mangyaring mag-type ng isang wastong numero.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'OpeningInventory', 'Pagbubukas ng Imbentaryo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'OpportunityStages', 'yugto pagkakataon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'OtherDetails', 'Iba pang Mga Detalye');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PANNumber', 'Numero ng pan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PageN', 'Pahina {0}');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ParentAccount', 'magulang account');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Parties', 'Partido');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Party', 'partido');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PartyCode', 'party na code');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PartyName', 'Pangalan ng Party');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PartySummary', 'Buod ng Party');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PartyType', 'Uri ng Party');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PartyTypes', 'Mga Uri ng Party');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Password', 'Password');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PasswordUpdated', 'Password ay na-update.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PaymentCards', 'Mga Card pagbabayad');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PaymentTerms', 'Mga Tuntunin sa Pagbabayad');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PerformEODOperation', 'Magsagawa ng pagtatapos ng araw ang operasyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PerformingEODOperation', 'Nagsasagawa ng pagtatapos ng araw ang operasyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Phone', 'telepono');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PlaceReorderRequests', 'Ilagay Muling mag-order Kahilingan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PostTransaction', 'Mag-post ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PostedBy', 'Nai-post sa pamamagitan ng');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PostedDate', 'Nai-post sa Petsa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PreferredSupplier', 'Ginustong Supplier');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PreferredSupplierIdAbbreviated', 'Ginustong Supplier ng tagatukoy');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Prepare', 'maghanda');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PreparedOn', 'inihanda Sa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Preview', 'I-preview ang');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PreviousBalance', 'nakaraang Balanse');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PreviousCredit', 'nakaraang Credit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PreviousDebit', 'nakaraang Debit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PreviousPage', 'nakaraang Pahina');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PreviousPeriod', 'nakaraang Panahon ng');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Price', 'presyo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PriceType', 'Uri ng Presyo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Print', 'tatak');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PrintGlEntry', 'I-print pangkalahatang ledger entry');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PrintReceipt', 'I-print Resibo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ProfitAndLossStatement', 'Statement ng Kita at Pagkalugi');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Progress', 'pag-unlad');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PurchaseInvoice', 'Bumili ng Invoice');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PurchaseOrder', 'pagbili ng order');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PurchaseReturn', 'Bumili ng Return');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'PurchaseType', 'Uri ng pagbili');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Quantity', 'Dami');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'QuantityAbbreviated', 'Dami');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'QuantityOnHandAbbreviated', 'Dami (sa kamay)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Rate', 'singil');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Reason', 'dahilan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Receipt', 'resibo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReceiptAmount', 'Halaga ng resibo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReceiptCurrency', 'resibo ng Pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReceiptType', 'Uri ng resibo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReceivedAmountInaboveCurrency', 'Natanggap na Halaga (Sa itaas Pera)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReceivedCurrency', 'natanggap Pera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RecurringInvoiceSetup', 'Umuulit na Pag-setup ng Invoice');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RecurringInvoices', 'umuulit na mga Invoice');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReferenceNumber', 'sanggunian #');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReferenceNumberAbbreviated', 'sanggunian #');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RefererenceNumberAbbreviated', 'sanggunian #');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RegistrationDate', 'Petsa ng Pagpaparehistro');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Reject', 'tanggihan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RejectThisTransaction', 'Tanggihan Transaksyon na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RejectedTransactions', 'tinanggihan Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RememberMe', 'Tandaan Ako');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReorderLevel', 'Muling mag-order ng Antas');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReorderQuantityAbbreviated', 'Muling mag-order Dami');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReorderUnitName', 'Muling mag-order pangalan yunit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RequiredField', 'Ito ay isang kinakailangang patlang.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RequiredFieldDetails', 'Ang mga patlang na minarkahan ng asterisk (*) ay kinakailangan.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Reset', 'I-reset ang');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RestrictedTransactionMode', 'Hindi pinapayagan ng establisimentong ito sa pag-post ng transaksyon.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RetainedEarnings', 'Napanatiling Mga Kita');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Return', 'pagbabalik');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ReturnToView', 'Bumalik sa Tingnan ang');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Role', 'tungkulin');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Roles', 'Mga Tungkulin');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RowNumber', 'Numero ng hilera');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'RunningTotal', 'Pagpapatakbo ng Kabuuan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SSTNumber', 'Bilang SST');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesByMonthInThousands', 'Sales Sa pamamagitan ng Buwan (Sa Libu)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesByOfficeInThousands', 'Sales Sa pamamagitan ng opisina (Sa Libu)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesDelivery', 'Paghahatid ng Sales');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesDeliveryNote', 'Paghahatid Tandaan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesInvoice', 'Sales Invoice');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesOrder', 'Pagkakasunod-sunod ng Sales');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesPersons', 'Mga Salesperson');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesQuotation', 'Sales panipi');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesReceipt', 'Resibo ng Sales');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesReturn', 'balik Sales');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesTaxDetails', 'Mga Detalye ng Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesTaxExemptDetails', 'Mga Detalye Exempt Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesTaxExempts', 'Hindi isinasama ang mga Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesTaxTypes', 'Mga Uri ng Buwis sa Pagbebenta');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesTaxes', 'Sales Buwis');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesTeams', 'Sales Mga Koponan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SalesType', 'Uri ng Sales');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Salesperson', 'Salesperson');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Save', 'I-save ang');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Saving', 'pagtitipid');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Select', 'piliin');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectCustomer', 'Piliin ang Mamimili');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectFlag', 'Pumili ng isang flag');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectLanguage', 'Piliin ang Wika');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectOffice', 'Pumili ng Opisina');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectParty', 'piliin Party');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectPaymentCard', 'Pumili ng Card Pagbabayad');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectStore', 'Pumili ng Store');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectSupplier', 'Pumili ng Supplier');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectUnit', 'Pumili ng Unit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectUser', 'Pumili ng Gumagamit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SelectYourBranch', 'Piliin ang Iyong Branch');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Shipper', 'embarkador');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Shippers', 'embarkador');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ShippingAddress', 'address sa pagpapadala');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ShippingAddressMaintenance', 'Pagpapanatili address sa pagpapadala');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ShippingAddresses', 'Shipping Address');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ShippingCharge', 'singil sa pagpapadala');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ShippingCompany', 'kumpanya sa pagpapadala');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Show', 'palabas');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ShowAll', 'Ipakita ang lahat ng');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ShowCompact', 'Ipakita ang Compact');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SignIn', 'Mag-sign In');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SignOut', 'Mag-sign Out');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SigningIn', 'Ang pag-sign In');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Start', 'simula');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'StateSalesTaxes', 'Benta ng estado ang mga buwis');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'StatementOfCashFlows', 'Pahayag ng Cash daloy');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'StatementReference', 'Sanggunian ng statement');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'States', 'Unidos');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Status', 'kalagayan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'StockAdjustment', 'Pagsasaayos ng Stock');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'StockTransaction', 'stock ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'StockTransferJournal', 'Stock Transfer Journal');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Store', 'tindahan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'StoreName', 'Pangalan ng tindahan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'StoreTypes', 'mga uri ng tindahan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Stores', 'Tindahan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SubTotal', 'sub Kabuuang');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SubmitBugs', 'isumite ang Bug');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'SupplierName', 'Pangalan ng tagatustos');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Support', 'tulong');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TableEmptyExceptionMessage', 'Ang ari-arian ''Table'' ay hindi maaaring iwanang walang laman.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TableSchemaEmptyExceptionMessage', 'Ang ari-arian ''TableSchema'' ay hindi maaaring iwanang walang laman.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TaskCompletedSuccessfully', 'Gawain ay matagumpay na nakumpleto.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Tax', 'buwis');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TaxAuthorities', 'Awtoridad ng Buwis');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TaxExemptTypes', 'mga uri ng  Tax Exempt');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TaxForm', 'Form sa Buwis');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TaxMaster', 'Master buwis');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TaxRate', 'Rate ng Buwis');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TaxSetup', 'Buwis sa Pag-setup');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TaxTotal', 'Kabuuang Buwis');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TaxTypes', 'Mga Uri ng Buwis');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TaxableSales', 'nabubuwisang Sales');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Tel', 'telepono');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'To', 'sa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TopSellingProductsOfAllTime', 'Pinakamabentang Produkto ng Lahat ng Panahon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Total', 'kabuuan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TotalDueAmount', 'Kabuuang Dahil Halaga');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TotalDueAmountCurrentOffice', 'Kabuuang Dahil Halaga (Kasalukuyang Office)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TotalDueAmountInBaseCurrency', 'Kabuuang Dahil Halaga (Sa Base Pera)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TotalSales', 'Kabuuang Mga Benta:');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TranCode', 'Code ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TranId', 'tagatukoy ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TranIdParameter', 'tagatukoy ng Transaksyon: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TransactionDate', 'Petsa ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TransactionDetails', 'Mga Detalye ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TransactionStatement', 'Pahayag ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TransactionStatus', 'Katayuan ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TransactionSummary', 'Buod ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TransactionTimestamp', 'Timestamp ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TransactionType', 'Uri ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TransactionValue', 'Halaga ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TransferDetails', 'Mga Detalye transfer');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'TrialBalance', 'Pagsubok Balanse');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Type', 'uri');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'UncheckAll', 'Alisan ng check ang lahat ng');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Undo', 'pawalang-saysay');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Unit', 'yunit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'UnitId', 'yunit ng tagatukoy');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'UnitName', 'Pangalan ng Unit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'UnitsOfMeasure', 'Unit ng Pagsukat');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'UnknownError', 'Hindi nagtagumpay ang operasyon dahil sa isang hindi kilalang error.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Update', 'I-update ang');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Upload', 'Mag-upload ng');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'UploadAttachments', 'Mag-upload ng Attachment');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'UploadAttachmentsForThisTransaction', 'Mag-upload ng Attachment para sa Transaksyon na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Url', 'Uniform Resource Locator');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Use', 'paggamit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'User', 'gumagamit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'UserId', 'Pagkikilanlan Gumagamit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Username', 'Username');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Users', 'Ang mga gumagamit');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'VacuumDatabase', 'database ng vacuum');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'VacuumFullDatabase', 'database ng vacuum (full)');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ValueDate', 'Petsa halaga');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'VerificationReason', 'Dahilan sa Pag-verify');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'VerifiedBy', 'Na-verify Sa pamamagitan ng');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'VerifiedOn', 'Na-verify Sa');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Verify', 'patunayan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'View', 'pagtingin');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewAttachments', 'Tingnan ang Attachment');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewBackups', 'Tingnan ang mga backup');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewCustomerCopy', 'Tingnan Kopyahin Customer');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewEmptyExceptionMessage', 'Tingnan ang ari-arian ''Tingnan'' hindi maaaring iwanang walang laman.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewSalesInovice', 'Tingnan Sales Invoice');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewSchemaEmptyExceptionMessage', 'Ang property na ''Tingnan Schema'' ay hindi maaaring iwanang walang laman.');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewThisAdjustment', 'Tingnan ang Pagsasaayos ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewThisDelivery', 'Tingnan Paghahatid ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewThisInvoice', 'Tingnan ang Invoice na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewThisNote', 'Tingnan ang rating na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewThisOrder', 'Tingnan ang Order na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewThisQuotation', 'Tingnan ang quotation na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewThisReturn', 'Tingnan ang Return ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'ViewThisTransfer', 'Tingnan Transfer na ito');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'VoucherVerification', 'voucher Pag-verify');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'VoucherVerificationPolicy', 'Patakaran sa Pag-verify ng Voucher');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Warning', 'babala');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'WhichBank', 'Aling Bank?');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'WithdrawTransaction', '-withdraw ng Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'WithdrawnTransactions', '-withdraw Transaksyon');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Workflow', 'daloy ng trabaho');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'WorldSalesStatistics', 'World Sales Statistics');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'Yes', 'oo');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'YourName', 'Ang iyong Pangalan');
    PERFORM localization.add_localized_resource('Titles', 'fil', 'YourOffice', 'Ang iyong Opisina');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AboutInitializingDayEnd', 'À propos de Fin Jour Initialisation');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AboutYourOffice', 'A propos de votre bureau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Access', 'accès');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AccessIsDenied', 'L''accès est refusé.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Account', 'compte');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AccountId', 'identificateur de compte');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AccountMaster', 'compte principal');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AccountName', 'Nom Du Compte');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AccountNumber', 'Numéro de compte');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AccountOverview', 'Aperçu du compte');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AccountStatement', 'Relevé de compte');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Action', 'action');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Actions', 'actes');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Actual', 'réel');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Add', 'ajouter');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AddNew', 'Ajouter un nouveau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Address', 'adresse');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AddressAndContactInfo', 'Adresse et coordonnées');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AgeingSlabs', 'Dalles vieillissement');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AgentBonusSlabAssignment', 'Bonus dalle Affectation');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AgentBonusSlabs', 'Bonus dalle pour les vendeurs');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Alerts', 'alertes');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Amount', 'montant');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AmountInBaseCurrency', 'Montant (en devise de base)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AmountInHomeCurrency', 'Montant (En Accueil Monnaie)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AnalyzeDatabse', 'analyser la base de données');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Approve', 'approuver');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ApproveThisTransaction', 'D''approuver cette opération');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ApprovedTransactions', 'Les transactions approuvées');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AreYouSure', 'Êtes-vous sûr que vous savez ce que vous faites?');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AssignCashier', 'Attribuer Caissier');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AttachmentsPlus', 'Pièces jointes (+)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AutoVerificationPolicy', 'Politique autovérification');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'AutomaticallyApprovedByWorkflow', 'Approuvé automatiquement par workflow');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Back', 'arrière');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'BackToPreviousPage', 'Retour à la page précédente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'BackupConsole', 'Console de sauvegarde');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'BackupDatabase', 'Base de données de sauvegarde');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'BackupNow', 'backup Now');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Balance', 'balance');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'BalanceSheet', 'Bilan');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'BankAccounts', 'Comptes bancaires');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'BankTransactionCode', 'Banque Code de transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'BaseCurrency', 'devise de base');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'BaseUnitName', 'Nom de l''unité de base');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'BonusSlabDetails', 'Bonus de détails de la dalle pour les vendeurs');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Book', 'livre');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Brand', 'marque');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Brands', 'marques');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Browse', 'feuilleter');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CSTNumber', 'Nombre CST');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Cancel', 'annuler');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CashFlowHeading', 'Cashflow rubrique');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CashFlowHeadings', 'Cashflow Rubriques');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CashFlowSetup', 'Configuration Cashflow');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CashRepositories', 'Dépôts de trésorerie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CashRepository', 'Référentiel de trésorerie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CashRepositoryBalance', 'Repository Solde de trésorerie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CashTransaction', 'Transaction en espèces');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ChangePassword', 'Changer Le Mot De Passe');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ChangeSideWhenNegative', 'Changer Side Lorsque négatif');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ChartOfAccounts', 'Plan comptable');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Check', 'Cocher');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CheckAll', 'Cocher tout');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Checklists', 'Listes de contrôle');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Clear', 'clair');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Close', 'près');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ClosedTransactions', 'Transactions fermées');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ClosingBalance', 'Solde de clôture');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ClosingCredit', 'crédit clôture');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ClosingDebit', 'débit de clôture');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Comment', 'commentaire');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CompoundItemDetails', 'Composé Détails d''article');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CompoundItems', 'composés Articles');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CompoundUnitsOfMeasure', 'Des unités composées de mesure');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Confidential', 'confidentiel');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ConfirmPassword', 'Confirmez Le Mot De Passe');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ConvertedtoBaseCurrency', 'Converti en Devise de base');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ConvertedtoHomeCurrency', 'Converti à l''accueil devise');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CostCenter', 'Centre de coûts');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CostCenters', 'Centres de coûts');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Counters', 'compteurs');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Counties', 'Comtés');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Countries', 'pays');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CountySalesTaxes', 'Impôts Comté vente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CreateaUserAccountforYourself', 'Créez un compte d''utilisateur pour vous-même');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CreatedOn', 'créé le');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Credit', 'crédit');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CreditAllowed', 'Credit admis');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CreditTotal', 'crédit total');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Currencies', 'Devises');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Currency', 'monnaie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CurrencyCode', 'code de devise');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CurrencyName', 'Nom de la devise');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CurrencySymbol', 'Symbole monétaire');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CurrentIP', 'Current IP');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CurrentLoginOn', 'Connexion actuelle Sur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CurrentPassword', 'monnaie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CurrentPeriod', 'Période actuelle');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CustomerCode', 'Code client');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CustomerName', 'Nom du client');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CustomerPanNumber', 'Numéro de compte client permanent #');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'CustomerPaysFees', 'Client paie une redevance');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DatabaseBackups', 'Les sauvegardes de bases de données');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DatabaseStatistics', 'Statistiques de base de données');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Date', 'date');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Days', 'journées');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Debit', 'débit');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DebitTotal', 'débit total');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DefaultAddress', 'Adresse par défaut');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DefaultCurrency', 'devise par défaut');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DefaultReorderQuantityAbbreviated', 'Par défaut Réorganiser Quantité');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Definition', 'définition');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Delete', 'effacer');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DeleteSelected', 'supprimer la sélection');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DeliverTo', 'livrer à');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Department', 'département');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Departments', 'départements');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Difference', 'différence');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DirectPurchase', 'Achat direct');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DirectSales', 'Ventes directes');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Discount', 'rabais');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Documentation', 'documentation');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Download', 'télécharger');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DownloadSourceCode', 'Télécharger le code source');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'DueDate', 'date D''Échéance');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EODConsole', 'Fin de la console Opération Jour');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ER', 'Taux en vigueur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ERToBaseCurrency', 'Taux de change (Pour Devise de base)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ERToHomeCurrency', 'Taux de change (Pour Accueil Monnaie)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EditSelected', 'Modifier la sélection');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Email', 'email');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EmailAddress', 'Adresse e-mail');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EmailThisDelivery', 'Envoyer cette livraison');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EmailThisInvoice', 'Envoyer cette facture');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EmailThisNote', 'Envoyer Cette Note');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EmailThisOrder', 'Envoyer présent arrêté');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EmailThisQuotation', 'Envoyer cette citation');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EmailThisReceipt', 'Envoyer Ce Réception');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EmailThisReturn', 'Envoyer ceci Revenir');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EndOfDayOperation', 'Fin de l''opération Jour');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EnterBackupName', 'Entrez Nom de la sauvegarde');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EnterNewPassword', 'Entrez un nouveau mot de passe');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'EnteredBy', 'entré par');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Entities', 'entités');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ExchangeRate', 'Taux De Change');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Execute', 'exécuter');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ExternalCode', 'Le code externe');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Factor', 'facteur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Fax', 'fax');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'FilePath', 'Chemin du fichier');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'FinalDueAmountinBaseCurrency', 'Montant dû final dans la Devise');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'FirstPage', 'première page');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'FiscalYear', 'exercice Fiscal');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Flag', 'drapeau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'FlagBackgroundColor', 'Drapeau Couleur de fond');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'FlagDescription', 'Vous pouvez marquer cette transaction avec un drapeau, mais vous ne serez pas en mesure de voir les drapeaux créés par d''autres utilisateurs.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'FlagForegroundColor', 'Drapeau Couleur de premier plan');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'FlagThisTransaction', 'Drapeau Cette Transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'FlaggedTransactions', 'Transactions signalées');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Flags', 'drapeaux');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Frequencies', 'fréquences');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'From', 'à partir de');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'GLAdvice', 'Conseils généraux Ledger');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'GLDetails', 'General Ledger Détails');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'GLHead', 'GL Head');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Go', 'aller');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'GoToTop', 'Aller en haut de page.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'GoodsReceiptNote', 'Entrée de marchandises Remarque');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'GrandTotal', 'total');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Home', 'maison');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'HomeCurrency', 'Accueil Monnaie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'HundredthName', 'Nom centième');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Id', 'ça');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'InVerificationStack', 'Dans vérification Stack');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'IncludeZeroBalanceAccounts', 'Inclure Zéro Comptes Solde');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Industries', 'industries');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'InitializeDayEnd', 'Initialisation Jour Fin');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'InstallMixERP', 'Installez MixERP');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'InstrumentCode', 'instrument Code');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'InterestApplicable', 'intérêt applicable');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'InvalidDate', 'Ce ne est pas une date valide.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'InvalidImage', 'Ce ne est pas une image valide.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'InventoryAdvice', 'Inventaire conseils');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'InvoiceAmount', 'Montant de la facture');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'InvoiceDetails', 'Détails facture');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'IsCash', 'est trésorerie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'IsEmployee', 'est employé');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'IsParty', 'est Parti');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'IsSystemAccount', 'Est-compte du système');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemCode', 'Code de l''article');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemCostPrices', 'Article Coût prix');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemGroup', 'Groupe d''articles');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemGroups', 'Groupes d''articles');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemId', 'Point Identifier');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemName', 'Nom de l''article');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemOverview', 'Elément Présentation');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemSellingPrices', 'Items Below Reorder Level');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemType', 'Type d''élément');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemTypes', 'Types d''élément');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Items', 'articles');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ItemsBelowReorderLevel', 'Réorganiser les éléments ci-dessous Niveau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'JournalVoucher', 'Journal bon');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'JournalVoucherEntry', 'Journal Bon Entrée');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'KeyColumnEmptyExceptionMessage', 'La propriété "Colonne clé ''ne peut pas être laissé vide.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LCCredit', 'Lettre de crédit de crédit');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LCDebit', 'Lettre de crédit de débit');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LastAccessedOn', 'La dernière utilisation');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LastLoginIP', 'Dernière connexion IP');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LastLoginOn', 'Dernière connexion Sur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LastPage', 'dernière page');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LastPaymentDate', 'Dernière date de paiement');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LastWrittenOn', 'Dernière Sur écrite');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LateFees', 'frais de retard');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LeadSources', 'Sources de plomb');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LeadStatuses', 'statuts de plomb');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LeadTime', 'Délai De Mise En Œuvre');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ListItems', 'Liste Articles');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Load', 'charge');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'LoggedInTo', 'Connecté pour');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ManageProfile', 'gérer le profil');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MaximumCreditAmount', 'Montant maximal de crédit');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MaximumCreditPeriod', 'Période de crédit maximal');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MenuAccessPolicy', 'Menu Stratégie d''accès');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MenuCode', 'Code Menu');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MenuId', 'Menu Identifiant');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MenuText', 'Texte Menu');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MerchantFeeInPercent', 'Frais de Merchant (En pour cent)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MerchantFeeSetup', 'Configuration de droit de commerçant');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MergeBatchToGRN', 'Fusionner lots pour la réception des marchandises Note');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MergeBatchToSalesDelivery', 'Fusionner lots pour Vente Livraison');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MergeBatchToSalesOrder', 'Fusionner lots pour des commandes clients');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MixERPDocumentation', 'MixERP Documentation');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MixERPLinks', 'Liens MixERP');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'MixERPOnFacebook', 'MixERP Sur Facebook');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Name', 'nom');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'NewJournalEntry', 'Nouvelle entrée du journal');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'NewPassword', 'Nouveau Mot De Passe');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'NextPage', 'page suivante');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'No', 'aucun');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'NonTaxableSales', 'Ventes non imposables');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'None', 'aucun');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'NormallyDebit', 'normalement débit');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'NothingSelected', 'Rien sélectionné.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Notifications', 'Notifications');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'OK', 'D''ACCORD');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Office', 'bureau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'OfficeCode', 'Code de bureau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'OfficeInformation', 'Bureau d''information');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'OfficeName', 'Nom du bureau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'OfficeNickName', 'Nom Bureau Nick');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'OfficeSetup', 'configuration de bureau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'OnlyNumbersAllowed', 'Se il vous plaît entrez un numéro valide.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'OpeningInventory', 'Inventaire d''ouverture');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'OpportunityStages', 'Étapes d''opportunité');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'OtherDetails', 'autres détails');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PANNumber', 'Nombre PAN');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PageN', 'Page {0}');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ParentAccount', 'compte parent');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Parties', 'les parties');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Party', 'partie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PartyCode', 'code du Parti');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PartyName', 'Nom Parti');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PartySummary', 'Résumé Parti');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PartyType', 'type de partie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PartyTypes', 'types de partis');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Password', 'mot de passe');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PasswordUpdated', 'Mot de passe a été mis à jour.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PaymentCards', 'Cartes de paiement');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PaymentTerms', 'Conditions de paiement');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PerformEODOperation', 'Effectuer fin de l''opération de jour');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PerformingEODOperation', 'Exécution fin de l''opération de jour');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Phone', 'téléphone');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PlaceReorderRequests', 'Did you mean: Place Order Requests Placez demandes Réorganiser');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PostTransaction', 'après la transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PostedBy', 'Publié par');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PostedDate', 'date de publication');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PreferredSupplier', 'Fournisseur préféré');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PreferredSupplierIdAbbreviated', 'Identificateur de fournisseur préféré');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Prepare', 'préparer préparer');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PreparedOn', 'préparé Sur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Preview', 'avant-première');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PreviousBalance', 'Solde précédent');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PreviousCredit', 'crédit Précédente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PreviousDebit', 'débit précédente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PreviousPage', 'page Précédente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PreviousPeriod', 'Période précédente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Price', 'prix');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PriceType', 'Type de Prix');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Print', 'imprimer');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PrintGlEntry', 'Imprimer entrée du grand livre général');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PrintReceipt', 'Imprimer réception');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ProfitAndLossStatement', 'Des profits et pertes');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Progress', 'progrès');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PurchaseInvoice', 'facture d''achat');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PurchaseOrder', 'Bon De Commande');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PurchaseReturn', 'Achat retour');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'PurchaseType', 'type d''achat');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Quantity', 'quantité');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'QuantityAbbreviated', 'quantité');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'QuantityOnHandAbbreviated', 'Quantité (sur place)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Rate', 'taux');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Reason', 'raison');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Receipt', 'réception');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReceiptAmount', 'Montant de la réception');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReceiptCurrency', 'réception devise');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReceiptType', 'Type de réception');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReceivedAmountInaboveCurrency', 'Montant reçu (En-dessus Devise)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReceivedCurrency', 'reçu devise');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RecurringInvoiceSetup', 'Configuration de facture récurrente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RecurringInvoices', 'Les factures récurrentes');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReferenceNumber', 'Référence #');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReferenceNumberAbbreviated', 'Référence #');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RefererenceNumberAbbreviated', 'Référence #');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RegistrationDate', 'Date d''inscription');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Reject', 'rejeter');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RejectThisTransaction', 'Rejeter cette transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RejectedTransactions', 'Transactions rejetées');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RememberMe', 'Souviens-Toi De Moi');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReorderLevel', 'Réorganiser Niveau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReorderQuantityAbbreviated', 'Réorganiser Quantité');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReorderUnitName', 'Nom Réorganiser Unité');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RequiredField', 'Ce est un champ obligatoire.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RequiredFieldDetails', 'Les champs marqués d''un astérisque (*) sont obligatoires.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Reset', 'remettre');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RestrictedTransactionMode', 'Cet établissement ne permet pas l''affichage de la transaction.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RetainedEarnings', 'Des Bénéfices Non Répartis');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Return', 'retour');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ReturnToView', 'Retour à Voir');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Role', 'rôle');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Roles', 'rôles');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RowNumber', 'Nombre de lignes');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'RunningTotal', 'total courant');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SSTNumber', 'Nombre SST');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesByMonthInThousands', 'Ventes par mois (en milliers)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesByOfficeInThousands', 'Ventes par bureau (en milliers)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesDelivery', 'Ventes Livraison');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesDeliveryNote', 'Livraison Remarque');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesInvoice', 'Facture de vente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesOrder', 'commande client');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesPersons', 'vendeurs');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesQuotation', 'Devis de vente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesReceipt', 'Réception de vente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesReturn', 'ventes Retour');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesTaxDetails', 'Détails de la taxe de vente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesTaxExemptDetails', 'Taxe de vente Détails exonérés');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesTaxExempts', 'Exonère de la taxe de vente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesTaxTypes', 'Types de la taxe de vente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesTaxes', 'taxes de vente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesTeams', 'équipes de vente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SalesType', 'Ventes Type');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Salesperson', 'vendeur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Save', 'Enregistrer');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Saving', 'économie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Select', 'sélectionner');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectCustomer', 'Sélectionnez client');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectFlag', 'Choisissez un drapeau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectLanguage', 'Sélectionnez la langue');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectOffice', 'Sélectionnez Bureau');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectParty', 'Sélectionnez Parti');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectPaymentCard', 'Sélectionner la carte de paiement');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectStore', 'Choisir un magasin');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectSupplier', 'Sélectionnez fournisseur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectUnit', 'Sélectionnez Unité');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectUser', 'Sélectionnez Utilisateur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SelectYourBranch', 'Sélectionnez votre Direction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Shipper', 'expéditeur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Shippers', 'expéditeurs');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ShippingAddress', 'Adresse De Livraison');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ShippingAddressMaintenance', 'Expédition entretien d''adresses');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ShippingAddresses', 'Adresse De Livraison');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ShippingCharge', 'Frais de livraison');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ShippingCompany', 'compagnie maritime');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Show', 'spectacle');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ShowAll', 'montrer tous');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ShowCompact', 'Afficher compacte');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SignIn', 'Se Connecter');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SignOut', 'Se Déconnecter');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SigningIn', 'En signant');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Start', 'début');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'StateSalesTaxes', 'Ventes de l''État impôts');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'StatementOfCashFlows', 'Flux de trésorerie');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'StatementReference', 'déclaration de référence');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'States', 'Unis');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Status', 'statut');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'StockAdjustment', 'Stock d''ajustement');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'StockTransaction', 'Stock Transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'StockTransferJournal', 'Journal de transfert d''actions');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Store', 'magasin');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'StoreName', 'Nom de magasin');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'StoreTypes', 'Types de magasins');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Stores', 'magasins');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SubTotal', 'sous-total');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SubmitBugs', 'Proposez Bugs');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'SupplierName', 'Nom du fournisseur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Support', 'soutien');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TableEmptyExceptionMessage', 'La propriété ''table'' ne peut pas être laissé vide.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TableSchemaEmptyExceptionMessage', 'La propriété "schéma de table ''ne peut pas être laissé vide.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TaskCompletedSuccessfully', 'La tâche a été achevée avec succès.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Tax', 'impôt');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TaxAuthorities', 'Les autorités fiscales');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TaxExemptTypes', 'Fiscales types exonérés');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TaxForm', 'Formulaire d''impôt');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TaxMaster', 'Maître impôt');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TaxRate', 'Taux d''imposition');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TaxSetup', 'Configuration d''impôt');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TaxTotal', 'Totale d''impôt');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TaxTypes', 'Types d''impôt');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TaxableSales', 'ventes taxables');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Tel', 'téléphone');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'To', 'à');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TopSellingProductsOfAllTime', 'Top des ventes de tous les temps');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Total', 'total');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TotalDueAmount', 'Montant total dû');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TotalDueAmountCurrentOffice', 'Montant total dû (Bureau actuel)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TotalDueAmountInBaseCurrency', 'Montant total dû (en devise de base)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TotalSales', 'Total des ventes:');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TranCode', 'Code de transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TranId', 'Identificateur de transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TranIdParameter', 'Identificateur de transaction: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TransactionDate', 'date de la transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TransactionDetails', 'Détails de la transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TransactionStatement', 'Déclaration des transactions');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TransactionStatus', 'État de la transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TransactionSummary', 'Sommaire des transactions');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TransactionTimestamp', 'Transaction horodatage');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TransactionType', 'Type de transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TransactionValue', 'transaction Valeur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TransferDetails', 'Détails de transfert');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'TrialBalance', 'Balance générale des comptes');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Type', 'type');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'UncheckAll', 'Décocher tout');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Undo', 'annuler');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Unit', 'unité');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'UnitId', 'Identificateur de l''unité');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'UnitName', 'Nom de l''unité');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'UnitsOfMeasure', 'Unités de mesure');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'UnknownError', 'L''opération a échoué en raison d''une erreur inconnue.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Update', 'mettre à jour');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Upload', 'Télécharger');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'UploadAttachments', 'télécharger des pièces jointes');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'UploadAttachmentsForThisTransaction', 'Télécharger des pièces jointes pour cette transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Url', 'Uniform Resource Locator');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Use', 'utilisation');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'User', 'utilisateur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'UserId', 'Identifiant utilisateur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Username', 'Nom d''utilisateur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Users', 'utilisateurs');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'VacuumDatabase', 'Base de données de vide');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'VacuumFullDatabase', 'Base de données de vide (complet)');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ValueDate', 'date de valeur');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'VerificationReason', 'Raison de vérification');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'VerifiedBy', 'vérifié par');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'VerifiedOn', 'Sur Vérifié');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Verify', 'vérifier');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'View', 'vue');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewAttachments', 'Voir les accessoires');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewBackups', 'Voir sauvegardes');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewCustomerCopy', 'Voir copie du client');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewEmptyExceptionMessage', 'La propriété ''Voir'' ne peut pas être laissé vide.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewSalesInovice', 'Voir Facture de vente');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewSchemaEmptyExceptionMessage', 'La propriété ''Voir schéma "ne peut pas être laissé vide.');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewThisAdjustment', 'Voir cet ajustement');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewThisDelivery', 'Voir Cette Livraison');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewThisInvoice', 'Voir cette facture');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewThisNote', 'Voir Cette Note');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewThisOrder', 'Voir Cette ordonnance');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewThisQuotation', 'Avis, cette citation');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewThisReturn', 'Voir ceci Revenir');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'ViewThisTransfer', 'Voir ce transfert');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'VoucherVerification', 'Vérification Voucher');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'VoucherVerificationPolicy', 'Politique sur la vérification Voucher');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Warning', 'avertissement');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'WhichBank', 'Quelle banque?');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'WithdrawTransaction', 'retirer Transaction');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'WithdrawnTransactions', 'Transactions retirés');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Workflow', 'flux de travail');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'WorldSalesStatistics', 'Statistiques de ventes mondiales');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'Yes', 'oui');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'YourName', 'votre Nom');
    PERFORM localization.add_localized_resource('Titles', 'fr', 'YourOffice', 'votre Bureau');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AboutInitializingDayEnd', 'Tentang Inisialisasi Hari Akhir');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AboutYourOffice', 'Tentang Kantor Anda');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Access', 'akses');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AccessIsDenied', 'Akses ditolak.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Account', 'rekening');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AccountId', 'akun Identifier');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AccountMaster', 'Master akun');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AccountName', 'Nama Akun');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AccountNumber', 'Nomor Rekening');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AccountOverview', 'Tinjauan Rekening');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AccountStatement', 'rekening');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Action', 'tindakan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Actions', 'tindakan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Actual', 'sebenarnya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Add', 'menambahkan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AddNew', 'Tambah baru');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Address', 'alamat');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AddressAndContactInfo', 'Alamat & Informasi Kontak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AgeingSlabs', 'Lempengan Penuaan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AgentBonusSlabAssignment', 'Bonus slab tugas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AgentBonusSlabs', 'Slab bonus untuk Staf Penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Alerts', 'lansiran');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Amount', 'jumlah');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AmountInBaseCurrency', 'Jumlah (Dalam Mata Uang Dasar)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AmountInHomeCurrency', 'Jumlah (Dalam mata uang)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AnalyzeDatabse', 'menganalisis database');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Approve', 'menyetujui');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ApproveThisTransaction', 'Setujui Transaksi ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ApprovedTransactions', 'Transaksi disetujui');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AreYouSure', 'Apakah Anda yakin Anda tahu apa yang Anda lakukan?');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AssignCashier', 'tetapkan Tunai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AttachmentsPlus', 'Lampiran (+)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AutoVerificationPolicy', 'Kebijakan verifikasi otomatis');
    PERFORM localization.add_localized_resource('Titles', 'id', 'AutomaticallyApprovedByWorkflow', 'Secara otomatis Disetujui Oleh Workflow');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Back', 'Bagian Belakang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'BackToPreviousPage', 'Kembali ke Halaman Sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'BackupConsole', 'Konsol cadangan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'BackupDatabase', 'backup database');
    PERFORM localization.add_localized_resource('Titles', 'id', 'BackupNow', 'backup Sekarang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Balance', 'keseimbangan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'BalanceSheet', 'neraca keuangan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'BankAccounts', 'Rekening Bank');
    PERFORM localization.add_localized_resource('Titles', 'id', 'BankTransactionCode', 'Bank Kode Transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'BaseCurrency', 'mata uang dasar');
    PERFORM localization.add_localized_resource('Titles', 'id', 'BaseUnitName', 'Basis Unit Nama');
    PERFORM localization.add_localized_resource('Titles', 'id', 'BonusSlabDetails', 'Rincian slab bonus untuk Staf Penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Book', 'buku');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Brand', 'merek');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Brands', 'merek');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Browse', 'melihat-lihat');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CSTNumber', 'Nomor CST');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Cancel', 'Tidak Jadi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CashFlowHeading', 'cashflow pos');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CashFlowHeadings', 'cashflow pos');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CashFlowSetup', 'pengaturan arus kas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CashRepositories', 'Repositori kas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CashRepository', 'Repositori kas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CashRepositoryBalance', 'Repository Saldo Kas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CashTransaction', 'Transaksi tunai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ChangePassword', 'Ganti Kata Sandi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ChangeSideWhenNegative', 'Perubahan Side Ketika Negatif');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ChartOfAccounts', 'Bagan Akun');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Check', 'Periksa');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CheckAll', 'periksa Semua');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Checklists', 'Daftar-pembanding');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Clear', 'Yang Jelas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Close', 'dekat');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ClosedTransactions', 'Transaksi tertutup');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ClosingBalance', 'saldo penutupan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ClosingCredit', 'menutup Kredit');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ClosingDebit', 'menutup Debit');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Comment', 'komentar');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CompoundItemDetails', 'Senyawa Item detail');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CompoundItems', 'senyawa Item');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CompoundUnitsOfMeasure', 'Unit senyawa Ukur');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Confidential', 'rahasia');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ConfirmPassword', 'Konfirmasi Sandi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ConvertedtoBaseCurrency', 'Dikonversi ke Base Currency');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ConvertedtoHomeCurrency', 'Dikonversi ke Home Mata Uang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CostCenter', 'biaya Pusat');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CostCenters', 'biaya Pusat');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Counters', 'counters');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Counties', 'Counties');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Countries', 'negara');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CountySalesTaxes', 'Pajak county Penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CreateaUserAccountforYourself', 'Buat Akun Pengguna untuk Diri Sendiri');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CreatedOn', 'dibuat pada');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Credit', 'kredit');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CreditAllowed', 'kredit Diizinkan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CreditTotal', 'kredit Jumlah');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Currencies', 'mata Uang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Currency', 'mata Uang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CurrencyCode', 'Kode Mata Uang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CurrencyName', 'Nama Mata Uang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CurrencySymbol', 'Mata Simbol');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CurrentIP', 'IP saat ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CurrentLoginOn', 'Saat Login On');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CurrentPassword', 'Katasandi Saat Ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CurrentPeriod', 'Periode Berjalan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CustomerCode', 'Kode Pelanggan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CustomerName', 'Nama Pelanggan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CustomerPanNumber', 'Akun permanen Pelanggan Nomor #');
    PERFORM localization.add_localized_resource('Titles', 'id', 'CustomerPaysFees', 'Pelanggan Pays Biaya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DatabaseBackups', 'Backup database');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DatabaseStatistics', 'Statistik database');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Date', 'Statistik database');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Days', 'hari Hari');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Debit', 'debet');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DebitTotal', 'debit untuk');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DefaultAddress', 'default Address');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DefaultCurrency', 'Currency Default');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DefaultReorderQuantityAbbreviated', 'Standar Reorder Quantity');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Definition', 'definisi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Delete', 'Hapus');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DeleteSelected', 'Hapus Terpilih');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DeliverTo', 'memberikan Untuk');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Department', 'departemen');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Departments', 'departemen');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Difference', 'perbedaan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DirectPurchase', 'Pembelian langsung');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DirectSales', 'Penjualan Langsung');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Discount', 'diskon');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Documentation', 'dokumentasi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Download', 'Download');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DownloadSourceCode', 'Ambil Source Code');
    PERFORM localization.add_localized_resource('Titles', 'id', 'DueDate', 'Jatuh Tempo');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EODConsole', 'Akhir konsol Hari Operasi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ER', 'Tingkat efektif');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ERToBaseCurrency', 'Nilai Tukar (Untuk Mata Uang Dasar)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ERToHomeCurrency', 'Nilai Tukar (Untuk Mata rumah Dasar)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EditSelected', 'mengedit Terpilih');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Email', 'email');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EmailAddress', 'Alamat Email');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EmailThisDelivery', 'Email Pengiriman ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EmailThisInvoice', 'Email Invoice ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EmailThisNote', 'Email Catatan ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EmailThisOrder', 'Email Orde ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EmailThisQuotation', 'Email Quotation ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EmailThisReceipt', 'Email Penerimaan ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EmailThisReturn', 'Email Kembali ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EndOfDayOperation', 'Akhir Hari Operasi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EnterBackupName', 'Masukkan Backup Nama');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EnterNewPassword', 'Masukkan Sandi Baru');
    PERFORM localization.add_localized_resource('Titles', 'id', 'EnteredBy', 'dimasukkan By');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Entities', 'entitas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ExchangeRate', 'Kurs');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Execute', 'menjalankan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ExternalCode', 'Kode eksternal');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Factor', 'faktor');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Fax', 'fax');
    PERFORM localization.add_localized_resource('Titles', 'id', 'FilePath', 'path File');
    PERFORM localization.add_localized_resource('Titles', 'id', 'FinalDueAmountinBaseCurrency', 'Jumlah Karena akhir di Base Currency');
    PERFORM localization.add_localized_resource('Titles', 'id', 'FirstPage', 'Halaman pertama');
    PERFORM localization.add_localized_resource('Titles', 'id', 'FiscalYear', 'Tahun Anggaran');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Flag', 'bendera');
    PERFORM localization.add_localized_resource('Titles', 'id', 'FlagBackgroundColor', 'Flag Background Color');
    PERFORM localization.add_localized_resource('Titles', 'id', 'FlagDescription', 'Anda boleh menandakan urus niaga ini dengan bendera, tetapi anda tidak akan dapat melihat bendera yang dibuat oleh pengguna lain.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'FlagForegroundColor', 'Flag Latar Depan Warna');
    PERFORM localization.add_localized_resource('Titles', 'id', 'FlagThisTransaction', 'Flag Transaksi ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'FlaggedTransactions', 'Transaksi Ditandai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Flags', 'bendera');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Frequencies', 'kekerapan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'From', 'daripada');
    PERFORM localization.add_localized_resource('Titles', 'id', 'GLAdvice', 'General Ledger Saran');
    PERFORM localization.add_localized_resource('Titles', 'id', 'GLDetails', 'General Ledger Detail');
    PERFORM localization.add_localized_resource('Titles', 'id', 'GLHead', 'GL Kepala');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Go', 'pergi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'GoToTop', 'Pergi Ke Atas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'GoodsReceiptNote', 'Barangan Resit Nota');
    PERFORM localization.add_localized_resource('Titles', 'id', 'GrandTotal', 'Jumlah Besar');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Home', 'Laman Utama');
    PERFORM localization.add_localized_resource('Titles', 'id', 'HomeCurrency', 'mata Wang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'HundredthName', 'keseratus Nama');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Id', 'pengecam');
    PERFORM localization.add_localized_resource('Titles', 'id', 'InVerificationStack', 'Dalam Verifikasi Stack');
    PERFORM localization.add_localized_resource('Titles', 'id', 'IncludeZeroBalanceAccounts', 'Termasuk Akaun Baki Sifar');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Industries', 'industri');
    PERFORM localization.add_localized_resource('Titles', 'id', 'InitializeDayEnd', 'Inisialisasi Hari Akhir');
    PERFORM localization.add_localized_resource('Titles', 'id', 'InstallMixERP', 'Instal MixERP');
    PERFORM localization.add_localized_resource('Titles', 'id', 'InstrumentCode', 'Instrumen Kode');
    PERFORM localization.add_localized_resource('Titles', 'id', 'InterestApplicable', 'bunga Berlaku');
    PERFORM localization.add_localized_resource('Titles', 'id', 'InvalidDate', 'Tarikh tidak sah.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'InvalidImage', 'Ini bukan imej yang sah.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'InventoryAdvice', 'Nasihat inventori');
    PERFORM localization.add_localized_resource('Titles', 'id', 'InvoiceAmount', 'Jumlah invois');
    PERFORM localization.add_localized_resource('Titles', 'id', 'InvoiceDetails', 'Butiran invois');
    PERFORM localization.add_localized_resource('Titles', 'id', 'IsCash', 'adalah Tunai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'IsEmployee', 'adalah Pekerja');
    PERFORM localization.add_localized_resource('Titles', 'id', 'IsParty', 'adalah Parti');
    PERFORM localization.add_localized_resource('Titles', 'id', 'IsSystemAccount', 'Adalah Sistem Akaun');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemCode', 'Kod item');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemCostPrices', 'Harga Item Kos');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemGroup', 'Item Grup');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemGroups', 'Kumpulan Perkara');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemId', 'Perkara Identifier');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemName', 'Nama item');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemOverview', 'Perkara Gambaran Keseluruhan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemSellingPrices', 'Perkara Menjual Harga');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemType', 'Perkara Jenis');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemTypes', 'Jenis Perkara');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Items', 'item');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ItemsBelowReorderLevel', 'Di bawah perkara Reorder Level');
    PERFORM localization.add_localized_resource('Titles', 'id', 'JournalVoucher', 'Baucar jurnal');
    PERFORM localization.add_localized_resource('Titles', 'id', 'JournalVoucherEntry', 'Entri jurnal baucar');
    PERFORM localization.add_localized_resource('Titles', 'id', 'KeyColumnEmptyExceptionMessage', 'Properti ''KeyColumn'' tidak dapat dibiarkan kosong.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LCCredit', 'Surat kredit');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LCDebit', 'Surat kredit debet');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LastAccessedOn', 'Terakhir Diakses On');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LastLoginIP', 'Terakhir masuk IP');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LastLoginOn', 'Terakhir masuk On');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LastPage', 'Halaman Terakhir');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LastPaymentDate', 'Tanggal Jatuh Tempo');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LastWrittenOn', 'Terakhir Ditulis On');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LateFees', 'akhir Biaya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LeadSources', 'Sumber utama');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LeadStatuses', 'Status memimpin');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LeadTime', 'Waktu memimpin');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ListItems', 'Daftar Produk');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Load', 'beban');
    PERFORM localization.add_localized_resource('Titles', 'id', 'LoggedInTo', 'Login Dalam Untuk');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ManageProfile', 'Atur Profil');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MaximumCreditAmount', 'Jumlah Kredit Maksimum');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MaximumCreditPeriod', 'Jangka Waktu Kredit Maksimum');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MenuAccessPolicy', 'Menu Akses Kebijakan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MenuCode', 'menu Kode');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MenuId', 'identifier menu');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MenuText', 'menu Teks');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MerchantFeeInPercent', 'Merchant Fee (Dalam persen)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MerchantFeeSetup', 'Merchant Fee Pengaturan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MergeBatchToGRN', 'Gabung Batch barang penerimaan catatan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MergeBatchToSalesDelivery', 'Gabung Batch Penjualan Pengiriman');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MergeBatchToSalesOrder', 'Gabung Batch untuk order penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MixERPDocumentation', 'Dokumentasi MixERP');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MixERPLinks', 'Link MixERP');
    PERFORM localization.add_localized_resource('Titles', 'id', 'MixERPOnFacebook', 'MixERP Di Facebook');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Name', 'nama');
    PERFORM localization.add_localized_resource('Titles', 'id', 'NewJournalEntry', 'Jurnal New Entri');
    PERFORM localization.add_localized_resource('Titles', 'id', 'NewPassword', 'password Baru');
    PERFORM localization.add_localized_resource('Titles', 'id', 'NextPage', 'Halaman Berikutnya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'No', 'tak Ada');
    PERFORM localization.add_localized_resource('Titles', 'id', 'NonTaxableSales', 'Penjualan kena pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'None', 'Tidak Satupun');
    PERFORM localization.add_localized_resource('Titles', 'id', 'NormallyDebit', 'biasanya Debit');
    PERFORM localization.add_localized_resource('Titles', 'id', 'NothingSelected', 'Tidak ada yang dipilih.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Notifications', 'Pemberitahuan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'OK', 'OKE');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Office', 'kantor');
    PERFORM localization.add_localized_resource('Titles', 'id', 'OfficeCode', 'kode kantor');
    PERFORM localization.add_localized_resource('Titles', 'id', 'OfficeInformation', 'kantor Informasi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'OfficeName', 'Nama Office');
    PERFORM localization.add_localized_resource('Titles', 'id', 'OfficeNickName', 'Nama Kantor Nick');
    PERFORM localization.add_localized_resource('Titles', 'id', 'OfficeSetup', 'pengaturan kantor');
    PERFORM localization.add_localized_resource('Titles', 'id', 'OnlyNumbersAllowed', 'Ketik angka yang benar.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'OpeningInventory', 'membuka Persediaan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'OpportunityStages', 'Tahapan kesempatan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'OtherDetails', 'Rincian lainnya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PANNumber', 'PAN Nomor');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PageN', 'Halaman {0}');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ParentAccount', 'Akun induk');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Parties', 'pihak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Party', 'partai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PartyCode', 'Kode Partai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PartyName', 'Nama Partai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PartySummary', 'Partai Ringkasan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PartyType', 'Partai Type');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PartyTypes', 'Jenis Partai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Password', 'Kata Sandi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PasswordUpdated', 'Sandi telah diupdate.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PaymentCards', 'Kartu Pembayaran');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PaymentTerms', 'Syarat Pembayaran');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PerformEODOperation', 'Lakukan End Of Day Operasi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PerformingEODOperation', 'Pertunjukan End Of Day Operasi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Phone', 'telepon');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PlaceReorderRequests', 'Tempat Susun ulang Permintaan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PostTransaction', 'posting Transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PostedBy', 'Diposkan oleh');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PostedDate', 'Dikirim Tanggal');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PreferredSupplier', 'Pemasok yang dipilih');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PreferredSupplierIdAbbreviated', 'Identifier Pemasok disukai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Prepare', 'mempersiapkan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PreparedOn', 'disusun berdasarkan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Preview', 'pratinjau');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PreviousBalance', 'Saldo sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PreviousCredit', 'Kredit sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PreviousDebit', 'Debit sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PreviousPage', 'halaman sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PreviousPeriod', 'Periode sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Price', 'harga');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PriceType', 'Jenis Harga');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Print', 'mencetak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PrintGlEntry', 'Cetak entri buku besar');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PrintReceipt', 'penerimaan cetak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ProfitAndLossStatement', 'Laporan Laba Rugi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Progress', 'kemajuan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PurchaseInvoice', 'pembelian Faktur');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PurchaseOrder', 'pesanan pembelian');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PurchaseReturn', 'pembelian Kembali');
    PERFORM localization.add_localized_resource('Titles', 'id', 'PurchaseType', 'Jenis pembelian');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Quantity', 'kuantitas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'QuantityAbbreviated', 'kuantitas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'QuantityOnHandAbbreviated', 'Kuantitas (di tangan)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Rate', 'laju');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Reason', 'alasan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Receipt', 'Tanda Terima');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReceiptAmount', 'Penerimaan Jumlah');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReceiptCurrency', 'Penerimaan Uang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReceiptType', 'Penerimaan Type');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReceivedAmountInaboveCurrency', 'Diterima Jumlah (Dalam Mata Uang di atas)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReceivedCurrency', 'menerima Uang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RecurringInvoiceSetup', 'Berulang Faktur Pengaturan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RecurringInvoices', 'Faktur berulang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReferenceNumber', 'referensi #');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReferenceNumberAbbreviated', 'referensi #');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RefererenceNumberAbbreviated', 'referensi #');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RegistrationDate', 'Tanggal Registrasi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Reject', 'menolak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RejectThisTransaction', 'Tolak Transaksi ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RejectedTransactions', 'Transaksi ditolak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RememberMe', 'Ingat Saya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReorderLevel', 'Susun ulang Tingkat');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReorderQuantityAbbreviated', 'kuantitas reorder');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReorderUnitName', 'Nama Reorder Satuan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RequiredField', 'Ini adalah bidang yang dibutuhkan.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RequiredFieldDetails', 'Fields yang ditandai dengan tanda bintang (*) wajib diisi.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Reset', 'ulang');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RestrictedTransactionMode', 'Pendirian ini tidak memungkinkan transaksi posting.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RetainedEarnings', 'Saldo Laba.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Return', 'kembali');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ReturnToView', 'Kembali ke Lihat');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Role', 'peran');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Roles', 'peran');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RowNumber', 'Jumlah baris');
    PERFORM localization.add_localized_resource('Titles', 'id', 'RunningTotal', 'menjalankan Jumlah');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SSTNumber', 'SST Nomor');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesByMonthInThousands', 'Penjualan Dengan Bulan (Dalam Ribuan)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesByOfficeInThousands', 'Penjualan Dengan kantor (Dalam Ribuan)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesDelivery', 'penjualan Pengiriman');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesDeliveryNote', 'pengiriman Catatan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesInvoice', 'Faktur Penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesOrder', 'Pesanan penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesPersons', 'penjual');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesQuotation', 'penjualan kutipan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesReceipt', 'penjualan Penerimaan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesReturn', 'penjualan Kembali');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesTaxDetails', 'Rincian Pajak Penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesTaxExemptDetails', 'Pajak Penjualan rincian Bebaskan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesTaxExempts', 'Membebaskan Pajak Penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesTaxTypes', 'Jenis Pajak Penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesTaxes', 'Sales Taxes');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesTeams', 'penjualan Tim');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SalesType', 'Jenis penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Salesperson', 'pramuniaga');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Save', 'Simpan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Saving', 'hemat');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Select', 'memilih');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectCustomer', 'Pilih Pelanggan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectFlag', 'Pilih Bendera');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectLanguage', 'Pilih Bahasa');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectOffice', 'pilih Office');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectParty', 'pilih Partai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectPaymentCard', 'Pilih Kartu Pembayaran');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectStore', 'Pilih Toko');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectSupplier', 'Pilih Pemasok');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectUnit', 'pilih unit');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectUser', 'Pilih pengguna');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SelectYourBranch', 'Pilih Cabang Anda');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Shipper', 'pengirim');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Shippers', 'pengirim');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ShippingAddress', 'Alamat Pengiriman');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ShippingAddressMaintenance', 'Alamat Pengiriman Pemeliharaan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ShippingAddresses', 'Alamat Pengiriman');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ShippingCharge', 'Pengiriman Biaya');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ShippingCompany', 'Pengiriman Perusahaan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Show', 'menunjukkan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ShowAll', 'Tampilkan semua');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ShowCompact', 'Tampilkan kompak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SignIn', 'Masuk');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SignOut', 'Keluar');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SigningIn', 'penandatanganan Dalam');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Start', 'mulai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'StateSalesTaxes', 'Penjualan negara Pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'StatementOfCashFlows', 'Laporan Arus Kas');
    PERFORM localization.add_localized_resource('Titles', 'id', 'StatementReference', 'pernyataan Referensi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'States', 'negara Bagian');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Status', 'Status');
    PERFORM localization.add_localized_resource('Titles', 'id', 'StockAdjustment', 'Penyesuaian saham');
    PERFORM localization.add_localized_resource('Titles', 'id', 'StockTransaction', 'Transaksi saham');
    PERFORM localization.add_localized_resource('Titles', 'id', 'StockTransferJournal', 'Jurnal pengalihan saham');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Store', 'toko');
    PERFORM localization.add_localized_resource('Titles', 'id', 'StoreName', 'toko Nama');
    PERFORM localization.add_localized_resource('Titles', 'id', 'StoreTypes', 'Jenis toko');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Stores', 'toko');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SubTotal', 'Sub Total');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SubmitBugs', 'Kirim Bugs');
    PERFORM localization.add_localized_resource('Titles', 'id', 'SupplierName', 'pemasok Nama');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Support', 'mendukung');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TableEmptyExceptionMessage', 'Properti ''Table'' tidak dapat dibiarkan kosong.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TableSchemaEmptyExceptionMessage', 'Properti ''TableSchema'' tidak dapat dibiarkan kosong.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TaskCompletedSuccessfully', 'Tugas itu selesai dengan sukses.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Tax', 'pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TaxAuthorities', 'Kantor Pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TaxExemptTypes', 'Jenis Bebaskan Pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TaxForm', 'Formulir Pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TaxMaster', 'Guru pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TaxRate', 'persentase pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TaxSetup', 'Pengaturan pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TaxTotal', 'pajak Jumlah');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TaxTypes', 'Jenis pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TaxableSales', 'Penjualan Kena Pajak');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Tel', 'pesawat telepon');
    PERFORM localization.add_localized_resource('Titles', 'id', 'To', 'untuk');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TopSellingProductsOfAllTime', 'Menjual produk atas sepanjang masa');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Total', 'total Keseluruhan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TotalDueAmount', 'Jumlah Total Karena');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TotalDueAmountCurrentOffice', 'Jumlah Total Karena (Kantor Current)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TotalDueAmountInBaseCurrency', 'Jumlah Total Karena (Dalam Mata Uang Dasar)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TotalSales', 'Total Penjualan:');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TranCode', 'Kode transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TranId', 'pengenal transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TranIdParameter', 'pengenal transaksi: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TransactionDate', 'transaksi Tanggal');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TransactionDetails', 'Rincian transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TransactionStatement', 'Pernyataan transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TransactionStatus', 'Status transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TransactionSummary', 'Ringkasan transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TransactionTimestamp', 'Timestamp transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TransactionType', 'Jenis transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TransactionValue', 'Nilai transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TransferDetails', 'transfer Rincian');
    PERFORM localization.add_localized_resource('Titles', 'id', 'TrialBalance', 'Neraca Saldo');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Type', 'jenis');
    PERFORM localization.add_localized_resource('Titles', 'id', 'UncheckAll', 'Hapus tanda centang Semua');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Undo', 'membuka');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Unit', 'satuan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'UnitId', 'Unit Identifier');
    PERFORM localization.add_localized_resource('Titles', 'id', 'UnitName', 'Nama Unit');
    PERFORM localization.add_localized_resource('Titles', 'id', 'UnitsOfMeasure', 'Satuan Ukur');
    PERFORM localization.add_localized_resource('Titles', 'id', 'UnknownError', 'Operasi gagal karena kesalahan yang tidak diketahui.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Update', 'memperbarui');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Upload', 'Upload');
    PERFORM localization.add_localized_resource('Titles', 'id', 'UploadAttachments', 'Upload Lampiran');
    PERFORM localization.add_localized_resource('Titles', 'id', 'UploadAttachmentsForThisTransaction', 'Upload Lampiran untuk Transaksi ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Url', 'Uniform Resource Locator');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Use', 'penggunaan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'User', 'pemakai');
    PERFORM localization.add_localized_resource('Titles', 'id', 'UserId', 'Identifier pengguna');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Username', 'nama Pengguna');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Users', 'pengguna');
    PERFORM localization.add_localized_resource('Titles', 'id', 'VacuumDatabase', 'Vacuum Database');
    PERFORM localization.add_localized_resource('Titles', 'id', 'VacuumFullDatabase', 'Vacuum Database (Full)');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ValueDate', 'nilai Tanggal');
    PERFORM localization.add_localized_resource('Titles', 'id', 'VerificationReason', 'verifikasi Alasan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'VerifiedBy', 'diverifikasi oleh');
    PERFORM localization.add_localized_resource('Titles', 'id', 'VerifiedOn', 'diverifikasi pada');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Verify', 'memeriksa');
    PERFORM localization.add_localized_resource('Titles', 'id', 'View', 'pandangan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewAttachments', 'Lihat Lampiran');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewBackups', 'Lihat Backup');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewCustomerCopy', 'Lihat Copy Pelanggan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewEmptyExceptionMessage', 'Properti ''Lihat'' tidak dapat dibiarkan kosong.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewSalesInovice', 'Lihat Faktur Penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewSchemaEmptyExceptionMessage', 'Properti ''Lihat Skema'' tidak dapat dibiarkan kosong.');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewThisAdjustment', 'Lihat Penyesuaian ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewThisDelivery', 'Lihat Pengiriman ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewThisInvoice', 'Lihat Invoice ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewThisNote', 'Lihat Catatan ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewThisOrder', 'Lihat Pesanan ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewThisQuotation', 'Lihat Quotation ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewThisReturn', 'Lihat Kembali ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'ViewThisTransfer', 'Lihat transfer ini');
    PERFORM localization.add_localized_resource('Titles', 'id', 'VoucherVerification', 'Verifikasi voucher');
    PERFORM localization.add_localized_resource('Titles', 'id', 'VoucherVerificationPolicy', 'Kebijakan Verifikasi Voucher');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Warning', 'peringatan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'WhichBank', 'Bank mana?');
    PERFORM localization.add_localized_resource('Titles', 'id', 'WithdrawTransaction', 'Penarikan Transaksi');
    PERFORM localization.add_localized_resource('Titles', 'id', 'WithdrawnTransactions', 'Transaksi ditarik');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Workflow', 'alur Kerja');
    PERFORM localization.add_localized_resource('Titles', 'id', 'WorldSalesStatistics', 'Dunia Statistik Penjualan');
    PERFORM localization.add_localized_resource('Titles', 'id', 'Yes', 'Yes');
    PERFORM localization.add_localized_resource('Titles', 'id', 'YourName', 'Nama Anda');
    PERFORM localization.add_localized_resource('Titles', 'id', 'YourOffice', 'Kantor Anda');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AboutInitializingDayEnd', '初期デイ終了について');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AboutYourOffice', 'あなたのオフィスについて');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Access', 'アクセス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AccessIsDenied', 'アクセスが拒否されました。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Account', 'アカウント');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AccountId', '口座名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AccountMaster', 'アカウントマスター');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AccountName', 'アカウント名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AccountNumber', '口座番号');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AccountOverview', 'アカウントの概要');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AccountStatement', '取引明細書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Action', 'アクション');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Actions', 'アクション');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Actual', '実際');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Add', '加える');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AddNew', '新しい追加');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Address', 'アドレス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AddressAndContactInfo', '住所＆連絡先');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AgeingSlabs', '高齢スラブ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AgentBonusSlabAssignment', 'ボーナススラブの割り当て');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AgentBonusSlabs', '販売員のためのボーナススラブ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Alerts', 'アラート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Amount', '額');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AmountInBaseCurrency', '金額（基本通貨で）');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AmountInHomeCurrency', '量（ホーム通貨で）');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AnalyzeDatabse', 'データベースを分析');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Approve', '承認する');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ApproveThisTransaction', 'この取引を承認');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ApprovedTransactions', '承認された取引');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AreYouSure', 'あなたは何をやっている知っているあなたはよろしいですか？');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AssignCashier', 'レジ係の割り当て');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AttachmentsPlus', '添付ファイル（+）');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AutoVerificationPolicy', '自動検証方針');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'AutomaticallyApprovedByWorkflow', '自動的にワークフローによって承認');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Back', 'バック');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'BackToPreviousPage', '前のページに戻る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'BackupConsole', 'バックアップコンソール');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'BackupDatabase', 'バックアップ·データベース');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'BackupNow', 'バックアップの今');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Balance', 'バランス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'BalanceSheet', 'バランスシート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'BankAccounts', '銀行口座');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'BankTransactionCode', '銀行トランザクションコード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'BaseCurrency', '基準通貨');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'BaseUnitName', 'ベースユニット名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'BonusSlabDetails', '販売員のためのボーナススラブの詳細');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Book', 'ブック');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Brand', 'ブランド');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Brands', 'ブランド');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Browse', 'ブラウズ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CSTNumber', 'CST番号');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Cancel', 'キャンセル');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CashFlowHeading', 'キャッシュフロー見出し');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CashFlowHeadings', 'キャッシュフロー見出し');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CashFlowSetup', 'キャッシュフローのセットアップ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CashRepositories', '現金リポジトリ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CashRepository', '現金リポジトリ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CashRepositoryBalance', '現金リポジトリ残高');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CashTransaction', '現金取引');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ChangePassword', 'パスワードを変更する');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ChangeSideWhenNegative', 'チェンジサイドが負');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ChartOfAccounts', '勘定科目一覧表');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Check', 'チェック');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CheckAll', 'すべてを確認してください');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Checklists', 'チェックリスト');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Clear', 'クリア');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Close', 'クローズ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ClosedTransactions', 'クローズ取引');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ClosingBalance', '閉会バランス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ClosingCredit', 'クロージングクレジット');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ClosingDebit', '閉会デビット');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Comment', 'コメント');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CompoundItemDetails', '複合商品詳細');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CompoundItems', '複合アイテム');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CompoundUnitsOfMeasure', 'メジャーの化合物単位');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Confidential', '秘密の');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ConfirmPassword', 'パスワードを認証する');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ConvertedtoBaseCurrency', '基本通貨に換算');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ConvertedtoHomeCurrency', 'ホーム通貨に換算');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CostCenter', 'コストセンター');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CostCenters', '原価センタ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Counters', 'カウンター');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Counties', '郡部');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Countries', '国');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CountySalesTaxes', '郡の売上税');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CreateaUserAccountforYourself', 'あなた自身のためのユーザーアカウントを作成');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CreatedOn', '上で作成');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Credit', 'クレジット');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CreditAllowed', 'クレジット可');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CreditTotal', 'クレジット合計');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Currencies', '通貨');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Currency', '通貨');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CurrencyCode', '通貨コード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CurrencyName', '通貨の名前');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CurrencySymbol', '通貨記号');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CurrentIP', '現在のIP');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CurrentLoginOn', '現在のログイン時に');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CurrentPassword', '現在のパスワード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CurrentPeriod', '当期');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CustomerCode', '顧客コード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CustomerName', '顧客名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CustomerPanNumber', 'カスタマー永続的なアカウント番号＃');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'CustomerPaysFees', 'お客様は料金を支払う');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DatabaseBackups', 'データベースのバックアップ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DatabaseStatistics', 'データベース統計');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Date', '日付');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Days', '日数');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Debit', '借方');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DebitTotal', 'デビット合計');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DefaultAddress', 'デフォルトアドレス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DefaultCurrency', 'デフォルト通貨');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DefaultReorderQuantityAbbreviated', '並べ替え数量デフォルト');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Definition', '定義');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Delete', '削除');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DeleteSelected', '選択項目の削除]');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DeliverTo', 'に配信');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Department', '省');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Departments', '部門');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Difference', '違い');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DirectPurchase', '直接購入');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DirectSales', '直販');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Discount', '割引');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Documentation', 'ドキュメンテーション');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Download', 'ダウンロード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DownloadSourceCode', 'ソースコードをダウンロードしてください');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'DueDate', '期日');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EODConsole', 'デイコンソールの終わり');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ER', '実効レート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ERToBaseCurrency', '（基準通貨へ）為替レート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ERToHomeCurrency', '（ホーム通貨に）為替レート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EditSelected', '編集選択');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Email', 'メール');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EmailAddress', '電子メールアドレス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EmailThisDelivery', 'この配信にメールで知らせる');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EmailThisInvoice', 'この請求書をメールで送信');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EmailThisNote', 'このノートをメールで送信');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EmailThisOrder', 'この順序にメールで知らせる');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EmailThisQuotation', 'この引用にメールで知らせる');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EmailThisReceipt', 'この領収書をメールで送信');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EmailThisReturn', 'この戻りにメールで知らせる');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EndOfDayOperation', 'デイ操作の終了');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EnterBackupName', 'バックアップ名を入力します。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EnterNewPassword', '新しいパスワードを入力します');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'EnteredBy', 'によって入力された');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Entities', 'エンティティ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ExchangeRate', '為替レート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Execute', '実行する');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ExternalCode', '外部コード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Factor', '要因');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Fax', 'ファックス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'FilePath', 'ファイルパス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'FinalDueAmountinBaseCurrency', '基本通貨の最終未払い額');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'FirstPage', '先頭ページ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'FiscalYear', '会計年度');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Flag', 'フラグ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'FlagBackgroundColor', '旗の背景色');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'FlagDescription', 'ただし、他のユーザーが作成したフラグを参照することはできません、フラグでこのトランザクションをマークすることができます。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'FlagForegroundColor', '旗前景色');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'FlagThisTransaction', 'このトランザクションフラグ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'FlaggedTransactions', 'フラグ付き取引');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Flags', 'フラグ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Frequencies', '頻度');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'From', 'から');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'GLAdvice', '総勘定元帳のアドバイス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'GLDetails', '総勘定元帳詳細');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'GLHead', 'GLヘッド');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Go', '行く');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'GoToTop', 'ページのトップへ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'GoodsReceiptNote', '入庫注');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'GrandTotal', '総計');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Home', 'ホーム');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'HomeCurrency', '自国通貨');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'HundredthName', '百名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Id', 'イド');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'InVerificationStack', '検証スタック内');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'IncludeZeroBalanceAccounts', 'ゼロバランス勘定を含んで');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Industries', 'インダストリーズ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'InitializeDayEnd', 'デイエンドを初期化');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'InstallMixERP', 'MixERPをインストール');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'InstrumentCode', 'インストゥルメントコード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'InterestApplicable', '適用金利');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'InvalidDate', 'これは有効な日付ではありません。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'InvalidImage', 'これは有効なイメージではありません。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'InventoryAdvice', '在庫のアドバイス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'InvoiceAmount', '請求書金額');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'InvoiceDetails', '請求書の詳細');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'IsCash', '現金はありますか');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'IsEmployee', '従業員は、');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'IsParty', 'パーティーはありますか');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'IsSystemAccount', 'システムアカウントはありますか');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemCode', '商品コード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemCostPrices', 'アイテムのコスト価格');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemGroup', 'アイテムのグループ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemGroups', 'アイテムのグループ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemId', '項目識別子');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemName', '項目名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemOverview', 'アイテムの概要');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemSellingPrices', 'アイテムの販売価格');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemType', '項目種別');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemTypes', 'アイテム·タイプ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Items', 'アイテム');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ItemsBelowReorderLevel', '並べ替えレベル以下のアイテム');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'JournalVoucher', 'ジャーナルバウチャー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'JournalVoucherEntry', 'ジャーナルバウチャーエントリー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'KeyColumnEmptyExceptionMessage', 'プロパティ ''キー列は、「空のままにすることはできません。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LCCredit', 'クレジット信用状');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LCDebit', 'クレジットデビット状');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LastAccessedOn', '最終アクセスで');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LastLoginIP', '最終ログインIP');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LastLoginOn', '最終ログインオン');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LastPage', '最終ページ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LastPaymentDate', '最終支払日');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LastWrittenOn', '最後に書き込まれた上で');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LateFees', '延滞料');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LeadSources', 'リードソース');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LeadStatuses', 'リードステータス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LeadTime', 'リードタイム');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ListItems', 'リストアイテム');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Load', 'ロード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'LoggedInTo', 'するには、ログイン');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ManageProfile', 'プロファイルの管理');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MaximumCreditAmount', '最大信用額');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MaximumCreditPeriod', '最大与信期間');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MenuAccessPolicy', 'メニューアクセスポリシー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MenuCode', 'メニューコード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MenuId', 'メニュー識別子');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MenuText', 'メニューテキスト');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MerchantFeeInPercent', '加盟店手数料（パーセント）');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MerchantFeeSetup', '加盟店手数料の設定');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MergeBatchToGRN', '入庫ノートにバッチをマージ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MergeBatchToSalesDelivery', 'セールス配信にバッチをマージ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MergeBatchToSalesOrder', '受注するバッチをマージ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MixERPDocumentation', 'MixERPドキュメント');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MixERPLinks', 'MixERPリンク');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'MixERPOnFacebook', 'フェイスブック上でMixERP');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Name', '名前');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'NewJournalEntry', '新しい仕訳');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'NewPassword', '新しいパスワード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'NextPage', '次のページへ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'No', 'ノー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'NonTaxableSales', '非課税売上高');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'None', 'なし');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'NormallyDebit', '通常、デビット');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'NothingSelected', '何も選択されていません。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Notifications', '通知');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'OK', 'よし');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Office', 'オフィス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'OfficeCode', 'オフィスコード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'OfficeInformation', 'オフィス情報');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'OfficeName', 'オフィス名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'OfficeNickName', 'オフィスニックネーム');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'OfficeSetup', 'オフィスセットアップ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'OnlyNumbersAllowed', '有効な番号を入力してください。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'OpeningInventory', 'オープニングインベントリ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'OpportunityStages', 'オポチュニティステージ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'OtherDetails', 'その他の詳細');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PANNumber', 'PAN番号');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PageN', 'ページ{0}');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ParentAccount', '親アカウント');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Parties', 'パーティー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Party', 'パーティー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PartyCode', 'パーティーコード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PartyName', '側の名前');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PartySummary', 'パーティーの概要');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PartyType', 'パーティーの種類');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PartyTypes', 'パーティーの種類');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Password', 'パスワード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PasswordUpdated', 'パスワードを更新しました。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PaymentCards', '支払カード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PaymentTerms', '支払条件');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PerformEODOperation', 'デイ操作の終了を実行します');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PerformingEODOperation', 'デイオペレーションの実行終了');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Phone', '電話');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PlaceReorderRequests', '並べ替え要求を置きます');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PostTransaction', 'ポストトランザクション');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PostedBy', '投稿者');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PostedDate', '掲載日');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PreferredSupplier', '優先サプライヤー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PreferredSupplierIdAbbreviated', '優先サプライヤー識別子');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Prepare', '準備する');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PreparedOn', '上に用意');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Preview', 'プレビュー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PreviousBalance', '前残高');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PreviousCredit', '前クレジット');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PreviousDebit', '前デビット');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PreviousPage', '前ページ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PreviousPeriod', '前期');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Price', 'プライス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PriceType', '価格タイプ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Print', '印刷');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PrintGlEntry', '総勘定元帳のエントリを印刷');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PrintReceipt', '印刷領収書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ProfitAndLossStatement', '損益計算書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Progress', '進捗');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PurchaseInvoice', '購入請求書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PurchaseOrder', '注文書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PurchaseReturn', '購入戻る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'PurchaseType', '購入タイプ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Quantity', '数量');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'QuantityAbbreviated', '数量');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'QuantityOnHandAbbreviated', '数量（手で）');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Rate', 'レート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Reason', '理由');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Receipt', '領収書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReceiptAmount', '領収書の金額');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReceiptCurrency', '領収書通貨');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReceiptType', '領収書の種類');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReceivedAmountInaboveCurrency', '（上記の通貨で）受取額');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReceivedCurrency', '受信した通貨');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RecurringInvoiceSetup', '経常請求書のセットアップ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RecurringInvoices', '定期的な請求書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReferenceNumber', 'リファレンス＃');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReferenceNumberAbbreviated', 'リファレンス＃');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RefererenceNumberAbbreviated', 'リファレンス＃');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RegistrationDate', '登録日');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Reject', '拒否する');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RejectThisTransaction', 'このトランザクションを拒否');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RejectedTransactions', '拒否されたトランザクション');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RememberMe', '私を覚えてますか');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReorderLevel', '再注文レベル');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReorderQuantityAbbreviated', '再注文数量');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReorderUnitName', '再注文単位名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RequiredField', 'これは、必須フィールドです。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RequiredFieldDetails', 'アスタリスク（*）の付いたフィールドは必須です。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Reset', 'リセット');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RestrictedTransactionMode', '彼の設立は、取引の投稿を許可していません。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RetainedEarnings', '留保所得');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Return', 'リターン');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ReturnToView', 'ビューに戻る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Role', '役割');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Roles', '役割');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RowNumber', '行番号');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'RunningTotal', '合計の実行');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SSTNumber', 'SST数');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesByMonthInThousands', '（単位：千）月別売上高');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesByOfficeInThousands', '事務所が販売（たくさんで）');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesDelivery', '販売配達');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesDeliveryNote', '納品書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesInvoice', '売上請求書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesOrder', '販売注文');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesPersons', '販売員');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesQuotation', '販売見積');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesReceipt', 'レシート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesReturn', '販売戻る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesTaxDetails', '消費税の詳細');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesTaxExemptDetails', '売上税免除詳細');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesTaxExempts', '売上税免除');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesTaxTypes', '売上税タイプ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesTaxes', '売上税');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesTeams', 'セールスチーム');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SalesType', '販売タイプ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Salesperson', '販売員');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Save', '保存');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Saving', '節約');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Select', '選択する');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectCustomer', 'セレクトカスタマー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectFlag', 'フラグを選択');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectLanguage', '言語を選択');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectOffice', 'セレクトオフィス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectParty', 'パーティーを選択');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectPaymentCard', 'セレクト支払カード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectStore', 'セレクトショップ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectSupplier', 'セレクトサプライヤー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectUnit', '選択ユニット');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectUser', 'ユーザーの選択');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SelectYourBranch', 'あなたのブランチを選択します');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Shipper', 'シッパー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Shippers', '荷主');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ShippingAddress', 'お届け先の住所');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ShippingAddressMaintenance', '配送先住所のメンテナンス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ShippingAddresses', 'お届け先の住所');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ShippingCharge', '送料無料');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ShippingCompany', '運送会社');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Show', 'ショー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ShowAll', 'すべて表示');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ShowCompact', 'ショーコンパクト');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SignIn', 'ログイン');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SignOut', 'サインアウト');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SigningIn', 'サインイン');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Start', 'スタート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'StateSalesTaxes', '状態の売上税');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'StatementOfCashFlows', 'キャッシュフロー計算書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'StatementReference', 'ステートメントリファレンス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'States', '米国');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Status', 'ステータス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'StockAdjustment', 'ストック調整');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'StockTransaction', '証券取引');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'StockTransferJournal', '株式移転ジャーナル');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Store', '店舗');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'StoreName', '店名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'StoreTypes', 'ストア型');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Stores', 'ストア');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SubTotal', '小計');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SubmitBugs', 'バグを報告');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'SupplierName', 'サプライヤ名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Support', 'サポート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TableEmptyExceptionMessage', 'プロパティ ''表」は空のままにすることはできません。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TableSchemaEmptyExceptionMessage', 'プロパティ ''テーブルスキーマは、「空のままにすることはできません。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TaskCompletedSuccessfully', 'タスクが正常に完了した。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Tax', '税');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TaxAuthorities', '税務当局');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TaxExemptTypes', '税免除の種類');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TaxForm', '納税申告用紙');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TaxMaster', '税マスター');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TaxRate', '税率');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TaxSetup', '税のセットアップ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TaxTotal', '税の合計');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TaxTypes', '税タイプ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TaxableSales', '課税売上高');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Tel', 'テレフォン');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'To', 'へ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TopSellingProductsOfAllTime', 'すべての時間のトップ製品を販売');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Total', '合計');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TotalDueAmount', '合計未払い額');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TotalDueAmountCurrentOffice', '合計未払い額（現在のオフィス）');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TotalDueAmountInBaseCurrency', '合計により金額（基本通貨で）');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TotalSales', '総売上高：');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TranCode', 'トランザクションコード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TranId', 'トランザクション識別子');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TranIdParameter', 'トランザクション識別子: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TransactionDate', '取引日');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TransactionDetails', '取引の詳細');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TransactionStatement', 'トランザクションステートメント');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TransactionStatus', 'トランザクション·ステータス');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TransactionSummary', '取引概要');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TransactionTimestamp', 'トランザクションタイムスタンプ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TransactionType', '取引形態');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TransactionValue', '取引額');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TransferDetails', '転送の詳細');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'TrialBalance', '試算表');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Type', 'タイプ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'UncheckAll', '[すべてオフ]');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Undo', '取り消す');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Unit', 'ユニット');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'UnitId', 'ユニット識別子');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'UnitName', '装置名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'UnitsOfMeasure', '測定の単位');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'UnknownError', '操作が原因不明のエラーのために失敗しました。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Update', 'アップデート');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Upload', 'アップロード');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'UploadAttachments', '添付ファイルをアップロードする');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'UploadAttachmentsForThisTransaction', 'このトランザクションの添付ファイルをアップロードする');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Url', 'ユニフォームリソースロケータ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Use', '使用');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'User', 'ユーザー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'UserId', 'ユーザ識別子');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Username', 'ユーザー名');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Users', 'ユーザー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'VacuumDatabase', 'バキュームデータベース');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'VacuumFullDatabase', '真空データベース（フル）');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ValueDate', '実行日');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'VerificationReason', '検証理由');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'VerifiedBy', 'によって検証');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'VerifiedOn', '確認済みで、');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Verify', '確認する');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'View', 'ビュー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewAttachments', '添付ファイルを表示');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewBackups', 'ビューバックアップ');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewCustomerCopy', '見るカスタマー·コピー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewEmptyExceptionMessage', 'プロパティ ''表示''を空のままにすることはできません。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewSalesInovice', 'ビュー納品書');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewSchemaEmptyExceptionMessage', 'プロパティ ''ビュースキーマは、「空のままにすることはできません。');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewThisAdjustment', 'この調整を見る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewThisDelivery', 'この配信を見る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewThisInvoice', 'この請求書を見る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewThisNote', 'この評価を見る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewThisOrder', 'この順序を表示');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewThisQuotation', 'この引用を見る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewThisReturn', 'この戻りを見る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'ViewThisTransfer', 'この転送を見る');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'VoucherVerification', 'バウチャーの検証方針');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'VoucherVerificationPolicy', 'バウチャーの検証方針');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Warning', '警告');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'WhichBank', 'どの銀行？');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'WithdrawTransaction', 'トランザクションを撤回');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'WithdrawnTransactions', '取り下げの取引');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Workflow', 'ワークフロー');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'WorldSalesStatistics', '世界販売統計');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'Yes', 'はい');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'YourName', 'あなたの名前');
    PERFORM localization.add_localized_resource('Titles', 'ja', 'YourOffice', 'あなたのオフィス');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AboutInitializingDayEnd', 'Mengenai End Hari Memulakan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AboutYourOffice', 'Mengenai Pejabat Anda');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Access', 'akses');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AccessIsDenied', 'Akses dinafikan.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Account', 'Akaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AccountId', 'Pengecam Akaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AccountMaster', 'master Akaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AccountName', 'nama Akaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AccountNumber', 'nombor akaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AccountOverview', 'gambaran keseluruhan akaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AccountStatement', 'Penyata Akaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Action', 'tindakan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Actions', 'tindakan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Actual', 'sebenar');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Add', 'Tambah');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AddNew', 'Tambah baru');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Address', 'Alamat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AddressAndContactInfo', 'Alamat & Maklumat Hubungan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AgeingSlabs', 'papak Penuaan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AgentBonusSlabAssignment', 'Bonus Tugasan Slab');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AgentBonusSlabs', 'Papak Bonus untuk Jurujual');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Alerts', 'isyarat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Amount', 'jumlah');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AmountInBaseCurrency', 'Amaun (Dalam Pangkalan Mata Wang)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AmountInHomeCurrency', 'Jumlah (dalam mata wang)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AnalyzeDatabse', 'menganalisis Pangkalan Data');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Approve', 'meluluskan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ApproveThisTransaction', 'Ini Meluluskan Transaksi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ApprovedTransactions', 'Urusniaga yang diluluskan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AreYouSure', 'Adakah anda pasti anda tahu apa yang anda lakukan?');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AssignCashier', 'Juruwang ditugaskan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AttachmentsPlus', 'Lampiran (+)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AutoVerificationPolicy', 'Dasar Autoverification');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'AutomaticallyApprovedByWorkflow', 'Diluluskan secara automatik oleh Aliran Kerja');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Back', 'Kembali');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'BackToPreviousPage', 'Kembali ke Laman Sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'BackupConsole', 'sandaran Console');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'BackupDatabase', 'pangkalan data sandaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'BackupNow', 'sandaran kini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Balance', 'Baki');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'BalanceSheet', 'Kunci Kira-kira');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'BankAccounts', 'Akaun Bank');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'BankTransactionCode', 'Bank Transaksi Kod');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'BaseCurrency', 'Mata base');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'BaseUnitName', 'Nama Unit Pangkalan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'BonusSlabDetails', 'Bonus papak Butiran untuk jurujual');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Book', 'buku');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Brand', 'jenama');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Brands', 'jenama');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Browse', 'Tinjau');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CSTNumber', 'Bilangan CST');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Cancel', 'Batal');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CashFlowHeading', 'Tajuk aliran tunai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CashFlowHeadings', 'Tajuk aliran tunai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CashFlowSetup', 'persediaan aliran tunai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CashRepositories', 'Repositori tunai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CashRepository', 'Repositori tunai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CashRepositoryBalance', 'Repository Baki Tunai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CashTransaction', 'Transaksi tunai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ChangePassword', 'Tukar Kata Laluan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ChangeSideWhenNegative', 'Apabila Perubahan Side Negatif');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ChartOfAccounts', 'Carta Akaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Check', 'Semak');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CheckAll', 'menyemak semua');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Checklists', 'Senarai-');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Clear', 'jelas');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Close', 'Tutup');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ClosedTransactions', 'Transaksi tertutup');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ClosingBalance', 'Baki penutup');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ClosingCredit', 'Kredit penutup');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ClosingDebit', 'Debit penutup');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Comment', 'Ulasan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CompoundItemDetails', 'Butiran Kompaun Perkara');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CompoundItems', 'Item kompaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CompoundUnitsOfMeasure', 'Unit perkarangan Langkah');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Confidential', 'sulit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ConfirmPassword', 'Sahkan Kata Laluan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ConvertedtoBaseCurrency', 'Ditukar ke mata wang Base');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ConvertedtoHomeCurrency', 'Ditukar ke Laman Utama Mata Wang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CostCenter', 'pusat kos');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CostCenters', 'Pusat kos');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Counters', 'kaunter');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Counties', 'daerah-daerah');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Countries', 'negara-negara');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CountySalesTaxes', 'Cukai Jualan County');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CreateaUserAccountforYourself', 'Cipta Akaun pengguna untuk Diri');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CreatedOn', 'dicipta');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Credit', 'kredit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CreditAllowed', 'kredit dibenarkan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CreditTotal', 'Jumlah kredit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Currencies', 'Mata Wang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Currency', 'Mata Wang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CurrencyCode', 'Kod mata Wang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CurrencyName', 'Nama mata Wang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CurrencySymbol', 'Simbol mata wang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CurrentIP', 'IP semasa');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CurrentLoginOn', 'Log masuk semasa Pada');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CurrentPassword', 'Kata laluan semasa');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CurrentPeriod', 'Tempoh semasa');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CustomerCode', 'Kod Pelanggan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CustomerName', 'Pelanggan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CustomerPanNumber', 'Pelanggan Nombor Akaun Tetap #');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'CustomerPaysFees', 'Pelanggan Membayar Yuran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DatabaseBackups', 'Sandaran Pangkalan Data');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DatabaseStatistics', 'Statistik Pangkalan Data');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Date', 'tarikh');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Days', 'hari');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Debit', 'debit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DebitTotal', 'jumlah debit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DefaultAddress', 'Alamat default');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DefaultCurrency', 'Mata Wang default');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DefaultReorderQuantityAbbreviated', 'Pesanan Semula Kuantiti Default');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Definition', 'definisi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Delete', 'Padam');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DeleteSelected', 'Padam Terpilih');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DeliverTo', 'Untuk menyampaikan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Department', 'Jabatan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Departments', 'Jabatan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Difference', 'perbezaan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DirectPurchase', 'Pembelian Terus');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DirectSales', 'Jualan Langsung');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Discount', 'diskaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Documentation', 'dokumentasi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Download', 'Muat turun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DownloadSourceCode', 'Muat turun Kod Sumber');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'DueDate', 'Tarikh Akhir');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EODConsole', 'Akhir Hari Console');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ER', 'Kadar berkesan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ERToBaseCurrency', 'Kadar pertukaran (Untuk Pangkalan Mata Wang)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ERToHomeCurrency', 'Kadar pertukaran (Untuk Rumah Mata Wang)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EditSelected', 'Edit Terpilih');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Email', 'E-mel');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EmailAddress', 'Alamat E-mel');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EmailThisDelivery', 'Penghantaran e-mel ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EmailThisInvoice', 'E-Invois ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EmailThisNote', 'E-mel Nota ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EmailThisOrder', 'E-mel Perintah ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EmailThisQuotation', 'E-mel Sebutharga ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EmailThisReceipt', 'E-mel Resit ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EmailThisReturn', 'Pulangan email ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EndOfDayOperation', 'Akhir Operasi Hari');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EnterBackupName', 'Masukkan Backup Nama');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EnterNewPassword', 'Masukkan Kata Laluan Baru');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'EnteredBy', 'Dimasukkan oleh');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Entities', 'entiti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ExchangeRate', 'Kadar pertukaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Execute', 'melaksanakan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ExternalCode', 'Kod luar');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Factor', 'faktor');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Fax', 'Fax');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'FilePath', 'fail jalan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'FinalDueAmountinBaseCurrency', 'Hutang akhir dalam Mata Wang Base');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'FirstPage', 'Page pertama');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'FiscalYear', 'Tahun Anggaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Flag', 'bendera');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'FlagBackgroundColor', 'Flag Background Color');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'FlagDescription', 'Anda boleh menandakan urus niaga ini dengan bendera, tetapi anda tidak akan dapat melihat bendera yang dibuat oleh pengguna lain.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'FlagForegroundColor', 'Flag Latar Depan Warna');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'FlagThisTransaction', 'Flag Transaksi ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'FlaggedTransactions', 'Transaksi Telah ditanda');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Flags', 'bendera');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Frequencies', 'kekerapan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'From', 'daripada');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'GLAdvice', 'Genral Lejar Nasihat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'GLDetails', 'Genral Lejar Butiran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'GLHead', 'GL Ketua');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Go', 'pergi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'GoToTop', 'Pergi Ke Atas');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'GoodsReceiptNote', 'Barangan Resit Nota');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'GrandTotal', 'Jumlah Besar');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Home', 'Laman Utama');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'HomeCurrency', 'mata Wang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'HundredthName', 'Nama seratus');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Id', 'pengecam');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'InVerificationStack', 'Dalam Stack Pengesahan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'IncludeZeroBalanceAccounts', 'Termasuk Akaun Baki Sifar');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Industries', 'industri');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'InitializeDayEnd', 'Memulakan Hari Akhir');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'InstallMixERP', 'pasang MixERP');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'InstrumentCode', 'instrumen Kod');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'InterestApplicable', 'Faedah Berkenaan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'InvalidDate', 'Tarikh tidak sah.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'InvalidImage', 'Ini bukan imej yang sah.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'InventoryAdvice', 'Nasihat inventori');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'InvoiceAmount', 'Jumlah invois');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'InvoiceDetails', 'Butiran invois');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'IsCash', 'adalah Tunai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'IsEmployee', 'adalah Pekerja');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'IsParty', 'adalah Parti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'IsSystemAccount', 'Adalah Sistem Akaun');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemCode', 'Kod item');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemCostPrices', 'Harga Item Kos');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemGroup', 'Perkara Kumpulan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemGroups', 'Kumpulan Perkara');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemId', 'Perkara Identifier');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemName', 'Nama item');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemOverview', 'Perkara Gambaran Keseluruhan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemSellingPrices', 'Perkara Menjual Harga');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemType', 'Perkara Jenis');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemTypes', 'Jenis Perkara');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Items', 'item');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ItemsBelowReorderLevel', 'Di bawah perkara Reorder Level');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'JournalVoucher', 'Baucar jurnal');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'JournalVoucherEntry', 'Entri jurnal baucar');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'KeyColumnEmptyExceptionMessage', 'Harta ''Ruangan Key'' tidak boleh dibiarkan kosong');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LCCredit', 'Surat Kredit Kredit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LCDebit', 'Surat Debit Kredit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LastAccessedOn', 'Diakses Terakhir');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LastLoginIP', 'Masuk Terkini IP');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LastLoginOn', 'Log masuk Terakhir');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LastPage', 'laman lalu');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LastPaymentDate', 'Tarikh Akhir Pembayaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LastWrittenOn', 'Ditulis Terakhir');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LateFees', 'Bayaran Lewat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LeadSources', 'Sumber utama');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LeadStatuses', 'status plumbum');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LeadTime', 'masa plumbum');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ListItems', 'senarai item');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Load', 'beban');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'LoggedInTo', 'Logged Dalam Untuk');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ManageProfile', 'urus profil');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MaximumCreditAmount', 'Jumlah kredit maksimum');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MaximumCreditPeriod', 'Tempoh Kredit Maksimum');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MenuAccessPolicy', 'Dasar Akses Menu');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MenuCode', 'Kod menu');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MenuId', 'menu pengecam');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MenuText', 'menu teks');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MerchantFeeInPercent', 'Bayaran Saudagar (Dalam peratus)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MerchantFeeSetup', 'Bayaran Merchant Persediaan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MergeBatchToGRN', 'Gabung batch untuk nota penerimaan barang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MergeBatchToSalesDelivery', 'Gabung batch untuk Penghantaran Jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MergeBatchToSalesOrder', 'Gabung batch untuk perintah jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MixERPDocumentation', 'MixERP Dokumentasi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MixERPLinks', 'Pautan MixERP');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'MixERPOnFacebook', 'MixERP Di Facebook');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Name', 'nama');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'NewJournalEntry', 'Catatan baru');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'NewPassword', 'Kata laluan baru');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'NextPage', 'Seterusnya');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'No', 'tiada');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'NonTaxableSales', 'Jualan tidak dikenakan cukai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'None', 'Tiada');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'NormallyDebit', 'biasanya mendebitkan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'NothingSelected', 'Tiada apa-apa yang dipilih.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Notifications', 'Pemberitahuan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'OK', 'OK');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Office', 'Pejabat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'OfficeCode', 'Kod Pejabat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'OfficeInformation', 'Maklumat Pejabat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'OfficeName', 'Nama Pejabat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'OfficeNickName', 'Nama Pejabat Nick');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'OfficeSetup', 'persediaan Pejabat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'OnlyNumbersAllowed', 'Sila taip nombor yang sah.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'OpeningInventory', 'Inventori membuka');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'OpportunityStages', 'Peringkat peluang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'OtherDetails', 'Butiran lain');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PANNumber', 'PAN Nombor');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PageN', 'Laman {0}');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ParentAccount', 'Akaun Ibu Bapa');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Parties', 'pihak');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Party', 'parti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PartyCode', 'Kod parti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PartyName', 'Nama parti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PartySummary', 'Ringkasan parti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PartyType', 'Jenis parti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PartyTypes', 'Jenis parti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Password', 'kata laluan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PasswordUpdated', 'Kata laluan dikemaskini.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PaymentCards', 'Kad Pembayaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PaymentTerms', 'Terma pembayaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PerformEODOperation', 'Lakukan Akhir Operasi Hari');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PerformingEODOperation', 'Persembahan Akhir Operasi Hari');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Phone', 'telefon');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PlaceReorderRequests', 'Letakkan Permintaan Pesanan Semula');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PostTransaction', 'jawatan transaksi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PostedBy', 'Dicatat oleh');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PostedDate', 'Date Posted');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PreferredSupplier', 'Pembekal yang dipilih');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PreferredSupplierIdAbbreviated', 'Pengecam Pembekal pilihan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Prepare', 'Sediakan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PreparedOn', 'disediakan Pada');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Preview', 'pratonton');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PreviousBalance', 'Baki sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PreviousCredit', 'Kredit sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PreviousDebit', 'Debit sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PreviousPage', 'Laman Sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PreviousPeriod', 'Tempoh sebelumnya');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Price', 'Harga');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PriceType', 'Harga Jenis');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Print', 'Cetak');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PrintGlEntry', 'Cetak kemasukan lejar am');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PrintReceipt', 'Cetak Resit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ProfitAndLossStatement', 'Penyata Untung & Rugi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Progress', 'kemajuan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PurchaseInvoice', 'Invois Belian');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PurchaseOrder', 'Pesanan Pembelian');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PurchaseReturn', 'pembelian Pulangan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'PurchaseType', 'Jenis pembelian');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Quantity', 'kuantiti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'QuantityAbbreviated', 'kuantiti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'QuantityOnHandAbbreviated', 'Kuantiti (Pada Tangan)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Rate', 'kadar');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Reason', 'sebab');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Receipt', 'resit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReceiptAmount', 'resit Jumlah');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReceiptCurrency', 'resit Mata Wang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReceiptType', 'resit Jenis');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReceivedAmountInaboveCurrency', 'Pendapatan daripada (Dalam Mata Wang atas)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReceivedCurrency', 'Wang yang diterima');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RecurringInvoiceSetup', 'Berulang Persediaan Invois');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RecurringInvoices', 'Invois berulang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReferenceNumber', 'rujukan #');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReferenceNumberAbbreviated', 'rujukan #');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RefererenceNumberAbbreviated', 'rujukan #');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RegistrationDate', 'Tarikh pendaftaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Reject', 'Tolak');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RejectThisTransaction', 'Tolak Transaksi ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RejectedTransactions', 'Transaksi ditolak');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RememberMe', 'Ingatkan saya');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReorderLevel', 'pesanan semula Aras');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReorderQuantityAbbreviated', 'Kuantiti pesanan semula');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReorderUnitName', 'Nama Unit pesanan semula');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RequiredField', 'Ini adalah medan yang diperlukan.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RequiredFieldDetails', 'Bahagian yang bertanda dengan asterisk (*) adalah diperlukan.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Reset', 'Set semula');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RestrictedTransactionMode', 'Pertubuhan ini tidak membenarkan urus niaga dicatatkan.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RetainedEarnings', 'Pendapatan tertahan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Return', 'pulangan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ReturnToView', 'Kembali ke Lihat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Role', 'peranan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Roles', 'peranan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RowNumber', 'Bilangan baris');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'RunningTotal', 'jumlah berjalan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SSTNumber', 'SST Nombor');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesByMonthInThousands', 'Jualan Mengikut Bulan (Dalam Ribuan)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesByOfficeInThousands', 'Jualan oleh Pejabat (Dalam Ribuan)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesDelivery', 'Penghantaran jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesDeliveryNote', 'penghantaran Nota');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesInvoice', 'Invois jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesOrder', 'Perintah jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesPersons', 'jurujual');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesQuotation', 'Sebut Harga jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesReceipt', 'Resit jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesReturn', 'jualan Pulangan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesTaxDetails', 'Butiran Cukai Jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesTaxExemptDetails', 'Cukai Jualan Butiran Dikecualikan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesTaxExempts', 'Mengecualikan Cukai Jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesTaxTypes', 'Jenis Cukai Jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesTaxes', 'Cukai jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesTeams', 'Pasukan jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SalesType', 'Jenis jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Salesperson', 'jurujual');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Save', 'Simpan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Saving', 'menyimpan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Select', 'Pilih');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectCustomer', 'Pilih Pelanggan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectFlag', 'Pilih Bendera yang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectLanguage', 'Pilih Bahasa');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectOffice', 'Pilih Pejabat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectParty', 'Pilih Parti');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectPaymentCard', 'Pilih Kad Pembayaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectStore', 'Pilih kedai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectSupplier', 'Pilih Pembekal');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectUnit', 'Pilih Unit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectUser', 'Pilih pengguna');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SelectYourBranch', 'Pilih Cawangan Anda');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Shipper', 'penghantar');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Shippers', 'perkapalan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ShippingAddress', 'Alamat penghantaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ShippingAddressMaintenance', 'Alamat Penghantaran Penyelenggaraan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ShippingAddresses', 'Alamat Penghantaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ShippingCharge', 'Caj Penghantaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ShippingCompany', 'Syarikat Penghantaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Show', 'persembahan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ShowAll', 'menunjukkan semua');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ShowCompact', 'Tunjukkan padat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SignIn', 'Masuk');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SignOut', 'keluar');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SigningIn', 'menandatangani Dalam');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Start', 'permulaan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'StateSalesTaxes', 'Negeri Cukai Jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'StatementOfCashFlows', 'Penyata Aliran Tunai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'StatementReference', 'penyata Rujukan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'States', 'Syarikat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Status', 'taraf');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'StockAdjustment', 'Pelarasan saham');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'StockTransaction', 'Transaksi saham');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'StockTransferJournal', 'Pemindahan Saham jurnal');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Store', 'kedai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'StoreName', 'Nama kedai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'StoreTypes', 'Jenis kedai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Stores', 'kedai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SubTotal', 'Jumlah Kecil');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SubmitBugs', 'Hantar Bugs');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'SupplierName', 'Nama pembekal');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Support', 'sokongan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TableEmptyExceptionMessage', 'The ''Jadual'' harta tidak boleh dibiarkan kosong.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TableSchemaEmptyExceptionMessage', 'Harta ''Jadual Skema'' tidak boleh dibiarkan kosong.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TaskCompletedSuccessfully', 'Tugas tersebut telah diselesaikan dengan jayanya.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Tax', 'cukai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TaxAuthorities', 'Pihak Berkuasa cukai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TaxExemptTypes', 'Cukai Jenis Dikecualikan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TaxForm', 'Borang cukai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TaxMaster', 'Master cukai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TaxRate', 'Kadar Cukai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TaxSetup', 'Persediaan cukai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TaxTotal', 'Jumlah Cukai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TaxTypes', 'Jenis cukai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TaxableSales', 'Jualan boleh cukai');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Tel', 'telefon');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'To', 'untuk');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TopSellingProductsOfAllTime', 'Jualan Produk Top Sepanjang Zaman');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Total', 'jumlah');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TotalDueAmount', 'Jumlah Amaun Terhutang');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TotalDueAmountCurrentOffice', 'Jumlah Hutang (Pejabat Semasa)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TotalDueAmountInBaseCurrency', 'Jumlah Hutang (Dalam Pangkalan Mata Wang)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TotalSales', 'Jumlah Jualan:');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TranCode', 'Kod transaksi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TranId', 'transaksi pengecam');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TranIdParameter', 'transaksi pengecam: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TransactionDate', 'transaksi Tarikh');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TransactionDetails', 'Butiran transaksi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TransactionStatement', 'Penyata transaksi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TransactionStatus', 'transaksi taraf');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TransactionSummary', 'transaksi Ringkasan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TransactionTimestamp', 'transaksi Cap Masa');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TransactionType', 'transaksi Jenis');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TransactionValue', 'Nilai Urus Niaga');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TransferDetails', 'Butiran pemindahan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'TrialBalance', 'Imbangan Duga');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Type', 'jenis');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'UncheckAll', 'nyah Semua');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Undo', 'Buat asal');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Unit', 'unit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'UnitId', 'tempat pengenalan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'UnitName', 'Nama Unit');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'UnitsOfMeasure', 'Unit Tindakan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'UnknownError', 'Operasi gagal kerana ralat yang tidak diketahui.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Update', 'Update');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Upload', 'naik');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'UploadAttachments', 'Muat naik Lampiran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'UploadAttachmentsForThisTransaction', 'Muat naik Lampiran bagi Urusniaga ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Url', 'Pengesan Sumber Seragam');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Use', 'penggunaan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'User', 'pengguna');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'UserId', 'pengecam pengguna');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Username', 'Nama pengguna');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Users', 'pengguna');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'VacuumDatabase', 'pangkalan data vakum');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'VacuumFullDatabase', 'pangkalan data vakum (penuh)');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ValueDate', 'nilai Tarikh');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'VerificationReason', 'Sebab pengesahan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'VerifiedBy', 'disahkan oleh');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'VerifiedOn', 'disahkan pada');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Verify', 'mengesahkan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'View', 'Lihat');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewAttachments', 'Lihat Lampiran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewBackups', 'Lihat Backup');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewCustomerCopy', 'Lihat Pelanggan Salinan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewEmptyExceptionMessage', 'Harta ''Lihat'' tidak boleh dibiarkan kosong.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewSalesInovice', 'Lihat Jualan Invois');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewSchemaEmptyExceptionMessage', 'Harta ''Lihat Skema'' tidak boleh dibiarkan kosong.');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewThisAdjustment', 'Lihat Pelarasan ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewThisDelivery', 'Lihat Penghantaran ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewThisInvoice', 'Lihat Invois ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewThisNote', 'Lihat Nota ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewThisOrder', 'Lihat Perintah ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewThisQuotation', 'Lihat Sebut Harga ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewThisReturn', 'Lihat Pulangan ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'ViewThisTransfer', 'Lihat Pemindahan ini');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'VoucherVerification', 'baucer Pengesahan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'VoucherVerificationPolicy', 'Dasar Pengesahan baucar');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Warning', 'amaran');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'WhichBank', 'Yang Bank?');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'WithdrawTransaction', 'menarik balik Transaksi');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'WithdrawnTransactions', 'Transaksi ditarik balik');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Workflow', 'aliran kerja');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'WorldSalesStatistics', 'Dunia Statistik Jualan');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'Yes', 'Ya');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'YourName', 'Nama Anda');
    PERFORM localization.add_localized_resource('Titles', 'ms', 'YourOffice', 'Pejabat anda');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AboutInitializingDayEnd', 'Over het initialiseren Day End');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AboutYourOffice', 'Over uw kantoor');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Access', 'toegang');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AccessIsDenied', 'Toegang is geweigerd.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Account', 'rekening');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AccountId', 'account-ID');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AccountMaster', 'account meester');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AccountName', 'Accountnaam');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AccountNumber', 'rekening Nummer');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AccountOverview', 'account overzicht');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AccountStatement', 'rekeningafschrift');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Action', 'actie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Actions', 'acties');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Actual', 'werkelijk');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Add', 'toevoegen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AddNew', 'Nieuwe toevoegen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Address', 'adres');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AddressAndContactInfo', 'Adres & Contact Informatie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AgeingSlabs', 'Vergrijzing Platen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AgentBonusSlabAssignment', 'Bonus Slab Opdracht');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AgentBonusSlabs', 'Bonus Slab voor Verkopers');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Alerts', 'alerts');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Amount', 'bedrag');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AmountInBaseCurrency', 'Bedrag (In basisvaluta)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AmountInHomeCurrency', 'Bedrag (In startpagina Valuta)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AnalyzeDatabse', 'Analyseer Database');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Approve', 'goedkeuren');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ApproveThisTransaction', 'Goedkeuren van deze transactie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ApprovedTransactions', 'goedgekeurd Transacties');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AreYouSure', 'Weet je zeker dat je weet wat je aan het doen bent?');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AssignCashier', 'toewijzen Kassier');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AttachmentsPlus', 'Bijlagen (+)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AutoVerificationPolicy', 'Autoverification beleid');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'AutomaticallyApprovedByWorkflow', 'Automatisch Goedgekeurd Door Workflow');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Back', 'terug');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'BackToPreviousPage', 'Terug naar de vorige pagina');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'BackupConsole', 'backup Console');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'BackupDatabase', 'reservekopie van de database');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'BackupNow', 'nu back-up');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Balance', 'balans');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'BalanceSheet', 'balans');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'BankAccounts', 'bankrekeningen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'BankTransactionCode', 'Bank Transactie Code');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'BaseCurrency', 'basisvaluta');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'BaseUnitName', 'Naam basisstation');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'BonusSlabDetails', 'Bonus slab informatie voor Verkopers');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Book', 'boek');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Brand', 'merk');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Brands', 'merken');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Browse', 'Blader');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CSTNumber', 'CST Aantal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Cancel', 'annuleren');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CashFlowHeading', 'Kasstroom  rubriek');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CashFlowHeadings', 'Kasstroom Koppen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CashFlowSetup', 'Kasstroom setup');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CashRepositories', 'Cash Vindplaatsen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CashRepository', 'Cash Vindplaats');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CashRepositoryBalance', 'Cash Repository Balance');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CashTransaction', 'contante transactie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ChangePassword', 'Verander Wachtwoord');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ChangeSideWhenNegative', 'Change Side Wanneer Negatief');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ChartOfAccounts', 'Rekeningschema');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Check', 'controleren');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CheckAll', 'Alle controleren');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Checklists', 'checklists');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Clear', 'duidelijk');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Close', 'dicht');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ClosedTransactions', 'gesloten Transacties');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ClosingBalance', 'eindsaldo');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ClosingCredit', 'Closing Credit');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ClosingDebit', 'Closing Debit');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Comment', 'commentaar');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CompoundItemDetails', 'Verbinding Item Details');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CompoundItems', 'verbinding items');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CompoundUnitsOfMeasure', 'Verbinding meeteenheden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Confidential', 'vertrouwelijk');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ConfirmPassword', 'Bevestig Wachtwoord');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ConvertedtoBaseCurrency', 'Omgerekend naar basisvaluta');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ConvertedtoHomeCurrency', 'Omgerekend naar startpagina Valuta');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CostCenter', 'kostenplaats');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CostCenters', 'kostenplaatsen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Counters', 'tellers');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Counties', 'provincies');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Countries', 'landen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CountySalesTaxes', 'County Sales Belastingen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CreateaUserAccountforYourself', 'Maak een gebruikersaccount voor uzelf');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CreatedOn', 'gemaakt op');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Credit', 'krediet');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CreditAllowed', 'credit toegestaan');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CreditTotal', 'credit Totaal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Currencies', 'valuta');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Currency', 'valuta');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CurrencyCode', 'valuta Code');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CurrencyName', 'munt Naam');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CurrencySymbol', 'valutasymbool');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CurrentIP', 'Het huidige IP-');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CurrentLoginOn', 'Huidige Log On');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CurrentPassword', 'Huidig Wachtwoord');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CurrentPeriod', 'huidige periode');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CustomerCode', 'klant Code');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CustomerName', 'klantnaam');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CustomerPanNumber', 'Klant Permanente Account Number #');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'CustomerPaysFees', 'Klant betaalt Vergoedingen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DatabaseBackups', 'Database Backups');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DatabaseStatistics', 'Database statistieken');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Date', 'datum');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Days', 'dagen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Debit', 'debet');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DebitTotal', 'debettotaal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DefaultAddress', 'Default Address');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DefaultCurrency', 'standaard valuta');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DefaultReorderQuantityAbbreviated', 'Default Reorder Aantal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Definition', 'definitie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Delete', 'verwijderen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DeleteSelected', 'Verwijder geselecteerde');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DeliverTo', 'leveren aan');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Department', 'afdeling');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Departments', 'afdelingen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Difference', 'verschil');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DirectPurchase', 'direct Aankoop');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DirectSales', 'directe verkoop');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Discount', 'korting');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Documentation', 'documentatie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Download', 'Download');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DownloadSourceCode', 'Broncode downloaden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'DueDate', 'vervaldag');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EODConsole', 'Einde van de dag Console');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ER', 'effectief tarief');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ERToBaseCurrency', 'Wisselkoers (Om basisvaluta)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ERToHomeCurrency', 'Wisselkoers (Om startpagina Valuta)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EditSelected', 'Bewerken Geselecteerde');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Email', 'e-mail');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EmailAddress', 'e-Mailadres');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EmailThisDelivery', 'E-mail Dit Levering');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EmailThisInvoice', 'E-mail deze factuur');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EmailThisNote', 'E-mail Dit Opmerking');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EmailThisOrder', 'E-mail Dit Bestel');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EmailThisQuotation', 'E-mail dit citaat');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EmailThisReceipt', 'E-mail Dit Ontvangst');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EmailThisReturn', 'E-mail Dit Return');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EndOfDayOperation', 'Einde van de dag Operatie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EnterBackupName', 'Voer Backup Naam');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EnterNewPassword', 'Voer een nieuw wachtwoord');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'EnteredBy', 'Ingestuurd door');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Entities', 'entiteiten');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ExchangeRate', 'wisselkoers');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Execute', 'uitvoeren');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ExternalCode', 'externe code');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Factor', 'factor');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Fax', 'fax');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'FilePath', 'bestandspad');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'FinalDueAmountinBaseCurrency', 'Final verschuldigde bedrag in basisvaluta');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'FirstPage', 'eerste Pagina');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'FiscalYear', 'fiscaal Jaar');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Flag', 'vlag');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'FlagBackgroundColor', 'Vlag Achtergrond Kleur');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'FlagDescription', 'U kunt deze transactie markeren met een vlag, maar u zult niet in staat zijn om de vlaggen die door andere gebruikers zien.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'FlagForegroundColor', 'Vlag Voorgrondkleur');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'FlagThisTransaction', 'Vlag Deze transactie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'FlaggedTransactions', 'markeerde Transacties');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Flags', 'vlaggen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Frequencies', 'frequenties');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'From', 'uit');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'GLAdvice', 'General Ledger Advies');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'GLDetails', 'General Ledger Details');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'GLHead', 'GL Head');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Go', 'gaan');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'GoToTop', 'Ga naar de top.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'GoodsReceiptNote', 'Goederenontvangst Opmerking');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'GrandTotal', 'algemeen totaal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Home', 'huis');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'HomeCurrency', 'thuis Valuta');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'HundredthName', 'honderdste Naam');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Id', 'Id');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'InVerificationStack', 'In Verificatie Stack');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'IncludeZeroBalanceAccounts', 'Omvatten Zero Balance Accounts');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Industries', 'industrieën');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'InitializeDayEnd', 'Initialiseren Day End');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'InstallMixERP', 'Installeer MixERP');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'InstrumentCode', 'instrument Code');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'InterestApplicable', 'rente Toepasselijk');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'InvalidDate', 'Dit is geen geldige datum.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'InvalidImage', 'Dit is geen geldige afbeelding.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'InventoryAdvice', 'inventaris Advies');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'InvoiceAmount', 'factuurbedrag');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'InvoiceDetails', 'factuurgegevens');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'IsCash', 'is contant geld');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'IsEmployee', 'is Werknemer');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'IsParty', 'partij is');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'IsSystemAccount', 'Is het systeem rekening');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemCode', 'artikelcode');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemCostPrices', 'tem kostprijzen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemGroup', 'artikelgroep');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemGroups', 'artikelgroepen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemId', 'Item ID');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemName', 'Naam van het punt');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemOverview', 'Item Overzicht');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemSellingPrices', 'Item verkoopprijzen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemType', 'Item Type');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemTypes', 'itemtypen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Items', 'items');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ItemsBelowReorderLevel', 'Artikelen Onder Reorder Level');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'JournalVoucher', 'dagboek Voucher');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'JournalVoucherEntry', 'Dagboek voucher binnenkomst');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'KeyColumnEmptyExceptionMessage', 'hij property ''Key Column'' kan niet leeg worden gelaten.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LCCredit', 'Letter of Credit Credit');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LCDebit', 'Letter of Credit Debet');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LastAccessedOn', 'Laatst geraadpleegd op');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LastLoginIP', 'Laatst ingelogd IP');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LastLoginOn', 'Laatst ingelogd On');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LastPage', 'laatste Pagina');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LastPaymentDate', 'Laatste Betaaldatum');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LastWrittenOn', 'Laatste Geschreven Op');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LateFees', 'late Vergoedingen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LeadSources', 'leadbronnen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LeadStatuses', 'lead statussen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LeadTime', 'Levertijd');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ListItems', 'items lijst');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Load', 'belasting');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'LoggedInTo', 'Aangemeld bij');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ManageProfile', 'Profiel beheren');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MaximumCreditAmount', 'Maximale Credit Bedrag');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MaximumCreditPeriod', 'Maximale Credit Periode');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MenuAccessPolicy', 'Menu toegangsbeleid');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MenuCode', 'Menu code');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MenuId', 'Menu Identifier');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MenuText', 'Menu Text');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MerchantFeeInPercent', 'Merchant Fee (in procenten)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MerchantFeeSetup', 'Merchant Fee Setup');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MergeBatchToGRN', 'Batch fuseren om goederen mee ontvangst');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MergeBatchToSalesDelivery', 'Batch fuseren om de verkoop levering');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MergeBatchToSalesOrder', 'Batch fuseren tot verkooporder');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MixERPDocumentation', 'MixERP Documentatie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MixERPLinks', 'MixERP Links');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'MixERPOnFacebook', 'MixERP op Facebook');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Name', 'naam');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'NewJournalEntry', 'nieuwe journaalpost');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'NewPassword', 'nieuw Wachtwoord');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'NextPage', 'Volgende pagina');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'No', 'geen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'NonTaxableSales', 'zonder BTW verkoop');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'None', 'geen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'NormallyDebit', 'normaal debiteren');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'NothingSelected', 'Niets geselecteerd.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Notifications', 'Bekendmakingen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'OK', 'oK');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Office', 'kantoor');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'OfficeCode', 'office-code');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'OfficeInformation', 'kantoor informatie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'OfficeName', 'Vestiging Naam');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'OfficeNickName', 'Office Nick Name');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'OfficeSetup', 'Office Setup');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'OnlyNumbersAllowed', 'Voer een geldig nummer.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'OpeningInventory', 'Het openen van de inventaris');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'OpportunityStages', 'gelegenheid stadia');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'OtherDetails', 'andere Details');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PANNumber', 'PAN Aantal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PageN', 'Pagina {0}');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ParentAccount', 'bovenliggende rekening');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Parties', 'partijen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Party', 'partij');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PartyCode', 'partij Code');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PartyName', 'Naam van de Partij');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PartySummary', 'partij Samenvatting');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PartyType', 'partij Type');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PartyTypes', 'partij Types');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Password', 'wachtwoord');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PasswordUpdated', 'Wachtwoord is bijgewerkt.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PaymentCards', 'betaalkaarten');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PaymentTerms', 'Betaalvoorwaarden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PerformEODOperation', 'Voeren End Of Day Operation');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PerformingEODOperation', 'Het uitvoeren van End Of Day Operation');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Phone', 'telefoon');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PlaceReorderRequests', 'Plaats Reorder Verzoeken');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PostTransaction', 'na de transactie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PostedBy', 'geplaatst door');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PostedDate', 'geplaatst Date');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PreferredSupplier', 'Preferred Supplier');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PreferredSupplierIdAbbreviated', 'Preferred Supplier Identifier');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Prepare', 'bereiden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PreparedOn', 'opgesteld op');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Preview', 'Voorbeeld');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PreviousBalance', 'vorige balans');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PreviousCredit', 'vorige krediet');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PreviousDebit', 'vorige debet');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PreviousPage', 'vorige Pagina');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PreviousPeriod', 'Vorig boekjaar');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Price', 'prijs');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PriceType', 'Prijs Type');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Print', 'afdruk');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PrintGlEntry', 'grootboek binnenkomst af te drukken');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PrintReceipt', 'afdrukken Ontvangst');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ProfitAndLossStatement', 'Winst & verliesrekening');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Progress', 'vooruitgang');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PurchaseInvoice', 'aankoop Factuur');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PurchaseOrder', 'inkooporder');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PurchaseReturn', 'aankoop terugkeer');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'PurchaseType', 'soort aankoop');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Quantity', 'hoeveelheid');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'QuantityAbbreviated', 'hoeveelheid');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'QuantityOnHandAbbreviated', 'hoeveelheid(voorradig)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Rate', 'tarief');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Reason', 'reden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Receipt', 'ontvangst');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReceiptAmount', 'ontvangst Bedrag');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReceiptCurrency', 'ontvangst Valuta');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReceiptType', 'ontvangst Type');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReceivedAmountInaboveCurrency', 'Ontvangen bedrag (In bovenstaande Valuta)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReceivedCurrency', 'ontvangen Valuta');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RecurringInvoiceSetup', 'Terugkerende factuur setup');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RecurringInvoices', 'terugkerende facturen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReferenceNumber', 'verwijzing #');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReferenceNumberAbbreviated', 'verwijzing #');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RefererenceNumberAbbreviated', 'verwijzing #');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RegistrationDate', 'registratie Datum');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Reject', 'verwerpen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RejectThisTransaction', 'Verwerpen deze transactie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RejectedTransactions', 'verworpen Transacties');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RememberMe', 'Onthoud Me');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReorderLevel', 'Re orde Niveau');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReorderQuantityAbbreviated', 'Re ordehoeveelheid');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReorderUnitName', 'Naam Reorder Unit');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RequiredField', 'Dit is een verplicht veld.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RequiredFieldDetails', 'De velden met een asterisk (*) zijn verplicht.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Reset', 'resetten');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RestrictedTransactionMode', 'Dit etablissement staat niet toe dat de transactie posting.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RetainedEarnings', 'ingehouden winsten');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Return', 'terugkeer');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ReturnToView', 'Terug te bekijken');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Role', 'rol');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Roles', 'Rollen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RowNumber', 'rijnummer');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'RunningTotal', 'Voorlopig totaal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SSTNumber', 'SST Aantal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesByMonthInThousands', 'Omzet per maand (in duizenden)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesByOfficeInThousands', 'Omzet per kantoor (in duizenden)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesDelivery', 'verkoop levering');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesDeliveryNote', 'afleveringsbon');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesInvoice', 'verkoopfactuur');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesOrder', 'verkooporder');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesPersons', 'verkopers');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesQuotation', 'verkoop offerte');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesReceipt', 'kassabon');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesReturn', 'verkoop terugkeer');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesTaxDetails', 'omzetbelasting informatie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesTaxExemptDetails', 'omzetbelasting vrijgesteld informatie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesTaxExempts', 'omzetbelasting kaderleden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesTaxTypes', 'omzetbelasting types');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesTaxes', 'omzetbelasting');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesTeams', 'verkoopteams');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SalesType', 'sales soort');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Salesperson', 'verkoop persoon');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Save', 'Opslaan');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Saving', 'besparing');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Select', 'kiezen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectCustomer', 'Selecteer Klant');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectFlag', 'Selecteer een vlag.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectLanguage', 'Taal selecteren');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectOffice', 'Selecteer Office');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectParty', 'Kies een partij');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectPaymentCard', 'Select Payment Card');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectStore', 'Selecteer winkel');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectSupplier', 'Kies een leverancier');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectUnit', 'Selecteer eenheid');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectUser', 'Kies een gebruiker');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SelectYourBranch', 'Selecteer uw branche');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Shipper', 'verzender');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Shippers', 'verladers');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ShippingAddress', 'verzendadres');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ShippingAddressMaintenance', 'Verzenden Adres Onderhoud');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ShippingAddresses', 'verzendadres');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ShippingCharge', 'verzendkosten');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ShippingCompany', 'rederij');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Show', 'tonen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ShowAll', 'toon alles');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ShowCompact', 'Toon compacte');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SignIn', 'Aanmelden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SignOut', 'uitloggen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SigningIn', 'aanmelden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Start', 'begin');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'StateSalesTaxes', 'Verkoop rijksbelastingen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'StatementOfCashFlows', 'Kasstroomoverzicht');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'StatementReference', 'verklaring verwijzing');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'States', 'Staten');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Status', 'toestand');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'StockAdjustment', 'voorraadaanpassingen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'StockTransaction', 'beurstransactie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'StockTransferJournal', 'voorraad overdracht tijdschrift');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Store', 'winkel');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'StoreName', 'naam van de winkel');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'StoreTypes', 'types winkel');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Stores', 'winkel');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SubTotal', 'subtotaal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SubmitBugs', 'Bugs indienen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'SupplierName', 'Leverancier Naam');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Support', 'ondersteuning');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TableEmptyExceptionMessage', 'Het pand ''tafel'' kan niet leeg worden gelaten.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TableSchemaEmptyExceptionMessage', 'Het pand ''tabelschema'' kan niet leeg worden gelaten.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TaskCompletedSuccessfully', 'De taak werd met succes afgerond.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Tax', 'belasting');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TaxAuthorities', 'Belastingdienst');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TaxExemptTypes', 'ax Exempt Types');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TaxForm', 'Vorm van de belasting');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TaxMaster', 'fiscale meester');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TaxRate', 'belastingtarief');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TaxSetup', 'belasting setup');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TaxTotal', 'belasting totaal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TaxTypes', 'belastingsoorten');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TaxableSales', 'belastbare verkoop');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Tel', 'telefoon');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'To', 'naar');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TopSellingProductsOfAllTime', 'Best verkopende producten van alle tijden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Total', 'totaal');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TotalDueAmount', 'Totale verschuldigde bedrag');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TotalDueAmountCurrentOffice', 'Totale verschuldigde bedrag (Current Office)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TotalDueAmountInBaseCurrency', 'Totale verschuldigde bedrag (In basisvaluta)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TotalSales', 'Totale verkoop:');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TranCode', 'transactiecode');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TranId', 'identifier transactie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TranIdParameter', 'identifier transactie: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TransactionDate', 'transactiedatum');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TransactionDetails', 'transactiegegevens');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TransactionStatement', 'transactie Verklaring');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TransactionStatus', 'transactie status');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TransactionSummary', 'Samenvatting transactie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TransactionTimestamp', 'transactie Tijdstempel');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TransactionType', 'transactietype');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TransactionValue', 'transactiewaarde');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TransferDetails', 'overdracht van gegevens');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'TrialBalance', 'Saldibalans');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Type', 'Type');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'UncheckAll', 'Deselecteer alles');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Undo', 'ongedaan maken');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Unit', 'eenheid');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'UnitId', 'identifier eenheid');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'UnitName', 'naam van het apparaat');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'UnitsOfMeasure', 'Maateenheden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'UnknownError', 'Bewerking is mislukt vanwege een onbekende fout.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Update', '-update');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Upload', 'uploaden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'UploadAttachments', 'Upload Bijlagen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'UploadAttachmentsForThisTransaction', 'Upload bijlagen voor deze transactie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Url', 'uniform resource locator');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Use', 'gebruik');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'User', 'gebruiker');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'UserId', 'gebruiker Identifier');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Username', 'gebruikersnaam');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Users', 'gebruikers');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'VacuumDatabase', 'vacuüm-database');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'VacuumFullDatabase', 'Vacuüm-database (volledige)');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ValueDate', 'valutadatum');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'VerificationReason', 'verificatie Reden');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'VerifiedBy', 'geverifieerd door');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'VerifiedOn', 'geverifieerd op');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Verify', 'controleren');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'View', 'uitzicht');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewAttachments', 'Bekijk Bijlagen');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewBackups', 'Bekijk Backups');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewCustomerCopy', 'Bekijk Klant Copy');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewEmptyExceptionMessage', 'Het pand ''Bekijk'' kan niet leeg worden gelaten.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewSalesInovice', 'Bekijk Sales Invoice');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewSchemaEmptyExceptionMessage', 'Het pand ''Bekijk schema'' kan niet leeg worden gelaten.');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewThisAdjustment', 'Bekijk deze aanpassing');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewThisDelivery', 'Bekijk deze aanpassing');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewThisInvoice', 'Bekijk deze factuur');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewThisNote', 'Bekijk deze Nota');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewThisOrder', 'Bekijk dit Bestel');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewThisQuotation', 'Bekijk dit citaat');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewThisReturn', 'Bekijk deze terugkeer');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'ViewThisTransfer', 'Bekijk deze overdracht');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'VoucherVerification', 'voucher Verificatie');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'VoucherVerificationPolicy', 'Voucher Verificatie Beleid');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Warning', 'waarschuwing');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'WhichBank', 'Welke Bank?');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'WithdrawTransaction', 'Waarom wil je om deze transactie te trekken?...');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'WithdrawnTransactions', 'ingetrokken Transacties');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Workflow', 'workflow');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'WorldSalesStatistics', 'Wereld Sales Statistieken');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'Yes', 'ja');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'YourName', 'jouw Naam');
    PERFORM localization.add_localized_resource('Titles', 'nl', 'YourOffice', 'uw Office');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AboutInitializingDayEnd', 'Sobre o Dia Inicializar End');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AboutYourOffice', 'Sobre seu escritório');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Access', 'acesso');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AccessIsDenied', 'Acesso negado.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Account', 'conta');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AccountId', 'conta Identificador');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AccountMaster', 'mestre conta');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AccountName', 'Nome Da Conta');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AccountNumber', 'Número De Conta');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AccountOverview', 'Visão geral da conta');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AccountStatement', 'Extrato de Conta');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Action', 'ação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Actions', 'ações');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Actual', 'real');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Add', 'adicionar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AddNew', 'Adicionar novo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Address', 'endereço');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AddressAndContactInfo', 'Endereço e Informações de contato');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AgeingSlabs', 'Lajes Envelhecimento');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AgentBonusSlabAssignment', 'Bonus atribuição laje');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AgentBonusSlabs', 'Slab Bonus para vendedores');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Alerts', 'Alertas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Amount', 'quantidade');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AmountInBaseCurrency', 'Montante (em Moeda Base)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AmountInHomeCurrency', 'Montante (Em Casa Moeda)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AnalyzeDatabse', 'analisar Banco de Dados');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Approve', 'aprovar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ApproveThisTransaction', 'Aprovar esta transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ApprovedTransactions', 'Transações aprovados');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AreYouSure', 'Tem certeza de que sabe o que está fazendo?');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AssignCashier', 'atribuir Caixa');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AttachmentsPlus', 'Anexos (+)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AutoVerificationPolicy', 'Política de verificação Auto');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'AutomaticallyApprovedByWorkflow', 'Aprovadas automaticamente pelo workflow');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Back', 'de volta');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'BackToPreviousPage', 'Voltar à página anterior');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'BackupConsole', 'Console de backup');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'BackupDatabase', 'backup Database');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'BackupNow', 'backup agora');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Balance', 'equilíbrio');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'BalanceSheet', 'Balanço');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'BankAccounts', 'Contas Bancárias');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'BankTransactionCode', 'Banco Código de transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'BaseCurrency', 'Moeda Base');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'BaseUnitName', 'Nome Unidade de Base');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'BonusSlabDetails', 'Bônus Placa detalhes para vendedores');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Book', 'livro');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Brand', 'marca');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Brands', 'marcas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Browse', 'procurar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CSTNumber', 'Número CST');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Cancel', 'cancelar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CashFlowHeading', 'Cashflow Heading');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CashFlowHeadings', 'Cashflow Heading');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CashFlowSetup', 'configuração Cashflow');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CashRepositories', 'Repositórios de caixa');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CashRepository', 'repositório de Caixa');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CashRepositoryBalance', 'Equilíbrio repositório Dinheiro');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CashTransaction', 'dinheiro ransaction');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ChangePassword', 'Alterar A Senha');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ChangeSideWhenNegative', 'Mudança Side Quando Negative');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ChartOfAccounts', 'Plano de Contas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Check', 'Verificar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CheckAll', 'Confira tudo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Checklists', 'As listas de verificação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Clear', 'claro');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Close', 'perto');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ClosedTransactions', 'transações fechadas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ClosingBalance', 'Saldo final');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ClosingCredit', 'fechando crédito');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ClosingDebit', 'fechando Débito');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Comment', 'comentário');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CompoundItemDetails', 'Detalhes Composto item');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CompoundItems', 'Itens Composto');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CompoundUnitsOfMeasure', 'Units compostas de medida');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Confidential', 'confidencial');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ConfirmPassword', 'confirme Sua Senha');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ConvertedtoBaseCurrency', 'Convertido para a moeda base');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ConvertedtoHomeCurrency', 'Convertido para Início Moeda');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CostCenter', 'Centro de Custo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CostCenters', 'Centros de custo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Counters', 'contadores');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Counties', 'Concelhos');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Countries', 'países');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CountySalesTaxes', 'Impostos County Vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CreateaUserAccountforYourself', 'Criar uma conta de usuário para você');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CreatedOn', 'Criado em');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Credit', 'crédito');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CreditAllowed', 'crédito de estimação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CreditTotal', 'O crédito total');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Currencies', 'moedas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Currency', 'moeda');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CurrencyCode', 'Código da Moeda');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CurrencyName', 'Nome da Moeda');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CurrencySymbol', 'Símbolo de moeda');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CurrentIP', 'IP atual');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CurrentLoginOn', 'Entrada corrente On');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CurrentPassword', 'Senha Atual');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CurrentPeriod', 'Período atual');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CustomerCode', 'Código do cliente');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CustomerName', 'Nome do cliente');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CustomerPanNumber', 'Cliente Conta Permanente número #');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'CustomerPaysFees', 'Cliente paga taxas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DatabaseBackups', 'Backups de banco de dados');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DatabaseStatistics', 'Estatísticas do Banco de Dados');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Date', 'data');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Days', 'dias');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Debit', 'débito');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DebitTotal', 'Débito total');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DefaultAddress', 'Endereço padrão');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DefaultCurrency', 'Moeda padrão');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DefaultReorderQuantityAbbreviated', 'Padrão Reordenar Qtde');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Definition', 'definição');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Delete', 'excluir');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DeleteSelected', 'Delete Selected');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DeliverTo', 'entregar Para');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Department', 'departamento');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Departments', 'departamentos');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Difference', 'diferença');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DirectPurchase', 'Compra Direta');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DirectSales', 'Vendas Diretas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Discount', 'desconto');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Documentation', 'documentação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Download', 'baixar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DownloadSourceCode', 'Baixar o código fonte');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'DueDate', 'Data De Vencimento');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EODConsole', 'End Of Console Dia');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ER', 'Taxa Efetiva');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ERToBaseCurrency', 'Taxa de Câmbio (Para Moeda Base)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ERToHomeCurrency', 'Taxa de Câmbio (To Home Moeda)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EditSelected', 'editar Selecionado');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Email', 'Email');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EmailAddress', 'Endereço De Email');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EmailThisDelivery', 'Enviar por e-Entrega');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EmailThisInvoice', 'Enviar por e-Fatura');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EmailThisNote', 'Enviar por e-Nota');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EmailThisOrder', 'Enviar por e-Order');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EmailThisQuotation', 'Enviar por e-cotação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EmailThisReceipt', 'Enviar por e-Receipt');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EmailThisReturn', 'Enviar por e-Retorno');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EndOfDayOperation', 'Fim da Operação Dia');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EnterBackupName', 'Digite o Nome do backup');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EnterNewPassword', 'Digite uma nova senha');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'EnteredBy', 'Introduzido por');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Entities', 'entidades');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ExchangeRate', 'Taxa De Câmbio');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Execute', 'executar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ExternalCode', 'O código externo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Factor', 'fator');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Fax', 'fax');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'FilePath', 'Caminho do arquivo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'FinalDueAmountinBaseCurrency', 'Valor Devido Final em Moeda Base');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'FirstPage', 'primeira Página');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'FiscalYear', 'Ano Fiscal');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Flag', 'bandeira');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'FlagBackgroundColor', 'Cor de fundo da bandeira');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'FlagDescription', 'Você pode marcar esta transação com uma bandeira, no entanto, você não será capaz de ver as bandeiras criadas por outros usuários.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'FlagForegroundColor', 'Bandeira Foreground Color');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'FlagThisTransaction', 'Bandeira essa transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'FlaggedTransactions', 'Transações sinalizadas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Flags', 'bandeiras');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Frequencies', 'frequências');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'From', 'a partir de');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'GLAdvice', 'General Ledger Advice');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'GLDetails', 'General Ledger Detalhes');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'GLHead', 'GL Cabeça');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Go', 'ir');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'GoToTop', 'Ir para o topo.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'GoodsReceiptNote', 'Entrada de mercadorias Nota');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'GrandTotal', 'total Geral');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Home', 'casa');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'HomeCurrency', 'Início Moeda');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'HundredthName', 'Nome Hundredth');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Id', 'identificador');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'InVerificationStack', 'Em Verificação Stack');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'IncludeZeroBalanceAccounts', 'Incluir Contas saldo zero');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Industries', 'Indústrias');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'InitializeDayEnd', 'Inicializar Dia End');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'InstallMixERP', 'instale MixERP');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'InstrumentCode', 'Código Instrument');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'InterestApplicable', 'Juros aplicável');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'InvalidDate', 'Esta não é uma data válida.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'InvalidImage', 'Esta não é uma imagem válida.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'InventoryAdvice', 'Advice Inventory');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'InvoiceAmount', 'valor da fatura');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'InvoiceDetails', 'Detalhes da fatura');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'IsCash', 'é Dinheiro');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'IsEmployee', 'é Employee');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'IsParty', 'Partido é');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'IsSystemAccount', 'É Conta Sistema');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemCode', 'Código do item');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemCostPrices', 'Preços custo do item');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemGroup', 'Grupo Item');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemGroups', 'Grupos de itens');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemId', 'Identificador de Itens');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemName', 'Nome do artigo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemOverview', 'Síntese de itens');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemSellingPrices', 'Item de preços de venda');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemType', 'Tipo de Item');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemTypes', 'Tipos de Item');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Items', 'itens');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ItemsBelowReorderLevel', 'Itens abaixo Reordenar Nível');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'JournalVoucher', 'Jornal Vale');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'JournalVoucherEntry', 'Entrada Jornal Vale');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'KeyColumnEmptyExceptionMessage', 'A propriedade ''Coluna Key'' não pode ser deixado em branco.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LCCredit', 'Carta de Crédito Crédito');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LCDebit', 'Carta de Crédito Débito');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LastAccessedOn', 'Último acesso em');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LastLoginIP', 'Último login IP');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LastLoginOn', 'Último login On');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LastPage', 'Última Página');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LastPaymentDate', 'Última Data de Pagamento');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LastWrittenOn', 'Última Written On');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LateFees', 'taxas atrasadas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LeadSources', 'fontes de chumbo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LeadStatuses', 'Os status de chumbo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LeadTime', 'Tempo De Espera');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ListItems', 'Lista de Itens');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Load', 'carga');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'LoggedInTo', 'Logado para');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ManageProfile', 'Gerenciar perfil');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MaximumCreditAmount', 'Montante Máximo de Crédito');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MaximumCreditPeriod', 'Período máximo de crédito');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MenuAccessPolicy', 'Política de acesso ao menu');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MenuCode', 'código do menu');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MenuId', 'Identificador de Menu');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MenuText', 'Texto Menu');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MerchantFeeInPercent', 'Taxa Merchant (em percentagem)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MerchantFeeSetup', 'Setup Fee Merchant');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MergeBatchToGRN', 'Mesclar Batch a entrada de mercadorias Nota');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MergeBatchToSalesDelivery', 'Mesclar Batch para Entrega de Vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MergeBatchToSalesOrder', 'Mesclar Batch de Pedidos de Vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MixERPDocumentation', 'Documentação MixERP');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MixERPLinks', 'Ligações MixERP');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'MixERPOnFacebook', 'MixERP On Facebook');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Name', 'nome');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'NewJournalEntry', 'Nova entrada de diário');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'NewPassword', 'nova Senha');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'NextPage', 'próxima Página');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'No', 'não');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'NonTaxableSales', 'Vendas não tributáveis');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'None', 'nenhum');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'NormallyDebit', 'normalmente Débito');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'NothingSelected', 'Nada selecionado.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Notifications', 'Notificações');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'OK', 'ESTÁ BEM');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Office', 'escritório');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'OfficeCode', 'Código escritório');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'OfficeInformation', 'Gabinete de Informação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'OfficeName', 'Nome de Agência');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'OfficeNickName', 'Nome Escritório Nick');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'OfficeSetup', 'instalação do escritório');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'OnlyNumbersAllowed', 'Por favor, digite um número válido.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'OpeningInventory', 'Inventário de abertura');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'OpportunityStages', 'Estágios da Oportunidade');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'OtherDetails', 'outros Detalhes');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PANNumber', 'Número PAN');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PageN', 'Página {0}');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ParentAccount', 'Conta de Pais');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Parties', 'Partes');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Party', 'partido');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PartyCode', 'Código do partido');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PartyName', 'Nome do partido');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PartySummary', 'Resumo do partido');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PartyType', 'Tipo de Festa');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PartyTypes', 'Tipos partido');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Password', 'senha');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PasswordUpdated', 'A senha foi atualizada.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PaymentCards', 'Cartões de pagamento');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PaymentTerms', 'Condições de pagamento');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PerformEODOperation', 'Execute End Of Operação Dia');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PerformingEODOperation', 'Realizando End Of Operação Dia');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Phone', 'telefone');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PlaceReorderRequests', 'Coloque Pedidos Reordenar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PostTransaction', 'pós Transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PostedBy', 'Postado por');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PostedDate', 'Publicado Data');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PreferredSupplier', 'Fornecedor preferencial');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PreferredSupplierIdAbbreviated', 'Identificador Fornecedor Preferencial');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Prepare', 'preparar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PreparedOn', 'preparado em');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Preview', 'visualização');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PreviousBalance', 'Equilíbrio Anterior');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PreviousCredit', 'crédito Anterior');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PreviousDebit', 'Débito Anterior');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PreviousPage', 'Página Anterior');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PreviousPeriod', 'Período Anterior');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Price', 'preço');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PriceType', 'tipo de preço');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Print', 'impressão');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PrintGlEntry', 'Imprimir entrada Geral livro-');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PrintReceipt', 'Imprimir Recibo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ProfitAndLossStatement', 'declaração de ganhos e perdas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Progress', 'progresso');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PurchaseInvoice', 'nota fiscal de compra');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PurchaseOrder', 'Ordem De Compra');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PurchaseReturn', 'compra Retorno');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'PurchaseType', 'Tipo de Compra');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Quantity', 'quantidade');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'QuantityAbbreviated', 'quantidade');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'QuantityOnHandAbbreviated', 'Quantidade (na mão)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Rate', 'taxa');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Reason', 'razão');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Receipt', 'recibo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReceiptAmount', 'Receipt Montante');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReceiptCurrency', 'moeda recibo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReceiptType', 'Tipo de recebimento');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReceivedAmountInaboveCurrency', 'Valor recebido (em moeda acima)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReceivedCurrency', 'Moeda recebida');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RecurringInvoiceSetup', 'configuração fatura recorrente');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RecurringInvoices', 'facturas recorrentes');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReferenceNumber', 'Referência #');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReferenceNumberAbbreviated', 'Referência #');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RefererenceNumberAbbreviated', 'Referência #');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RegistrationDate', 'Data De Registro');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Reject', 'rejeitar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RejectThisTransaction', 'Rejeitar esta transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RejectedTransactions', 'transações rejeitadas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RememberMe', 'Lembre De Mim');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReorderLevel', 'Reordenar Nível');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReorderQuantityAbbreviated', 'Reordenar Quantidade');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReorderUnitName', 'Nome da Unidade de reabastecimento');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RequiredField', 'Este é um campo obrigatório.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RequiredFieldDetails', 'Os campos marcados com asterisco (*) são obrigatórios.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Reset', 'restabelecer');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RestrictedTransactionMode', 'Este estabelecimento não permite postagem transação.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RetainedEarnings', 'Lucros Acumulados');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Return', 'retorno');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ReturnToView', 'Regressar à vista');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Role', 'papel');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Roles', 'papéis');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RowNumber', 'número da linha');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'RunningTotal', 'execução total');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SSTNumber', 'Número SST');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesByMonthInThousands', 'Vendas por mês (em milhares)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesByOfficeInThousands', 'Vendas por escritório (em milhares)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesDelivery', 'Entrega de Vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesDeliveryNote', 'Nota de Entrega');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesInvoice', 'Fatura de Vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesOrder', 'pedido de Vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesPersons', 'vendedores');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesQuotation', 'cotação de vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesReceipt', 'nota de venda');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesReturn', 'Retorno de Vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesTaxDetails', 'Detalhes de imposto sobre vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesTaxExemptDetails', 'Imposto sobre vendas Detalhes Isentos');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesTaxExempts', 'Isenta de imposto sobre vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesTaxTypes', 'Tipos de imposto sobre vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesTaxes', 'Impostos sobre Vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesTeams', 'equipes de Vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SalesType', 'Tipo de Vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Salesperson', 'vendedor');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Save', 'Salvar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Saving', 'economia');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Select', 'selecionar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectCustomer', 'selecione cliente');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectFlag', 'Selecione uma bandeira');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectLanguage', 'Selecione o idioma');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectOffice', 'Select Escritório');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectParty', 'Selecione Partido');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectPaymentCard', 'Selecione Cartão de Pagamento');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectStore', 'selecione loja');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectSupplier', 'Escolha um Fornecedor');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectUnit', 'Selecionar unidade');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectUser', 'Selecionar Usuário');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SelectYourBranch', 'Escolha o seu Ramo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Shipper', 'expedidor');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Shippers', 'Transportadoras');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ShippingAddress', 'Endereço Para Envio');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ShippingAddressMaintenance', 'Endereço para envio de Manutenção');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ShippingAddresses', 'Endereço Para Envio');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ShippingCharge', 'A taxa de envio');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ShippingCompany', 'Empresa Envios');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Show', 'espetáculo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ShowAll', 'mostrar Tudo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ShowCompact', 'mostrar compacto');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SignIn', 'assinar Em');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SignOut', 'Sair');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SigningIn', 'Entrando');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Start', 'começo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'StateSalesTaxes', 'Impostos estaduais sobre vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'StatementOfCashFlows', 'Demonstração dos Fluxos de Caixa');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'StatementReference', 'declaração de Referência');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'States', 'Unidos');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Status', 'estado');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'StockAdjustment', 'da adaptação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'StockTransaction', 'da transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'StockTransferJournal', 'Jornal da Transferência');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Store', 'loja');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'StoreName', 'Nome da loja');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'StoreTypes', 't ipos de armazenamento');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Stores', 'lojas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SubTotal', 'Sub Total');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SubmitBugs', 'submeta bugs');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'SupplierName', 'Nome do fornecedor');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Support', 'apoio');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TableEmptyExceptionMessage', 'A propriedade ''Tabela'' não pode ser deixado em branco.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TableSchemaEmptyExceptionMessage', 'A propriedade ''Schema Table'' não pode ser deixado em branco.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TaskCompletedSuccessfully', 'A tarefa foi concluída com sucesso.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Tax', 'imposto');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TaxAuthorities', 'Fisco');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TaxExemptTypes', 'Fiscais Tipos Isentos');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TaxForm', 'Formulário de imposto');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TaxMaster', 'mestre imposto');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TaxRate', 'Taxa de imposto');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TaxSetup', 'configuração fiscal');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TaxTotal', 'O total de impostos');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TaxTypes', 'tipos de impostos');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TaxableSales', 'vendas tributáveis');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Tel', 'telefone');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'To', 'para');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TopSellingProductsOfAllTime', 'Principais produtos de venda de todos os tempos');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Total', 'total');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TotalDueAmount', 'Montante total devido');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TotalDueAmountCurrentOffice', 'Valor Devido Total (Escritório Atual)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TotalDueAmountInBaseCurrency', 'Valor Devido total (em Moeda Base)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TotalSales', 'Total de vendas:');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TranCode', 'Código de transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TranId', 'identificador de transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TranIdParameter', 'identificador de transação: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TransactionDate', 'data da transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TransactionDetails', 'Os detalhes da transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TransactionStatement', 'Declaração de transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TransactionStatus', 'Status da Transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TransactionSummary', 'Resumo da transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TransactionTimestamp', 'Carimbo de tempo de transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TransactionType', 'Tipo de Transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TransactionValue', 'Valor da Operação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TransferDetails', 'Detalhes de transferência');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'TrialBalance', 'Balancete');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Type', 'tipo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'UncheckAll', 'Desmarque tudo');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Undo', 'desfazer');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Unit', 'unidade');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'UnitId', 'identificador da unidade');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'UnitName', 'Nome da Unidade');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'UnitsOfMeasure', 'Unidades de Medida');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'UnknownError', 'A operação falhou devido a um erro desconhecido.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Update', 'atualizar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Upload', 'Carregar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'UploadAttachments', 'enviar anexos');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'UploadAttachmentsForThisTransaction', 'Enviar anexos para esta transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Url', 'Uniform Resource Locator');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Use', 'uso');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'User', 'usuário');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'UserId', 'Identificador de Usuário');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Username', 'Nome de Usuário');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Users', 'usuários');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'VacuumDatabase', 'vácuo de Banco de Dados');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'VacuumFullDatabase', 'Vácuo de banco de dados (completo)');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ValueDate', 'data-valor');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'VerificationReason', 'razão de Verificação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'VerifiedBy', 'verificada por');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'VerifiedOn', 'Verificado em');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Verify', 'verificar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'View', 'vista');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewAttachments', 'Visualizar Acessórios');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewBackups', 'Veja Backups');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewCustomerCopy', 'Cliente Ver Copiar');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewEmptyExceptionMessage', 'A propriedade ''vista'' não pode ser deixado em branco.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewSalesInovice', 'Ver Vendas Fatura');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewSchemaEmptyExceptionMessage', 'A propriedade ''Ver Programação'' não pode ser deixado em branco.');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewThisAdjustment', 'Veja este Adjustment');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewThisDelivery', 'Veja este Entrega');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewThisInvoice', 'Veja este Invoice');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewThisNote', 'Ver Esta Nota');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewThisOrder', 'Veja este Order');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewThisQuotation', 'Veja este Cotação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewThisReturn', 'Veja este retorno');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'ViewThisTransfer', 'Veja este Transferência');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'VoucherVerification', 'Verificação de Vouchers');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'VoucherVerificationPolicy', 'Comprovante Política de Verificação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Warning', 'aviso');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'WhichBank', 'Qual banco?');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'WithdrawTransaction', 'Retirar Transação');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'WithdrawnTransactions', 'Transações retirados');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Workflow', 'Fluxo de Trabalho');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'WorldSalesStatistics', 'Mundo Estatísticas das vendas');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'Yes', 'sim');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'YourName', 'seu Nome');
    PERFORM localization.add_localized_resource('Titles', 'pt', 'YourOffice', 'Your Office');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AboutInitializingDayEnd', 'Об инициализации в конце дня');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AboutYourOffice', 'О вашем офисе');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Access', 'доступ');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AccessIsDenied', 'Отказано в доступе.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Account', 'счет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AccountId', 'Идентификатор аккаунта');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AccountMaster', 'основной счет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AccountName', 'Имя Учетной Записи');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AccountNumber', 'Номер Счета');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AccountOverview', 'Обзор аккаунт');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AccountStatement', 'Выписка по счету');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Action', 'действие');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Actions', 'действия');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Actual', 'фактический');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Add', 'добавлять');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AddNew', 'Добавить новый');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Address', 'адрес');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AddressAndContactInfo', 'Адрес и Контактная информация');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AgeingSlabs', 'Старение плиты');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AgentBonusSlabAssignment', 'Бонус Плиты Назначение');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AgentBonusSlabs', 'Бонус Плиты для продавцов');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Alerts', 'Предупреждения');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Amount', 'количество');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AmountInBaseCurrency', 'Сумма (в базовой валюте)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AmountInHomeCurrency', 'Сумма (в местной валюте)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AnalyzeDatabse', 'Анализ базы данных');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Approve', 'утвердить');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ApproveThisTransaction', 'Утвердить эту сделку');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ApprovedTransactions', 'утвержденные операции');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AreYouSure', 'Вы уверены, что вы знаете, что вы делаете?');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AssignCashier', 'Связать Касса');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AttachmentsPlus', 'Оснастка (+)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AutoVerificationPolicy', 'Авто проверка Политика');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'AutomaticallyApprovedByWorkflow', 'Автоматически Утверждено Workflow');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Back', 'назад');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'BackToPreviousPage', 'Вернуться на предыдущую страницу');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'BackupConsole', 'Резервное копирование консоли');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'BackupDatabase', 'Резервное копирование базы данных');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'BackupNow', 'Резервное копирование сейчас');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Balance', 'баланс');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'BalanceSheet', 'баланс');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'BankAccounts', 'Банковские счета');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'BankTransactionCode', 'Банк Код транзакции');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'BaseCurrency', 'базисная валюта');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'BaseUnitName', 'Имя базового блока');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'BonusSlabDetails', 'Бонусные Плиты Детали для продавцов');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Book', 'книга');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Brand', 'марка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Brands', 'Бренды');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Browse', 'просматривать');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CSTNumber', 'Количество CST');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Cancel', 'отменить');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CashFlowHeading', 'О движении денежных средств товарной позиции');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CashFlowHeadings', 'Денежные средства Заголовки потока');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CashFlowSetup', 'Денежный поток установки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CashRepositories', 'Денежные Хранилища');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CashRepository', 'Денежные средства Repository');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CashRepositoryBalance', 'Остатки денежных средств репозиторий');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CashTransaction', 'сделка за наличный расчет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ChangePassword', 'Изменить Пароль');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ChangeSideWhenNegative', 'Изменить стороне, когда Отрицательный');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ChartOfAccounts', 'План счетов');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Check', 'Проверить');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CheckAll', 'Проверьте все');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Checklists', 'Контрольные');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Clear', 'ясно');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Close', 'близко');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ClosedTransactions', 'Закрытые Сделки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ClosingBalance', 'конечное сальдо');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ClosingCredit', 'Закрытие Кредит');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ClosingDebit', 'Закрытие Дебет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Comment', 'комментарий');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CompoundItemDetails', 'Соединение Пункт подробности');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CompoundItems', 'Составные товары');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CompoundUnitsOfMeasure', 'Составные единицы измерения');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Confidential', 'конфиденциальная');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ConfirmPassword', 'Подтвердите Пароль');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ConvertedtoBaseCurrency', 'В пересчете на базовой валюте');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ConvertedtoHomeCurrency', 'В пересчете на местной валюте');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CostCenter', 'Центр Стоимость');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CostCenters', 'Центр Стоимость');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Counters', 'Счетчики');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Counties', 'Округа');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Countries', 'Страны');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CountySalesTaxes', 'Налоги графства продаж');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CreateaUserAccountforYourself', 'Создание учетной записи пользователя для себя');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CreatedOn', 'Дата создания');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Credit', 'кредит');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CreditAllowed', 'Кредитная животных');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CreditTotal', 'Кредитная Всего');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Currencies', 'валюты');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Currency', 'валюта');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CurrencyCode', 'Код валюты');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CurrencyName', 'Название валюты');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CurrencySymbol', 'Символ валюты');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CurrentIP', 'Текущий IP');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CurrentLoginOn', 'Текущий Войти на');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CurrentPassword', 'Текущий Пароль');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CurrentPeriod', 'текущий период');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CustomerCode', 'Код клиента');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CustomerName', 'Имя клиента');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CustomerPanNumber', 'Номер клиента постоянного счета #');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'CustomerPaysFees', 'Заказчик оплачивает сборы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DatabaseBackups', 'Резервное копирование баз данных');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DatabaseStatistics', 'Статистика базы данных');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Date', 'дата');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Days', 'дней');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Debit', 'дебет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DebitTotal', 'Дебет Всего');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DefaultAddress', 'Адрес по умолчанию');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DefaultCurrency', 'Базовая валюта');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DefaultReorderQuantityAbbreviated', 'По умолчанию Reorder Количество');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Definition', 'определение');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Delete', 'удалять');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DeleteSelected', 'Удалить выбранные');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DeliverTo', 'доставить');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Department', 'отдел');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Departments', 'ведомства');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Difference', 'разница');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DirectPurchase', 'Прямая Покупка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DirectSales', 'Прямые продажи');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Discount', 'скидка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Documentation', 'документация');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Download', 'скачать');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DownloadSourceCode', 'Скачать исходный код');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'DueDate', 'Срок Оплаты');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EODConsole', 'В конце дня консоли');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ER', 'Эффективная ставка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ERToBaseCurrency', 'Обменный курс (Для базовой валюты)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ERToHomeCurrency', 'Обменный курс (To Home Валюта)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EditSelected', 'Изменить выбранные');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Email', 'Email');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EmailAddress', 'Адрес Электронной Почты');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EmailThisDelivery', 'Электронная почта этой поставки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EmailThisInvoice', 'Электронная почта этот счет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EmailThisNote', 'Пошлите это к сведению');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EmailThisOrder', 'Электронная почта Этот заказ');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EmailThisQuotation', 'Электронная почта эта цитата');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EmailThisReceipt', 'Электронная почта эту квитанцию');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EmailThisReturn', 'Электронная почта Этот RecReturneip');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EndOfDayOperation', 'Конец операционного дня');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EnterBackupName', 'Электронная почта Этот возврат...');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EnterNewPassword', 'Введите новый пароль');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'EnteredBy', 'Вступил По');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Entities', 'юридические лица');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ExchangeRate', 'Обменный Курс');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Execute', 'выполнять');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ExternalCode', 'Внешний код');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Factor', 'фактор');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Fax', 'факс');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'FilePath', 'Путь к файлу');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'FinalDueAmountinBaseCurrency', 'Заключительный надлежащей суммы в базовой валюте');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'FirstPage', 'Первая страница');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'FiscalYear', 'Финансовый Год');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Flag', 'флаг');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'FlagBackgroundColor', 'Цвет флаг фон');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'FlagDescription', 'Вы можете отметить эту сделку с флагом, однако вы не сможете увидеть флажки созданные другими пользователями.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'FlagForegroundColor', 'Флаг цвет переднего плана');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'FlagThisTransaction', 'Флаг Это сделка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'FlaggedTransactions', 'Отмеченные Сделки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Flags', 'Флаги');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Frequencies', 'частоты');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'From', 'от');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'GLAdvice', 'Главная книга Советы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'GLDetails', 'General Ledger Подробнее');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'GLHead', 'GL Руководитель');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Go', 'идти');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'GoToTop', 'Перейти к началу');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'GoodsReceiptNote', 'Поступление Примечание');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'GrandTotal', 'Общий Итог');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Home', 'домой');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'HomeCurrency', 'Главная валют');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'HundredthName', 'Сотый Имя');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Id', 'идентификатор');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'InVerificationStack', 'В проверке стека');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'IncludeZeroBalanceAccounts', 'Включить нулевой баланс счетов');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Industries', 'промышленности');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'InitializeDayEnd', 'Инициализация в конце дня');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'InstallMixERP', 'Установите MixERP');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'InstrumentCode', 'Инструмент Код');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'InterestApplicable', 'ставка, применяемая');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'InvalidDate', 'Это не действительной датой.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'InvalidImage', 'Это не действует изображения.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'InventoryAdvice', 'Инвентаризация Советы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'InvoiceAmount', 'Сумма счета');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'InvoiceDetails', 'Счет-фактура Подробнее');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'IsCash', 'это денежные средства');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'IsEmployee', 'Является сотрудником');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'IsParty', 'является участником');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'IsSystemAccount', 'Это Системная учетная запись');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemCode', 'Код товара');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemCostPrices', 'Статья расходов Цены');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemGroup', 'Пункт Группа');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemGroups', 'Группы товаров');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemId', 'идентификатор элемента');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemName', 'Название товара');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemOverview', 'Пункт Обзор');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemSellingPrices', 'Пункт Продажа Цены');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemType', 'Тип элемента');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemTypes', 'Типы элементов');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Items', 'Предметы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ItemsBelowReorderLevel', 'Ниже пункты изменить порядок уровне');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'JournalVoucher', 'Журнал Ваучер');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'JournalVoucherEntry', 'Журнал Ваучер запись');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'KeyColumnEmptyExceptionMessage', '"Ключ Столбец" имущество не может быть пустым.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LCCredit', 'Аккредитив кредитов');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LCDebit', 'Аккредитив дебету');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LastAccessedOn', 'Последняя доступна на');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LastLoginIP', 'Последняя Войти IP');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LastLoginOn', 'Последняя Войти на');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LastPage', 'Предыдущая страница');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LastPaymentDate', 'Последний платеж Дата');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LastWrittenOn', 'Последнее, написанных на');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LateFees', 'Штраф за просрочку платежей');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LeadSources', 'Ведущие Источники');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LeadStatuses', 'Ведущие Статусы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LeadTime', 'Время Выполнения');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ListItems', 'Список Предметов');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Load', 'нагрузка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'LoggedInTo', 'Вошедшего в');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ManageProfile', 'Управление профиля');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MaximumCreditAmount', 'Максимальная сумма кредита');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MaximumCreditPeriod', 'Максимальный размер кредита Период');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MenuAccessPolicy', 'Меню политика доступа');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MenuCode', 'Меню Код');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MenuId', 'Меню Идентификатор');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MenuText', 'Текст меню');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MerchantFeeInPercent', 'Торговец Стоимость (в процентах)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MerchantFeeSetup', 'Торговец Стоимость установки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MergeBatchToGRN', 'Слияние партии к поступления материала ноте');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MergeBatchToSalesDelivery', 'Слияние партии к продажам Доставка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MergeBatchToSalesOrder', 'Слияние пакетного на заказ клиента');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MixERPDocumentation', 'MixERP Документация');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MixERPLinks', 'MixERP Ссылки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'MixERPOnFacebook', 'MixERP на Facebook');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Name', 'имя');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'NewJournalEntry', 'Новый журнал запись');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'NewPassword', 'Новый Пароль');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'NextPage', 'Следующая страница');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'No', 'Нет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'NonTaxableSales', 'необлагаемый продаж');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'None', 'Ни один');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'NormallyDebit', 'Обычно Дебет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'NothingSelected', 'Ничего не выбрано.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Notifications', 'Уведомления');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'OK', 'хОРОШО');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Office', 'офис');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'OfficeCode', 'код бюро');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'OfficeInformation', 'Информационный');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'OfficeName', 'Имя офиса');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'OfficeNickName', 'Имя Офисная Ник');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'OfficeSetup', 'Программа установки офис');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'OnlyNumbersAllowed', 'Пожалуйста, введите правильный номер.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'OpeningInventory', 'Открытие Инвентарь');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'OpportunityStages', 'Возможность Этапы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'OtherDetails', 'Другие подробности');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PANNumber', 'PAN Количество');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PageN', 'Страница {0}');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ParentAccount', 'родитель счета');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Parties', 'стороны');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Party', 'партия');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PartyCode', 'партия Код');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PartyName', 'Имя партия');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PartySummary', 'партия Резюме');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PartyType', 'Тип партия');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PartyTypes', 'Вечеринка Типы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Password', 'пароль');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PasswordUpdated', 'Пароль был обновлен.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PaymentCards', 'Платежные карты');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PaymentTerms', 'условия платежа');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PerformEODOperation', 'Выполните конце дня работы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PerformingEODOperation', 'Выполнение конце дня работы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Phone', 'телефон');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PlaceReorderRequests', 'Поместите повторно запросы заказа');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PostTransaction', 'сообщение сделка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PostedBy', 'Автор');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PostedDate', 'Сообщение Дата');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PreferredSupplier', 'предпочтительным поставщиком');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PreferredSupplierIdAbbreviated', 'Предпочтительные идентификатор Поставщик');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Prepare', 'подготовить');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PreparedOn', 'Подготовлено на');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Preview', 'предварительный просмотр');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PreviousBalance', 'Предыдущая Баланс');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PreviousCredit', 'Предыдущая Кредит');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PreviousDebit', 'Предыдущая Дебет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PreviousPage', 'Предыдущая страница');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PreviousPeriod', 'Предыдущий период');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Price', 'цена');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PriceType', 'Цена Тип');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Print', 'печать');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PrintGlEntry', 'Распечатать общую запись ГК');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PrintReceipt', 'Распечатать Получение');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ProfitAndLossStatement', 'Прибыль и убытках');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Progress', 'прогресс');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PurchaseInvoice', 'Покупка Счет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PurchaseOrder', 'Заказ На Покупку');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PurchaseReturn', 'Покупка Возврат');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'PurchaseType', 'Тип Покупка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Quantity', 'количество');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'QuantityAbbreviated', 'количество');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'QuantityOnHandAbbreviated', 'Количество (на руки)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Rate', 'ставка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Reason', 'причина');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Receipt', 'квитанция');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReceiptAmount', 'получение сумма');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReceiptCurrency', 'Получение валют');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReceiptType', 'Получение Тип');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReceivedAmountInaboveCurrency', 'Полученную сумму (в выше Валюты)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReceivedCurrency', 'получаемую валюту');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RecurringInvoiceSetup', 'Повторяющиеся установки Счет');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RecurringInvoices', 'Повторяющиеся Счета');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReferenceNumber', 'Ссылка #');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReferenceNumberAbbreviated', 'Ссылка #');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RefererenceNumberAbbreviated', 'Ссылка #');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RegistrationDate', 'Дата Регистрации');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Reject', 'отклонить');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RejectThisTransaction', 'Отклонить Эта сделка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RejectedTransactions', 'Забракованные Сделки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RememberMe', 'Запомнить Меня');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReorderLevel', 'Изменить порядок Уровень');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReorderQuantityAbbreviated', 'количество повторного заказа');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReorderUnitName', 'Имя Изменить порядок Раздел');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RequiredField', 'Это обязательное поле.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RequiredFieldDetails', 'Поля, отмеченные звездочкой (*) обязательны для заполнения.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Reset', 'сброс');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RestrictedTransactionMode', 'Это учреждение не позволяет объявление транзакций.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RetainedEarnings', 'Нераспределенная Прибыль');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Return', 'возвращение');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ReturnToView', 'Вернуться Просмотр');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Role', 'роль');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Roles', 'Роли');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RowNumber', 'Рядное Количество');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'RunningTotal', 'Запуск Всего');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SSTNumber', 'SST Количество');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesByMonthInThousands', 'Продажи по месяц (в тысячах)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesByOfficeInThousands', 'Продажи в офис (в тысячах)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesDelivery', 'продажи Доставка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesDeliveryNote', 'накладная');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesInvoice', 'Счет по продажам');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesOrder', 'продажи Заказать');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesPersons', 'продавцы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesQuotation', 'Цитата продаж');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesReceipt', 'Получение продажи');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesReturn', 'продажи Вернуться');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesTaxDetails', 'Налог на продажу Подробнее');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesTaxExemptDetails', 'Налог на продажу Освобожденные Подробнее');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesTaxExempts', 'Налог на продажу льготников');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesTaxTypes', 'Типы Налог на продажу');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesTaxes', 'налогов с продаж');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesTeams', 'Продажи команды');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SalesType', 'Тип продажи');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Salesperson', 'продавец');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Save', 'Сохранить');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Saving', 'экономия');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Select', 'выбрать');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectCustomer', 'Выберите клиента');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectFlag', 'Выберите Отметить');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectLanguage', 'Выберите язык');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectOffice', 'Выберите офис');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectParty', 'Выберите партию');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectPaymentCard', 'Выберите платежных карт');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectStore', 'Выберите магазин');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectSupplier', 'Выберите Поставщик');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectUnit', 'Выберите блок');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectUser', 'Выберите пользователя');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SelectYourBranch', 'Выберите вашу ветку');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Shipper', 'грузоотправитель');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Shippers', 'Грузоотправители');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ShippingAddress', 'Адрес Доставки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ShippingAddressMaintenance', 'Адрес доставки обслуживание');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ShippingAddresses', 'Адрес Доставки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ShippingCharge', 'Плата за доставку');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ShippingCompany', 'Транспортная Компания');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Show', 'шоу');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ShowAll', 'Показать все');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ShowCompact', 'Показать компактный');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SignIn', 'Показать компактный');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SignOut', 'Выход');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SigningIn', 'Вход в систему');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Start', 'начало');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'StateSalesTaxes', 'Государственные налогов с продаж');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'StatementOfCashFlows', 'Отчет о движении денежных средств');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'StatementReference', 'О себе Ссылка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'States', 'состояния');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Status', 'статус');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'StockAdjustment', 'Фото Регулировка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'StockTransaction', 'Фото сделка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'StockTransferJournal', 'Перемещение запаса журнал');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Store', 'магазин');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'StoreName', 'Сохранение имени');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'StoreTypes', 'Типы магазин');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Stores', 'магазины');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SubTotal', 'Промежуточный итог');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SubmitBugs', 'отправляйте сообщения об ошибках');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'SupplierName', 'Наименование поставщика');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Support', 'поддержка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TableEmptyExceptionMessage', 'Свойство ''Таблица'' не может быть пустым.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TableSchemaEmptyExceptionMessage', 'Свойство ''Схема таблиц "не может быть пустым.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TaskCompletedSuccessfully', 'Задача была успешно завершена.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Tax', 'налог');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TaxAuthorities', 'Налоговые органы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TaxExemptTypes', 'Освобождаются от налогообложения Типы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TaxForm', 'Налоговый Форма');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TaxMaster', 'Налоговый Мастер');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TaxRate', 'ставка налога');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TaxSetup', 'Налоговый Setup');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TaxTotal', 'Налоговый Всего');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TaxTypes', 'Виды налогов');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TaxableSales', 'Налогооблагаемая продаж');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Tel', 'телефон');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'To', 'для');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TopSellingProductsOfAllTime', 'Самые продаваемые продукты всех времен');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Total', 'общий');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TotalDueAmount', 'Всего надлежащей суммы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TotalDueAmountCurrentOffice', 'Всего надлежащей суммы (Текущий Office)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TotalDueAmountInBaseCurrency', 'Всего Благодаря Сумма (в базовой валюте)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TotalSales', 'Всего продаж:');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TranCode', 'код транзакции');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TranId', 'идентификатор транзакции');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TranIdParameter', 'идентификатор транзакции: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TransactionDate', 'сделка Дата');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TransactionDetails', 'информация об операции');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TransactionStatement', 'О себе сделка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TransactionStatus', 'Статус сделки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TransactionSummary', 'Сводка транзакций');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TransactionTimestamp', 'сделка Отметка времени');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TransactionType', 'тип операции');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TransactionValue', 'стоимость сделки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TransferDetails', 'подробности трансфера');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'TrialBalance', 'пробный баланс');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Type', 'тип');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'UncheckAll', 'Снять отметку со всех');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Undo', 'аннулировать');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Unit', 'блок');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'UnitId', 'идентификатор устройства');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'UnitName', 'Имя единицы');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'UnitsOfMeasure', 'Единицы измерения');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'UnknownError', 'Операция не из-за неизвестной ошибки.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Update', 'обновление');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Upload', 'Загрузить');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'UploadAttachments', 'загружать вложения');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'UploadAttachmentsForThisTransaction', 'Загружать вложения по данной сделке');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Url', 'Унифицированный указатель информационного ресурса');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Use', 'использование');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'User', 'пользователь');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'UserId', 'Идентификатор пользователя');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Username', 'Имя пользователя');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Users', 'пользователи');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'VacuumDatabase', 'Вакуумный База данных');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'VacuumFullDatabase', 'Вакуумный базы данных (полное)');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ValueDate', 'Дата валютирования');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'VerificationReason', 'Проверка Причина');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'VerifiedBy', 'Проверено');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'VerifiedOn', 'проверен на');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Verify', 'проверить');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'View', 'вид');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewAttachments', 'Просмотр вложений');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewBackups', 'Посмотреть Резервные копии');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewCustomerCopy', 'Посмотреть Заказчик Копировать');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewEmptyExceptionMessage', ''' Просмотреть'' собственность не может быть пустым.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewSalesInovice', 'Посмотреть накладная');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewSchemaEmptyExceptionMessage', 'Свойство ''Просмотр схемы "не может быть пустым.');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewThisAdjustment', 'Просмотреть эта корректировка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewThisDelivery', 'Открыть этот Доставка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewThisInvoice', 'Открыть этот счет-фактуру');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewThisNote', 'Открыть этот рейтинг');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewThisOrder', 'Просмотреть этот порядок');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewThisQuotation', 'Просмотреть эту цитату');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewThisReturn', 'Смотреть это возвращение');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'ViewThisTransfer', 'Смотреть эту передачу');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'VoucherVerification', 'Ваучер Проверка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'VoucherVerificationPolicy', 'Политика Ваучер Проверка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Warning', 'предупреждение');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'WhichBank', 'Какой банк?');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'WithdrawTransaction', 'Вывод сделка');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'WithdrawnTransactions', 'Изъятые Сделки');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Workflow', 'Workflow');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'WorldSalesStatistics', 'Мировые продажи Статистика');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'Yes', 'Да');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'YourName', 'Ваше Имя');
    PERFORM localization.add_localized_resource('Titles', 'ru', 'YourOffice', 'Ваш офис');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AboutInitializingDayEnd', 'Om Initializing Dag Slut');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AboutYourOffice', 'Om ditt kontor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Access', 'tillgång');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AccessIsDenied', 'Åtkomst nekad.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Account', 'konto');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AccountId', 'konto Id');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AccountMaster', 'konto ledar-');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AccountName', 'Kontonamn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AccountNumber', 'kontonummer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AccountOverview', 'Kontoöversikt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AccountStatement', 'Kontoutdrag');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Action', 'Åtgärd');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Actions', 'Åtgärder');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Actual', 'Faktisk');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Add', 'lägga till');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AddNew', 'Lägg till ny');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Address', 'adress');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AddressAndContactInfo', 'Adress & Kontaktuppgifter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AgeingSlabs', 'åldrande Plattor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AgentBonusSlabAssignment', 'Bonus slab tilldelning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AgentBonusSlabs', 'Bonusplatta för Försäljare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Alerts', 'varningar');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Amount', 'Mängd');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AmountInBaseCurrency', 'Belopp (I basvaluta)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AmountInHomeCurrency', 'Belopp (I Startsida Valuta)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AnalyzeDatabse', 'Analysera Databas');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Approve', 'Godkänn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ApproveThisTransaction', 'Godkänn denna transaktion');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ApprovedTransactions', 'Godkända Transaktioner');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AreYouSure', 'Är du säker på att du vet vad du gör?');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AssignCashier', 'tilldela Kassör');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AttachmentsPlus', 'Tillsatser (+)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AutoVerificationPolicy', 'Autoverifieringspolicyn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'AutomaticallyApprovedByWorkflow', 'Automatiskt Godkänd av Workflow');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Back', 'tillbaka');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'BackToPreviousPage', 'Tillbaka till föregående sida');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'BackupConsole', 'Backup Console');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'BackupDatabase', 'backup Database');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'BackupNow', 'backup nu');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Balance', 'Balans');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'BalanceSheet', 'bALANSRÄKNING');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'BankAccounts', 'Bankkonton');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'BankTransactionCode', 'Bank transaktionskod');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'BaseCurrency', 'Basvaluta');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'BaseUnitName', 'Basenhet Namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'BonusSlabDetails', 'Bonus Slab information om Försäljare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Book', 'Bok');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Brand', 'varumärke');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Brands', 'varumärken');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Browse', 'Bläddra');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CSTNumber', 'CST Antal');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Cancel', 'avboka');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CashFlowHeading', 'Kassaflöde Rubrik');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CashFlowHeadings', 'Kassaflödes Rubriker');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CashFlowSetup', 'Kassaflöde Setup');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CashRepositories', 'Kontant Arkiv');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CashRepository', 'Cash Repository');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CashRepositoryBalance', 'Cash förvaret Balans');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CashTransaction', 'Cash transaktion');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ChangePassword', 'Byt lösenord');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ChangeSideWhenNegative', 'Ändra Side När Negativ');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ChartOfAccounts', 'Kontoplan');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Check', 'check');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CheckAll', 'Markera alla');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Checklists', 'Checklistor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Clear', 'klar');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Close', 'Stäng');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ClosedTransactions', 'Slutna Transaktioner');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ClosingBalance', 'Utgående balans');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ClosingCredit', 'förlora Kredit');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ClosingDebit', 'Utgående Debit');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Comment', 'kommentera');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CompoundItemDetails', 'Förening Objekt Information');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CompoundItems', 'Sammansatta artiklar');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CompoundUnitsOfMeasure', 'Sammansatta måttenheter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Confidential', 'konfidentiell');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ConfirmPassword', 'bekräfta lösenord');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ConvertedtoBaseCurrency', 'Omräknat till Basvaluta');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ConvertedtoHomeCurrency', 'Omräknat till Startsida Valuta');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CostCenter', 'kostnadsställe');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CostCenters', 'Kostnadsställen');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Counters', 'Räknare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Counties', 'län');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Countries', 'Länder');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CountySalesTaxes', 'County Försäljnings Skatter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CreateaUserAccountforYourself', 'Skapa ett användarkonto för dig själv');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CreatedOn', 'Skapad den');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Credit', 'Kredit');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CreditAllowed', 'Kredit tillåtna');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CreditTotal', 'BETYGSPOÄNG');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Currencies', 'Valutor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Currency', 'valuta');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CurrencyCode', 'valuta Code');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CurrencyName', 'valuta Namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CurrencySymbol', 'Valutasymbol');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CurrentIP', 'nuvarande IP');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CurrentLoginOn', 'Aktuella Logga On');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CurrentPassword', 'Aktuellt lösenord');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CurrentPeriod', 'Aktuell Period');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CustomerCode', 'kund kod');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CustomerName', 'Kundens namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CustomerPanNumber', 'Kund Permanent Kontonummer #');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'CustomerPaysFees', 'Kunden betalar avgifter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DatabaseBackups', 'Databassäkerhetskopior');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DatabaseStatistics', 'databas Statistik');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Date', 'datum');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Days', 'dagar');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Debit', 'Debit');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DebitTotal', 'Debit Totalt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DefaultAddress', 'Standardadress');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DefaultCurrency', 'standard Valuta');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DefaultReorderQuantityAbbreviated', 'Standard Ändra ordning Antal');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Definition', 'Definition');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Delete', 'Radera');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DeleteSelected', 'Radera markerade');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DeliverTo', 'Deliver To');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Department', 'Avdelning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Departments', 'avdelningar');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Difference', 'Skillnad');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DirectPurchase', 'Direkt Inköp');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DirectSales', 'direktförsäljning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Discount', 'rabatt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Documentation', 'Dokumentation');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Download', 'Hämta');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DownloadSourceCode', 'Hämta källkod');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'DueDate', 'Due datum');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EODConsole', 'Slut på Dag Console');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ER', 'effektiv betyg');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ERToBaseCurrency', 'Växelkurs (Till basvaluta)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ERToHomeCurrency', 'Växelkurs (Till Startsida Valuta)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EditSelected', 'Redigera Selected');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Email', 'E');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EmailAddress', 'E-postadress');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EmailThisDelivery', 'E-posta detta Leverans');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EmailThisInvoice', 'E-posta denna faktura');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EmailThisNote', 'E-posta detta notering');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EmailThisOrder', 'E-posta detta n');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EmailThisQuotation', 'E-posta detta Offert');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EmailThisReceipt', 'E-posta detta kvitto');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EmailThisReturn', 'E-posta denna återgång');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EndOfDayOperation', 'Slut på Dag Operation');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EnterBackupName', 'Enter Backupnamn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EnterNewPassword', 'Ange ett nytt lösenord');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'EnteredBy', 'Inlagt av');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Entities', 'enheter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ExchangeRate', 'VÄXELKURS');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Execute', 'Execute');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ExternalCode', 'extern kod');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Factor', 'faktor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Fax', 'Fax');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'FilePath', 'filsökväg');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'FinalDueAmountinBaseCurrency', 'Final Due Belopp i basvaluta');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'FirstPage', 'första sidan');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'FiscalYear', 'RÄKENSKAPSÅR');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Flag', 'Flagga');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'FlagBackgroundColor', 'Flagga Bakgrundsfärg');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'FlagDescription', 'Du kan markera denna transaktion med en flagga, men du kommer inte att kunna se flaggorna skapats av andra användare.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'FlagForegroundColor', 'Flag Förgrundsfärg');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'FlagThisTransaction', 'Flagga denna transaktion');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'FlaggedTransactions', 'Flaggade Transaktioner');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Flags', 'Flaggor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Frequencies', 'Frekvenser');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'From', 'från');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'GLAdvice', 'Huvudbok Råd');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'GLDetails', 'Huvudbok Detaljer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'GLHead', 'GL Head');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Go', 'gå');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'GoToTop', 'Gå till toppen.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'GoodsReceiptNote', 'Godsmottagning Anmärkning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'GrandTotal', 'Totalsumma');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Home', 'Hem');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'HomeCurrency', 'Hem Valuta');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'HundredthName', 'hundradel Namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Id', 'Identifier');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'InVerificationStack', 'I Verifiering Stack');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'IncludeZeroBalanceAccounts', 'inkluderar noll balans konton');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Industries', 'industrier');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'InitializeDayEnd', 'Initialisera Dag End');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'InstallMixERP', 'Installera MixERP');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'InstrumentCode', 'Instrument kod');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'InterestApplicable', 'Ränte Tillämplig');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'InvalidDate', 'Detta är inte ett giltigt datum.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'InvalidImage', 'Detta är inte en giltig bild.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'InventoryAdvice', 'inventering Råd');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'InvoiceAmount', 'Faktura belopp');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'InvoiceDetails', 'faktura Detaljer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'IsCash', 'är Cash');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'IsEmployee', 'är Anställd');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'IsParty', 'är party');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'IsSystemAccount', 'Är System konto');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemCode', 'Post Code');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemCostPrices', 'Post Kostnads Priser');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemGroup', 'Produkt Grupp');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemGroups', 'artikelgrupper');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemId', 'Artikelnummer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemName', 'Produktnamn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemOverview', 'Produktöversikt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemSellingPrices', 'Punkt Försäljningspriserna');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemType', 'objekttyp');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemTypes', 'Objekttyper');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Items', 'objekt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ItemsBelowReorderLevel', 'Artiklar Below Beställningsnivå');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'JournalVoucher', 'Journal Voucher');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'JournalVoucherEntry', 'Journal kupong');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'KeyColumnEmptyExceptionMessage', 'Fastigheten "nyckelkolumn" kan inte lämnas tomt.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LCCredit', 'brev av Kredit Kredit');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LCDebit', 'brev av Kredit Debit');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LastAccessedOn', 'Senast tillgänglig på');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LastLoginIP', 'Senaste inloggning IP');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LastLoginOn', 'Senaste inloggning On');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LastPage', 'sista sidan');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LastPaymentDate', 'Senast Likviddag');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LastWrittenOn', 'Senast skrivet på');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LateFees', 'förseningsavgifter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LeadSources', 'blykällor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LeadStatuses', 'bly statusar');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LeadTime', 'ledtid');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ListItems', 'listobjekt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Load', 'Belastning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'LoggedInTo', 'Inloggad på');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ManageProfile', 'Hantera profil');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MaximumCreditAmount', 'Maximal kreditbelopp');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MaximumCreditPeriod', 'Maximal kredittid');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MenuAccessPolicy', 'menyåtkomstpolicy');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MenuCode', 'Meny kod');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MenuId', 'Meny identifierare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MenuText', 'Menytext');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MerchantFeeInPercent', 'Merchant Avgift (I procent)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MerchantFeeSetup', 'Merchant Fee Setup');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MergeBatchToGRN', 'samman parti till godsmottagning Obs');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MergeBatchToSalesDelivery', 'samman parti till försäljning leverans');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MergeBatchToSalesOrder', 'samman parti till försäljningsorder');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MixERPDocumentation', 'MixERP Dokumentation');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MixERPLinks', 'MixERP Länkar');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'MixERPOnFacebook', 'MixERP på Facebook');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Name', 'namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'NewJournalEntry', 'nytt verifikat');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'NewPassword', 'nytt lösenord');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'NextPage', 'Nästa sida');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'No', 'ingen');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'NonTaxableSales', 'skattefria försäljningen');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'None', 'Inget');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'NormallyDebit', 'normalt debitera');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'NothingSelected', 'Inget valt.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Notifications', 'Meddelanden');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'OK', 'OK');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Office', 'Kontors');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'OfficeCode', 'Kontors kod');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'OfficeInformation', 'Kontorsinformation');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'OfficeName', 'Kontors Namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'OfficeNickName', 'Office Smeknamn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'OfficeSetup', 'kontor setup');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'OnlyNumbersAllowed', 'Vänligen skriv in ett giltigt nummer.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'OpeningInventory', 'Öppning inventering');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'OpportunityStages', 'Möjlighetsstadier');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'OtherDetails', 'övriga detaljer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PANNumber', 'PAN Antal');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PageN', 'sidan {0}');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ParentAccount', 'Moderbolaget konto');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Parties', 'parter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Party', 'fest');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PartyCode', 'parti kod');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PartyName', 'partinamn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PartySummary', 'parti sammandrag');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PartyType', 'Party Typ');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PartyTypes', 'Parti Typer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Password', 'lösenord');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PasswordUpdated', 'Lösenord uppdaterades.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PaymentCards', 'Betalkort');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PaymentTerms', 'Betalningsvillkor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PerformEODOperation', 'Utför End Of Day Operation');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PerformingEODOperation', 'Utföra End Of Day Operation');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Phone', 'telefon');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PlaceReorderRequests', 'Placera Ändra ordning Framställningar');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PostTransaction', 'inlägg transaktion');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PostedBy', 'Postat av');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PostedDate', 'datum');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PreferredSupplier', 'leverantör');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PreferredSupplierIdAbbreviated', 'prioriterad leverantör identifierare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Prepare', 'Förbered');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PreparedOn', 'Utarbetad den');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Preview', 'Förhandsgranska');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PreviousBalance', 'Föregående balans');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PreviousCredit', 'Föregående kredit');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PreviousDebit', 'Föregående debet');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PreviousPage', 'Föregående sida');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PreviousPeriod', 'Föregående period');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Price', 'pris');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PriceType', 'Pristyp');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Print', 'trycket');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PrintGlEntry', 'Skriv huvudbok posten');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PrintReceipt', 'Skriv ut kvitto');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ProfitAndLossStatement', 'Resultaträkning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Progress', 'framsteg');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PurchaseInvoice', 'Inköps Faktura');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PurchaseOrder', 'Inköpsorder');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PurchaseReturn', 'Inköps retur');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'PurchaseType', 'Inköps Typ');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Quantity', 'kvantitet');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'QuantityAbbreviated', 'kvantitet');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'QuantityOnHandAbbreviated', 'Kvantitet (på sidan)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Rate', 'Betyg');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Reason', 'Anledning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Receipt', 'kvitto');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReceiptAmount', 'Mottagande Mängd');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReceiptCurrency', 'Mottagande Valuta');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReceiptType', 'kvitto Typ');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReceivedAmountInaboveCurrency', 'Erhållet belopp (I ovan valuta)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReceivedCurrency', 'mottagna Valuta');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RecurringInvoiceSetup', 'Återkommande Faktura inställnings');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RecurringInvoices', 'Återkommande fakturor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReferenceNumber', 'referens #');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReferenceNumberAbbreviated', 'referens #');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RefererenceNumberAbbreviated', 'referens #');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RegistrationDate', 'Registreringsdatum');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Reject', 'Avvisa');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RejectThisTransaction', 'Avvisa denna transaktion');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RejectedTransactions', 'avvisade Transaktioner');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RememberMe', 'Kom ihåg mig');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReorderLevel', 'Ändra ordning Nivå');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReorderQuantityAbbreviated', 'Beställnings Kvantitet');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReorderUnitName', 'Ändra ordning Enhet Namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RequiredField', 'Detta är ett obligatoriskt fält.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RequiredFieldDetails', 'Fält markerade med asterisk (*) är obligatoriska.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Reset', 'Återställ');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RestrictedTransactionMode', 'Denna anläggning tillåter inte transaktions utstationering.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RetainedEarnings', 'Balanserade Resultat');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Return', 'Avkastning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ReturnToView', 'Återgå till Visa');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Role', 'Roll');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Roles', 'Roller');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RowNumber', 'Rad Antal');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'RunningTotal', 'löpande summa');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SSTNumber', 'SST Antal');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesByMonthInThousands', 'Försäljning per månad (i tusental)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesByOfficeInThousands', 'Försäljningen av kontoret (i tusental)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesDelivery', 'Försäljnings Leverans');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesDeliveryNote', 'följesedel');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesInvoice', 'försäljning Faktura');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesOrder', 'kundorder');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesPersons', 'försäljare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesQuotation', 'Försäljnings Offert');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesReceipt', 'Försäljnings Kvitto');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesReturn', 'försäljnings retur');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesTaxDetails', 'momsuppgifter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesTaxExemptDetails', 'Försäljnings skattefri Detaljer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesTaxExempts', 'Försäljningsskatte undantar');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesTaxTypes', 'Försäljningsskattetyper');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesTaxes', 'Försäljnings Skatter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesTeams', 'säljteam');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SalesType', 'Försäljnings Typ');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Salesperson', 'Säljare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Save', 'Spara');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Saving', 'Spara');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Select', 'Välj');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectCustomer', 'Välj kund');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectFlag', 'Välj en flagga');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectLanguage', 'Välj språk');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectOffice', 'Välj Kontor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectParty', 'Välj parten');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectPaymentCard', 'Välj Payment Card');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectStore', 'Välj butik');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectSupplier', 'Välj Leverantör');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectUnit', 'Välj enhet');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectUser', 'Välj användare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SelectYourBranch', 'Välj din bransch');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Shipper', 'avsändaren');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Shippers', 'avlastare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ShippingAddress', 'Leveransadress');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ShippingAddressMaintenance', 'Leveransadress Underhåll');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ShippingAddresses', 'Leveransadress');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ShippingCharge', 'Frakt avgift');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ShippingCompany', 'rederi');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Show', 'Visa');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ShowAll', 'Visa alla');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ShowCompact', 'Visa Kompakt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SignIn', 'Logga in');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SignOut', 'Logga ut');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SigningIn', 'Loggar in');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Start', 'Start');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'StateSalesTaxes', 'Statliga Försäljnings Skatter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'StatementOfCashFlows', 'Kassaflödesanalys');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'StatementReference', 'Uttalande Referens');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'States', 'stater');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Status', 'ställning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'StockAdjustment', 'lager justering');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'StockTransaction', 'lagertransaktion');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'StockTransferJournal', 'Omlagring tidskrift');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Store', 'Affär');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'StoreName', 'Affär Namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'StoreTypes', 'Förvara Typer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Stores', 'butiker');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SubTotal', 'Delsumma');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SubmitBugs', 'Skicka in buggar');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'SupplierName', 'Leverantör Namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Support', 'Support');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TableEmptyExceptionMessage', 'Fastigheten "Tabell" kan inte lämnas tomt.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TableSchemaEmptyExceptionMessage', 'Fastigheten ''TableSchema "kan inte lämnas tomt.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TaskCompletedSuccessfully', 'Uppgiften slutfördes med framgång.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Tax', 'skatt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TaxAuthorities', 'Skatteverket');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TaxExemptTypes', 'Skatteundantagna Typer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TaxForm', 'skattsedel');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TaxMaster', 'Skatte mästare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TaxRate', 'skattesats');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TaxSetup', 'Skatteinställnings');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TaxTotal', 'Skatte totalt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TaxTypes', 'Skattetyper');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TaxableSales', 'Skattepliktiga försäljning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Tel', 'telefon');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'To', 'till');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TopSellingProductsOfAllTime', 'Bästsäljare genom tiderna');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Total', 'Totalt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TotalDueAmount', 'Totalt Due Belopp');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TotalDueAmountCurrentOffice', 'Total Due Belopp (Current Office)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TotalDueAmountInBaseCurrency', 'Total Due Belopp (I basvaluta)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TotalSales', 'Försäljningar totalt:');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TranCode', 'transaktionskod');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TranId', 'transaktionsidentifierare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TranIdParameter', 'transaktionsidentifierare: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TransactionDate', 'Transaktions Datum');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TransactionDetails', 'Transaktions Detaljer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TransactionStatement', 'Transaktions Uttalande');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TransactionStatus', 'Transaktionsstatus');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TransactionSummary', 'Transaktions Sammanfattning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TransactionTimestamp', 'Transaktionstidsstämpel');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TransactionType', 'Transaktions Typ');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TransactionValue', 'Transaktions Värde');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TransferDetails', 'Överför Detaljer');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'TrialBalance', 'balansomslutningen');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Type', 'Typ');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'UncheckAll', 'Avmarkera alla');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Undo', 'Ångra');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Unit', 'Enhet');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'UnitId', 'Enhet Identifier');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'UnitName', 'Enhet Namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'UnitsOfMeasure', 'Måttenheter');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'UnknownError', 'Åtgärden misslyckades på grund av ett okänt fel.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Update', 'Uppdatera');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Upload', 'Ladda upp');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'UploadAttachments', 'Ladda upp bilagor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'UploadAttachmentsForThisTransaction', 'Ladda upp bilagor för denna transaktion');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Url', 'Uniform Resource Locator');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Use', 'användning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'User', 'Användare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'UserId', 'Användar identifierare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Username', 'Användarnamn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Users', 'Användare');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'VacuumDatabase', 'Vakuum Databas');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'VacuumFullDatabase', 'Vakuum Database (full)');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ValueDate', 'värde Datum');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'VerificationReason', 'Verifiering Anledning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'VerifiedBy', 'Verified by');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'VerifiedOn', 'kontrolleras på');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Verify', 'verifiera');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'View', 'utsikt');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewAttachments', 'Visa Bilagor');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewBackups', 'Se Säkerhetskopior');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewCustomerCopy', 'Visa Kund Kopiera');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewEmptyExceptionMessage', 'Fastigheten ''Visa'' kan inte lämnas tomt.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewSalesInovice', 'Visa Sales Faktura');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewSchemaEmptyExceptionMessage', 'The property ''View Schema'' cannot be left empty.');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewThisAdjustment', 'Visa denna justering');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewThisDelivery', 'Visa detta Leverans');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewThisInvoice', 'Visa denna faktura');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewThisNote', 'Visa Detta betyg');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewThisOrder', 'Visa detta Order');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewThisQuotation', 'Visa denna Offert');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewThisReturn', 'Visa denna Return');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'ViewThisTransfer', 'Visa denna överföring');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'VoucherVerification', 'Voucher Verifiering');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'VoucherVerificationPolicy', 'Voucher Verifiering Policy');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Warning', 'Varning');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'WhichBank', 'Vilken Bank?');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'WithdrawTransaction', 'Uttag transaktion');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'WithdrawnTransactions', 'Indragna Transaktioner');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Workflow', 'Workflow');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'WorldSalesStatistics', 'World Sales Statistics');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'Yes', 'Ja');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'YourName', 'ditt Namn');
    PERFORM localization.add_localized_resource('Titles', 'sv', 'YourOffice', 'din Office');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AboutInitializingDayEnd', '关于初始化日结束');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AboutYourOffice', '关于您的办公室');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Access', '访问');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AccessIsDenied', '访问被拒绝。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Account', '帐户');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AccountId', '帐户标识');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AccountMaster', '科目主');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AccountName', '帐户名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AccountNumber', '帐号');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AccountOverview', '账户信息');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AccountStatement', '帐户对帐单');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Action', '行动');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Actions', '行动');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Actual', '实际');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Add', '添加');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AddNew', '添加新');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Address', '地址');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AddressAndContactInfo', '地址及联系方式');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AgeingSlabs', '老龄板坯');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AgentBonusSlabAssignment', '奖金分配板');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AgentBonusSlabs', '奖金为平板销售人员');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Alerts', '警报');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Amount', '量');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AmountInBaseCurrency', '量（以基础货币）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AmountInHomeCurrency', '量（本国货币）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AnalyzeDatabse', '分析数据库');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Approve', '批准');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ApproveThisTransaction', '批准本次交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ApprovedTransactions', '批准交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AreYouSure', '你确定你知道你在做什么？');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AssignCashier', '指定出纳');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AttachmentsPlus', '附件（+）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AutoVerificationPolicy', '自动验证策略');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'AutomaticallyApprovedByWorkflow', '自动批准通过工作流');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Back', '背部');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'BackToPreviousPage', '返回上一页');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'BackupConsole', '备份控制台');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'BackupDatabase', '备份数据库');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'BackupNow', '立即备份');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Balance', '平衡');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'BalanceSheet', '资产负债表');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'BankAccounts', '银行账户');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'BankTransactionCode', '银行交易代码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'BaseCurrency', '基础货币');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'BaseUnitName', '基本单位名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'BonusSlabDetails', '对于销售人员的奖金板详细');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Book', '书');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Brand', '牌');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Brands', '品牌');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Browse', '浏览');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CSTNumber', 'CST号码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Cancel', '取消');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CashFlowHeading', '现金流标题');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CashFlowHeadings', '现金流标题');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CashFlowSetup', '现金流设置');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CashRepositories', '现金库');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CashRepository', '现金库');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CashRepositoryBalance', '现金库平衡');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CashTransaction', '现金交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ChangePassword', '更改密码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ChangeSideWhenNegative', '变化的一面，当负');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ChartOfAccounts', '科目表');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Check', '检查');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CheckAll', '检查所有');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Checklists', '清单');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Clear', '明确');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Close', '近');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ClosedTransactions', '封闭式交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ClosingBalance', '期末余额');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ClosingCredit', '关闭信用卡');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ClosingDebit', '关闭借记');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Comment', '评论');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CompoundItemDetails', '复合项目详情');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CompoundItems', '复合项目');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CompoundUnitsOfMeasure', '计量单位复合');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Confidential', '机密');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ConfirmPassword', '确认密码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ConvertedtoBaseCurrency', '转换为基础货币');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ConvertedtoHomeCurrency', '转换首页货币');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CostCenter', '成本中心');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CostCenters', '成本中心');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Counters', '计数器');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Counties', '区县');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Countries', '国家');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CountySalesTaxes', '县销售税');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CreateaUserAccountforYourself', '为自己创建一个用户帐户');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CreatedOn', '创建于');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Credit', '信贷');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CreditAllowed', '信贷允许的');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CreditTotal', '信贷总');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CtrlAltA', 'Ctrl + Alt + A');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CtrlAltC', 'Ctrl + Alt + C');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CtrlAltD', 'Ctrl + Alt + D');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CtrlAltS', 'Ctrl + Alt + S');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CtrlAltT', 'Ctrl + Alt + T');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CtrlReturn', 'Ctrl + Return');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Currencies', '货币');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Currency', '货币');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CurrencyCode', '货币代码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CurrencyName', '货币名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CurrencySymbol', '货币符号');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CurrentIP', '目前IP');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CurrentLoginOn', '当前登录在');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CurrentPassword', '当前密码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CurrentPeriod', '本期');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CustomerCode', '本期');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CustomerName', '客户名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CustomerPanNumber', '客户永久帐号＃');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'CustomerPaysFees', '客户支付费用');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DatabaseBackups', '数据库备份');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DatabaseStatistics', '数据库统计');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Date', '日期');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Days', '天');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Debit', '借方');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DebitTotal', '借记总');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DefaultAddress', '默认地址');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DefaultCurrency', '默认货币');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DefaultReorderQuantityAbbreviated', '默认数量重新排序');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Definition', '定义');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Delete', '删除');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DeleteSelected', '删除所选');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DeliverTo', '交付');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Department', '部门');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Departments', '部门');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Difference', '差异');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DirectPurchase', '直接购买');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DirectSales', '直销');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Discount', '折扣');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Documentation', '文件');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Download', '下载');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DownloadSourceCode', '下载源代码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'DueDate', '到期日');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EODConsole', '恩天控制台');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ER', '效率');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ERToBaseCurrency', '汇率（以基本货币）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ERToHomeCurrency', '汇率（首页货币）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EditSelected', '编辑选择');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Email', '电子邮件');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EmailAddress', '电子邮件地址');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EmailThisDelivery', '通过电子邮件传递');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EmailThisInvoice', '通过电子邮件发送发票');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EmailThisNote', '电子邮件这注');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EmailThisOrder', '通过电子邮件发送订单');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EmailThisQuotation', '通过电子邮件发送报价');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EmailThisReceipt', '通过电子邮件发送回执');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EmailThisReturn', '通过电子邮件发送返回');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EndOfDayOperation', '天运结束');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EnterBackupName', '输入备份名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EnterNewPassword', '输入新密码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'EnteredBy', '输入者');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Entities', '实体');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ExchangeRate', '汇率');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Execute', '执行');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ExternalCode', '外部代码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Factor', '因素');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Fax', 'Fax');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'FilePath', '文件路径');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'FinalDueAmountinBaseCurrency', '在基础货币最终到期金额');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'FirstPage', '第一页');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'FiscalYear', '财政年度');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Flag', '旗');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'FlagBackgroundColor', '旗背景颜色');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'FlagDescription', '你可以用一个标志纪念这个交易，但是你将无法看到其他用户创建的标志。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'FlagForegroundColor', '标志前景色');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'FlagThisTransaction', '将此交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'FlaggedTransactions', '标记的交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Flags', '旗');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Frequencies', '频率');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'From', '从');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'GLAdvice', '总帐咨询');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'GLDetails', '总帐详细');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'GLHead', 'GL头');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Go', '去');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'GoToTop', '返回首页');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'GoodsReceiptNote', '收货注意事项');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'GrandTotal', '累计');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Home', '家');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'HomeCurrency', '首页货币');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'HundredthName', '百名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Id', '识别码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'InVerificationStack', '在验证堆栈');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'IncludeZeroBalanceAccounts', '包括零余额账户');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Industries', '行业');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'InitializeDayEnd', '初始化结束日');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'InstallMixERP', '安装MixERP');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'InstrumentCode', '仪表代码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'InterestApplicable', '利息适用');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'InvalidDate', '无效的日期。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'InvalidImage', '这不是一个有效的图像。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'InventoryAdvice', '库存忠告');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'InvoiceAmount', '发票金额');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'InvoiceDetails', '发票明细');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'IsCash', '为现金');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'IsEmployee', '是员工');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'IsParty', '是党');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'IsSystemAccount', '为系统帐户');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemCode', '产品编号');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemCostPrices', '项目成本价格');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemGroup', '项目组');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemGroups', '项目组');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemId', '项目编号');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemName', '项目名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemOverview', '项目简介');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemSellingPrices', '产品销售价格');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemType', '项目类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemTypes', '项目类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Items', '项目');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ItemsBelowReorderLevel', '下面再订购级别的项目');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'JournalVoucher', '杂志券');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'JournalVoucherEntry', '杂志凭证录入');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'KeyColumnEmptyExceptionMessage', '该物业“键列''不能为空。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LCCredit', '信用信用证');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LCDebit', '信用卡借记信');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LastAccessedOn', '上次访问在');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LastLoginIP', '上次登录IP');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LastLoginOn', '上次登录在');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LastPage', '末页');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LastPaymentDate', '最后付款日期');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LastWrittenOn', '最后写上');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LateFees', '滞纳金');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LeadSources', '铅来源');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LeadStatuses', '铅状态');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LeadTime', '交货时间');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ListItems', '列表项');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Load', '负载');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'LoggedInTo', '登录到');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ManageProfile', '管理配置文件');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MaximumCreditAmount', '最高信用额');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MaximumCreditPeriod', '最高优惠期');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MenuAccessPolicy', '菜单访问策略');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MenuCode', '菜单代码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MenuId', '菜单标识');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MenuText', '菜单文本');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MerchantFeeInPercent', '商户手续费（百分比）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MerchantFeeSetup', '商家安装费');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MergeBatchToGRN', '合并批到好收货注意事项');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MergeBatchToSalesDelivery', '合并到批量销售出库单');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MergeBatchToSalesOrder', '合并批量销售订单');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MixERPDocumentation', 'MixERP文档');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MixERPLinks', 'MixERP链接');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'MixERPOnFacebook', 'MixERP在Facebook上');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Name', '名字');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'NewJournalEntry', '新的日记帐分录');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'NewPassword', '新密码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'NextPage', '下一页');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'No', '没有');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'NonTaxableSales', '免税的销售');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'None', '无');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'NormallyDebit', '通常借记');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'NothingSelected', '没有什么选择。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Notifications', '通知');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'OK', '行');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Office', '办公室');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'OfficeCode', '办公代码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'OfficeInformation', '办公信息');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'OfficeName', '办事处名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'OfficeNickName', '办公室昵称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'OfficeSetup', '办公室设定');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'OnlyNumbersAllowed', '请输入一个有效的数字。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'OpeningInventory', '期初库存');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'OpportunityStages', '机会阶段');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'OtherDetails', '其他详细信息');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PANNumber', 'PAN号码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PageN', '页{0}');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ParentAccount', '父帐户');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Parties', '缔约方');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Party', '党');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PartyCode', '党码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PartyName', '党的名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PartySummary', '党总结');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PartyType', '党的类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PartyTypes', '党的类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Password', '密码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PasswordUpdated', '密码已更新。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PaymentCards', '支付卡');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PaymentTerms', '付款条款');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PerformEODOperation', '执行完天运');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PerformingEODOperation', '表演结束一天工作');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Phone', '电话');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PlaceReorderRequests', '将请求重新排序');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PostTransaction', '交易后');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PostedBy', '发布者');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PostedDate', '发布日期');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PreferredSupplier', '首选供应商');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PreferredSupplierIdAbbreviated', '首选供应商标识');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Prepare', '准备');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PreparedOn', '编制');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Preview', '预览');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PreviousBalance', '上一页平衡');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PreviousCredit', '上一页信用');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PreviousDebit', '上一页借记');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PreviousPage', '上一页');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PreviousPeriod', '前一段时间');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Price', '价格');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PriceType', '价格类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Print', '打印');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PrintGlEntry', '打印总帐进入');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PrintReceipt', '打印收据');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ProfitAndLossStatement', '损益表');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Progress', '进度');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PurchaseInvoice', '购买发票');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PurchaseOrder', '采购订单');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PurchaseReturn', '购买返回');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'PurchaseType', '采购类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Quantity', '数量');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'QuantityAbbreviated', '数量');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'QuantityOnHandAbbreviated', '数量（在手）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Rate', '率');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Reason', '原因');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Receipt', '收据');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReceiptAmount', '收据金额');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReceiptCurrency', '收货货币');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReceiptType', '收款类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReceivedAmountInaboveCurrency', '收到的金额（在上述货币）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReceivedCurrency', '收到的货币');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RecurringInvoiceSetup', '经常性发票设置');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RecurringInvoices', '经常性发票');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReferenceNumber', '参考号码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReferenceNumberAbbreviated', '参考＃');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RefererenceNumberAbbreviated', '参考＃');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RegistrationDate', '注册日期');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Reject', '拒绝');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RejectThisTransaction', '拒绝这个交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RejectedTransactions', '拒绝交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RememberMe', '记得我');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReorderLevel', '重新排序级别');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReorderQuantityAbbreviated', '再订购数量');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReorderUnitName', '重新排序单位名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RequiredField', '这是一个必填字段。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RequiredFieldDetails', '标有星号（*）的字段是必需的。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RequiredFieldIndicator', '*');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Reset', '重置');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RestrictedTransactionMode', '这个成立不允许交易张贴。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RetainedEarnings', '留存收益');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Return', '回报');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ReturnToView', '返回查看');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Role', '角色');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Roles', '角色');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RowNumber', '行号');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'RunningTotal', '运行总计');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SSTNumber', 'SST号码');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesByMonthInThousands', '销售按月（千）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesByOfficeInThousands', '销售按办公室（千）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesDelivery', '销售出库单');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesDeliveryNote', '送货单');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesInvoice', '销售发票');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesOrder', '销售订单');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesPersons', '营业员');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesQuotation', '销售报价');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesReceipt', '销售收据');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesReturn', '销售退货');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesTaxDetails', '销售税细节');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesTaxExemptDetails', '销售税豁免详细');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesTaxExempts', '销售税豁免');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesTaxTypes', '销售税类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesTaxes', '销售税');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesTeams', '销售团队');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SalesType', '销售类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Salesperson', '售货员');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Save', '保存');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Saving', '节约');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Select', '选择');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectCustomer', '选择客户');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectFlag', '选择一个标志');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectLanguage', '选择语言');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectOffice', '选择办事处');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectParty', '选择党');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectPaymentCard', '选择支付卡');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectStore', '选择店铺');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectSupplier', '选择供应商');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectUnit', '选择单位');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectUser', '选择用户');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SelectYourBranch', '选择您的分行');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Shipper', '发货人');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Shippers', '托运人');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ShippingAddress', '收件地址');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ShippingAddressMaintenance', '送货地址保养');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ShippingAddresses', '收件地址');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ShippingCharge', '运费');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ShippingCompany', '航运公司');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Show', '演出');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ShowAll', '显示全部');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ShowCompact', '紧凑型秀');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SignIn', '登入');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SignOut', '登出');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SigningIn', '在签约');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Start', '开始');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'StateSalesTaxes', '州销售税');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'StatementOfCashFlows', '现金流量表');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'StatementReference', '声明参考');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'States', '美国');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Status', '状态');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'StockAdjustment', '库存调整');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'StockTransaction', '现货交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'StockTransferJournal', '股权转让杂志');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Store', '店');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'StoreName', '店铺名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'StoreTypes', '存储类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Stores', '店');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SubTotal', '小计');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SubmitBugs', '提交错误');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'SupplierName', '供应商名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Support', '支持');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TableEmptyExceptionMessage', '该物业''表''不能为空。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TableSchemaEmptyExceptionMessage', '该物业“表模式''不能为空。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TaskCompletedSuccessfully', '任务成功完成。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Tax', '税');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TaxAuthorities', '税务机关');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TaxExemptTypes', '免税类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TaxForm', '税表');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TaxMaster', '税务硕士');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TaxRate', '税率');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TaxSetup', '税设置');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TaxTotal', '税务总');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TaxTypes', '税种');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TaxableSales', '应税销售');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Tel', '电话');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'To', '到');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TopSellingProductsOfAllTime', '所有时间最畅销产品');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Total', '总');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TotalDueAmount', '总到期金额');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TotalDueAmountCurrentOffice', '总到期金额（目前处）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TotalDueAmountInBaseCurrency', '总到期金额（以基本货币）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TotalSales', '销售总额：');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TranCode', '陈典');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TranId', '事务标识符');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TranIdParameter', '事务标识符: #{0}');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TransactionDate', '交易日期');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TransactionDetails', '交易明细');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TransactionStatement', '交易声明');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TransactionStatus', '交易状态');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TransactionSummary', '交易概要');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TransactionTimestamp', '交易时间戳');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TransactionType', '交易类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TransactionValue', '成交价格');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TransferDetails', '汇款细节');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'TrialBalance', '试算表');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Type', '类型');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'UncheckAll', '全部取消');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Undo', '复原');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Unit', '单元');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'UnitId', '单位标识符');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'UnitName', '单位名称');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'UnitsOfMeasure', '计量单位');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'UnknownError', '操作失败，原因未知错误。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Update', '更新');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Upload', '上传');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'UploadAttachments', '上传附件');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'UploadAttachmentsForThisTransaction', '上传附件为此次交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Url', '统一资源定位符');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Use', '使用');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'User', '用户');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'UserId', '用户标识符');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Username', '用户名');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Users', '用户');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'VacuumDatabase', '真空数据库');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'VacuumFullDatabase', '真空数据库（完整）');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ValueDate', '起息日');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'VerificationReason', '验证原因');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'VerifiedBy', '验证通过');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'VerifiedOn', '检定');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Verify', '确认');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'View', '视图');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewAttachments', '查看附件');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewBackups', '查看备份');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewCustomerCopy', '查看客户复制');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewEmptyExceptionMessage', '该物业''查看''不能为空。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewSalesInovice', '查看销售发票');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewSchemaEmptyExceptionMessage', '该物业''查看模式''不能为空。');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewThisAdjustment', '查看该调整');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewThisDelivery', '查看该交付');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewThisInvoice', '查看该发票');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewThisNote', '查看该注');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewThisOrder', '查看这条命令');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewThisQuotation', '查看该报价');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewThisReturn', '查看该返回');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'ViewThisTransfer', '查看该转让');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'VoucherVerification', '优惠券验证');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'VoucherVerificationPolicy', '券验证策略');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Warning', '警告');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'WhichBank', '哪家银行？');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'WithdrawTransaction', '撤销交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'WithdrawnTransactions', '撤回交易');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Workflow', '流程');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'WorldSalesStatistics', '世界销量统计');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'Yes', '是的');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'YourName', '你的名字');
    PERFORM localization.add_localized_resource('Titles', 'zh', 'YourOffice', '你的办公室');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'AccessIsDenied', 'Zugriff wird verweigert.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CannotCreateABackup', 'Sorry, kann nicht erstellen Sie eine Datenbanksicherung zu diesem Zeitpunkt.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CannotCreateFlagTransactionTableNull', 'Kann nicht erstellen oder aktualisieren Flagge. Transaktionstabelle wurde nicht gestellt.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'Kann nicht erstellen oder aktualisieren Flagge. Transaction-Tabelle Primärschlüssel wurde nicht gestellt.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CannotMergeAlreadyMerged', 'Die ausgewählte Transaktion) enthalten Elemente, die bereits zusammengeführt wurden. Bitte versuchen Sie es erneut.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CannotMergeDifferentPartyTransaction', 'Kann nicht Transaktionen verschiedener Parteien in einer einzigen Charge zu verschmelzen. Bitte versuchen Sie es erneut.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CannotMergeIncompatibleTax', 'Kann Transaktionen mit inkompatiblen Steuerarten nicht zusammenführen. Bitte versuchen Sie es erneut.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CannotMergeUrlNull', 'Kann Transaktionen nicht zusammenführen. Das Zusammenführen keine URL angegeben wurde.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CashTransactionCannotContainBankInfo', 'Ein Cash-Transaktion dürfen keine Banktransaktionsdetails.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CompareAmountErrorMessage', 'Der Betrag, der größer als die Menge von zu sein.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CompareDaysErrorMessage', 'Von Tag sollte nicht größer als das zu Tage.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'ComparePriceErrorMessage', 'Preis ab sollte weniger als der Preis.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'ConfigurationError', 'Können die Aufgabe nicht fortgesetzt werden. Bitte korrigieren Sie Konfigurationsprobleme.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'ConfirmationPasswordDoesNotMatch', 'Die Bestätigung Passwort stimmt nicht mit dem neuen Kennwort überein.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CouldNotDetermineEmailImageParserType', 'Bild Parser Typ für E-Mail konnte nicht ermittelt werden.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'CouldNotRegisterJavascript', 'Konnte nicht registriert JavaScript auf dieser Seite, weil die Seite beispielsweise ungültig oder leer war.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'DateErrorMessage', 'Ausgewähltes Datum liegt außerhalb des Bereichs.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'DueFrequencyErrorMessage', 'Aufgrund Tage nur 0 sein, wenn aufgrund Frequenz-ID ausgewählt.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'DuplicateEntry', 'Duplizieren Eintrag.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'DuplicateFiles', 'Doppelte Dateien.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'GridViewEmpty', 'Gridview ist leer.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InsufficientBalanceInCashRepository', 'Es gibt keine ausreichenden Gleichgewicht in der Kapital Repository, diese Transaktion zu verarbeiten.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InsufficientStockWarning', 'Nur {0} {1} von {2} auf Lager.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidAccount', 'Ungültige Konto.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidCashRepository', 'Ungültige Cash-Repository.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidCostCenter', 'Ongeldige kostenplaats.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidData', 'Ungültige Daten.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidDate', 'Dies ist kein gültiges Datum aus.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidParameterName', 'Ungültige Npgsql Parameternamen {0}. . Stellen Sie sicher, dass der Name des Parameters übereinstimmt mit dem Befehlstext.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidParty', 'Ungültige Partei. Diese Partei ist mit dieser Transaktion zugeordnet ist.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidPaymentTerm', 'Ongeldige betalingstermijn.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidPriceType', 'Ongeldige prijs type.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidReceiptMode', 'Ungültige Quittung Modus.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSalesPerson', 'Ongeldige verkoper.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidShippingCompany', 'Ongeldige rederij.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidStockTransaction', 'Ungültige Aktien-Transaktion.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidStore', 'Ongeldige winkel.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookInventoryDelivery', 'Ungültige Tochtergesellschaft Transaktionen Buch "Inventar Lieferservice"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookInventoryDirect', 'Ungültige Tochtergesellschaft Transaktionen Buch "Inventar Direct"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookInventoryInvoice', 'Ungültige Tochtergesellschaft Transaktionen Buch "Inventar Rechnung"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookInventoryOrder', 'Ungültige Tochtergesellschaft Transaktionen Buch "Inventar Order"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookInventoryPayment', 'Ungültige Tochtergesellschaft Transaktionen Buch "Inventar Vergütung"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookInventoryQuotation', 'Ungültige Tochtergesellschaft Transaktionen Buch "Inventar Zitat"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookInventoryReceipt', 'Ungültige Tochtergesellschaft Transaktionen Buch "Inventar Receipt"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookInventoryReturn', 'Ungültige Tochtergesellschaft Transaktionen Buch "Inventar Return"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookPurchaseDelivery', 'Ungültige Tochtergesellschaft Transaktionen Buch "Kauf Lieferung"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookPurchaseQuotation', 'Ungültige Tochtergesellschaft Transaktionen Buch "Kauf Zitat"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookPurchaseSuspense', 'Ungültige Tochtergesellschaft Transaktionen Buch "Kauf Suspense"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookPurchaseTransfer', 'Ungültige Tochtergesellschaft Transaktionen Buch "Kauf Transfer"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookSalesPayment', 'Ungültige Tochtergesellschaft Transaktionen Buch "Sales Vergütung"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookSalesSuspense', 'Ungültige Tochtergesellschaft Transaktionen Buch "Sales Suspense"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidSubTranBookSalesTransfer', 'Ungültige Tochtergesellschaft Transaktionen Buch "Sales Transfer"');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'InvalidUser', 'Ungültige Benutzer.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'ItemErrorMessage', 'Sie müssen entweder Artikel-ID oder der Verbindung Artikel ID auswählen.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'LateFeeErrorMessage', 'Späte Gebühr ID und späte Gebühr Beitrag Frequenz id beide sollten entweder gewählt werden oder nicht.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'NegativeValueSupplied', 'Negativer Wert geliefert.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'NewPasswordCannotBeOldPassword', 'Neues Passwort kann nicht das alte Kennwort ist.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'NoFileSpecified', 'Keine Datei angegeben.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'NoTransactionToPost', 'Keine Transaktion zu veröffentlichen.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'NotAuthorized', 'Sie sind nicht berechtigt, um diese Ressourcen zu diesem Zeitpunkt zugreifen.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'NothingSelected', 'Nichts ausgewählt.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'PasswordCannotBeEmpty', 'Das Passwort darf nicht leer sein.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'PleaseEnterCurrentPassword', 'Bitte geben Sie Ihr aktuelles Kennwort ein.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'PleaseEnterNewPassword', 'Bitte geben Sie ein neues Kennwort ein.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'RecurringAmountErrorMessage', 'Wiederkehrwert nicht kleiner oder gleich 0.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'ReferencingSidesNotEqual', 'Die referenzierenden Seiten sind nicht gleich.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'RestrictedTransactionMode', 'Diese Einrichtung erlaubt keine Transaktions Beitrag.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'ReturnButtonUrlNull', 'Können diesen Eintrag nicht zurück. Die Rendite keine URL angegeben wurde.');
    PERFORM localization.add_localized_resource('Warnings', 'de', 'UserIdOrPasswordIncorrect', 'Benutzerkennung oder Passwort falsch.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'AccessIsDenied', 'Acceso denegado.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CannotCreateABackup', 'Lo sentimos, no se puede crear una copia de seguridad de base de datos en este momento.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CannotCreateFlagTransactionTableNull', 'No se puede crear o actualizar bandera. No se proporcionó tabla de transacciones.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'No se puede crear o actualizar bandera. No se proporcionó la clave principal tabla de transacciones.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CannotMergeAlreadyMerged', 'Las transacciones seleccionadas contienen elementos que ya se han fusionado. Por favor, vuelva a intentarlo.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CannotMergeDifferentPartyTransaction', 'No se puede fusionar las operaciones de los distintos partidos en un solo lote. Por favor, vuelva a intentarlo.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CannotMergeIncompatibleTax', 'No se puede fusionar las transacciones que tienen tipos impositivos incompatibles. Por favor, vuelva a intentarlo.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CannotMergeUrlNull', 'No se puede fusionar transacciones. No se proporcionó el url de combinación.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CashTransactionCannotContainBankInfo', 'Una transacción en efectivo no puede contener bancarias detalles de la transacción.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CompareAmountErrorMessage', 'La cantidad que debe ser mayor que la cantidad de.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CompareDaysErrorMessage', 'De día no debe ser mayor que el a día.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'ComparePriceErrorMessage', 'Precio de debe ser menor que el precio a.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'ConfigurationError', 'No se puede continuar la tarea. Por favor, corrija los problemas de configuración.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'ConfirmationPasswordDoesNotMatch', 'La confirmación de contraseña no coincide con la nueva contraseña.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CouldNotDetermineEmailImageParserType', 'No se pudo determinar el tipo de imagen analizador de correo electrónico.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'CouldNotRegisterJavascript', 'No se pudo registrar JavaScript en esta página porque la instancia página fue válida o vacía.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'DateErrorMessage', 'Fecha seleccionada está fuera de rango.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'DueFrequencyErrorMessage', 'Debido día sólo puede ser 0 si se selecciona la frecuencia debido identificador.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'DuplicateEntry', 'Duplicar entrada.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'DuplicateFiles', 'Los archivos duplicados.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'GridViewEmpty', 'Vista de cuadrícula está vacía.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InsufficientBalanceInCashRepository', 'No hay saldo suficiente en el depósito de dinero en efectivo para procesar esta transacción.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InsufficientStockWarning', 'Sólo {0} {1} de {2} dejados en la acción.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidAccount', 'Cuenta inválida.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidCashRepository', 'Depósito de efectivo no es válida.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidCostCenter', 'Centro de costos no es válida.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidData', 'Los datos no válidos.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidDate', 'Fecha no válida.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidParameterName', 'Invalid Npgsql parameter name {0}. . Make sure that the parameter name matches with your command text.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidParty', 'Partido válido. Este partido no se asocia con esta transacción.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidPaymentTerm', 'Plazo de pago válido.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidPriceType', 'Tipo Precio incorrecto.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidReceiptMode', 'Modo de recibo válido.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSalesPerson', 'Vendedor no válida.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidShippingCompany', 'Naviera no válida.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidStockTransaction', 'Inválido transacción de acciones.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidStore', 'Tienda no válida.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookInventoryDelivery', 'Inválido Transacciones Subsidiarios libro "Inventario Entrega"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookInventoryDirect', 'Transacciones Subsidiarios no válidos libro "Inventario Directo"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookInventoryInvoice', 'nválido Transacciones Subsidiarios libro "Factura de inventario"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookInventoryOrder', 'Inválido Transacciones Subsidiarios libro "Inventario Orden"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookInventoryPayment', 'Transacciones Subsidiarios válida libro "Inventario de Pago"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookInventoryQuotation', 'Inválido Transacciones Subsidiarios libro "Cita de inventario"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookInventoryReceipt', 'Inválido Transacciones Subsidiarios libro "Recibo de inventario"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookInventoryReturn', 'Inválido Transacciones Subsidiarios libro "El regreso de inventario"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookPurchaseDelivery', 'Inválido Transacciones Subsidiarios libro "Compra de Entrega"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookPurchaseQuotation', 'Transacciones Subsidiarios no válidos libro "Cita de Compra"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookPurchaseSuspense', 'Transacciones Subsidiarios no válidos libro "Suspense Compra"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookPurchaseTransfer', 'Inválido Transacciones Subsidiarios libro "Compra de Transferencia"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookSalesPayment', 'Transacciones Subsidiarios válida libro "de venta"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookSalesSuspense', 'Inválido Transacciones Subsidiarios libro "Suspense Ventas"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidSubTranBookSalesTransfer', 'Inválido Transacciones Subsidiarios libro "Transferencia de Ventas"');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'InvalidUser', 'Usuario no válido.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'ItemErrorMessage', 'Usted tiene que seleccionar entre identificador o identificador de elemento compuesto artículo.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'LateFeeErrorMessage', 'Identificación del Cargo por y tardía publicación cuota Identificación de frecuencia tanto deben ser bien seleccionados o no.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'NegativeValueSupplied', 'Valor negativo suministra.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'NewPasswordCannotBeOldPassword', 'Nueva contraseña no puede ser antigua contraseña.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'NoFileSpecified', 'No hay archivo especificado.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'NoTransactionToPost', 'Ninguna transacción para enviar.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'NotAuthorized', 'No tiene permisos para acceder a este recurso en este momento.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'NothingSelected', 'Nada seleccionado.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'PasswordCannotBeEmpty', 'La contraseña no puede estar vacío.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'PleaseEnterCurrentPassword', 'Introduzca su contraseña actual.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'PleaseEnterNewPassword', 'Por favor, introduzca una nueva contraseña.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'RecurringAmountErrorMessage', 'Recurrentes cantidad no debe ser menor que o igual a 0.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'ReferencingSidesNotEqual', 'Los lados que hacen referencia no son iguales.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'RestrictedTransactionMode', 'Este establecimiento no permite la publicación de transacciones.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'ReturnButtonUrlNull', 'No se puede volver esta entrada. No se proporcionó el url de retorno.');
    PERFORM localization.add_localized_resource('Warnings', 'es', 'UserIdOrPasswordIncorrect', 'Identificador de usuario o contraseña incorrecta.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'AccessIsDenied', 'Tinanggihan ang access.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CannotCreateABackup', 'Paumanhin, hindi maaaring lumikha ng isang backup database sa oras na ito.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CannotCreateFlagTransactionTableNull', 'Hindi makalikha o i-update ang flag. Talahanayan ng Transaksyon ay hindi ibinigay.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'Hindi makalikha o i-update ang flag. Talahanayan ng Transaksyon pangunahing key ay hindi ibinigay.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CannotMergeAlreadyMerged', 'Magtaglay ng mga napiling mga transaksyon item na nai-merge. Pakisubukang muli.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CannotMergeDifferentPartyTransaction', 'Hindi ma-pagsamahin ang mga transaksyon ng iba''t ibang mga partido sa isang solong batch. Pakisubukang muli.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CannotMergeIncompatibleTax', 'Hindi ma-pagsamahin ang mga transaksyon sa pagkakaroon ng hindi tugmang mga uri ng buwis. Pakisubukang muli.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CannotMergeUrlNull', 'Hindi ma-pagsamahin ang mga transaksyon. Ang pagsanib ng url ay hindi ibinigay.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CashTransactionCannotContainBankInfo', 'Ang isang cash transaksyon ay hindi maaaring maglaman detalye ng bank transaksyon.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CompareAmountErrorMessage', 'Ang halaga na dapat na mas mataas ang halaga mula sa.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CompareDaysErrorMessage', 'Mula sa araw ay hindi dapat mas malaki kaysa sa na mga araw.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'ComparePriceErrorMessage', 'Presyo mula dapat na mas mababa kaysa sa presyo sa.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'ConfigurationError', 'Hindi maaaring patuloy ang gawain. Pakiwasto ang mga isyu sa configuration.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'ConfirmationPasswordDoesNotMatch', 'Ang password ng pagkumpirma ay hindi tugma sa ang bagong password.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CouldNotDetermineEmailImageParserType', 'Hindi matukoy ang uri ng pang-parse ng imahe para sa email.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'CouldNotRegisterJavascript', 'Hindi marehistro ang JavaScript sa pahinang ito dahil ang halimbawa pahina Di-wasto o walang laman.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'DateErrorMessage', 'Napiling mga petsa ay wala sa sakop.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'DueFrequencyErrorMessage', 'Dahil araw ay maaari lamang maging 0 kung dahil dalas identifier ay napili.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'DuplicateEntry', 'Doblehin entry.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'DuplicateFiles', 'Mga dobleng file.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'GridViewEmpty', 'Gridview ay walang laman.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InsufficientBalanceInCashRepository', 'Walang sapat na balanse sa cash imbakan upang iproseso ang transaksyon.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InsufficientStockWarning', 'Tanging {0} {1} ng {2} naiwan sa stock.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidAccount', 'Hindi wastong account.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidCashRepository', 'Di-wastong cash imbakan.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidCostCenter', 'Di-wastong cost center.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidData', 'Di-wastong data.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidDate', 'Ito ay hindi isang wastong petsa.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidParameterName', 'Di-wastong pangalan Npgsql parameter {0}. . Tiyakin na ang pangalan ng parameter tumutugma sa iyong command teksto.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidParty', 'Di-wastong party. Party na ito ay hindi nauugnay sa transaksyong ito.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidPaymentTerm', 'Di-wastong termino ng pagbabayad.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidPriceType', 'Di-wastong uri ng presyo.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidReceiptMode', 'Di-wastong mode resibo.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSalesPerson', 'Di-wastong salesperson.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidShippingCompany', 'Di-wastong kumpanya sa pagpapadala.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidStockTransaction', 'Di-wastong stock transaksyon.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidStore', 'Di-wastong store.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookInventoryDelivery', 'Di-wastong subsidiary Transaksyon Book "Delivery Imbentaryo"');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookInventoryDirect', 'Di-wastong Transaksyon subsidiary "Direktang Imbentaryo" Book');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookInventoryInvoice', 'Di-wastong subsidiary Transaksyon Book "Invoice Imbentaryo"');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookInventoryOrder', 'Di-wastong subsidiary Transaksyon Book "Order Imbentaryo"');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookInventoryPayment', 'Di-wastong subsidiary Transaksyon Book "Pagbabayad Imbentaryo"');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookInventoryQuotation', 'Di-wastong subsidiary Transaksyon Book "panipi Imbentaryo"');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookInventoryReceipt', 'Di-wastong subsidiary Transaksyon Book "Resibo Imbentaryo"');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookInventoryReturn', 'Di-wastong subsidiary Transaksyon Book "Return Imbentaryo"');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookPurchaseDelivery', 'Di-wastong Transaksyon subsidiary ng Libro "ng Paghahatid Pagbili ''."');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookPurchaseQuotation', 'Di-wastong subsidiary Transaksyon Book "Bumili marks ''."');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookPurchaseSuspense', 'Di-wastong Transaksyon subsidiary ng Libro "Bumili Nakakagulat ''."');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookPurchaseTransfer', 'Di-wastong SubTranBook "Bumili Paglipat"');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookSalesPayment', 'Di-wastong subsidiary Transaksyon Book "Benta ng Pagbabayad."');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookSalesSuspense', 'Di-wastong subsidiary Transaksyon Book "Sales Nakakagulat."');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidSubTranBookSalesTransfer', 'Di-wastong subsidiary Transaksyon Book "Sales Transfer."');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'InvalidUser', 'Hindi wastong user.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'ItemErrorMessage', 'Kailangan mong piliin ang alinman sa item na pantukoy o tambalang tagatukoy ng item.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'LateFeeErrorMessage', 'Dapat na alinman sa pinili o hindi ang late fee id at late na bayad sa pag-post dalas id pareho.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'NegativeValueSupplied', 'Itinustos negatibong halaga.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'NewPasswordCannotBeOldPassword', 'Bagong password ay hindi maaaring lumang password.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'NoFileSpecified', 'Walang tinukoy na file.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'NoTransactionToPost', 'Walang mga transaksyon na mag-post.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'NotAuthorized', 'Wala kang pahintulot upang ma-access ang mga mapagkukunan sa oras na ito.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'NothingSelected', 'Wala napili.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'PasswordCannotBeEmpty', 'Hindi maaaring walang laman ang password.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'PleaseEnterCurrentPassword', 'Mangyaring ipasok ang iyong kasalukuyang password.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'PleaseEnterNewPassword', 'Mangyaring magpasok ng isang bagong password.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'RecurringAmountErrorMessage', 'Paulit-ulit na halaga ay hindi dapat mas mababa sa o katumbas ng 0.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'ReferencingSidesNotEqual', 'Ang tumutukoy sa gilid ay hindi katumbas.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'RestrictedTransactionMode', 'Hindi pinapayagan ng establisimentong ito sa pag-post ng transaksyon.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'ReturnButtonUrlNull', 'Hindi maibabalik ang entry na ito. Ang pagbabalik url ay hindi ibinigay.');
    PERFORM localization.add_localized_resource('Warnings', 'fil', 'UserIdOrPasswordIncorrect', 'Pantukoy o maling password ng user.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'AccessIsDenied', 'L''accès est refusé.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CannotCreateABackup', 'Désolé, ne peut pas créer une sauvegarde de base de données à ce moment.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CannotCreateFlagTransactionTableNull', 'Impossible de créer ou mettre à jour drapeau. Table de transaction n''a pas été fourni.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'Impossible de créer ou mettre à jour drapeau. Table de Transaction clé primaire n''a pas été fourni.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CannotMergeAlreadyMerged', 'Les opérations sélectionnées contiennent des éléments qui ont déjà été fusionnées. Se il vous plaît essayer à nouveau.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CannotMergeDifferentPartyTransaction', 'Vous ne pouvez pas fusionner les opérations des différentes parties en un seul lot. Se il vous plaît essayer à nouveau.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CannotMergeIncompatibleTax', 'Vous ne pouvez pas fusionner les transactions ayant des types d''impôts incompatibles. Se il vous plaît essayer à nouveau.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CannotMergeUrlNull', 'Vous ne pouvez pas fusionner les transactions. L''URL de fusion n''a pas été fourni.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CashTransactionCannotContainBankInfo', 'transaction en espèces ne peut pas contenir de détails de transaction bancaire.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CompareAmountErrorMessage', 'Le montant doit être supérieur au montant de.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CompareDaysErrorMessage', 'De jour ne doit pas être supérieure à la à jour.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'ComparePriceErrorMessage', 'Prix à partir devrait être inférieur au prix de.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'ConfigurationError', 'Impossible de continuer la tâche. Se il vous plaît corriger les problèmes de configuration.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'ConfirmationPasswordDoesNotMatch', 'Le mot de passe de confirmation ne correspond pas avec le nouveau mot de passe.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CouldNotDetermineEmailImageParserType', 'Impossible de déterminer le type d''image de l''analyseur pour le courrier électronique.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'CouldNotRegisterJavascript', 'Impossible d''inscrire JavaScript sur cette page parce que l''instance de page était invalide ou vide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'DateErrorMessage', 'La date sélectionnée est hors de portée.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'DueFrequencyErrorMessage', 'Jours en raison ne peut être 0 si la fréquence en raison id est sélectionné.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'DuplicateEntry', 'Dupliquer l''entrée.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'DuplicateFiles', 'Les fichiers en double!');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'GridViewEmpty', 'Vue par grille est vide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InsufficientBalanceInCashRepository', 'Il n''y a pas un solde suffisant dans le référentiel de trésorerie pour effectuer cette opération.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InsufficientStockWarning', 'Seulement {0} {1} {2} gauche en stock.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidAccount', 'compte incorrect.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidCashRepository', 'Invalid référentiel de trésorerie.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidCostCenter', 'Centre de coûts non valide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidData', 'Des données non valides.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidDate', 'Ce ne est pas une date valide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidParameterName', 'Invalid Npgsql nom du paramètre {0}. . Assurez-vous que le nom du paramètre correspond à votre commande texte.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidParty', 'Partie non valide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidPaymentTerm', 'Délai de paiement valide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidPriceType', 'Invalid type de prix.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidReceiptMode', 'Mode de réception non valide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSalesPerson', 'Vendeur valide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidShippingCompany', 'Société de transport valide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidStockTransaction', 'Invalid transaction boursière Id.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidStore', 'Magasin non valide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookInventoryDelivery', 'Transactions non valide subsidiaires livre "Inventaire Livraison"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookInventoryDirect', 'Transactions subsidiaires invalides livre "Inventaire Direct"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookInventoryInvoice', 'Transactions non valide subsidiaires livre "Facture d''inventaire"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookInventoryOrder', 'Transactions non valide subsidiaires livre "afin d''inventaire"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookInventoryPayment', 'Transactions non valide subsidiaires livre "Inventaire paiement»');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookInventoryQuotation', 'Transactions non valide subsidiaires livre "offre d''inventaire"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookInventoryReceipt', 'Transactions non valide subsidiaires livre "Réception d''inventaire"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookInventoryReturn', 'Transactions non valide subsidiaires livre "Inventaire retour"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookPurchaseDelivery', 'Transactions non valide subsidiaires livre "Achat Livraison"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookPurchaseQuotation', 'Transactions subsidiaires invalides livre "Achat Citation"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookPurchaseSuspense', 'Transactions subsidiaires invalides livre "Achat Suspense"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookPurchaseTransfer', 'Transactions non valide subsidiaires livre «Transfert d''achat"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookSalesPayment', 'Transactions non valide subsidiaires livre «Paiement des ventes"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookSalesSuspense', 'Transactions subsidiaires livre non valide "Suspense de vente"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidSubTranBookSalesTransfer', 'Transactions subsidiaires livre invalide "Transfert de vente"');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'InvalidUser', 'Utilisateur non valide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'ItemErrorMessage', 'Vous devez sélectionner ou identifiant composé identificateur d''article élément.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'LateFeeErrorMessage', 'Late id de frais et d''honoraires annonce fin fréquence id fois doivent être soit ou non sélectionnés.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'NegativeValueSupplied', 'Valeur négative fourni.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'NewPasswordCannotBeOldPassword', 'Nouveau mot de passe ne peut pas être ancien mot de passe.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'NoFileSpecified', 'Aucun fichier spécifié.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'NoTransactionToPost', 'Aucune opération d''afficher.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'NotAuthorized', 'Vous n''êtes pas autorisé à accéder à ces ressources à ce moment.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'NothingSelected', 'Rien sélectionné.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'PasswordCannotBeEmpty', 'Mot de passe ne peut pas être vide.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'PleaseEnterCurrentPassword', 'Se il vous plaît entrer votre mot de passe actuel.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'PleaseEnterNewPassword', 'Se il vous plaît entrer un nouveau mot de passe.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'RecurringAmountErrorMessage', 'Récurrents montant ne devrait pas être inférieure ou égale à 0.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'ReferencingSidesNotEqual', 'Les côtés de référencement sont pas égaux.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'RestrictedTransactionMode', 'Cet établissement ne permet pas l''affichage de la transaction.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'ReturnButtonUrlNull', 'Vous ne pouvez pas retourner cette entrée. L''URL de retour n''a pas été fourni.');
    PERFORM localization.add_localized_resource('Warnings', 'fr', 'UserIdOrPasswordIncorrect', 'Identifiant d''utilisateur ou mot de passe incorrect.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'AccessIsDenied', 'Akses ditolak.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CannotCreateABackup', 'Maaf, tidak bisa membuat backup database saat ini.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CannotCreateFlagTransactionTableNull', 'Tidak dapat membuat atau memperbarui bendera. Tabel transaksi tidak disediakan.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'Tidak dapat membuat atau memperbarui bendera. Tabel transaksi kunci primer tidak disediakan.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CannotMergeAlreadyMerged', 'Transaksi yang dipilih berisi item yang telah bergabung. Silakan coba lagi.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CannotMergeDifferentPartyTransaction', 'Tidak dapat menggabungkan transaksi partai yang berbeda ke dalam satu batch. Silakan coba lagi.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CannotMergeIncompatibleTax', 'Tidak dapat menggabungkan transaksi yang memiliki jenis pajak yang tidak kompatibel. Silakan coba lagi.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CannotMergeUrlNull', 'Tidak dapat menggabungkan transaksi. Url gabungan tidak disediakan.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CashTransactionCannotContainBankInfo', 'Sebuah transaksi tunai tidak dapat berisi rincian transaksi perbankan.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CompareAmountErrorMessage', 'Jumlah yang harus lebih besar dari jumlah dari.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CompareDaysErrorMessage', 'Dari hari tidak boleh lebih besar dari ke hari.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'ComparePriceErrorMessage', 'Harga mulai harus kurang dari harga yang.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'ConfigurationError', 'Tidak dapat melanjutkan tugas. Harap perbaiki masalah konfigurasi.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'ConfirmationPasswordDoesNotMatch', 'Sandi konfirmasi tidak sesuai dengan password baru.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CouldNotDetermineEmailImageParserType', 'Tidak dapat menentukan jenis parser gambar untuk email.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'CouldNotRegisterJavascript', 'Tidak bisa mendaftar JavaScript pada halaman ini karena halaman contoh tidak sah atau kosong.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'DateErrorMessage', 'Tanggal yang dipilih berada di luar jangkauan.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'DueFrequencyErrorMessage', 'Hari karena hanya dapat 0 jika id frekuensi karena dipilih.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'DuplicateEntry', 'Gandakan entri.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'DuplicateFiles', 'File duplikat.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'GridViewEmpty', 'Gridview kosong.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InsufficientBalanceInCashRepository', 'Tiada baki tunai yang mencukupi di dalam tabung untuk memproses urus niaga ini.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InsufficientStockWarning', 'Hanya {0} {1} {2} ditinggalkan dalam stok.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidAccount', 'Akaun tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidCashRepository', 'Repositori tunai tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidCostCenter', 'Pusat biaya yang tidak valid.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidData', 'Data tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidDate', 'Tarikh tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidParameterName', 'Nama parameter Npgsql tidak sah {0}. . Pastikan nama parameter perlawanan dengan teks perintah anda.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidParty', 'Pihak yang tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidPaymentTerm', 'Jangka waktu pembayaran yang tidak valid.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidPriceType', 'Jenis harga tidak valid.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidReceiptMode', 'Mod penerimaan tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSalesPerson', 'Penjual yang tidak valid.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidShippingCompany', 'Perusahaan pelayaran yang tidak valid.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidStockTransaction', 'Urus niaga saham tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidStore', 'Toko tidak valid.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookInventoryDelivery', 'Transaksi tidak sah Subsidiari Buku "Penghantaran Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookInventoryDirect', 'Transaksi tidak sah Subsidiari Buku "Inventori langsung"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookInventoryInvoice', 'Transaksi tidak sah Subsidiari Buku "invois Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookInventoryOrder', 'Transaksi tidak sah Buku "perintah Inventori" Anak Syarikat');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookInventoryPayment', 'Transaksi tidak sah Tempah Subsidiari "Pembayaran Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookInventoryQuotation', 'Transaksi tidak sah Subsidiari Buku "Sebutharga Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookInventoryReceipt', 'Transaksi tidak sah Subsidiari Buku "Resit Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookInventoryReturn', 'Transaksi tidak sah Subsidiari Buku "Pulangan Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookPurchaseDelivery', 'Transaksi tidak sah Subsidiari Buku "Penghantaran Pembelian"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookPurchaseQuotation', 'Transaksi tidak sah Tempah Subsidiari "Pembelian Sebutharga"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookPurchaseSuspense', 'Transaksi tidak sah Tempah Subsidiari "Pembelian Tergantung"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookPurchaseTransfer', 'Transaksi tidak sah Subsidiari Buku "Pembelian Transfer"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookSalesPayment', 'Transaksi tidak sah Tempah Subsidiari "Pembayaran Jualan"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookSalesSuspense', 'Transaksi tidak sah Subsidiari "Tergantung Jualan" Buku');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidSubTranBookSalesTransfer', 'Transaksi tidak sah Subsidiari Buku "Pemindahan Jualan"');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'InvalidUser', 'Pengguna tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'ItemErrorMessage', 'Anda harus memilih salah satu item yang identifier atau senyawa identifier item.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'LateFeeErrorMessage', 'Id biaya keterlambatan dan biaya akhir postingan frekuensi id keduanya harus baik dipilih atau tidak.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'NegativeValueSupplied', 'Nilai negatif yang disediakan.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'NewPasswordCannotBeOldPassword', 'Password baru tidak bisa password lama.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'NoFileSpecified', 'Tidak ada file yang ditentukan.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'NoTransactionToPost', 'Tidak ada transaksi untuk memposting.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'NotAuthorized', 'Anda tidak memiliki izin untuk mengakses sumber daya ini pada saat ini.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'NothingSelected', 'Tidak ada yang dipilih.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'PasswordCannotBeEmpty', 'Password tidak boleh kosong.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'PleaseEnterCurrentPassword', 'Masukkan sandi Anda saat ini.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'PleaseEnterNewPassword', 'Silahkan masukkan password baru.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'RecurringAmountErrorMessage', 'Berulang jumlah tidak boleh kurang dari atau sama dengan 0.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'ReferencingSidesNotEqual', 'Sisi referensi tidak sama.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'RestrictedTransactionMode', 'Pendirian ini tidak memungkinkan transaksi posting.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'ReturnButtonUrlNull', 'Tidak dapat kembali entri ini. Url kembali tidak disediakan.');
    PERFORM localization.add_localized_resource('Warnings', 'id', 'UserIdOrPasswordIncorrect', 'Identifier pengguna dan password yang salah.');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'AccessIsDenied', 'アクセスが拒否されました。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CannotCreateABackup', '申し訳ありませんが、この時点で、データベースのバックアップを作成することはできません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CannotCreateFlagTransactionTableNull', '作成または更新フラグはできません。トランザクションテーブルには、提供されていませんでした。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CannotCreateFlagTransactionTablePrimaryKeyNull', '作成または更新フラグはできません。トランザクションテーブルの主キーが提供されていませんでした。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CannotMergeAlreadyMerged', '選択したトランザクションは既にマージされた項目が含まれています。もう一度やり直してください。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CannotMergeDifferentPartyTransaction', '単一のバッチに異なる当事者の取引をマージすることはできません。もう一度やり直してください。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CannotMergeIncompatibleTax', '互換性のない税タイプを持つトランザクションをマージすることはできません。もう一度やり直してください。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CannotMergeUrlNull', 'トランザクションをマージすることはできません。マージURLが提供されなかった。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CashTransactionCannotContainBankInfo', '現金取引は、銀行取引の詳細を含めることはできません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CompareAmountErrorMessage', '量は、量よりも大きくなければならないため。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CompareDaysErrorMessage', '日から日へのより大きくてはならない。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'ComparePriceErrorMessage', 'からの価格に価格未満でなければなりません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'ConfigurationError', 'タスクを続行できません。構成の問題を修正してください。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'ConfirmationPasswordDoesNotMatch', '彼確認パスワード新しいパスワードと一致しません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CouldNotDetermineEmailImageParserType', '電子メール用の画像パーサの種類を判断できませんでした。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'CouldNotRegisterJavascript', 'ページインスタンスが無効または空であるため、このページではJavaScriptを登録できませんでした。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'DateErrorMessage', '選択した日付が範囲外です。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'DueFrequencyErrorMessage', '周波数によるIDが選択される場合により日数のみ0であってもよい。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'DuplicateEntry', 'エントリが重複しています。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'DuplicateFiles', '重複ファイル。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'GridViewEmpty', 'グリッド表示は空です。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InsufficientBalanceInCashRepository', 'このトランザクションを処理するためのキャッシュ·リポジトリには十分な残高がありません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InsufficientStockWarning', '唯一の{0}{1}{2}在庫の。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidAccount', '無効なアカウント。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidCashRepository', '無効な現金リポジトリ。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidCostCenter', '無効なコストセンター。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidData', '無効なデータ。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidDate', 'これは有効な日付ではありません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidParameterName', '無効なNpgsqlのパラメータ名{0}。。パラメータ名は、コマンド·テキストと一致していることを確認してください。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidParty', '無効なパーティー。このパーティーは、このトランザクションに関連付けられていない。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidPaymentTerm', '無効な支払条件。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidPriceType', '無効な価格タイプ。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidReceiptMode', '無効なレシートモード。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSalesPerson', '無効な販売員。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidShippingCompany', '無効な海運会社。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidStockTransaction', '無効な株式取引。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidStore', '無効な店。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookInventoryDelivery', '無効な子会社との取引帳「インベントリ配信」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookInventoryDirect', '無効な子会社との取引ブック「インベントリダイレクト」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookInventoryInvoice', '無効な子会社との取引帳「インベントリ請求書」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookInventoryOrder', '無効な子会社との取引帳「インベントリ順序」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookInventoryPayment', '無効な子会社との取引帳「インベントリ支払い」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookInventoryQuotation', '無効な子会社との取引帳「インベントリ引用」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookInventoryReceipt', '無効な子会社との取引帳「インベントリ領収書」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookInventoryReturn', '無効な子会社との取引帳「インベントリ戻る」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookPurchaseDelivery', '無効な子会社との取引ブック」」...');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookPurchaseQuotation', '無効な子会社との取引帳「購入配信」」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookPurchaseSuspense', '無効な子会社との取引帳」購入時の領収書」」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookPurchaseTransfer', '無効な子会社との取引帳「購入転送」」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookSalesPayment', '無効な子会社との取引帳「販売支払い」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookSalesSuspense', '無効な子会社との取引帳」販売サスペンス」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidSubTranBookSalesTransfer', '無効な子会社との取引帳「販売転送」');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'InvalidUser', '無効なユーザー。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'ItemErrorMessage', 'あなたはアイテム識別子または化合アイテム識別子のどちらかを選択する必要があります。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'LateFeeErrorMessage', '延滞料IDと延滞料の投稿頻度IDの両方のいずれかが選択されるべきか。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'NegativeValueSupplied', '負の値は、供給される。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'NewPasswordCannotBeOldPassword', '新しいパスワードが古いパスワードにすることはできません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'NoFileSpecified', 'いいえファイルが指定されていません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'NoTransactionToPost', 'トランザクションは投稿しないように。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'NotAuthorized', 'この時点で、このリソースにアクセスする権限がありません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'NothingSelected', '何も選択されていません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'PasswordCannotBeEmpty', 'パスワードが空にすることはできません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'PleaseEnterCurrentPassword', '現在のパスワードを入力してください。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'PleaseEnterNewPassword', '新しいパスワードを入力してください。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'RecurringAmountErrorMessage', '量繰り返しが0以下であってはならない。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'ReferencingSidesNotEqual', '参照辺が等しくない。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'RestrictedTransactionMode', '彼の設立は、取引の投稿を許可していません。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'ReturnButtonUrlNull', 'このエントリを返すことができません。リターンURLが提供されなかった。');
    PERFORM localization.add_localized_resource('Warnings', 'ja', 'UserIdOrPasswordIncorrect', 'ユーザ識別子またはパスワードが正しくない。');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'AccessIsDenied', 'Akses dinafikan.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CannotCreateABackup', 'Maaf, tidak boleh buat sandaran pangkalan data pada masa ini.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CannotCreateFlagTransactionTableNull', 'Tidak boleh membuat atau mengemaskini bendera. Jadual transaksi tidak disediakan.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'Tidak boleh membuat atau mengemaskini bendera. Kunci utama jadual transaksi tidak disediakan.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CannotMergeAlreadyMerged', 'Urusniaga yang dipilih mengandungi perkara-perkara yang telah bergabung. Sila cuba sekali lagi.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CannotMergeDifferentPartyTransaction', 'Tidak boleh menggabungkan urus niaga pihak-pihak yang berbeza ke dalam satu kumpulan tunggal. Sila cuba sekali lagi.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CannotMergeIncompatibleTax', 'Tidak boleh menggabungkan urus niaga yang mempunyai jenis cukai yang tidak serasi. Sila cuba sekali lagi.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CannotMergeUrlNull', 'Tidak boleh menggabungkan urus niaga. Url merge tidak disediakan.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CashTransactionCannotContainBankInfo', 'Urus niaga tunai tidak boleh mengandungi maklumat transaksi bank.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CompareAmountErrorMessage', 'Jumlah yang perlu lebih besar daripada jumlah yang dari.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CompareDaysErrorMessage', 'Dari hari tidak seharusnya lebih besar untuk hari.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'ComparePriceErrorMessage', 'Harga boleh kurang daripada daripada harga kepada.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'ConfigurationError', 'Tidak boleh meneruskan tugas. Betulkan isu konfigurasi.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'ConfirmationPasswordDoesNotMatch', 'Pengesahan kata laluan tidak sepadan dengan kata laluan baru.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CouldNotDetermineEmailImageParserType', 'Tidak dapat menentukan jenis untuk e-mel penghurai imej.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'CouldNotRegisterJavascript', 'Tidak dapat mendaftar JavaScript pada halaman ini kerana contoh halaman itu tidak sah atau kosong.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'DateErrorMessage', 'Tarikh yang dipilih adalah daripada pelbagai.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'DueFrequencyErrorMessage', 'Hari kerana hanya boleh menjadi 0 jika id dipilih kerana frekuensi.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'DuplicateEntry', 'Pendua entri.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'DuplicateFiles', 'Pendua Fail.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'GridViewEmpty', 'Gridview kosong.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InsufficientBalanceInCashRepository', 'Tiada baki tunai yang mencukupi di dalam tabung untuk memproses urus niaga ini.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InsufficientStockWarning', 'Hanya {0} {1} {2} ditinggalkan dalam stok.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidAccount', 'Akaun tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidCashRepository', 'Repositori tunai tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidCostCenter', 'Pusat kos tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidData', 'Data tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidDate', 'Tarikh tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidParameterName', 'Nama parameter Npgsql tidak sah {0}. . Pastikan nama parameter perlawanan dengan teks perintah anda.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidParty', 'Pihak yang tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidPaymentTerm', 'Tempoh pembayaran tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidPriceType', 'Jenis harga tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidReceiptMode', 'Mod penerimaan tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSalesPerson', 'Jurujual tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidShippingCompany', 'Syarikat perkapalan tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidStockTransaction', 'Urus niaga saham tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidStore', 'Kedai tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookInventoryDelivery', 'Transaksi tidak sah Subsidiari Buku "Penghantaran Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookInventoryDirect', 'Transaksi tidak sah Subsidiari Buku "Inventori langsung"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookInventoryInvoice', 'Transaksi tidak sah Subsidiari Buku "invois Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookInventoryOrder', 'Transaksi tidak sah Buku "perintah Inventori" Anak Syarikat');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookInventoryPayment', 'Transaksi tidak sah Tempah Subsidiari "Pembayaran Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookInventoryQuotation', 'Transaksi tidak sah Subsidiari Buku "Sebutharga Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookInventoryReceipt', 'Transaksi tidak sah Subsidiari Buku "Resit Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookInventoryReturn', 'Transaksi tidak sah Subsidiari Buku "Pulangan Inventori"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookPurchaseDelivery', 'Transaksi tidak sah Subsidiari Buku "Penghantaran Pembelian"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookPurchaseQuotation', 'Transaksi tidak sah Tempah Subsidiari "Pembelian Sebutharga"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookPurchaseSuspense', 'Transaksi tidak sah Tempah Subsidiari "Pembelian Tergantung"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookPurchaseTransfer', 'Transaksi tidak sah Subsidiari Buku "Pembelian Transfer"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookSalesPayment', 'Transaksi tidak sah Tempah Subsidiari "Pembayaran Jualan"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookSalesSuspense', 'Transaksi tidak sah Subsidiari "Tergantung Jualan" Buku');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidSubTranBookSalesTransfer', 'Transaksi tidak sah Subsidiari Buku "Pemindahan Jualan"');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'InvalidUser', 'Pengguna tidak sah.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'ItemErrorMessage', 'Anda perlu memilih sama ada item pengecam atau sebatian item pengecam.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'LateFeeErrorMessage', 'Pengecam bayaran lewat dan bayaran lewat kekerapan posting pengecam kedua-dua perlu sama ada terpilih atau tidak.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'NegativeValueSupplied', 'Nilai negatif dibekalkan.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'NewPasswordCannotBeOldPassword', 'Kata laluan baru tidak boleh menjadi kata laluan lama.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'NoFileSpecified', 'Tiada fail yang dinyatakan.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'NoTransactionToPost', 'Tiada urus niaga untuk mencatat.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'NotAuthorized', 'Anda tiada kebenaran untuk mengakses sumber-sumber ini pada masa ini.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'NothingSelected', 'Tiada apa-apa yang dipilih.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'PasswordCannotBeEmpty', 'Kata laluan tidak boleh kosong.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'PleaseEnterCurrentPassword', 'Sila masukkan kata laluan semasa anda.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'PleaseEnterNewPassword', 'Masukkan kata laluan baru.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'RecurringAmountErrorMessage', 'Jumlah berulang hendaklah tidak kurang daripada atau sama dengan 0.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'ReferencingSidesNotEqual', 'Sisi rujukan tidak sama.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'RestrictedTransactionMode', 'Pertubuhan ini tidak membenarkan urus niaga dicatatkan.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'ReturnButtonUrlNull', 'Tidak boleh kembali entri ini. Url pulangan tidak disediakan.');
    PERFORM localization.add_localized_resource('Warnings', 'ms', 'UserIdOrPasswordIncorrect', 'Pengecam pengguna atau kata laluan salah.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'AccessIsDenied', 'Toegang is geweigerd.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CannotCreateABackup', 'Sorry, kan niet een database back-up op dit moment te maken.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CannotCreateFlagTransactionTableNull', 'Kan niet maken of bijwerken vlag. Transactietabel werd niet verstrekt.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'Cannot create or update flag. Transaction table primary key was not provided.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CannotMergeAlreadyMerged', 'De geselecteerde transacties bevatten items die al zijn samengevoegd. Gelieve opnieuw te proberen.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CannotMergeDifferentPartyTransaction', 'Kan transacties van verschillende partijen niet samen te voegen tot één partij. Gelieve opnieuw te proberen.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CannotMergeIncompatibleTax', 'Kunnen transacties tussen onverenigbare fiscale types niet fuseren. Gelieve opnieuw te proberen.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CannotMergeUrlNull', 'Kunnen transacties niet fuseren. Het samenvoegen url werd niet verstrekt.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CashTransactionCannotContainBankInfo', 'Een cash transactie kan niet banktransactie informatie bevatten.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CompareAmountErrorMessage', 'Het bedrag moet groter zijn dan de hoeveelheid van zijn.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CompareDaysErrorMessage', 'Vanaf dagen mag niet groter zijn dan de te dagen.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'ComparePriceErrorMessage', 'Prijs vanaf moet minder dan de prijs te zijn.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'ConfigurationError', 'annot verder de taak. Corrigeer problemen met de configuratie.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'ConfirmationPasswordDoesNotMatch', 'Het wachtwoord bevestiging komt niet overeen met het nieuwe wachtwoord.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CouldNotDetermineEmailImageParserType', 'Kon niet bepalen afbeelding parser soort voor e-mail.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'CouldNotRegisterJavascript', 'Kon JavaScript registreren niet op deze pagina omdat de pagina instantie was ongeldig of leeg.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'DateErrorMessage', 'Geselecteerde datum valt buiten het bereik.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'DueFrequencyErrorMessage', 'Vanwege dagen kan alleen 0 als gevolg frequentie id is geselecteerd.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'DuplicateEntry', 'Dupliceren binnenkomst.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'DuplicateFiles', 'Dubbele bestanden!');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'GridViewEmpty', 'Rasterweergave is leeg.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InsufficientBalanceInCashRepository', 'Er is geen voldoende saldo in de cash repository om deze transactie te verwerken.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InsufficientStockWarning', 'Alleen {0} {1} van {2} op voorraad.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidAccount', 'Ongeldige rekening.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidCashRepository', 'Ongeldige contant repository.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidCostCenter', 'Ongeldige kostenplaats.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidData', 'Ongeldige gegevens.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidDate', 'Dit is geen geldige datum.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidParameterName', 'Ongeldige Npgsql parameter naam {0}. . Zorg ervoor dat de naam van de parameter overeenkomt met uw bevel tekst.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidParty', 'Ongeldige partij. Deze partij is niet geassocieerd met deze transactie.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidPaymentTerm', 'Ongeldige betalingstermijn.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidPriceType', 'Ongeldige prijs type.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidReceiptMode', 'Ongeldige ontvangst mode.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSalesPerson', 'Ongeldige verkoper.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidShippingCompany', 'Ongeldige rederij.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidStockTransaction', 'Ongeldige voorraad transactie.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidStore', 'Ongeldige winkel.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookInventoryDelivery', 'ongeldige Dochteronderneming Transacties Book "Inventaris Delivery"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookInventoryDirect', 'ongeldige Dochteronderneming Transacties Book "Inventaris Direct"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookInventoryInvoice', 'ongeldige Dochteronderneming Transacties Book "Inventaris Factuur"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookInventoryOrder', 'ongeldige Dochteronderneming Transacties Book "Inventaris Order"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookInventoryPayment', 'ongeldige Dochteronderneming Transacties Book "Inventaris Betaling"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookInventoryQuotation', 'ongeldige Dochteronderneming Transacties Book "Inventarisatie Offerte"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookInventoryReceipt', 'ongeldige Dochteronderneming Transacties Book "Inventaris Receipt"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookInventoryReturn', 'ongeldige Dochteronderneming Transacties Book "Inventaris Return"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookPurchaseDelivery', 'ongeldige Dochteronderneming Transacties Boek "Aankoop Delivery"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookPurchaseQuotation', 'ongeldige Dochteronderneming Transacties Boek "Aankoop Offerte"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookPurchaseSuspense', 'ongeldige Dochteronderneming Transacties Boek "Aankoop Suspense"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookPurchaseTransfer', 'ongeldige Dochteronderneming Transacties Boek "Aankoop Transfer"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookSalesPayment', 'ongeldige Dochteronderneming Transacties Book "Sales Betaling"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookSalesSuspense', 'ongeldige Dochteronderneming Transacties Book "Sales Suspense"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidSubTranBookSalesTransfer', 'ongeldige Dochteronderneming Transacties Book "Sales Transfer"');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'InvalidUser', 'Ongeldige gebruikersnaam.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'ItemErrorMessage', 'Je moet ofwel identifier of voorwerp verbinding object identifier selecteren.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'LateFeeErrorMessage', 'Late betaling id en late vergoeding posting frequentie id beide moeten ofwel worden geselecteerd of niet.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'NegativeValueSupplied', 'Negatieve waarde geleverd.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'NewPasswordCannotBeOldPassword', 'Nieuw wachtwoord kan oude wachtwoord niet.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'NoFileSpecified', 'Geen bestand gespecificeerd.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'NoTransactionToPost', 'Geen transactie te plaatsen.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'NotAuthorized', 'U bent niet bevoegd om toegang tot deze middelen op dit moment.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'NothingSelected', 'Niets geselecteerd.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'PasswordCannotBeEmpty', 'Wachtwoord kan niet leeg zijn.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'PleaseEnterCurrentPassword', 'Voer uw huidige wachtwoord.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'PleaseEnterNewPassword', 'Vul een nieuw wachtwoord.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'RecurringAmountErrorMessage', 'Terugkerende bedrag niet kleiner dan of gelijk aan 0.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'ReferencingSidesNotEqual', 'De verwijzingen zijkanten zijn niet gelijk.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'RestrictedTransactionMode', 'Dit etablissement staat niet toe dat de transactie posting.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'ReturnButtonUrlNull', 'Kan dit item niet meer terug. De return url werd niet verstrekt.');
    PERFORM localization.add_localized_resource('Warnings', 'nl', 'UserIdOrPasswordIncorrect', 'Gebruiker Identifier of wachtwoord onjuist.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'AccessIsDenied', 'Acesso negado.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CannotCreateABackup', 'Desculpe, não é possível criar um backup de banco de dados no momento.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CannotCreateFlagTransactionTableNull', 'Não é possível criar ou bandeira atualização. Tabela de transação não foi fornecido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'Não é possível criar ou bandeira atualização. Chave primária tabela de transação não foi fornecido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CannotMergeAlreadyMerged', 'As operações seleccionadas conter itens que já foram incorporadas. Por favor, tente novamente.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CannotMergeDifferentPartyTransaction', 'Não é possível mesclar as operações de diferentes partes em um único lote. Por favor, tente novamente.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CannotMergeIncompatibleTax', 'Não é possível mesclar as operações que têm tipos de impostos incompatíveis. Por favor, tente novamente.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CannotMergeUrlNull', 'Não é possível mesclar as transações. A url merge não foi fornecido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CashTransactionCannotContainBankInfo', 'A transação de dinheiro não pode conter bancárias detalhes da transação.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CompareAmountErrorMessage', 'A quantidade de deve ser maior do que a quantidade de.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CompareDaysErrorMessage', 'Do dia não deve ser maior do que o de dias.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'ComparePriceErrorMessage', 'Preço desde deve ser menor do que o preço para.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'ConfigurationError', 'Não é possível continuar a tarefa. Por favor, corrija os problemas de configuração.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'ConfirmationPasswordDoesNotMatch', 'A senha de confirmação não coincide com a nova senha.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CouldNotDetermineEmailImageParserType', 'Não foi possível determinar imagem do tipo de analisador de e-mail.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'CouldNotRegisterJavascript', 'Não foi possível registrar JavaScript nesta página porque a instância página era inválido ou vazio.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'DateErrorMessage', 'Data selecionada está fora de alcance.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'DueFrequencyErrorMessage', 'Dias devido só pode ser 0 se devido id freqüência é selecionada.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'DuplicateEntry', 'Duplicate entry.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'DuplicateFiles', 'Duplicate File!');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'GridViewEmpty', 'Exibição de Grade está vazio.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InsufficientBalanceInCashRepository', 'Não há saldo suficiente no repositório de dinheiro para processar essa transação.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InsufficientStockWarning', 'Só {0} {1} de {2} deixou em estoque.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidAccount', 'Conta inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidCashRepository', 'Repositório de caixa inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidCostCenter', 'Centro de custo inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidData', 'Dados inválidos.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidDate', 'Esta não é uma data válida.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidParameterName', 'Inválido nome do parâmetro Npgsql {0}. . Certifique-se de que o nome do parâmetro corresponde com seu texto de comando.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidParty', 'Partido inválido. Esta festa não está associado a essa transação.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidPaymentTerm', 'Prazo de pagamento inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidPriceType', 'Preço inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidReceiptMode', 'Modo de recebimento inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSalesPerson', 'Vendedor inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidShippingCompany', 'Empresa de transporte inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidStockTransaction', 'Transação de ações inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidStore', 'Loja inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookInventoryDelivery', 'inválido Transações Subsidiários Book "Entrega Inventory"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookInventoryDirect', 'Transações Subsidiários inválidos livro "Inventário Direta"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookInventoryInvoice', 'inválido Transações Subsidiários livro "Inventário Invoice"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookInventoryOrder', 'inválido Transações Subsidiários Book "Ordem Inventário"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookInventoryPayment', 'inválido Transações Subsidiários livro "Inventário de Pagamento"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookInventoryQuotation', 'inválido Transações Subsidiários Book "Quotation Inventory"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookInventoryReceipt', 'inválido Transações Subsidiários Book "Receipt Inventory"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookInventoryReturn', 'inválido Transações Subsidiários livro "Return Inventory"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookPurchaseDelivery', 'inválido Transações Subsidiários Book "Entrega Comprar ''"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookPurchaseQuotation', 'Transações Subsidiários inválidos Book "Cotação de Compra"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookPurchaseSuspense', 'Transações Subsidiários inválidos Book "Suspense Comprar ''"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookPurchaseTransfer', 'inválido Transações Subsidiários Book "Transferência de Compra"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookSalesPayment', 'inválido Transações Subsidiários Book "Pagamento de Vendas"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookSalesSuspense', 'inválido Transações Subsidiários Book "Suspense Sales"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidSubTranBookSalesTransfer', 'inválido Transações Subsidiários Book "Transferência de Vendas"');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'InvalidUser', 'Usuário inválido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'ItemErrorMessage', 'Você tem que selecionar um item identificador ou identificador de item composto.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'LateFeeErrorMessage', 'Tarde id taxa e tarde taxa postagem id frequência ambos devem ser seleccionado ou não.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'NegativeValueSupplied', 'Valor negativo fornecido.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'NewPasswordCannotBeOldPassword', 'Nova senha não pode ser senha antiga.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'NoFileSpecified', 'No arquivo especificado.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'NoTransactionToPost', 'Nenhuma transação para postar.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'NotAuthorized', 'Você não está autorizado a acessar esses recursos neste momento.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'NothingSelected', 'Nada selecionado.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'PasswordCannotBeEmpty', 'A senha não pode estar vazio.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'PleaseEnterCurrentPassword', 'Digite sua senha atual.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'PleaseEnterNewPassword', 'Por favor, insira uma nova senha.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'RecurringAmountErrorMessage', 'Recorrentes quantidade não deve ser menor do que ou igual a 0.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'ReferencingSidesNotEqual', 'Os lados que fazem referência não são iguais.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'RestrictedTransactionMode', 'Este estabelecimento não permite postagem transação.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'ReturnButtonUrlNull', 'Não é possível retornar esta entrada. O url de retorno não foi fornecida.');
    PERFORM localization.add_localized_resource('Warnings', 'pt', 'UserIdOrPasswordIncorrect', 'Identificador de usuário ou senha incorreta.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'AccessIsDenied', 'Отказано в доступе.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CannotCreateABackup', 'Извините, не могу создать резервную копию базы данных на данный момент.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CannotCreateFlagTransactionTableNull', 'Невозможно создать или обновить флаг. Таблицу транзакций не было.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'Невозможно создать или обновить флаг. Таблицу транзакций первичный ключ не был обеспечен.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CannotMergeAlreadyMerged', 'Выбранные операции содержат элементы, которые уже были объединены. Пожалуйста, попробуйте еще раз.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CannotMergeDifferentPartyTransaction', 'Невозможно объединить операции различных партий в единую партию. Пожалуйста, попробуйте еще раз.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CannotMergeIncompatibleTax', 'Невозможно объединить операции, имеющие несовместимые типы налогов. Пожалуйста, попробуйте еще раз.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CannotMergeUrlNull', 'Невозможно объединить операции. Слияние гиперссылка, не было.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CashTransactionCannotContainBankInfo', 'Кассовая сделка не может содержать банковские реквизиты сделки.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CompareAmountErrorMessage', 'Сумма должна быть больше, чем количество из.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CompareDaysErrorMessage', 'Из дней не должно быть больше, чем до нескольких дней.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'ComparePriceErrorMessage', 'Цена от должно быть меньше, чем цена на.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'ConfigurationError', 'Не можете продолжить задачу. Пожалуйста, исправьте проблемы конфигурации.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'ConfirmationPasswordDoesNotMatch', 'Подтверждение пароля не совпадает с новым паролем.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CouldNotDetermineEmailImageParserType', 'Не удалось определить тип изображения парсер электронной почте.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'CouldNotRegisterJavascript', 'Не удалось зарегистрировать наличие на этой странице, потому что экземпляр страницы недействительным или пустым.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'DateErrorMessage', 'Выбранная дата находится вне диапазона.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'DueFrequencyErrorMessage', 'Из-за дня может быть только 0, если выбран из-за частоты ID.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'DuplicateEntry', 'Дубликат записи.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'DuplicateFiles', 'Дубликаты файлов!');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'GridViewEmpty', 'Значки пуст.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InsufficientBalanceInCashRepository', 'Там нет достаточного остатка в кассовой хранилища для обработки транзакции.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InsufficientStockWarning', 'Только {0} {1} {2} оставил в запасе.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidAccount', 'Неверный счет.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidCashRepository', 'Неверный хранилище наличными.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidCostCenter', 'Неверный МВЗ.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidData', 'Неверные данные.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidDate', 'Это не действительной датой.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidParameterName', 'Неверное имя параметра Npgsql {0}. , Убедитесь, что имя параметра матчи с командной текста.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidParty', 'Неверный партия. Эта партия не связана с этой сделки.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidPaymentTerm', 'Неверный срок оплаты.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidPriceType', 'Неверный тип цена.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidReceiptMode', 'Неверный режим получения.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSalesPerson', 'Неверный продавцом.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidShippingCompany', 'Неверный судоходная компания.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidStockTransaction', 'Неверный фондовые операции.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidStore', 'Неверный магазин.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookInventoryDelivery', 'Неверный Вспомогательные Сделки Книга «Инвентаризация Доставка"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookInventoryDirect', 'Недействительные сделки Вспомогательные Книга "Склад Прямая"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookInventoryInvoice', 'Неверный Вспомогательные Сделки Книга «Инвентаризация Счет"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookInventoryOrder', 'Неверный Вспомогательные Сделки Книга "инвентаризации заказ"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookInventoryPayment', 'Неверный Вспомогательные Сделки Книга «Инвентаризация Оплата"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookInventoryQuotation', 'Неверный Вспомогательные Сделки Книга «Инвентаризация цитаты"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookInventoryReceipt', 'Неверный Вспомогательные Сделки Книга «Инвентаризация Получение"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookInventoryReturn', 'Неверный Вспомогательные Сделки Книга «Инвентаризация Возвращение"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookPurchaseDelivery', 'Неверный Вспомогательные Сделки Книга "Покупка Доставка"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookPurchaseQuotation', 'Недействительные сделки Вспомогательные Книга "Покупка цитаты"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookPurchaseSuspense', 'Недействительные сделки Вспомогательные Книга "Покупка Триллер"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookPurchaseTransfer', 'Неверный Вспомогательные Сделки Книга "Покупка Transfer"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookSalesPayment', 'Неверный Вспомогательные Сделки Книга "Оплата по продажам"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookSalesSuspense', 'Неверный Вспомогательные Сделки Книга "Триллер Продажи"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidSubTranBookSalesTransfer', 'Неверный Вспомогательные Сделки Книга "Передача по продажам"');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'InvalidUser', 'Неправильный пользователь.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'ItemErrorMessage', 'Вы должны выбрать либо идентификатор элемента или соединения идентификатор элемента.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'LateFeeErrorMessage', 'Просрочку платежа ID и штраф за опоздание размещение частота ID оба должны быть либо выбран или нет.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'NegativeValueSupplied', 'Отрицательное значение в комплект поставки.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'NewPasswordCannotBeOldPassword', 'Новый пароль не может быть старый пароль.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'NoFileSpecified', 'Не указано ни одного файла.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'NoTransactionToPost', 'Сделка не чтобы оставлять сообщения.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'NotAuthorized', 'Вы не авторизованы для доступа к этой ресурсы в настоящее время.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'NothingSelected', 'Ничего не выбрано.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'PasswordCannotBeEmpty', 'Пароль не может быть пустым.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'PleaseEnterCurrentPassword', 'Пожалуйста, введите ваш текущий пароль.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'PleaseEnterNewPassword', 'Пожалуйста, введите новый пароль.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'RecurringAmountErrorMessage', 'Периодическое количество не должно быть меньше или равно 0.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'ReferencingSidesNotEqual', 'Ссылающейся стороны не равны.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'RestrictedTransactionMode', 'Это учреждение не позволяет объявление транзакций.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'ReturnButtonUrlNull', 'Не может вернуться на эту запись.URL возврата не было.');
    PERFORM localization.add_localized_resource('Warnings', 'ru', 'UserIdOrPasswordIncorrect', 'Идентификатор пользователя или пароль неверен.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'AccessIsDenied', 'Åtkomst nekad.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CannotCreateABackup', 'Tyvärr, kan inte skapa en databas backup vid denna tid.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CannotCreateFlagTransactionTableNull', 'Kan inte skapa eller uppdatera flagga. Transaktions tabellen angavs inte.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CannotCreateFlagTransactionTablePrimaryKeyNull', 'Kan inte skapa eller uppdatera flagga. Transaktions tabellen primärnyckel angavs inte.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CannotMergeAlreadyMerged', 'De utvalda transaktioner innehåller poster som redan har slagits samman. Försök igen.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CannotMergeDifferentPartyTransaction', 'Kan inte slå ihop transaktioner av olika parter i ett enda parti. Försök igen.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CannotMergeIncompatibleTax', 'Kan inte slå samman transaktioner med inkompatibla skatteslag. Försök igen.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CannotMergeUrlNull', 'Kan inte slå samman transaktioner. Sammanfogningen url angavs inte.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CashTransactionCannotContainBankInfo', 'En kontanttransaktion kan inte innehålla banktransaktionsdetaljer.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CompareAmountErrorMessage', 'Det belopp som ska vara större än det belopp från.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CompareDaysErrorMessage', 'Från dagar bör inte vara större än den till dagar.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'ComparePriceErrorMessage', 'Pris från bör vara mindre än priset till.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'ConfigurationError', 'Kan inte fortsätta uppgiften. Rätta konfigurationsproblem.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'ConfirmationPasswordDoesNotMatch', 'Bekräftelse lösenord stämmer inte med det nya lösenordet.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CouldNotDetermineEmailImageParserType', 'Det gick inte att avgöra bild parser typ för e-post.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'CouldNotRegisterJavascript', 'Kunde inte registrera JavaScript på denna sida eftersom sidan instans var ogiltig eller tom.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'DateErrorMessage', 'Valt datum är utanför intervallet.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'DueFrequencyErrorMessage', 'Due dagar kan bara vara 0 om vederbörlig frekvens id väljs.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'DuplicateEntry', 'Duplicera post.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'DuplicateFiles', 'Dubbletter av filer!');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'GridViewEmpty', 'Grid är tom.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InsufficientBalanceInCashRepository', 'Det finns ingen tillräcklig balans i kontanter förvaret att bearbeta denna transaktion.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InsufficientStockWarning', 'Endast {0} {1} av {2} kvar i lager.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidAccount', 'Ogiltigt konto.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidCashRepository', 'Ogiltig kontant slutförvar.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidCostCenter', 'Ogiltig kostnadsställe.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidData', 'Ogiltiga data.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidDate', 'Detta är inte ett giltigt datum.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidParameterName', 'Ogiltig Npgsql parameternamn {0}. . Kontrollera att parameternamnet matchar med ditt kommando text.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidParty', 'Ogiltig part. Detta parti är inte associerad med denna transaktion.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidPaymentTerm', 'Ogiltig betalningsvillkor.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidPriceType', 'Ogiltig pristypen.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidReceiptMode', 'Ogiltigt kvitto läge.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSalesPerson', 'Ogiltigt säljare.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidShippingCompany', 'Ogiltig rederiet.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidStockTransaction', 'Ogiltig aktietransaktion.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidStore', 'Ogiltigt butik.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookInventoryDelivery', 'Ogiltig Dotterbolag Transaktioner Bok "Inventering Delivery"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookInventoryDirect', 'Ogiltiga Dotterbolag Transaktioner Bok "Inventering Direct"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookInventoryInvoice', 'Ogiltig Dotterbolag Transaktioner Bok "Inventering Faktura"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookInventoryOrder', 'Ogiltig Dotterbolag Transaktioner Bok "Inventering Order"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookInventoryPayment', 'Ogiltig Dotterbolag Transaktioner Bok "Inventering Betalning"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookInventoryQuotation', 'Ogiltig Dotterbolag Transaktioner Bok "Inventering Offert"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookInventoryReceipt', 'Ogiltig Dotterbolag Transaktioner Bok "Inventering Kvitto"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookInventoryReturn', 'Ogiltig Dotterbolag Transaktioner Bok "Inventering Return"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookPurchaseDelivery', 'Ogiltig Dotterbolag Transaktioner Bok "Purchase Delivery"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookPurchaseQuotation', 'Ogiltiga Dotterbolag Transaktioner Bok "Purchase Offert"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookPurchaseSuspense', 'Ogiltiga Dotterbolag Transaktioner Bok "Purchase Spänning"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookPurchaseTransfer', 'Ogiltig Dotterbolag Transaktioner Bok "Inköps Transfer"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookSalesPayment', 'Ogiltig Dotterbolag Transaktioner Bok "Försäljning Payment"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookSalesSuspense', 'Ogiltig Dotterbolag Transaktioner Bok "Sales Spänning"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidSubTranBookSalesTransfer', 'Ogiltig Dotterbolag Transaktioner Bok "Sales Transfer"');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'InvalidUser', 'Ogiltig användare.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'ItemErrorMessage', 'Du måste välja antingen artikelidentifierare eller förening artikelidentifierare.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'LateFeeErrorMessage', 'Förseningsavgift id och förseningsavgift utstationering frekvens id både bör antingen väljas eller inte.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'NegativeValueSupplied', 'Negativt värde medföljer.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'NewPasswordCannotBeOldPassword', 'Nytt lösenord kan inte vara gamla lösenordet.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'NoFileSpecified', 'Ingen fil anges.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'NoTransactionToPost', 'Ingen transaktion för att posta.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'NotAuthorized', 'Du har inte behörighet att komma åt denna resurser vid denna tidpunkt.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'NothingSelected', 'Inget valt.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'PasswordCannotBeEmpty', 'Lösenord kan inte vara tomt.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'PleaseEnterCurrentPassword', 'Ange ditt nuvarande lösenord.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'PleaseEnterNewPassword', 'Vänligen ange ett nytt lösenord.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'RecurringAmountErrorMessage', 'Återkommande belopp bör inte vara mindre än eller lika med 0.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'ReferencingSidesNotEqual', 'De refererar sidorna är inte lika.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'RestrictedTransactionMode', 'Denna anläggning tillåter inte transaktions utstationering.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'ReturnButtonUrlNull', 'Kan inte returnera denna post. Avkastningen url angavs inte.');
    PERFORM localization.add_localized_resource('Warnings', 'sv', 'UserIdOrPasswordIncorrect', 'Användar identifierare eller lösenord felaktigt.');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'AccessIsDenied', '访问被拒绝。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CannotCreateABackup', '抱歉，无法在此时创建一个数据库备份。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CannotCreateFlagTransactionTableNull', '无法创建或更新标志。未提供事务表。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CannotCreateFlagTransactionTablePrimaryKeyNull', '无法创建或更新标志。未提供交易表的主键。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CannotMergeAlreadyMerged', '所选择的交易包括那些已经被合并的项目。请重试。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CannotMergeDifferentPartyTransaction', '不能合并各方的交易成一个批次。请重试。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CannotMergeIncompatibleTax', '不能合并有不兼容的税种交易。请重试。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CannotMergeUrlNull', '不能合并交易。未提供合并网址。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CashTransactionCannotContainBankInfo', '现金交易不能包含银行交易的详细信息。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CompareAmountErrorMessage', '量应大于距离量。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CompareDaysErrorMessage', '从天不应大于到几天。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'ComparePriceErrorMessage', '以上的价格应低于价格。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'ConfigurationError', '无法继续任务。请更正配置问题。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'ConfirmationPasswordDoesNotMatch', '在确认密码不使用新的密码匹配。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CouldNotDetermineEmailImageParserType', '无法确定图像解析器类型的电子邮件。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'CouldNotRegisterJavascript', '无法此页面上注册的JavaScript，因为页面实例是无效的或空。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'DateErrorMessage', '选定的日期超出范围。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'DueFrequencyErrorMessage', '由于天只能是0，如果被选中，由于频率的标识符。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'DuplicateEntry', '重复的条目。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'DuplicateFiles', '重复文件。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'GridViewEmpty', '网格视图是空的。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InsufficientBalanceInCashRepository', '没有足够的余额中的现金库来处理此交易。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InsufficientStockWarning', '只有{0}{1}{2}留在股市。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidAccount', '无效的帐户。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidCashRepository', '无效的现金库。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidCostCenter', '无效的成本中心。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidData', '无效数据。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidDate', '无效的日期。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidParameterName', '无效Npgsql参数名称{0}。。确保参数名称与您的命令文本相匹配。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidParty', '无效的一方。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidPaymentTerm', '无效的付款条件。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidPriceType', '价格无效类型。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidReceiptMode', '无效收据模式。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSalesPerson', '无效的推销员。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidShippingCompany', '无效的货运公司。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidStockTransaction', '无效股票的交易。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidStore', '无效的商店。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookInventoryDelivery', '无效的子公司交易书“库存交货”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookInventoryDirect', '无效的子公司交易书“库存直营”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookInventoryInvoice', '无效的子公司交易书“库存发票”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookInventoryOrder', '无效的子公司交易书“库存令”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookInventoryPayment', '无效的子公司交易书“库存付款”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookInventoryQuotation', '无效的子公司交易书“清单报价”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookInventoryReceipt', '无效的子公司交易书“库存收据”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookInventoryReturn', '无效的子公司交易书“库存归来”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookPurchaseDelivery', '无效的子公司交易书“购机送”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookPurchaseQuotation', '无效的子公司交易书“购买报价”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookPurchaseSuspense', '无效的子公司交易书“购买悬念”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookPurchaseTransfer', '无效的子公司交易书“购买传送”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookSalesPayment', '无效的子公司交易书“销售支付”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookSalesSuspense', '无效的子公司交易书“销售悬念”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidSubTranBookSalesTransfer', '无效的子公司交易书“销售转移”');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'InvalidUser', '无效的用户。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'ItemErrorMessage', '你要选择的项目标识符或复合项标识符。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'LateFeeErrorMessage', '滞纳金标识符和滞纳金发布频率识别两者应该要么选择与否。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'NegativeValueSupplied', '负值提供。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'NewPasswordCannotBeOldPassword', '新密码不能为旧密码。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'NoFileSpecified', '没有文件指定。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'NoTransactionToPost', '后无交易。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'NotAuthorized', '你没有被授权在此时访问此资源。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'NothingSelected', '没有什么选择。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'PasswordCannotBeEmpty', '密码不能为空。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'PleaseEnterCurrentPassword', '请输入您的当前密码。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'PleaseEnterNewPassword', '请输入新密码。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'RecurringAmountErrorMessage', '重复量应不小于或等于0.');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'ReferencingSidesNotEqual', '引用双方不相等。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'RestrictedTransactionMode', '这个成立不允许交易张贴。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'ReturnButtonUrlNull', '不能返回该条目。未提供的返回统一资源定位符。');
    PERFORM localization.add_localized_resource('Warnings', 'zh', 'UserIdOrPasswordIncorrect', '用户标识符或密码不正确。');
END
$$
LANGUAGE plpgsql;


SELECT * FROM localization.add_localized_resource('Titles', '', 'EODBegun', 'End of Day Processing Has Begun');
SELECT * FROM localization.add_localized_resource('Labels', '', 'EODBegunSaveYourWork', 'Please close this window and save your existing work before you will be signed off automatically.');

SELECT * FROM localization.add_localized_resource('Titles', 'zh', 'EODBegun', '日处理结束已经开始');
SELECT * FROM localization.add_localized_resource('Labels', 'zh', 'EODBegunSaveYourWork', '请关闭此窗口并保存现有的工作之前，你会被自动签字。');

SELECT * FROM localization.add_localized_resource('Titles', 'nl', 'EODBegun', 'Eind van Dag Processing is begonnen');
SELECT * FROM localization.add_localized_resource('Labels', 'nl', 'EODBegunSaveYourWork', 'Sluit dit venster en sla uw bestaand werk voordat wordt u automatisch afgemeld.');

SELECT * FROM localization.add_localized_resource('Titles', 'fil', 'EODBegun', 'Dulo ng Processing Day ay sinimulan');
SELECT * FROM localization.add_localized_resource('Labels', 'fil', 'EODBegunSaveYourWork', 'Mangyaring isara ang window na ito at i-save ang iyong mga umiiral na trabaho bago kayo ay naka-sign off awtomatikong.');

SELECT * FROM localization.add_localized_resource('Titles', 'fr', 'EODBegun', 'Fin du traitement Day Has Begun');
SELECT * FROM localization.add_localized_resource('Labels', 'fr', 'EODBegunSaveYourWork', 'S''il vous plaît fermer cette fenêtre et enregistrer votre travail existant avant vous serez connecté automatiquement hors tension.');

SELECT * FROM localization.add_localized_resource('Titles', 'de', 'EODBegun', 'Tagesendverarbeitung hat begonnen');
SELECT * FROM localization.add_localized_resource('Labels', 'de', 'EODBegunSaveYourWork', 'Schließen Sie dieses Fenster und speichern Sie Ihre existierenden Werk, bevor Sie sich automatisch signiert werden.');

SELECT * FROM localization.add_localized_resource('Titles', 'id', 'EODBegun', 'Akhir Hari Pengolahan Telah Dimulai');
SELECT * FROM localization.add_localized_resource('Labels', 'id', 'EODBegunSaveYourWork', 'Silakan tutup jendela ini dan menyimpan pekerjaan yang ada sebelum Anda akan ditandatangani secara otomatis.');

SELECT * FROM localization.add_localized_resource('Titles', 'ja', 'EODBegun', '日処理の終了が始まりました');
SELECT * FROM localization.add_localized_resource('Labels', 'ja', 'EODBegunSaveYourWork', 'このウィンドウを閉じて、あなたは自動的にオフに署名される前に、既存の作業を保存してください。');

SELECT * FROM localization.add_localized_resource('Titles', 'ms', 'EODBegun', 'Akhir Pemprosesan Hari Telah Bermula');
SELECT * FROM localization.add_localized_resource('Labels', 'ms', 'EODBegunSaveYourWork', 'Sila tutup tetingkap ini dan menyimpan kerja yang sedia ada anda sebelum anda akan ditandatangani secara automatik.');

SELECT * FROM localization.add_localized_resource('Titles', 'pt', 'EODBegun', 'Fim de Processamento dia começou');
SELECT * FROM localization.add_localized_resource('Labels', 'pt', 'EODBegunSaveYourWork', 'Por favor, feche esta janela e salvar seu trabalho existente antes de ser assinado fora automaticamente.');

SELECT * FROM localization.add_localized_resource('Titles', 'ru', 'EODBegun', 'Конец дня обработка Бегун');
SELECT * FROM localization.add_localized_resource('Labels', 'ru', 'EODBegunSaveYourWork', 'Пожалуйста, закройте это окно и сохранить существующую работу, прежде чем будет подписан автоматически.');

SELECT * FROM localization.add_localized_resource('Titles', 'es', 'EODBegun', 'Fin de Procesamiento día ha comenzado');
SELECT * FROM localization.add_localized_resource('Labels', 'es', 'EODBegunSaveYourWork', 'Por favor, cierre esta ventana y guardar su trabajo existente antes se le inscribió apaga automáticamente.');

SELECT * FROM localization.add_localized_resource('Titles', 'sv', 'EODBegun', 'Slut på dagens slut har börjat');
SELECT * FROM localization.add_localized_resource('Labels', 'sv', 'EODBegunSaveYourWork', 'Stäng fönstret och spara din befintliga arbete innan du kommer att undertecknas av automatiskt.');


SELECT * FROM localization.add_localized_resource('DbErrors', '', 'P1302', 'Cannot post sales. Invalid cash account mapping on store.');
SELECT * FROM localization.add_localized_resource('DbErrors', 'sv', 'P1302', 'Det går inte att lägga försäljningen. Ogiltig likvidkonto kartläggning på butiken.');
SELECT * FROM localization.add_localized_resource('DbErrors', 'es', 'P1302', 'No se puede publicar ventas. Asignación de cuentas de efectivo no válida en la tienda.');
SELECT * FROM localization.add_localized_resource('DbErrors', 'ru', 'P1302', 'Не можете прикреплять продаж. Неверный отображение денежный счет на складе.');
SELECT * FROM localization.add_localized_resource('DbErrors', 'pt', 'P1302', 'Não é possível postar vendas. Inválida de mapeamento de conta em dinheiro na loja.');
SELECT * FROM localization.add_localized_resource('DbErrors', 'ms', 'P1302', 'Tidak boleh hantar jualan. Pemetaan akaun tunai tidak sah di kedai.');
SELECT * FROM localization.add_localized_resource('DbErrors', 'ja', 'P1302', '販売を投稿することはできません。ストアの無効な現金アカウントマッピング。');
SELECT * FROM localization.add_localized_resource('DbErrors', 'de', 'P1302', 'Kann Umsatz nicht erlaubt. Ungültige Geldkonto-Mapping auf Laden.');
SELECT * FROM localization.add_localized_resource('DbErrors', 'fr', 'P1302', 'Vous ne pouvez pas afficher des ventes. Invalid compte de trésorerie cartographie sur la boutique.');
SELECT * FROM localization.add_localized_resource('DbErrors', 'fil', 'P1302', 'Hindi maaaring mag-post ng mga benta. Hindi wastong mapping cash account sa store.');
SELECT * FROM localization.add_localized_resource('DbErrors', 'nl', 'P1302', 'Kan de verkoop niet plaatsen. Ongeldige geldrekening mapping op te slaan.');
SELECT * FROM localization.add_localized_resource('DbErrors', 'zh', 'P1302', '不能发布销售。在商店无效的现金帐户的映射。');
SELECT * FROM localization.add_localized_resource('DbErrors', 'id', 'P1302', 'Tidak dapat mengirim penjualan. Pemetaan rekening kas tidak valid di toko.');


SELECT * FROM localization.add_localized_resource('Titles', '', 'SelectCompany', 'Select Company');
SELECT * FROM localization.add_localized_resource('Titles', 'zh', 'SelectCompany', '选择公司');
SELECT * FROM localization.add_localized_resource('Titles', 'nl', 'SelectCompany', 'Selecteer Company');
SELECT * FROM localization.add_localized_resource('Titles', 'fil', 'SelectCompany', 'Piliin ang Company');
SELECT * FROM localization.add_localized_resource('Titles', 'fr', 'SelectCompany', 'Sélectionnez Société');
SELECT * FROM localization.add_localized_resource('Titles', 'de', 'SelectCompany', 'Wählen Sie die Firma');
SELECT * FROM localization.add_localized_resource('Titles', 'id', 'SelectCompany', 'Pilih Perusahaan');
SELECT * FROM localization.add_localized_resource('Titles', 'ja', 'SelectCompany', '選択して会社');
SELECT * FROM localization.add_localized_resource('Titles', 'ms', 'SelectCompany', 'Pilih Syarikat');
SELECT * FROM localization.add_localized_resource('Titles', 'pt', 'SelectCompany', 'Selecione Empresa');
SELECT * FROM localization.add_localized_resource('Titles', 'ru', 'SelectCompany', 'Выберите компании');
SELECT * FROM localization.add_localized_resource('Titles', 'es', 'SelectCompany', 'Seleccione la empresa');
SELECT * FROM localization.add_localized_resource('Titles', 'sv', 'SelectCompany', 'Välj företag');


SELECT * FROM localization.add_localized_resource('Titles', '', 'BookDate', 'Book Date');
SELECT * FROM localization.add_localized_resource('Titles', 'es', 'BookDate', 'libro Fecha');
SELECT * FROM localization.add_localized_resource('Titles', 'sv', 'BookDate', 'bok Datum');
SELECT * FROM localization.add_localized_resource('Titles', 'ru', 'BookDate', 'Книга Дата');
SELECT * FROM localization.add_localized_resource('Titles', 'pt', 'BookDate', 'livro Data');
SELECT * FROM localization.add_localized_resource('Titles', 'ms', 'BookDate', 'buku Tarikh');
SELECT * FROM localization.add_localized_resource('Titles', 'ja', 'BookDate', '予約日');
SELECT * FROM localization.add_localized_resource('Titles', 'id', 'BookDate', 'buku Tanggal');
SELECT * FROM localization.add_localized_resource('Titles', 'de', 'BookDate', 'buchen Datum');
SELECT * FROM localization.add_localized_resource('Titles', 'fr', 'BookDate', 'date de livre');
SELECT * FROM localization.add_localized_resource('Titles', 'fil', 'BookDate', 'Petsa Book');
SELECT * FROM localization.add_localized_resource('Titles', 'nl', 'BookDate', 'Book Date');
SELECT * FROM localization.add_localized_resource('Titles', 'zh', 'BookDate', '书日期');

SELECT * FROM localization.add_localized_resource('ScrudResource', '', 'book_date', 'Book Date');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'es', 'book_date', 'libro Fecha');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'sv', 'book_date', 'bok Datum');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ru', 'book_date', 'Книга Дата');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'pt', 'book_date', 'livro Data');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ms', 'book_date', 'buku Tarikh');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ja', 'book_date', '予約日');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'id', 'book_date', 'buku Tanggal');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'de', 'book_date', 'buchen Datum');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fr', 'book_date', 'date de livre');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fil', 'book_date', 'Petsa Book');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'nl', 'book_date', 'Book Date');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'zh', 'book_date', '书日期');

SELECT * FROM localization.add_localized_resource('Titles', '', 'Reconcile', 'Reconcile');
SELECT * FROM localization.add_localized_resource('Titles', '', 'CurrentBookDate', 'Current Book Date');
SELECT * FROM localization.add_localized_resource('Titles', '', 'NewBookDate', 'New Book Date');
SELECT * FROM localization.add_localized_resource('Titles', '', 'Year', 'Year');
SELECT * FROM localization.add_localized_resource('Titles', '', 'Month', 'Month');
SELECT * FROM localization.add_localized_resource('Titles', '', 'Day', 'Day');
SELECT * FROM localization.add_localized_resource('Titles', 'zh', 'Reconcile', '调和');
SELECT * FROM localization.add_localized_resource('Titles', 'zh', 'CurrentBookDate', '当前书日期');
SELECT * FROM localization.add_localized_resource('Titles', 'zh', 'NewBookDate', '新书日期');
SELECT * FROM localization.add_localized_resource('Titles', 'zh', 'Year', '年');
SELECT * FROM localization.add_localized_resource('Titles', 'zh', 'Month', '月');
SELECT * FROM localization.add_localized_resource('Titles', 'zh', 'Day', '天');
SELECT * FROM localization.add_localized_resource('Titles', 'nl', 'Reconcile', 'verzoenen');
SELECT * FROM localization.add_localized_resource('Titles', 'nl', 'CurrentBookDate', 'Huidige Book Date');
SELECT * FROM localization.add_localized_resource('Titles', 'nl', 'NewBookDate', 'Nieuw boek Date');
SELECT * FROM localization.add_localized_resource('Titles', 'nl', 'Year', 'jaar');
SELECT * FROM localization.add_localized_resource('Titles', 'nl', 'Month', 'maand');
SELECT * FROM localization.add_localized_resource('Titles', 'nl', 'Day', 'dag');
SELECT * FROM localization.add_localized_resource('Titles', 'fil', 'Reconcile', 'mapagkasundo');
SELECT * FROM localization.add_localized_resource('Titles', 'fil', 'CurrentBookDate', 'Current Date Book');
SELECT * FROM localization.add_localized_resource('Titles', 'fil', 'NewBookDate', 'New Date Book');
SELECT * FROM localization.add_localized_resource('Titles', 'fil', 'Year', 'taon');
SELECT * FROM localization.add_localized_resource('Titles', 'fil', 'Month', 'buwan');
SELECT * FROM localization.add_localized_resource('Titles', 'fil', 'Day', 'araw');
SELECT * FROM localization.add_localized_resource('Titles', 'fr', 'Reconcile', 'réconcilier');
SELECT * FROM localization.add_localized_resource('Titles', 'fr', 'CurrentBookDate', 'Réservez la date courante');
SELECT * FROM localization.add_localized_resource('Titles', 'fr', 'NewBookDate', 'Nouvelle date du livre');
SELECT * FROM localization.add_localized_resource('Titles', 'fr', 'Year', 'année');
SELECT * FROM localization.add_localized_resource('Titles', 'fr', 'Month', 'mois');
SELECT * FROM localization.add_localized_resource('Titles', 'fr', 'Day', 'jour');
SELECT * FROM localization.add_localized_resource('Titles', 'de', 'Reconcile', 'versöhnen');
SELECT * FROM localization.add_localized_resource('Titles', 'de', 'CurrentBookDate', 'Aktuelle Buch Datum');
SELECT * FROM localization.add_localized_resource('Titles', 'de', 'NewBookDate', 'Neues Buch Datum');
SELECT * FROM localization.add_localized_resource('Titles', 'de', 'Year', 'Jahr');
SELECT * FROM localization.add_localized_resource('Titles', 'de', 'Month', 'Monat');
SELECT * FROM localization.add_localized_resource('Titles', 'de', 'Day', 'Tag');
SELECT * FROM localization.add_localized_resource('Titles', 'id', 'Reconcile', 'mendamaikan');
SELECT * FROM localization.add_localized_resource('Titles', 'id', 'CurrentBookDate', 'Buku saat Tanggal');
SELECT * FROM localization.add_localized_resource('Titles', 'id', 'NewBookDate', 'Buku Baru Tanggal');
SELECT * FROM localization.add_localized_resource('Titles', 'id', 'Year', 'tahun');
SELECT * FROM localization.add_localized_resource('Titles', 'id', 'Month', 'bulan');
SELECT * FROM localization.add_localized_resource('Titles', 'id', 'Day', 'hari');
SELECT * FROM localization.add_localized_resource('Titles', 'ja', 'Reconcile', '調整します');
SELECT * FROM localization.add_localized_resource('Titles', 'ja', 'CurrentBookDate', '現在の予約日');
SELECT * FROM localization.add_localized_resource('Titles', 'ja', 'NewBookDate', '新刊日');
SELECT * FROM localization.add_localized_resource('Titles', 'ja', 'Year', '年');
SELECT * FROM localization.add_localized_resource('Titles', 'ja', 'Month', '月');
SELECT * FROM localization.add_localized_resource('Titles', 'ja', 'Day', '日');
SELECT * FROM localization.add_localized_resource('Titles', 'ms', 'Reconcile', 'mendamaikan');
SELECT * FROM localization.add_localized_resource('Titles', 'ms', 'CurrentBookDate', 'Tarikh Tempah semasa');
SELECT * FROM localization.add_localized_resource('Titles', 'ms', 'NewBookDate', 'Tarikh Tempah New');
SELECT * FROM localization.add_localized_resource('Titles', 'ms', 'Year', 'tahun');
SELECT * FROM localization.add_localized_resource('Titles', 'ms', 'Month', 'bulan');
SELECT * FROM localization.add_localized_resource('Titles', 'ms', 'Day', 'hari');
SELECT * FROM localization.add_localized_resource('Titles', 'pt', 'Reconcile', 'conciliar');
SELECT * FROM localization.add_localized_resource('Titles', 'pt', 'CurrentBookDate', 'Livro Data Atual');
SELECT * FROM localization.add_localized_resource('Titles', 'pt', 'NewBookDate', 'Novo livro Data');
SELECT * FROM localization.add_localized_resource('Titles', 'pt', 'Year', 'ano');
SELECT * FROM localization.add_localized_resource('Titles', 'pt', 'Month', 'mês');
SELECT * FROM localization.add_localized_resource('Titles', 'pt', 'Day', 'dia');
SELECT * FROM localization.add_localized_resource('Titles', 'ru', 'Reconcile', 'согласовать');
SELECT * FROM localization.add_localized_resource('Titles', 'ru', 'CurrentBookDate', 'Текущий Книга Дата');
SELECT * FROM localization.add_localized_resource('Titles', 'ru', 'NewBookDate', 'Новая книга Дата');
SELECT * FROM localization.add_localized_resource('Titles', 'ru', 'Year', 'год');
SELECT * FROM localization.add_localized_resource('Titles', 'ru', 'Month', 'месяц');
SELECT * FROM localization.add_localized_resource('Titles', 'ru', 'Day', 'день');
SELECT * FROM localization.add_localized_resource('Titles', 'es', 'Reconcile', 'conciliar');
SELECT * FROM localization.add_localized_resource('Titles', 'es', 'CurrentBookDate', 'Actual Agenda');
SELECT * FROM localization.add_localized_resource('Titles', 'es', 'NewBookDate', 'Nuevo libro Fecha');
SELECT * FROM localization.add_localized_resource('Titles', 'es', 'Year', 'año');
SELECT * FROM localization.add_localized_resource('Titles', 'es', 'Month', 'mes');
SELECT * FROM localization.add_localized_resource('Titles', 'es', 'Day', 'día');
SELECT * FROM localization.add_localized_resource('Titles', 'sv', 'Reconcile', 'förena');
SELECT * FROM localization.add_localized_resource('Titles', 'sv', 'CurrentBookDate', 'Aktuell Bok Datum');
SELECT * FROM localization.add_localized_resource('Titles', 'sv', 'NewBookDate', 'Ny bok Datum');
SELECT * FROM localization.add_localized_resource('Titles', 'sv', 'Year', 'år');
SELECT * FROM localization.add_localized_resource('Titles', 'sv', 'Month', 'månad');
SELECT * FROM localization.add_localized_resource('Titles', 'sv', 'Day', 'dag');


SELECT * FROM localization.add_localized_resource('Titles', '', 'LoginView', 'Login View');
SELECT * FROM localization.add_localized_resource('ScrudResource', '', 'login_id', 'Login Id');
SELECT * FROM localization.add_localized_resource('ScrudResource', '', 'ip_address', 'IP Address');
SELECT * FROM localization.add_localized_resource('ScrudResource', '', 'browser', 'Browser');
SELECT * FROM localization.add_localized_resource('ScrudResource', '', 'login_date_time', 'Login Date Time');
SELECT * FROM localization.add_localized_resource('ScrudResource', '', 'remote_user', 'Remote User');
SELECT * FROM localization.add_localized_resource('ScrudResource', '', 'culture', 'Culture');
SELECT * FROM localization.add_localized_resource('ScrudResource', '', 'role', 'Role');
SELECT * FROM localization.add_localized_resource('ScrudResource', '', 'card_type', 'Card Type');
SELECT * FROM localization.add_localized_resource('Titles', 'zh', 'LoginView', '登录查看');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'zh', 'login_id', '登录ID');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'zh', 'ip_address', 'IP地址');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'zh', 'browser', '浏览器');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'zh', 'login_date_time', '登录日期时间');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'zh', 'remote_user', '远程用户');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'zh', 'culture', '文化');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'zh', 'role', '角色');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'zh', 'card_type', '卡类型');
SELECT * FROM localization.add_localized_resource('Titles', 'fil', 'LoginView', 'Login View');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fil', 'login_id', 'Login Id');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fil', 'ip_address', 'IP Address');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fil', 'browser', 'Browser');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fil', 'login_date_time', 'Login Time Date');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fil', 'remote_user', 'Remote User');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fil', 'culture', 'kultura');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fil', 'role', 'papel');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fil', 'card_type', 'Uri ng Card');
SELECT * FROM localization.add_localized_resource('Titles', 'fr', 'LoginView', 'Connexion Voir');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fr', 'login_id', 'Identifiant De Connexion');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fr', 'ip_address', 'adresse IP');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fr', 'browser', 'navigateur');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fr', 'login_date_time', 'Connexion Date Heure');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fr', 'remote_user', 'utilisateur distant');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fr', 'culture', 'culture');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fr', 'role', 'rôle');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'fr', 'card_type', 'Type de carte');
SELECT * FROM localization.add_localized_resource('Titles', 'de', 'LoginView', 'Login Zeige');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'de', 'login_id', 'Login Id');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'de', 'ip_address', 'IP Adresse');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'de', 'browser', 'Browser');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'de', 'login_date_time', 'Login Datum Zeit');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'de', 'remote_user', 'Remote User');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'de', 'culture', 'Kultur');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'de', 'role', 'Rolle');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'de', 'card_type', 'card Type');
SELECT * FROM localization.add_localized_resource('Titles', 'id', 'LoginView', 'Login View');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'id', 'login_id', 'Login Id');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'id', 'ip_address', 'IP Address');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'id', 'browser', 'Browser');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'id', 'login_date_time', 'Login Tanggal Waktu');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'id', 'remote_user', 'terpencil pengguna');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'id', 'culture', 'budaya');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'id', 'role', 'peran');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'id', 'card_type', 'Jenis Kartu');
SELECT * FROM localization.add_localized_resource('Titles', 'ja', 'LoginView', 'ログインを見ます');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ja', 'login_id', 'ログインID');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ja', 'ip_address', 'IPアドレス');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ja', 'browser', 'ブラウザ');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ja', 'login_date_time', 'ログイン日時');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ja', 'remote_user', 'リモートユーザー');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ja', 'culture', '文化');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ja', 'role', '役割');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ja', 'card_type', 'カードの種類');
SELECT * FROM localization.add_localized_resource('Titles', 'ms', 'LoginView', 'Log masuk View');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ms', 'login_id', 'Id Log masuk');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ms', 'ip_address', 'Alamat IP');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ms', 'browser', 'pelayar');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ms', 'login_date_time', 'Log masuk Tarikh Masa');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ms', 'remote_user', 'pengguna Remote');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ms', 'culture', 'Kebudayaan');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ms', 'role', 'peranan');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ms', 'card_type', 'Jenis kad');
SELECT * FROM localization.add_localized_resource('Titles', 'pt', 'LoginView', 'Entrada Vista');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'pt', 'login_id', 'Entrar Id');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'pt', 'ip_address', 'endereço de IP');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'pt', 'browser', 'navegador');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'pt', 'login_date_time', 'Entrada Data Tempo');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'pt', 'remote_user', 'Utilizador Remota');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'pt', 'culture', 'cultura');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'pt', 'role', 'papel');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'pt', 'card_type', 'Tipo De Carta');
SELECT * FROM localization.add_localized_resource('Titles', 'ru', 'LoginView', 'Войти Посмотреть');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ru', 'login_id', 'Войти Id');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ru', 'ip_address', 'IP-адрес');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ru', 'browser', 'браузер');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ru', 'login_date_time', 'Войти Дата Время');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ru', 'remote_user', 'Удаленная пользователя');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ru', 'culture', 'культура');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ru', 'role', 'роль');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'ru', 'card_type', 'Тип Карты');
SELECT * FROM localization.add_localized_resource('Titles', 'es', 'LoginView', 'Entrar Ver');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'es', 'login_id', 'Id De Entrada');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'es', 'ip_address', 'dirección IP');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'es', 'browser', 'navegador');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'es', 'login_date_time', 'Login Fecha Hora');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'es', 'remote_user', 'usuario remoto');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'es', 'culture', 'cultura');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'es', 'role', 'papel');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'es', 'card_type', 'Tipo De Tarjeta');
SELECT * FROM localization.add_localized_resource('Titles', 'sv', 'LoginView', 'inloggning Visa');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'sv', 'login_id', 'login Id');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'sv', 'ip_address', 'IP-adress');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'sv', 'browser', 'webbläsare');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'sv', 'login_date_time', 'Logga Datum Tid');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'sv', 'remote_user', 'Remote User');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'sv', 'culture', 'kultur');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'sv', 'role', 'roll');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'sv', 'card_type', 'Korttyp');
SELECT * FROM localization.add_localized_resource('Titles', 'nl', 'LoginView', 'Inloggen View');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'nl', 'login_id', 'login Id');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'nl', 'ip_address', 'IP adres');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'nl', 'browser', 'browser');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'nl', 'login_date_time', 'Inloggen Datum Tijd');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'nl', 'remote_user', 'Remote User');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'nl', 'culture', 'cultuur');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'nl', 'role', 'rol');
SELECT * FROM localization.add_localized_resource('ScrudResource', 'nl', 'card_type', 'kaarttype');


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/04.default-values/recurrence-types.sql --<--<--
WITH recurrence_types
AS
(
SELECT 'FRE' AS code,   'Frequency' AS name,    true AS is_freq UNION ALL
SELECT 'DUR',           'Duration',             false
)

INSERT INTO core.recurrence_types(recurrence_type_code, recurrence_type_name, is_frequency)
SELECT * FROM recurrence_types
WHERE code NOT IN
(
    SELECT recurrence_type_code FROM core.recurrence_types
    WHERE recurrence_type_code IN('FRE','DUR')
);

UPDATE core.recurring_invoices 
SET recurrence_type_id = core.get_recurrence_type_id_by_recurrence_type_code('FRE')
WHERE recurrence_type_id IS NULL;

ALTER TABLE core.recurring_invoices
ALTER COLUMN recurrence_type_id SET NOT NULL;

ALTER TABLE core.recurring_invoices
ALTER COLUMN recurring_frequency_id DROP NOT NULL;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.scrud-views/core/0.core.account_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.account_scrud_view CASCADE;

CREATE VIEW core.account_scrud_view
AS
SELECT
    core.accounts.account_id,
    core.account_masters.account_master_code || ' (' || core.account_masters.account_master_name || ')' AS account_master,
    core.accounts.account_number,
    core.accounts.external_code,
	core.currencies.currency_code || ' ('|| core.currencies.currency_name|| ')' currency,
    core.accounts.account_name,
    core.accounts.description,
	core.accounts.confidential,
	core.accounts.is_transaction_node,
    core.accounts.sys_type,
    core.accounts.account_master_id,
    parent_account.account_number || ' (' || parent_account.account_name || ')' AS parent    
FROM core.accounts
INNER JOIN core.account_masters
ON core.account_masters.account_master_id=core.accounts.account_master_id
LEFT JOIN core.currencies
ON core.accounts.currency_code = core.currencies.currency_code
LEFT JOIN core.accounts parent_account
ON parent_account.account_id=core.accounts.parent_account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.scrud-views/core/1.core.bank_account_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.bank_account_scrud_view CASCADE;

CREATE OR REPLACE VIEW core.bank_account_scrud_view
AS
SELECT
    account_id,
    office.users.user_name AS maintained_by,
    office.offices.office_code || ' (' || office.offices.office_name || ')' AS office,
    bank_name,
    bank_branch,
    bank_contact_number,
    bank_address,
    bank_account_number,
    bank_account_type,
    relationship_officer_name,
    is_merchant_account
FROM core.bank_accounts
INNER JOIN office.users
ON core.bank_accounts.maintained_by_user_id = office.users.user_id
INNER JOIN office.offices
ON core.bank_accounts.office_id = office.offices.office_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.scrud-views/core/core.ageing_slab_scrud_view.sql --<--<--
CREATE VIEW core.ageing_slab_scrud_view
AS
SELECT 
  ageing_slabs.ageing_slab_id, 
  ageing_slabs.ageing_slab_name, 
  ageing_slabs.from_days, 
  ageing_slabs.to_days
FROM 
  core.ageing_slabs;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.scrud-views/core/core.item_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.item_scrud_view;

CREATE VIEW core.item_scrud_view
AS
SELECT 
        item_id,
        item_code,
        item_name,
        item_group_code || ' (' || item_group_name || ')' AS item_group,
        maintain_stock,
        brand_code || ' (' || brand_name || ')' AS brand,
        party_code || ' (' || party_name || ')' AS preferred_supplier,
        lead_time_in_days,
        weight_in_grams,
        width_in_centimeters,
        height_in_centimeters,
        length_in_centimeters,
        machinable,
        shipping_mail_type_code || ' (' || shipping_mail_type_name || ')' AS preferred_shipping_mail_type,
        shipping_package_shape_code || ' (' || shipping_package_shape_name || ')' AS preferred_shipping_package_shape,
        core.units.unit_code || ' (' || core.units.unit_name || ')' AS unit,
        hot_item,
        cost_price,
        selling_price,
        selling_price_includes_tax,
        sales_tax_code || ' (' || sales_tax_name || ')' AS sales_tax,
        reorder_unit.unit_code || ' (' || reorder_unit.unit_name || ')' AS reorder_unit,
        reorder_level,
        reorder_quantity
FROM core.items
INNER JOIN core.item_groups
ON core.items.item_group_id = core.item_groups.item_group_id
INNER JOIN core.brands
ON core.items.brand_id = core.brands.brand_id
INNER JOIN core.parties
ON core.items.preferred_supplier_id = core.parties.party_id
INNER JOIN core.units
ON core.items.unit_id = core.units.unit_id
INNER JOIN core.units AS reorder_unit
ON core.items.reorder_unit_id = reorder_unit.unit_id
INNER JOIN core.sales_taxes
ON core.items.sales_tax_id = core.sales_taxes.sales_tax_id
LEFT JOIN core.shipping_mail_types
ON core.items.preferred_shipping_mail_type_id = core.shipping_mail_types.shipping_mail_type_id
LEFT JOIN core.shipping_package_shapes
ON core.items.shipping_package_shape_id = core.shipping_package_shapes.shipping_package_shape_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.scrud-views/core/core.payment_card_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.payment_card_scrud_view;

CREATE VIEW core.payment_card_scrud_view
AS
SELECT 
    core.payment_cards.payment_card_id,
    core.payment_cards.payment_card_code,
    core.payment_cards.payment_card_name,
    core.card_types.card_type_code || ' (' || core.card_types.card_type_name || ')' AS card_type
FROM core.payment_cards
INNER JOIN core.card_types
ON core.payment_cards.card_type_id = core.card_types.card_type_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.scrud-views/core/core.payment_term_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.payment_term_scrud_view;

CREATE VIEW core.payment_term_scrud_view
AS
SELECT
    core.payment_terms.payment_term_id,
    core.payment_terms.payment_term_code,
    core.payment_terms.payment_term_name,
    core.payment_terms.due_on_date,
    core.payment_terms.due_days,
    due_frequency.frequency_code || ' (' || due_frequency.frequency_name || ')' AS due_frequency,
    core.payment_terms.grace_period,
    core.late_fee.late_fee_code || '(' || core.late_fee.late_fee_name || ')' AS late_fee,
    late_fee_posting_frequency.frequency_code || ' (' || late_fee_posting_frequency.frequency_name || ')' AS late_fee_posting_frequency
FROM core.payment_terms
LEFT JOIN core.frequencies AS due_frequency
ON core.payment_terms.due_frequency_id=due_frequency.frequency_id
LEFT JOIN core.frequencies AS late_fee_posting_frequency 
ON core.payment_terms.late_fee_posting_frequency_id=late_fee_posting_frequency.frequency_id
LEFT JOIN core.late_fee
ON core.payment_terms.late_fee_id=core.late_fee.late_fee_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.scrud-views/core/core.recurring_invoice_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.recurring_invoice_scrud_view;

CREATE VIEW core.recurring_invoice_scrud_view
AS
SELECT 
  core.recurring_invoices.recurring_invoice_id, 
  core.recurring_invoices.recurring_invoice_code, 
  core.recurring_invoices.recurring_invoice_name,
  core.items.item_code || '('|| core.items.item_name||')' AS item,
  core.frequencies.frequency_code || '('|| core.frequencies.frequency_name||')' AS recurring_frequency,
  core.recurring_invoices.recurring_amount, 
  core.recurring_invoices.auto_trigger_on_sales
FROM 
  core.recurring_invoices
INNER JOIN core.items 
ON core.recurring_invoices.item_id = core.items.item_id
LEFT JOIN core.frequencies
ON core.recurring_invoices.recurring_frequency_id = core.frequencies.frequency_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.scrud-views/core/core.recurring_invoice_setup_scrud_view.sql --<--<--
DROP VIEW IF EXISTS core.recurring_invoice_setup_scrud_view;
CREATE VIEW core.recurring_invoice_setup_scrud_view
AS
SELECT 
  core.recurring_invoice_setup.recurring_invoice_setup_id, 
  core.recurring_invoices.recurring_invoice_code || ' (' || core.recurring_invoices.recurring_invoice_name || ')' AS recurring_invoice,
  core.parties.party_code || ' (' || core.parties.party_name || ')' AS party,
  core.recurring_invoice_setup.starts_from, 
  core.recurring_invoice_setup.ends_on, 
  core.recurring_invoice_setup.recurring_amount, 
  core.payment_terms.payment_term_code || ' (' || core.payment_terms.payment_term_name || ')' AS payment_term
FROM 
  core.recurring_invoice_setup
INNER JOIN core.recurring_invoices
ON core.recurring_invoice_setup.recurring_invoice_id = core.recurring_invoices.recurring_invoice_id
INNER JOIN core.parties ON 
core.recurring_invoice_setup.party_id = core.parties.party_id
INNER JOIN core.payment_terms ON 
core.recurring_invoice_setup.payment_term_id = core.payment_terms.payment_term_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.bank_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.bank_account_selector_view;

CREATE VIEW core.bank_account_selector_view
AS
SELECT * FROM core.account_scrud_view
WHERE account_master_id = 10102
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.bonus_slab_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.bonus_slab_account_selector_view;

CREATE VIEW core.bonus_slab_account_selector_view
AS
SELECT * FROM core.account_scrud_view
WHERE account_master_id >= 20400
ORDER BY account_id; --Expenses

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.cash_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.cash_account_selector_view;

CREATE VIEW core.cash_account_selector_view
AS
SELECT * FROM core.account_scrud_view
WHERE account_master_id = 10101
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.cost_of_sales_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.cost_of_sales_account_selector_view;

CREATE VIEW core.cost_of_sales_account_selector_view
AS
SELECT * FROM core.account_scrud_view
--Cost of Sales
WHERE account_master_id = 20400
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.inventory_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.inventory_account_selector_view;

CREATE VIEW core.inventory_account_selector_view
AS
SELECT * FROM core.account_scrud_view
--Current Assets
WHERE account_master_id = 10100
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.item_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.item_selector_view;

CREATE VIEW core.item_selector_view
AS
SELECT * FROM core.items
ORDER BY item_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.late_fee_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.late_fee_account_selector_view;

CREATE VIEW core.late_fee_account_selector_view
AS
SELECT * FROM core.account_scrud_view
--All income headings
WHERE account_master_id >= 20100
AND account_master_id < 20400
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.merchant_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.merchant_account_selector_view;

CREATE VIEW core.merchant_account_selector_view
AS
SELECT * FROM core.bank_account_scrud_view
WHERE is_merchant_account = true
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.merchant_fee_setup_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.merchant_fee_setup_account_selector_view;

CREATE VIEW core.merchant_fee_setup_account_selector_view
AS
SELECT * FROM core.account_scrud_view
WHERE account_master_id >= 20400
ORDER BY account_id; --Expenses

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.party_type_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.party_type_account_selector_view;

CREATE VIEW core.party_type_account_selector_view
AS
SELECT * FROM core.account_scrud_view
--Accounts Receivable, Accounts Payable
WHERE account_master_id = ANY(ARRAY[10110, 15010])
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.purcahse_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.purcahse_account_selector_view;

CREATE VIEW core.purcahse_account_selector_view
AS
SELECT * FROM core.account_scrud_view
WHERE account_master_id = 2 --Profit and Loss Account
AND COALESCE(parent, '') <> ''
ORDER BY account_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.purchase_discount_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.purchase_discount_account_selector_view;

CREATE VIEW core.purchase_discount_account_selector_view
AS
SELECT * FROM core.account_scrud_view
--All income headings
WHERE account_master_id >= 20100
AND account_master_id < 20400
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.recurring_invoice_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.recurring_invoice_account_selector_view;

CREATE VIEW core.recurring_invoice_account_selector_view
AS
SELECT * FROM core.account_scrud_view
--All income headings
WHERE account_master_id >= 20100
AND account_master_id < 20400
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.revenue_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.revenue_account_selector_view;

CREATE VIEW core.revenue_account_selector_view
AS
SELECT * FROM core.account_scrud_view
WHERE account_master_id = 20100
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.sales_discount_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.sales_discount_account_selector_view;

CREATE VIEW core.sales_discount_account_selector_view
AS
SELECT * FROM core.account_scrud_view
WHERE account_master_id >= 20400
ORDER BY account_id; --Expenses

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.sales_return_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.sales_return_account_selector_view;

CREATE VIEW core.sales_return_account_selector_view
AS
SELECT * FROM core.account_scrud_view
WHERE account_master_id >= 15000
AND account_master_id <= 15100
ORDER BY account_id; --Liabilities


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/core/core.salesperson_account_selector_view.sql --<--<--
DROP VIEW IF EXISTS core.salesperson_account_selector_view;

CREATE VIEW core.salesperson_account_selector_view
AS
SELECT * FROM core.account_scrud_view
--Current Assets, Accounts Receivable, Current Liabilities, Accounts Payable
WHERE account_master_id = ANY(ARRAY[10100, 10110, 15000, 15010])
ORDER BY account_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.selector-views/office/office.user_selector_view.sql --<--<--
DROP VIEW IF EXISTS office.user_selector_view;

CREATE VIEW office.user_selector_view
AS
SELECT
    office.users.user_id,
    office.users.user_name,
    office.users.full_name,
    office.roles.role_name,
    office.offices.office_name
FROM
    office.users
INNER JOIN office.roles
ON office.users.role_id = office.roles.role_id
INNER JOIN office.offices
ON office.users.office_id = office.offices.office_id
WHERE NOT office.roles.is_system;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/core/core.item_view.sql --<--<--
DROP VIEW IF EXISTS core.item_view;

CREATE VIEW core.item_view
AS
SELECT 
        item_id,
        item_code,
        item_name,
        item_group_code || ' (' || item_group_name || ')' AS item_group,
        item_type_code || ' (' || item_type_name || ')' AS item_type,
        maintain_stock,
        brand_code || ' (' || brand_name || ')' AS brand,
        party_code || ' (' || party_name || ')' AS preferred_supplier,
        lead_time_in_days,
        weight_in_grams,
        width_in_centimeters,
        height_in_centimeters,
        length_in_centimeters,
        machinable,
        shipping_mail_type_code || ' (' || shipping_mail_type_name || ')' AS preferred_shipping_mail_type,
        shipping_package_shape_code || ' (' || shipping_package_shape_name || ')' AS preferred_shipping_package_shape,
        core.units.unit_code || ' (' || core.units.unit_name || ')' AS unit,
        base_unit.unit_code || ' (' || base_unit.unit_name || ')' AS base_unit,
        hot_item,
        cost_price,
        selling_price,
        selling_price_includes_tax,
        sales_tax_code || ' (' || sales_tax_name || ')' AS sales_tax,
        reorder_unit.unit_code || ' (' || reorder_unit.unit_name || ')' AS reorder_unit,
        reorder_level,
        reorder_quantity
FROM core.items
INNER JOIN core.item_groups
ON core.items.item_group_id = core.item_groups.item_group_id
INNER JOIN core.item_types
ON core.items.item_type_id = core.item_types.item_type_id
INNER JOIN core.brands
ON core.items.brand_id = core.brands.brand_id
INNER JOIN core.parties
ON core.items.preferred_supplier_id = core.parties.party_id
INNER JOIN core.units
ON core.items.unit_id = core.units.unit_id
INNER JOIN core.units AS base_unit
ON core.get_root_unit_id(core.items.unit_id) = core.units.unit_id
INNER JOIN core.units AS reorder_unit
ON core.items.reorder_unit_id = reorder_unit.unit_id
INNER JOIN core.sales_taxes
ON core.items.sales_tax_id = core.sales_taxes.sales_tax_id
LEFT JOIN core.shipping_mail_types
ON core.items.preferred_shipping_mail_type_id = core.shipping_mail_types.shipping_mail_type_id
LEFT JOIN core.shipping_package_shapes
ON core.items.shipping_package_shape_id = core.shipping_package_shapes.shipping_package_shape_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/localization/0.localization.resource_view.sql --<--<--
DROP VIEW IF EXISTS localization.resource_view;

CREATE VIEW localization.resource_view
AS
SELECT 
    resource_class, '' as culture, key, value
FROM localization.resources
UNION ALL
SELECT resource_class, culture_code, key, localization.localized_resources.value 
FROM localization.localized_resources
INNER JOIN localization.resources
ON localization.localized_resources.resource_id = localization.resources.resource_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/localization/1.localization.localized_resource_view.sql --<--<--
DROP VIEW IF EXISTS localization.localized_resource_view;

CREATE VIEW localization.localized_resource_view
AS
SELECT
    resource_class || 
    CASE WHEN COALESCE(culture, '') = '' THEN '' ELSE '.' || culture END 
    || '.' || key as key, value 
FROM localization.resource_view;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/transactions/1. transactions.transaction_view.sql --<--<--
DROP VIEW IF EXISTS transactions.transaction_view CASCADE;
CREATE VIEW transactions.transaction_view
AS
SELECT
    transactions.transaction_master.transaction_master_id,
    transactions.transaction_master.transaction_counter,
    transactions.transaction_master.transaction_code,
    transactions.transaction_master.book,
    transactions.transaction_master.value_date,
    transactions.transaction_master.transaction_ts,
    transactions.transaction_master.login_id,
    transactions.transaction_master.user_id,
    transactions.transaction_master.sys_user_id,
    transactions.transaction_master.office_id,
    transactions.transaction_master.cost_center_id,
    transactions.transaction_master.reference_number,
    transactions.transaction_master.statement_reference AS master_statement_reference,
    transactions.transaction_master.last_verified_on,
    transactions.transaction_master.verified_by_user_id,
    transactions.transaction_master.verification_status_id,
    transactions.transaction_master.verification_reason,
    transactions.transaction_details.transaction_detail_id,
    transactions.transaction_details.tran_type,
    transactions.transaction_details.account_id,
    core.accounts.account_number,
    core.accounts.account_name,
    core.account_masters.normally_debit,
    core.account_masters.account_master_code,
    core.account_masters.account_master_name,
    core.accounts.account_master_id,
    core.accounts.confidential,
    transactions.transaction_details.statement_reference,
    transactions.transaction_details.cash_repository_id,
    transactions.transaction_details.currency_code,
    transactions.transaction_details.amount_in_currency,
    transactions.transaction_details.local_currency_code,
    transactions.transaction_details.amount_in_local_currency
FROM
transactions.transaction_master
INNER JOIN transactions.transaction_details
ON transactions.transaction_master.transaction_master_id = transactions.transaction_details.transaction_master_id
INNER JOIN core.accounts
ON transactions.transaction_details.account_id = core.accounts.account_id
INNER JOIN core.account_masters
ON core.accounts.account_master_id = core.account_masters.account_master_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/transactions/2. transactions.verified_transaction_view.sql --<--<--
DROP VIEW IF EXISTS transactions.verified_transaction_view CASCADE;

CREATE VIEW transactions.verified_transaction_view
AS
SELECT * FROM transactions.transaction_view
WHERE verification_status_id > 0;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/transactions/3. transactions.trial_balance_view.sql --<--<--
DROP MATERIALIZED VIEW IF EXISTS transactions.trial_balance_view;
CREATE MATERIALIZED VIEW transactions.trial_balance_view
AS
SELECT core.get_account_name(account_id), 
    SUM(CASE transactions.verified_transaction_view.tran_type WHEN 'Dr' THEN amount_in_local_currency ELSE NULL END) AS debit,
    SUM(CASE transactions.verified_transaction_view.tran_type WHEN 'Cr' THEN amount_in_local_currency ELSE NULL END) AS Credit
FROM transactions.verified_transaction_view
GROUP BY account_id;

ALTER MATERIALIZED VIEW transactions.trial_balance_view
OWNER TO mix_erp;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/transactions/3. transactions.verified_transaction_mat_view.sql --<--<--
DROP MATERIALIZED VIEW IF EXISTS transactions.verified_transaction_mat_view CASCADE;

CREATE MATERIALIZED VIEW transactions.verified_transaction_mat_view
AS
SELECT * FROM transactions.verified_transaction_view;

ALTER MATERIALIZED VIEW transactions.verified_transaction_mat_view
OWNER TO mix_erp;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/transactions/4. transactions.stock_transaction_view.sql --<--<--
DROP VIEW IF EXISTS transactions.stock_transaction_view CASCADE;

CREATE VIEW transactions.stock_transaction_view
AS
SELECT
        transactions.transaction_master.transaction_master_id,
        transactions.stock_master.stock_master_id,
        transactions.stock_details.stock_detail_id,
        transactions.transaction_master.book,
        transactions.transaction_master.transaction_counter,
        transactions.transaction_master.transaction_code,
        transactions.transaction_master.value_date,
        transactions.transaction_master.transaction_ts,
        transactions.transaction_master.login_id,
        transactions.transaction_master.user_id,
        transactions.transaction_master.sys_user_id,
        transactions.transaction_master.office_id,
        transactions.transaction_master.cost_center_id,
        transactions.transaction_master.reference_number,
        transactions.transaction_master.statement_reference,
        transactions.transaction_master.last_verified_on,
        transactions.transaction_master.verified_by_user_id,
        transactions.transaction_master.verification_status_id,
        transactions.transaction_master.verification_reason,
        transactions.stock_master.party_id,
        core.parties.country_id,
        core.parties.state_id,
        transactions.stock_master.salesperson_id,
        transactions.stock_master.price_type_id,
        transactions.stock_master.is_credit,
        transactions.stock_master.shipper_id,
        transactions.stock_master.shipping_address_id,
        transactions.stock_master.shipping_charge,
        transactions.stock_master.store_id AS stock_master_store_id,
        transactions.stock_master.cash_repository_id,
        transactions.stock_details.tran_type,
        transactions.stock_details.store_id,
        transactions.stock_details.item_id,
        transactions.stock_details.quantity,
        transactions.stock_details.unit_id,
        transactions.stock_details.base_quantity,
        transactions.stock_details.base_unit_id,
        transactions.stock_details.price,
        transactions.stock_details.discount,
        transactions.stock_details.sales_tax_id,
        transactions.stock_details.tax,
        transactions.stock_details.price * transactions.stock_details.quantity + transactions.stock_details.tax - transactions.stock_details.discount AS amount
FROM transactions.stock_details
INNER JOIN transactions.stock_master
ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
INNER JOIN transactions.transaction_master
ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_id
INNER JOIN core.parties
ON transactions.stock_master.party_id = core.parties.party_id;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/transactions/5. transactions.verified_stock_transaction_view.sql --<--<--
DROP MATERIALIZED VIEW IF EXISTS transactions.verified_stock_transaction_view;

CREATE MATERIALIZED VIEW transactions.verified_stock_transaction_view
AS
SELECT * FROM transactions.stock_transaction_view
WHERE verification_status_id > 0;

ALTER MATERIALIZED VIEW transactions.verified_stock_transaction_view
OWNER TO mix_erp;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/transactions/6. transactions.verified_cash_transaction_mat_view.sql --<--<--
CREATE MATERIALIZED VIEW transactions.verified_cash_transaction_mat_view
AS
SELECT * FROM transactions.verified_transaction_mat_view
WHERE transactions.verified_transaction_mat_view.transaction_master_id
IN
(
    SELECT transactions.verified_transaction_mat_view.transaction_master_id 
    FROM transactions.verified_transaction_mat_view
    WHERE account_master_id IN(10101, 10102) --Cash and Bank A/C
);

ALTER MATERIALIZED VIEW transactions.verified_cash_transaction_mat_view
OWNER TO mix_erp;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/transactions/transactions.sales_by_country_view.sql --<--<--
CREATE VIEW transactions.sales_by_country_view
AS
WITH country_data
AS
(
SELECT country_id, SUM((price * quantity) - discount + tax + shipping_charge) AS sales
FROM transactions.verified_stock_transaction_view
WHERE book = ANY(ARRAY['Sales.Delivery', 'Sales.Direct'])
GROUP BY country_id
)

SELECT country_code, sales 
FROM country_data
INNER JOIN core.countries
ON country_data.country_id = core.countries.country_id;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/05.views/transactions/transactions.verified_stock_details_view.sql --<--<--
DROP VIEW IF EXISTS transactions.verified_stock_details_view;

CREATE VIEW transactions.verified_stock_details_view
AS
SELECT transactions.stock_details.* 
FROM transactions.stock_details
INNER JOIN transactions.stock_master
ON transactions.stock_master.stock_master_id = transactions.stock_details.stock_master_id
INNER JOIN transactions.transaction_master
ON transactions.transaction_master.transaction_master_id = transactions.stock_master.transaction_master_id
AND transactions.transaction_master.verification_status_id > 0;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/06.sample-data/0.menus.sql --<--<--
SELECT * FROM core.create_menu('API Access Policy', '~/Modules/BackOffice/Policy/ApiAccess.mix', 'SAA', 2, core.get_menu_id('SPM'));

--FRENCH
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'fr', 'API Stratégie d''accès');


--GERMAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'de', 'API-Richtlinien');

--RUSSIAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'ru', 'Политика доступа API');

--JAPANESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'ja', 'APIのアクセスポリシー');

--SPANISH
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'es', 'API Política de Acceso');

--DUTCH
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'nl', 'API Access Policy');

--SIMPLIFIED CHINESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'zh', 'API访问策略');

--PORTUGUESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'pt', 'Política de Acesso API');

--SWEDISH
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'sv', 'API Access Policy');

--MALAY
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'ms', 'Dasar Akses API');

--INDONESIAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'id', 'API Kebijakan Access');

--FILIPINO
SELECT * FROM core.create_menu_locale(core.get_menu_id('SAA'), 'fil', 'API Patakaran sa Pag-access');


SELECT * FROM core.create_menu('Payment Cards', '~/Modules/Finance/Setup/PaymentCards.mix', 'PAC', 2, core.get_menu_id('FSM'));

--FRENCH
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'fr', 'Cartes de paiement');


--GERMAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'de', 'Zahlungskarten');

--RUSSIAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'ru', 'Платежные карты');

--JAPANESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'ja', '支払カード');

--SPANISH
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'es', 'Tarjetas de pago');

--DUTCH
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'nl', 'betaalkaarten');

--SIMPLIFIED CHINESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'zh', '支付卡');

--PORTUGUESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'pt', 'Cartões de pagamento');

--SWEDISH
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'sv', 'Betalkort');

--MALAY
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'ms', 'Kad Pembayaran');

--INDONESIAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'id', 'Kartu Pembayaran');

--FILIPINO
SELECT * FROM core.create_menu_locale(core.get_menu_id('PAC'), 'fil', 'Mga Card pagbabayad');

SELECT * FROM core.create_menu('Merchant Fee Setup', '~/Modules/Finance/Setup/MerchantFeeSetup.mix', 'MFS', 2, core.get_menu_id('FSM'));

--FRENCH
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'fr', 'Configuration de frais de Merchant');


--GERMAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'de', 'Händler Fee-Setup');

--RUSSIAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'ru', 'Торговец Стоимость установки');

--JAPANESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'ja', '加盟店手数料の設定');

--SPANISH
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'es', 'Configuración Fee Merchant');

--DUTCH
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'nl', 'Merchant Fee Setup');

--SIMPLIFIED CHINESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'zh', '商家安装费');

--PORTUGUESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'pt', 'Setup Fee Merchant');

--SWEDISH
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'sv', 'Merchant Fee Setup');

--MALAY
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'ms', 'Bayaran Merchant Persediaan');

--INDONESIAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'id', 'Merchant Fee Pengaturan');

--FILIPINO
SELECT * FROM core.create_menu_locale(core.get_menu_id('MFS'), 'fil', 'Setup Bayarin sa Merchant');

SELECT * FROM core.create_menu('Report Writer', '~/Modules/BackOffice/Admin/ReportWriter.mix', 'RW', 2, core.get_menu_id('SAT'));

--FRENCH
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'fr', 'Report Writer');

--GERMAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'de', 'Report Writer');

--RUSSIAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'ru', 'генератор отчетов');

--JAPANESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'ja', '報告書作成');

--SPANISH
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'es', 'Report Writer');

--DUTCH
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'nl', 'Report Writer');

--SIMPLIFIED CHINESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'zh', '报表生成器');

--PORTUGUESE
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'pt', 'Report Writer');

--SWEDISH
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'sv', 'Report Writer');

--MALAY
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'ms', 'Laporan Penulis');

--INDONESIAN
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'id', 'laporan Penulis');

--FILIPINO
SELECT * FROM core.create_menu_locale(core.get_menu_id('RW'), 'fil', 'Report Writer');


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/06.sample-data/1.remove-obsolete-menus.sql --<--<--
DELETE FROM core.menu_locale
WHERE menu_id = core.get_menu_id_by_menu_code('TRA');

DELETE FROM policy.menu_access
WHERE menu_id = core.get_menu_id_by_menu_code('TRA');

DELETE FROM core.menus
WHERE menu_code = 'TRA';


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/core/currencies.sql --<--<--
/********************************************************************************
Copyright (C) Binod Nepal, Mix Open Foundation (http://mixof.org).

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
If a copy of the MPL was not distributed  with this file, You can obtain one at 
http://mozilla.org/MPL/2.0/.
***********************************************************************************/

DROP FUNCTION IF EXISTS unit_tests.check_currency();

CREATE FUNCTION unit_tests.check_currency()
RETURNS public.test_result
AS
$$
	DECLARE message text;
BEGIN
	IF NOT EXISTS(SELECT 1 FROM core.currencies LIMIT 1) THEN
		SELECT assert.fail('No currency found in the catalog.') INTO message;
		RETURN message;		
	END IF;

	SELECT assert.ok('End of test.') INTO message;
	RETURN message;	
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/core/fiscal_year.sql --<--<--
/********************************************************************************
Copyright (C) Binod Nepal, Mix Open Foundation (http://mixof.org).

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
If a copy of the MPL was not distributed  with this file, You can obtain one at 
http://mozilla.org/MPL/2.0/.
***********************************************************************************/

DROP FUNCTION IF EXISTS unit_tests.check_fiscal_year();

CREATE FUNCTION unit_tests.check_fiscal_year()
RETURNS public.test_result
AS
$$
	DECLARE message text;
BEGIN
	IF NOT EXISTS(SELECT 1 FROM core.fiscal_year WHERE ends_on >= NOW() LIMIT 1) THEN
		SELECT assert.fail('Fiscal year not present in the catalog.') INTO message;
		RETURN message;		
	END IF;
	
	SELECT assert.ok('End of test.') INTO message;
	RETURN message;	
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/core/frequencies.sql --<--<--
/********************************************************************************
Copyright (C) Binod Nepal, Mix Open Foundation (http://mixof.org).

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
If a copy of the MPL was not distributed  with this file, You can obtain one at 
http://mozilla.org/MPL/2.0/.
***********************************************************************************/

DROP FUNCTION IF EXISTS unit_tests.check_frequency();

CREATE FUNCTION unit_tests.check_frequency()
RETURNS public.test_result
AS
$$
	DECLARE message text;
BEGIN
	IF NOT EXISTS(SELECT 1 FROM core.frequencies WHERE frequency_id=2) THEN
		SELECT assert.fail('EOM frequency not present in the catalog.') INTO message;
		RETURN message;		
	END IF;

	IF NOT EXISTS(SELECT 1 FROM core.frequencies WHERE frequency_id=3) THEN
		SELECT assert.fail('EOQ frequency not present in the catalog.') INTO message;
		RETURN message;		
	END IF;

	IF NOT EXISTS(SELECT 1 FROM core.frequencies WHERE frequency_id=4) THEN
		SELECT assert.fail('EOH frequency not present in the catalog.') INTO message;
		RETURN message;		
	END IF;

	IF NOT EXISTS(SELECT 1 FROM core.frequencies WHERE frequency_id=5) THEN
		SELECT assert.fail('EOY frequency not present in the catalog.') INTO message;
		RETURN message;		
	END IF;
	
	SELECT assert.ok('End of test.') INTO message;
	RETURN message;	
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/core/frequency_setups.sql --<--<--
/********************************************************************************
Copyright (C) Binod Nepal, Mix Open Foundation (http://mixof.org).

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
If a copy of the MPL was not distributed  with this file, You can obtain one at 
http://mozilla.org/MPL/2.0/.
***********************************************************************************/

DROP FUNCTION IF EXISTS unit_tests.check_frequency_setups();

CREATE FUNCTION unit_tests.check_frequency_setups()
RETURNS public.test_result
AS
$$
	DECLARE message text;
	DECLARE fy_code text;
	DECLARE frequency_count integer;
BEGIN
	SELECT fiscal_year_code INTO fy_code
	FROM core.fiscal_year
	WHERE ends_on >= NOW()
	ORDER BY ends_on DESC
	LIMIT 1;

	IF(TRIM(COALESCE(fy_code, '')) = '') THEN
		SELECT assert.fail('Fiscal year not present in the catalog.') INTO message;
		RETURN message;
	END IF;

	SELECT COUNT(*) INTO frequency_count
	FROM core.frequency_setups
	WHERE fiscal_year_code = fy_code;
	
	IF frequency_count <> 12 THEN
		SELECT assert.fail('Invalid frequency setup encountered.') INTO message;
		RETURN message;		
	END IF;
	
	SELECT assert.ok('End of test.') INTO message;
	RETURN message;	
END
$$
LANGUAGE plpgsql;




-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/core/parties/unit_tests.check_party_currency_code_mismatch.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.check_party_currency_code_mismatch();

CREATE FUNCTION unit_tests.check_party_currency_code_mismatch()
RETURNS public.test_result
AS
$$
    DECLARE message public.test_result;
BEGIN
    IF EXISTS
    (
        SELECT party_code FROM core.parties
        INNER JOIN core.accounts
        ON core.parties.account_id = core.accounts.account_id
        WHERE core.parties.currency_code != core.accounts.currency_code
        LIMIT 1
    ) THEN
        SELECT assert.fail('Some party accounts have different currency setup on their mapped GL heads.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/core/parties/unit_tests.check_party_null_account_id.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.check_party_null_account_id();

CREATE FUNCTION unit_tests.check_party_null_account_id()
RETURNS public.test_result
AS
$$
    DECLARE message public.test_result;
BEGIN
    IF EXISTS
    (
        SELECT party_code FROM core.parties
        WHERE core.parties.account_id IS NULL
        LIMIT 1
    ) THEN
        SELECT assert.fail('Some party accounts don''t have mapped GL heads.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/core/sys-user-test.sql --<--<--
/********************************************************************************
Copyright (C) Binod Nepal, Mix Open Foundation (http://mixof.org).

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
If a copy of the MPL was not distributed  with this file, You can obtain one at 
http://mozilla.org/MPL/2.0/.
***********************************************************************************/

DROP FUNCTION IF EXISTS unit_tests.check_sys_group_count();

CREATE FUNCTION unit_tests.check_sys_group_count()
RETURNS public.test_result
AS
$$
DECLARE message public.test_result = '';
DECLARE sys_group_count integer;
BEGIN
	SELECT COUNT(*) INTO sys_group_count
	FROM office.roles
	WHERE office.roles.is_system = true;

	IF sys_group_count = 0 THEN
		SELECT assert.fail('No sys account group found in the database.') INTO message;
		RETURN message;
	END IF;

	IF sys_group_count > 1 THEN
		SELECT assert.fail('You can only have one sys account group.') INTO message;	
		RETURN message;
	END IF;

	SELECT assert.ok('End of test.') INTO message;
	RETURN message;
END
$$
LANGUAGE plpgsql;



DROP FUNCTION IF EXISTS unit_tests.check_sys_user_count();

CREATE FUNCTION unit_tests.check_sys_user_count()
RETURNS public.test_result
AS
$$
DECLARE message public.test_result = '';
DECLARE sys_user_count integer;
BEGIN
	SELECT COUNT(*) INTO sys_user_count
	FROM office.users
	INNER JOIN office.roles
	ON office.users.role_id = office.roles.role_id
	WHERE office.roles.is_system = true;

	IF sys_user_count = 0 THEN
		SELECT assert.fail('No sys user account found in the database.') INTO message;
		RETURN message;
	END IF;

	IF sys_user_count > 1 THEN
		SELECT assert.fail('You can only have one sys user account.') INTO message;	
		RETURN message;
	END IF;

	SELECT assert.ok('End of test.') INTO message;
	RETURN message;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/core/verification_statuses.sql --<--<--
/********************************************************************************
Copyright (C) Binod Nepal, Mix Open Foundation (http://mixof.org).

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
If a copy of the MPL was not distributed  with this file, You can obtain one at 
http://mozilla.org/MPL/2.0/.
***********************************************************************************/

DROP FUNCTION IF EXISTS unit_tests.ensure_verification_statuses();

CREATE FUNCTION unit_tests.ensure_verification_statuses()
RETURNS public.test_result
AS
$$
DECLARE message public.test_result = '';
BEGIN
	IF NOT EXISTS(SELECT * FROM core.verification_statuses WHERE verification_status_id = -3) THEN
		SELECT assert.fail('The rejected flag (-3) does not exist on table core.verification_statuses.') INTO message;			
		RETURN message;
	END IF;

	IF NOT EXISTS(SELECT * FROM core.verification_statuses WHERE verification_status_id = -2) THEN
		SELECT assert.fail('The closed flag (-2) does not exist on table core.verification_statuses.') INTO message;			
		RETURN message;
	END IF;

	IF NOT EXISTS(SELECT * FROM core.verification_statuses WHERE verification_status_id = -1) THEN
		SELECT assert.fail('The withdrawn flag (-1) does not exist on table core.verification_statuses.') INTO message;			
		RETURN message;
	END IF;

	IF NOT EXISTS(SELECT * FROM core.verification_statuses WHERE verification_status_id = 0) THEN
		SELECT assert.fail('The unverified flag (0) does not exist on table core.verification_statuses.') INTO message;			
		RETURN message;
	END IF;

	IF NOT EXISTS(SELECT * FROM core.verification_statuses WHERE verification_status_id = 1) THEN
		SELECT assert.fail('The auto-workflow-approved flag (1) does not exist on table core.verification_statuses.') INTO message;			
		RETURN message;
	END IF;

	IF NOT EXISTS(SELECT * FROM core.verification_statuses WHERE verification_status_id = 2) THEN
		SELECT assert.fail('The approved flag (2) does not exist on table core.verification_statuses.') INTO message;			
		RETURN message;
	END IF;

	SELECT assert.ok('End of test.') INTO message;	
	RETURN message;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/office/is_parent_office_test.sql --<--<--
/********************************************************************************
Copyright (C) Binod Nepal, Mix Open Foundation (http://mixof.org).

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
If a copy of the MPL was not distributed  with this file, You can obtain one at 
http://mozilla.org/MPL/2.0/.
***********************************************************************************/
DROP FUNCTION IF EXISTS unit_tests.is_parent_office_test();

CREATE FUNCTION unit_tests.is_parent_office_test()
RETURNS public.test_result
AS
$$
	DECLARE have boolean;
	DECLARE want boolean;
	DECLARE message text;
	DECLARE result boolean;
	DECLARE grand_parent_id integer;
	DECLARE parent_id integer;
	DECLARE id integer;
	DECLARE sibling_id integer;
	DECLARE child_id integer;
BEGIN
	grand_parent_id := nextval('office.offices_office_id_seq');
	INSERT INTO office.offices(office_id, office_code,office_name,nick_name,registration_date, street,city,state,country,zip_code,phone,fax,email,url,registration_number,pan_number, currency_code)
	SELECT grand_parent_id, 'Grand Parent','Grand Parent', 'Grand Parent', '1-1-2000', '','','','','','','','','','0','0', 'NPR';
	
	parent_id := nextval('office.offices_office_id_seq');
	INSERT INTO office.offices(office_id, parent_office_id, office_code,office_name,nick_name,registration_date, street,city,state,country,zip_code,phone,fax,email,url,registration_number,pan_number, currency_code)
	SELECT parent_id, grand_parent_id, 'Parent','Parent', 'Parent', '1-1-2000', '','','','','','','','','','0','0', 'NPR';
	
	id := nextval('office.offices_office_id_seq');
	INSERT INTO office.offices(office_id, parent_office_id, office_code,office_name,nick_name,registration_date, street,city,state,country,zip_code,phone,fax,email,url,registration_number,pan_number, currency_code)
	SELECT id, parent_id, 'Office','Office', 'Office', '1-1-2000', '','','','','','','','','','0','0', 'NPR';

	sibling_id := nextval('office.offices_office_id_seq');
	INSERT INTO office.offices(office_id, parent_office_id, office_code,office_name,nick_name,registration_date, street,city,state,country,zip_code,phone,fax,email,url,registration_number,pan_number, currency_code)
	SELECT sibling_id, parent_id, 'Sibling','Sibling', 'Sibling', '1-1-2000', '','','','','','','','','','0','0', 'NPR';
	
	child_id := nextval('office.offices_office_id_seq');
	INSERT INTO office.offices(office_id, parent_office_id, office_code,office_name,nick_name,registration_date, street,city,state,country,zip_code,phone,fax,email,url,registration_number,pan_number, currency_code)
	SELECT child_id, id, 'Child','Child', 'Child', '1-1-2000', '','','','','','','','','','0','0', 'NPR';
	
	have := office.is_parent_office(id, sibling_id);
	want := false;
	SELECT * FROM assert.is_equal(have, want) INTO message, result;
	IF NOT result THEN
		RETURN message;
	END IF;

	have := office.is_parent_office(sibling_id, id);
	want := false;
	SELECT * FROM assert.is_equal(have, want) INTO message, result;
	IF NOT result THEN
		RETURN message;
	END IF;

	have := office.is_parent_office(id, child_id);
	want := true;
	SELECT * FROM assert.is_equal(have, want) INTO message, result;
	IF NOT result THEN
		RETURN message;
	END IF;

	have := office.is_parent_office(parent_id, id);
	want := true;
	SELECT * FROM assert.is_equal(have, want) INTO message, result;
	IF NOT result THEN
		RETURN message;
	END IF;
	
	have := office.is_parent_office(parent_id, sibling_id);
	want := true;
	SELECT * FROM assert.is_equal(have, want) INTO message, result;
	IF NOT result THEN
		RETURN message;
	END IF;
	
	have := office.is_parent_office(parent_id, child_id);
	want := true;
	SELECT * FROM assert.is_equal(have, want) INTO message, result;
	IF NOT result THEN
		RETURN message;
	END IF;
	
	have := office.is_parent_office(grand_parent_id, parent_id);
	want := true;
	SELECT * FROM assert.is_equal(have, want) INTO message, result;
	IF NOT result THEN
		RETURN message;
	END IF;
	
	have := office.is_parent_office(grand_parent_id, id);
	want := true;
	SELECT * FROM assert.is_equal(have, want) INTO message, result;
	IF NOT result THEN
		RETURN message;
	END IF;
	
	have := office.is_parent_office(grand_parent_id, sibling_id);
	want := true;
	SELECT * FROM assert.is_equal(have, want) INTO message, result;
	IF NOT result THEN
		RETURN message;
	END IF;
		
	have := office.is_parent_office(grand_parent_id, child_id);
	want := true;
	SELECT * FROM assert.is_equal(have, want) INTO message, result;
	IF NOT result THEN
		RETURN message;
	END IF;

	SELECT assert.ok('End of test.') INTO message;
	RETURN message;
END
$$
LANGUAGE plpgsql;

-- BEGIN;
-- SELECT unit_tests.begin();
-- ROLLBACK;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/office/sign_in_test.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.sign_in_test();

CREATE FUNCTION unit_tests.sign_in_test()
RETURNS public.test_result
AS
$$
    DECLARE _office_id          integer;
    DECLARE _user_name          text='plpgunit-test-user-000001';
    DECLARE _password           text = encode(digest(encode(digest('plpgunit-test-user-000001thoushaltnotlogin', 'sha512'), 'hex') || 'common', 'sha512'), 'hex');
    DECLARE _culture            text='en-US';
    DECLARE _login_id           bigint;
    DECLARE _sing_in_message    text;
    DECLARE message             public.test_result;
BEGIN
    PERFORM unit_tests.create_dummy_offices();
    PERFORM unit_tests.create_dummy_users();

    _office_id := office.get_office_id_by_office_code('dummy-off01');
    
    SELECT * FROM office.sign_in(_office_id, _user_name, _password, 'Plpgunit', '127.0.0.1', 'Plpgunit/plpgunit-test-user-000001', _culture, 'common')    
    INTO _login_id, _sing_in_message;
    
    IF(COALESCE(_login_id, 0) = 0) THEN
        SELECT assert.fail(_sing_in_message) INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/others/unit_tests.if_functions_compile.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.if_functions_compile();

CREATE FUNCTION unit_tests.if_functions_compile()
RETURNS public.test_result
AS
$$
    DECLARE schemas text[];
    DECLARE message public.test_result;
    DECLARE result  boolean;
BEGIN

    schemas := ARRAY(
                SELECT nspname::text
                FROM pg_namespace
                WHERE nspname NOT LIKE 'pg%'
                AND nspname NOT IN('assert', 'unit_tests', 'information_schema')
                ORDER BY nspname
                );


    SELECT * FROM assert.if_functions_compile(VARIADIC schemas) INTO message, result;
    
    IF(result=false) THEN
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message; 
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/others/unit_tests.if_views_compile.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.if_views_compile();

CREATE FUNCTION unit_tests.if_views_compile()
RETURNS public.test_result
AS
$$
    DECLARE schemas text[];
    DECLARE message public.test_result;
    DECLARE result  boolean;
BEGIN

    schemas := ARRAY(
                SELECT nspname::text
                FROM pg_namespace
                WHERE nspname NOT LIKE 'pg%'
                AND nspname NOT IN('assert', 'unit_tests', 'information_schema')
                ORDER BY nspname
                );


    SELECT * FROM assert.if_views_compile(VARIADIC schemas) INTO message, result;
    
    IF(result=false) THEN
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message; 
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/transactions/balance_sheet_test.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.balance_sheet_test();

--Todo--check balance sheet by office
CREATE FUNCTION unit_tests.balance_sheet_test()
RETURNS public.test_result
AS
$$
    DECLARE _period_from    date;
    DECLARE _period_to      date;
    DECLARE _counter        date;
    DECLARE _bs_unequal     bool=false;
    DECLARE _message        public.test_result;
    DECLARE _difference     numeric;
    DECLARE _amount         numeric;
    DECLARE _office_id      integer;
    DECLARE _user_id        integer;
BEGIN
    SELECT office_id INTO _office_id
    FROM office.offices
    ORDER BY office_id
    LIMIT 1;

    SELECT user_id INTO _user_id
    FROM office.users
    LIMIT 1;
    
    SELECT 
        min(value_date), 
        max(value_date)
    INTO
        _period_from,
        _period_to
    FROM transactions.transaction_master;


    SELECT 
    SUM
    (
        CASE WHEN item='Assets' 
        THEN current_period * -1 
        ELSE current_period END
    )
    INTO
        _difference            
    FROM transactions.get_balance_sheet(_period_from, _period_to, _user_id, _office_id, 1)
    WHERE item IN ('Assets', 'Liabilities & Shareholders'' Equity');

    IF(_difference) <> 0 THEN
        _bs_unequal := true;
        _counter    := _period_to;
    END IF;


    WHILE _bs_unequal
    LOOP
        SELECT 
        SUM
        (
            CASE WHEN item='Assets' 
            THEN current_period * -1 
            ELSE current_period END
        )
        INTO
            _amount            
        FROM transactions.get_balance_sheet('7/17/2014', _counter, _user_id, _office_id, 1)
        WHERE item IN ('Assets', 'Liabilities & Shareholders'' Equity');
                
        IF(COALESCE(_amount, 0) = 0) THEN
            _bs_unequal := false;
            _message    := 'Balance sheet unequal on date: ' || (_counter + 1)::text || '. Difference in base currency : ' || _difference::text || '.';
            
            PERFORM assert.fail(_message);
            RETURN _message;
         END IF;

        _counter := _counter - 1;
     END LOOP;

    SELECT assert.ok('End of test.') INTO _message;  
    RETURN _message;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/transactions/test_transactions_post_receipt_function.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.test_transactions_post_receipt();

CREATE FUNCTION unit_tests.test_transactions_post_receipt()
RETURNS public.test_result
AS
$$
    DECLARE message                 public.test_result;
    DECLARE _user_id                integer;
    DECLARE _office_id              integer; 
    DECLARE _login_id               bigint;
    DECLARE _party_code             national character varying(12); 
    DECLARE _currency_code          national character varying(12); 
    DECLARE _amount                 public.money_strict; 
    DECLARE _exchange_rate_debit    public.decimal_strict; 
    DECLARE _exchange_rate_credit   public.decimal_strict;
    DECLARE _reference_number       national character varying(24); 
    DECLARE _statement_reference    national character varying(128); 
    DECLARE _cost_center_id         integer;
    DECLARE _cash_repository_id     integer;
    DECLARE _posted_date            date;
    DECLARE _bank_account_id        integer;
    DECLARE _payment_card_id        integer;
    DECLARE _bank_instrument_code   national character varying(128);
    DECLARE _bank_tran_code         national character varying(128);
    DECLARE _result                 bigint;
BEGIN
    PERFORM unit_tests.create_mock();
    PERFORM unit_tests.sign_in_test();

    _office_id                      := office.get_office_id_by_office_code('dummy-off01');
    _user_id                        := office.get_user_id_by_user_name('plpgunit-test-user-000001');
    _login_id                       := office.get_login_id(_user_id);
    _party_code                     := 'dummy-pr01';
    _currency_code                  := 'USD';
    _amount                         := 1000.00;
    _exchange_rate_debit            := 100.00;
    _exchange_rate_credit           := 100.00;
    _reference_number               := 'PL-PG-UNIT-TEST';
    _statement_reference            := 'This transaction should have been rollbacked already.';
    _cost_center_id                 := office.get_cost_center_id_by_cost_center_code('dummy-cs01');
    _cash_repository_id             := office.get_cash_repository_id_by_cash_repository_code('dummy-cr01');
    _posted_date                    := NULL;
    _bank_account_id                := NULL;
    _payment_card_id                := NULL;
    _bank_instrument_code           := NULL;
    _bank_tran_code                 := NULL;
                                                        
    _result                         := transactions.post_receipt
                                    (
                                        _user_id, 
                                        _office_id, 
                                        _login_id,
                                        _party_code, 
                                        _currency_code, 
                                        _amount, 
                                        _exchange_rate_debit, 
                                        _exchange_rate_credit,
                                        _reference_number, 
                                        _statement_reference, 
                                        _cost_center_id,
                                        _cash_repository_id,
                                        _posted_date,
                                        _bank_account_id,
                                        _payment_card_id,
                                        _bank_instrument_code,
                                        _bank_tran_code,
                                        NULL::bigint
                                    );

    IF(_result <= 0) THEN
        SELECT assert.fail('Cannot compile transactions.post_receipt_function.') INTO message;
        RETURN message;
    END IF;

    SELECT assert.ok('End of test.') INTO message;  
    RETURN message;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests/unit_tests.create_mock.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_mock();

CREATE FUNCTION unit_tests.create_mock()
RETURNS void
AS
$$
BEGIN
    PERFORM unit_tests.create_dummy_offices();
    PERFORM unit_tests.create_dummy_departments();
    PERFORM unit_tests.create_dummy_users();
    PERFORM unit_tests.create_dummy_accounts();
    PERFORM unit_tests.create_dummy_sales_taxes();
    PERFORM unit_tests.create_dummy_countries();
    PERFORM unit_tests.create_dummy_states();
    PERFORM unit_tests.create_dummy_party_types();
    PERFORM unit_tests.create_dummy_item_groups();
    PERFORM unit_tests.create_dummy_item_types();
    PERFORM unit_tests.create_dummy_units();
    PERFORM unit_tests.create_dummy_brands();
    PERFORM unit_tests.create_dummy_parties();
    PERFORM unit_tests.create_dummy_items();
    PERFORM unit_tests.create_dummy_cost_centers();
    PERFORM unit_tests.create_dummy_late_fees();
    PERFORM unit_tests.create_dummy_sales_teams();
    PERFORM unit_tests.create_dummy_salespersons();
    PERFORM unit_tests.create_dummy_shippers();
    PERFORM unit_tests.create_dummy_cash_repositories();
    PERFORM unit_tests.create_dummy_store_types();
    PERFORM unit_tests.create_dummy_stores();
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_accounts.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_accounts();

CREATE FUNCTION unit_tests.create_dummy_accounts()
RETURNS void 
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc01') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('BSA'), 'dummy-acc01', 'NPR', 'Test Mock Account 1';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc02') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('BSA'), 'dummy-acc02', 'NPR', 'Test Mock Account 2';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc03') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('BSA'), 'dummy-acc03', 'NPR', 'Test Mock Account 3';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc04') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('BSA'), 'dummy-acc04', 'NPR', 'Test Mock Account 4';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc05') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('BSA'), 'dummy-acc05', 'NPR', 'Test Mock Account 5';
    END IF;

    IF NOT EXISTS(SELECT 1 FROM core.accounts WHERE account_number = 'dummy-acc06') THEN
        INSERT INTO core.accounts(account_master_id, account_number, currency_code, account_name)
        SELECT core.get_account_master_id_by_account_master_code('CAS'), 'dummy-acc06', 'NPR', 'Test Mock Account 6';
    END IF;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_auto_verification_policy.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_auto_verification_policy
(
        _user_id                        integer, 
        _verify_sales_transactions      boolean, 
        _sales_verification_limit       public.money_strict2, 
        _verify_purchase_transactions   boolean, 
        _purchase_verification_limit    public.money_strict2, 
        _verify_gl_transactions         boolean,
        _gl_verification_limit          public.money_strict2,
        _effective_from                 date,
        _ends_on                        date,
        _is_active                      boolean
);

DROP FUNCTION IF EXISTS unit_tests.create_dummy_auto_verification_policy
(
        _user_id                        integer, 
        _office_id                      integer,
        _verify_sales_transactions      boolean, 
        _sales_verification_limit       public.money_strict2, 
        _verify_purchase_transactions   boolean, 
        _purchase_verification_limit    public.money_strict2, 
        _verify_gl_transactions         boolean,
        _gl_verification_limit          public.money_strict2,
        _effective_from                 date,
        _ends_on                        date,
        _is_active                      boolean
);

CREATE FUNCTION unit_tests.create_dummy_auto_verification_policy
(
        _user_id                        integer, 
        _office_id                      integer,
        _verify_sales_transactions      boolean, 
        _sales_verification_limit       public.money_strict2, 
        _verify_purchase_transactions   boolean, 
        _purchase_verification_limit    public.money_strict2, 
        _verify_gl_transactions         boolean,
        _gl_verification_limit          public.money_strict2,
        _effective_from                 date,
        _ends_on                        date,
        _is_active                      boolean
)
RETURNS void 
AS
$$
BEGIN
        IF NOT EXISTS(SELECT 1 FROM policy.auto_verification_policy WHERE user_id=_user_id) THEN
                INSERT INTO policy.auto_verification_policy(user_id, office_id, verify_sales_transactions, sales_verification_limit, verify_purchase_transactions, purchase_verification_limit, verify_gl_transactions, gl_verification_limit, effective_from, ends_on, is_active)
                SELECT _user_id, _office_id, _verify_sales_transactions, _sales_verification_limit, _verify_purchase_transactions, _purchase_verification_limit, _verify_gl_transactions, _gl_verification_limit, _effective_from, _ends_on, _is_active;
                RETURN;
        END IF;

        UPDATE policy.auto_verification_policy
        SET 
                verify_sales_transactions = _verify_sales_transactions,
                sales_verification_limit = _sales_verification_limit,
                verify_purchase_transactions = _verify_purchase_transactions,
                purchase_verification_limit = _purchase_verification_limit,
                verify_gl_transactions = _verify_gl_transactions, 
                gl_verification_limit = _gl_verification_limit, 
                effective_from = _effective_from, 
                ends_on = _ends_on, 
                is_active = _is_active                
        WHERE user_id = _user_id
        AND office_id = _office_id;
        
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_brands.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_brands();

CREATE FUNCTION unit_tests.create_dummy_brands()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.brands WHERE brand_code='dummy-br01') THEN        
        INSERT INTO core.brands(brand_code, brand_name)
        SELECT 'dummy-br01', 'Test Mock Brand';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_cash_repositories.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_cash_repositories();

CREATE FUNCTION unit_tests.create_dummy_cash_repositories()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.cash_repositories WHERE cash_repository_code='dummy-cr01') THEN        
        INSERT INTO office.cash_repositories(cash_repository_code, cash_repository_name, office_id)
        SELECT 'dummy-cr01', 'Test Mock Cash Repository', office.get_office_id_by_office_code('dummy-off01');
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_cost_centers.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_cost_centers();

CREATE FUNCTION unit_tests.create_dummy_cost_centers()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.cost_centers WHERE cost_center_code='dummy-cs01') THEN        
        INSERT INTO office.cost_centers(cost_center_code, cost_center_name)
        SELECT 'dummy-cs01', 'Test Mock Cost Center';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_countries.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_countries();

CREATE FUNCTION unit_tests.create_dummy_countries()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.countries WHERE country_code='dummy-co01') THEN        
        INSERT INTO core.countries(country_code, country_name)
        SELECT 'dummy-co01', 'Test Mock Country';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_departments.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_departments();

CREATE FUNCTION unit_tests.create_dummy_departments()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.departments WHERE department_code='dummy-dp01') THEN        
        INSERT INTO office.departments(department_code, department_name)
        SELECT 'dummy-dp01', 'Test Mock Department';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_item_groups.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_item_groups();

CREATE FUNCTION unit_tests.create_dummy_item_groups()
RETURNS void
AS
$$
    DECLARE _dummy_account_id bigint;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.item_groups WHERE item_group_code='dummy-ig01') THEN

        _dummy_account_id := core.get_account_id_by_account_number('dummy-acc01');
        
        INSERT INTO core.item_groups(item_group_code, item_group_name, sales_tax_id, sales_account_id, sales_discount_account_id, sales_return_account_id, purchase_account_id, purchase_discount_account_id, inventory_account_id, cost_of_goods_sold_account_id)
        SELECT 'dummy-ig01', 'Test Mock Item Group', core.get_sales_tax_id_by_sales_tax_code('dummy-stx01'), _dummy_account_id, _dummy_account_id, _dummy_account_id, _dummy_account_id, _dummy_account_id, _dummy_account_id, _dummy_account_id;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_item_types.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_item_types();

CREATE FUNCTION unit_tests.create_dummy_item_types()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.item_types WHERE item_type_code='dummy-it01') THEN
        INSERT INTO core.item_types(item_type_code, item_type_name)
        SELECT 'dummy-it01', 'Test Mock Item Type';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_items.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_items();

CREATE FUNCTION unit_tests.create_dummy_items()
RETURNS void
AS
$$
    DECLARE _dummy_unit_id integer;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.items WHERE item_code='dummy-it01') THEN

        _dummy_unit_id := core.get_unit_id_by_unit_code('dummy-uni01');
    
        INSERT INTO core.items
        (
            item_code, 
            item_name, 
            item_group_id,
            item_type_id,
            brand_id,
            preferred_supplier_id,
            lead_time_in_days,
            unit_id,
            hot_item,
            cost_price,
            selling_price,
            sales_tax_id,
            reorder_unit_id,
            reorder_level,
            reorder_quantity,
            maintain_stock
        )
        SELECT 
            'dummy-it01'                                            AS item_code, 
            'Test Mock Item'                                        AS item_name,
            core.get_item_group_id_by_item_group_code('dummy-ig01') AS item_group_id,
            core.get_item_type_id_by_item_type_code('dummy-it01')   AS item_type_id,
            core.get_brand_id_by_brand_code('dummy-br01')           AS brand_id, 
            core.get_party_id_by_party_code('dummy-pr01')           AS preferred_supplier_id,
            10                                                      AS lead_time,
            _dummy_unit_id                                          AS unit_id,
            false                                                   AS hot_item,
            3000                                                    AS cost_price,
            4000                                                    AS selling_price,
            core.get_sales_tax_id_by_sales_tax_code('dummy-stx01')  AS sales_tax_id,
            _dummy_unit_id                                          AS reorder_unit_id,
            10                                                      AS reorder_level,
            100                                                     AS reorder_quantity,
            false                                                   AS maintain_stock
        UNION ALL
        SELECT 
            'dummy-it02'                                            AS item_code, 
            'Test Mock Item2'                                       AS item_name,
            core.get_item_group_id_by_item_group_code('dummy-ig01') AS item_group_id,
            core.get_item_type_id_by_item_type_code('dummy-it01')   AS item_type_id,
            core.get_brand_id_by_brand_code('dummy-br01')           AS brand_id, 
            core.get_party_id_by_party_code('dummy-pr01')           AS preferred_supplier_id,
            17                                                      AS lead_time,
            _dummy_unit_id                                          AS unit_id,
            false                                                   AS hot_item,
            1400                                                    AS cost_price,
            1800                                                    AS selling_price,
            core.get_sales_tax_id_by_sales_tax_code('dummy-stx01')  AS sales_tax_id,
            _dummy_unit_id                                          AS reorder_unit_id,
            10                                                      AS reorder_level,
            50                                                      AS reorder_quantity,
            false                                                   AS maintain_stock;        
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_late_fees.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_late_fees();

CREATE FUNCTION unit_tests.create_dummy_late_fees()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.late_fee WHERE late_fee_code='dummy-lf01') THEN        
        INSERT INTO core.late_fee(late_fee_code, late_fee_name, is_flat_amount, rate)
        SELECT 'dummy-lf01', 'Test Mock Late Fee', false, 22;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_offices.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_offices();

CREATE FUNCTION unit_tests.create_dummy_offices()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.offices WHERE office_code='dummy-off01') THEN
        INSERT INTO office.offices(office_code, office_name, nick_name, registration_date, currency_code, allow_transaction_posting)
        SELECT 'dummy-off01', 'PLPGUnit Test Office', 'PTO-DUMMY-0001', NOW()::date, 'NPR', true;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_parties.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_parties();

CREATE FUNCTION unit_tests.create_dummy_parties()
RETURNS void
AS
$$
    DECLARE _dummy_account_id   bigint;
    DECLARE _party_id           bigint;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.parties WHERE party_code='dummy-pr01') THEN        
        _dummy_account_id := core.get_account_id_by_account_number('dummy-acc01');

        INSERT INTO core.parties(party_type_id, first_name, last_name, party_name, country_id, state_id, currency_code, account_id)
        SELECT            
            core.get_party_type_id_by_party_type_code('dummy-pt01'), 
            'Test Mock party', 
            'Test',
            'Test',
            core.get_country_id_by_country_code('dummy-co01'),
            core.get_state_id_by_state_code('dummy-st01'),
            'NPR',
            _dummy_account_id
       RETURNING party_id INTO _party_id;

    UPDATE core.parties
    SET party_code = 'dummy-pr01'
    WHERE party_id = _party_id;
       
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_party_types.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_party_types();

CREATE FUNCTION unit_tests.create_dummy_party_types()
RETURNS void
AS
$$
    DECLARE _dummy_account_id bigint;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.party_types WHERE party_type_code='dummy-pt01') THEN        
        _dummy_account_id := core.get_account_id_by_account_number('dummy-acc01');

        INSERT INTO core.party_types(party_type_code, party_type_name, is_supplier, account_id)
        SELECT 'dummy-pt01', 'Test Mock Party Type', false, _dummy_account_id;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_payment_terms.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_payment_terms();

CREATE FUNCTION unit_tests.create_dummy_payment_terms()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.payment_terms WHERE payment_term_code='dummy-pt01') THEN        
        INSERT INTO core.payment_terms(payment_term_code, payment_term_name, due_on_date, due_days, grace_peiod, late_fee_id, late_fee_posting_frequency_id)
        SELECT 'dummy-pt01', 'Test Mock Payment Term', false, 10, 5, core.get_late_fee_id_by_late_fee_code('dummy-lf01'), core.get_frequency_id_by_frequency_code('EOM');
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_sales_taxes.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_sales_taxes();

CREATE FUNCTION unit_tests.create_dummy_sales_taxes()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.tax_master WHERE tax_master_code='dummy-tm01') THEN
        INSERT INTO core.tax_master(tax_master_code, tax_master_name)
        SELECT 'dummy-tm01', 'Dummy Tax Master';
    END IF;
    
    IF NOT EXISTS(SELECT 1 FROM core.sales_taxes WHERE sales_tax_code='dummy-stx01') THEN
        INSERT INTO core.sales_taxes(tax_master_id, office_id, sales_tax_code, sales_tax_name, is_exemption, tax_base_amount_type_code, rate)
        SELECT 
            core.get_tax_master_id_by_tax_master_code('dummy-tm01'), 
            office.get_office_id_by_office_code('dummy-off01'),
            'dummy-stx01',
            'Dummy Sales Tax',
            false,
            'P',
            12.4;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;

--SELECT * FROM unit_tests.create_dummy_sales_tax()

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_sales_teams.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_sales_teams();

CREATE FUNCTION unit_tests.create_dummy_sales_teams()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.sales_teams WHERE sales_team_code='dummy-st01') THEN        
        INSERT INTO core.sales_teams(sales_team_code, sales_team_name)
        SELECT 'dummy-st01', 'Test Mock Sales Team';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_salespersons.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_salespersons();

CREATE FUNCTION unit_tests.create_dummy_salespersons()
RETURNS void
AS
$$
    DECLARE _dummy_account_id bigint;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.salespersons WHERE salesperson_code='dummy-sp01') THEN        
        _dummy_account_id := core.get_account_id_by_account_number('dummy-acc01');

        INSERT INTO core.salespersons(salesperson_code, salesperson_name, sales_team_id, address, contact_number, account_id)
        SELECT 'dummy-sp01', 'Test Mock Salesperson', core.get_sales_team_id_by_sales_team_code('dummy-st01'), '', '', _dummy_account_id;
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_shippers.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_shippers();

CREATE FUNCTION unit_tests.create_dummy_shippers()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.shippers WHERE shipper_code='dummy-sh01') THEN        
        INSERT INTO core.shippers(shipper_code, shipper_name, company_name, account_id)
        SELECT 'dummy-sh01', 'Test Mock Shipper', 'Test Mock Shipper', core.get_account_id_by_account_number('dummy-acc01');
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_states.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_states();

CREATE FUNCTION unit_tests.create_dummy_states()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.states WHERE state_code='dummy-st01') THEN        
        INSERT INTO core.states(state_code, state_name, country_id)
        SELECT 'dummy-st01', 'Test Mock State', core.get_country_id_by_country_code('dummy-co01');
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_store_types.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_store_types();

CREATE FUNCTION unit_tests.create_dummy_store_types()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.store_types WHERE store_type_code='dummy-st01') THEN
        INSERT INTO office.store_types(store_type_code, store_type_name)
        SELECT 'dummy-st01', 'Test Mock Store Type';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_stores.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_stores();

CREATE FUNCTION unit_tests.create_dummy_stores()
RETURNS void
AS
$$
    DECLARE _cash_account_id bigint;
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.stores WHERE store_code='dummy-st01') THEN
        INSERT INTO office.stores(store_code, store_name, office_id, store_type_id, allow_sales, sales_tax_id, default_cash_account_id, default_cash_repository_id)
        SELECT 
            'dummy-st01', 
            'Test Mock Store',
            office.get_office_id_by_office_code('dummy-off01'),
            office.get_store_type_id_by_store_type_code('dummy-st01'),
            true,
            core.get_sales_tax_id_by_sales_tax_code('dummy-stx01'),
            core.get_account_id_by_account_number('dummy-acc06'),
            office.get_cash_repository_id_by_cash_repository_code('dummy-cr01');
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_units.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_units();

CREATE FUNCTION unit_tests.create_dummy_units()
RETURNS void
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM core.units WHERE unit_code='dummy-uni01') THEN        
        INSERT INTO core.units(unit_code, unit_name)
        SELECT 'dummy-uni01', 'Test Mock Unit';
    END IF;

    RETURN;
END
$$
LANGUAGE plpgsql;



-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/12.plpgunit-tests-mock/unit_tests.create_dummy_users.sql --<--<--
DROP FUNCTION IF EXISTS unit_tests.create_dummy_users();

CREATE FUNCTION unit_tests.create_dummy_users()
RETURNS void 
AS
$$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM office.users WHERE user_name='plpgunit-test-user-000001') THEN
        INSERT INTO office.users(role_id, department_id, user_name, full_name, password, office_id)
        SELECT office.get_role_id_by_role_code('USER'), office.get_department_id_by_department_code('dummy-dp01'), 'plpgunit-test-user-000001', 'PLPGUnit Test User', 'thoushaltnotlogin', office.get_office_id_by_office_code('dummy-off01');
    END IF;
END
$$
LANGUAGE plpgsql;


-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/99.refresh-materialized-views.sql --<--<--
SELECT * FROM transactions.refresh_materialized_views(2, 2, 5, '1/1/2015');

-->-->-- C:/Users/nirvan/Desktop/mixerp/0. GitHub/src/FrontEnd/MixERP.Net.FrontEnd/db/1.x/1.2/src/99.sample-data/67.dump-updates.sql --<--<--
ALTER TABLE transactions.transaction_master DISABLE TRIGGER verification_update_trigger;

UPDATE transactions.transaction_master
SET book_date = value_date;

ALTER TABLE transactions.transaction_master ENABLE TRIGGER verification_update_trigger;

